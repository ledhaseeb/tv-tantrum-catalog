This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.cache/
  replit/
    env/
      latest
      latest.json
    modules/
      nodejs-20.res
      postgresql-16.res
      replit.res
      web.res
    nix/
      dotreplitenv.json
    toolchain.json
  typescript/
    5.6/
      package.json
.config/
  .semgrep/
    settings.yml
.local/
  state/
    replit/
      agent/
        .latest.json
.upm/
  store.json
client/
  src/
    components/
      ui/
        accordion.tsx
        alert-dialog.tsx
        alert.tsx
        aspect-ratio.tsx
        avatar.tsx
        badge.tsx
        breadcrumb.tsx
        button.tsx
        calendar.tsx
        card.tsx
        carousel.tsx
        chart.tsx
        checkbox.tsx
        collapsible.tsx
        command.tsx
        context-menu.tsx
        dialog.tsx
        drawer.tsx
        dropdown-menu.tsx
        form.tsx
        hover-card.tsx
        input-otp.tsx
        input.tsx
        label.tsx
        menubar.tsx
        navigation-menu.tsx
        pagination.tsx
        popover.tsx
        progress.tsx
        radio-group.tsx
        resizable.tsx
        scroll-area.tsx
        select.tsx
        separator.tsx
        sheet.tsx
        sidebar.tsx
        skeleton.tsx
        slider.tsx
        switch.tsx
        table.tsx
        tabs.tsx
        textarea.tsx
        toast.tsx
        toaster.tsx
        toggle-group.tsx
        toggle.tsx
        tooltip.tsx
      ColorPaletteCustomizer.tsx
      Footer.tsx
      GhlScriptLoader.tsx
      image-upload.tsx
      LoginForm.tsx
      Navbar.tsx
      RatingBar.tsx
      RegistrationForm.tsx
      ShowCard.tsx
      ShowFilters.tsx
    hooks/
      use-auth.tsx
      use-mobile.tsx
      use-toast.ts
    lib/
      protected-route-admin.tsx
      protected-route-approved.tsx
      protected-route.tsx
      queryClient.ts
      showUtils.ts
      utils.ts
    pages/
      about.tsx
      admin-page.tsx
      auth-page-new.tsx
      auth-page.tsx
      browse.tsx
      compare.tsx
      detail.tsx
      early-access.tsx
      home.tsx
      landing-page.tsx
      not-found.tsx
      pre-launch-about.tsx
      pre-launch-faq.tsx
      registration-pending.tsx
      token-entry.tsx
    App.tsx
    index.css
    main.tsx
  index.html
migrations/
  meta/
    _journal.json
    0000_snapshot.json
  0000_nostalgic_mister_fear.sql
postgres/
  base/
    1/
      PG_VERSION
    4/
      PG_VERSION
    5/
      PG_VERSION
  pg_hba.conf
  pg_ident.conf
  PG_VERSION
  postgresql.auto.conf
  postgresql.conf
public/
  img/
    tv-tantrum-preview.svg
server/
  auth.ts
  database-storage.ts
  db.ts
  details-preservator.ts
  github.ts
  image-optimizer.ts
  image-preservator.ts
  image-upload.ts
  index.ts
  omdb.ts
  routes.ts
  storage.ts
  vite.ts
shared/
  schema.ts
.gitignore
.replit
apply-custom-data.js
apply-custom-data.mjs
check-image-orientation.js
check-images.js
components.json
convert-avif.js
cookies.txt
CUSTOM_DATA.md
customImageMap.json
customShowDetailsMap.json
drizzle.config.ts
generate-hash.ts
optimize-all-images.ts
optimize-custom-images.js
optimize-images.mjs
optimize-seo-images.js
optimize-seo-images.mjs
package.json
postcss.config.js
refresh-data.js
shows.json
tailwind.config.ts
tsconfig.json
tvshow_sensory_data.csv
update-show-metrics.js
vite.config.ts
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".cache/replit/env/latest">
declare -gx GIT_ASKPASS=replit-git-askpass
declare -gx REPLIT_PID1_FLAG_NIXMODULES_BEFORE_REPLIT_NIX=1
declare -gx REPLIT_CLUSTER=picard
declare -gx GIT_EDITOR=replit-git-editor
declare -gx npm_config_prefix=/home/runner/workspace/.config/npm/node_global
declare -gx NIX_PROFILES='/nix/var/nix/profiles/default /home/runner/.nix-profile'
declare -gx NIX_PATH=nixpkgs=/home/runner/.nix-defexpr/channels/nixpkgs-stable-24_05:/home/runner/.nix-defexpr/channels
declare -gx HOME=/home/runner
declare -gx USER=runner
declare -gx REPLIT_PID1_FLAG_REPLIT_RTLD_LOADER=1
declare -gx REPLIT_CLI=/nix/store/kg7y2cbq8jfcs6qj2hikk83q594qnzpc-pid1-0.0.1/bin/replit
declare -gx REPLIT_ENVIRONMENT=production
declare -gx REPL_HOME=/home/runner/workspace
declare -gx PROMPT_DIRTRIM=2
declare -gx NIX_LDFLAGS='-L/nix/store/bjf63mfkn3r6svmb4qlsy1v8bff4dwa9-jq-1.7.1-lib/lib -L/nix/store/n5chc8i5za5jrr4biwwgx7a96p0a7aq9-jq-1.7.1-dev/lib'
declare -gx REPLIT_BASHRC=/nix/store/7mbv5hcsh9cj7pk4maggp301fma07cm0-replit-bashrc/bashrc
declare -gx REPL_IDENTITY=v2.public.Q2lRMFl6QTFPRFUzWlMwM01ESTRMVFExT1dZdE9ETTNNQzFpTnpabE1EQmlNV013WldJU0NHaGhjMlZsWWpJeUdpQkRhR2xzWkZSMlIzVnBaR1YyTWkxUWNtVnNZWFZ1WTJndFZtVnljMmx2YmlJa05HTXdOVGcxTjJVdE56QXlPQzAwTlRsbUxUZ3pOekF0WWpjMlpUQXdZakZqTUdWaU9KS3lreFJ5Q2dvR09UVTRiR3R0RUFKYURnb0djR2xqWVhKa0VnUndZV2xrY9ovpmrk61dR9lwiNB-mCAkneWBSlxAyTro6vRsce1oqyUMy6Tw5F-UDxW3sbPPpXw5UoLxMtIRNJ0uh3GbRAQ.R0FFaUJtTnZibTFoYmhLYkNIWXlMbkIxWW14cFl5NVJNbVI2VTFSS2ExTXpUak5WVm14U1N6QjBXVTFXU205VFZYaEVVekp3U1dSRk1VWlNNRlpSVFcwNE5WWldiR2hSVjJodVVtdGtjRmRWZEV0U1JrcHhWRlZTVms1Rk5WVmFSM2hOVmtkT00xUlhjRzVrUlRWRlZsUldZV0ZVUVRCVVdIQnFaREI0V0ZOVVRrOWlWbFl6VkZWa1NtVkdiRFpSYlhoYVlVYzVURkpYWkc5aU1XeFpWRzE0WVZZd2JEVlVWMmgyVW1zNVMxTXpiSEpsUmtab1VrVldTbE13VG01WFZGWlBWa2RvZWxsVVNYZFZWVVp2WWpCc1Nsb3hjRE5aVm1SUFlVZE9kRlZYUmtOaFZ6bEdXVEJrUjJOR2NFUlRWRVpvWld0c01Wa3dhRmRoVjBwSVlrZHdUV0V3Y0hGWmVrWkhVakZhUm1GSVRsUlNlbFpJVkd4V1UxRnNTa2xTYlRWVlZtcG9OVlpYTld0VmJFVjZVV3RPV2sxRWJIRlpiRlp2WkVVMVJrOVZjRTFXYXpFMFdUQldOR0l4WkVaTlJEQnBhREkyUjBkSExWaFRTSE4wVFhCemJVSkhNVWRhY25wcmQxRmthMUpvV2s5bFJXWkZja0l3VDJzeGVVaFFVM3BZTVdsQmRHOXZWbTEwWTJnell6WTBVblJTYlY5UmNFNXBZV2N6UjB3emJtZERiREJITGxJd1JrWmhWVXAwVkc1YWFXSlVSbTlaYldoTldXdEdkVmRZYkUxaWEwbDRWMWN4TkdOR2JEVk9Wa3BPWWxaSk1sWlVSbXROUjFaMFUyeGFWR0p1UWxkV2JURTBWVEZTY2xWdFJrNVdia0pYVlRKMFQxWkdXbGxoUlZaV1pXdEtjbFZxUVRGVFZrWnlVMnhhVGxKc2NGTldiWEJQV1ZkU1YySXphRk5pVjJoVFZtcEtiMlJXVmxoa1IzUnBZa1UxV0ZsclZrOVdiVXBWWWtWV1ZtRnJTa2hhUjNoelZteEtkVkpzU2xkV1dFSktWakp3UTJNeFpITlNiR2hvVTBad1UxUlZaRk5STVZwSFdrVmtVbUpWV2tsWGExVjRWVEF4ZEZWcmRGZE5WbHBVVlZSS1NtUXhVbkpoUmtwWFlURndkbFpXV210aU1rcHpWRzVLYVZORldsaFpiWFIzVkRGc1YxVnNaRTVOV0VKSVYydFdNR0ZyTVhKWGJHeFhVbTFvV0ZaRVJtRmtSMVpKWTBaa1YySldTa2xXUmxKTFZESk5lVk5xV2xaaGVteFlWRmQ0UzJJeFdYbE5WRkpVVFd0YVIxUldWbXRXUjBwR1YyeGFXbFo2UlRCWFZscHpUbXhHVlZKdGNHbFNXRUkyVmtSR1YxbFhSWGxUYkd4V1ZrVmFWMWxyV21GamJIQklaVVZhYkZKdVFrWldNakYzWVVkRmVHTkhPVmRoYTFwVVZYcEdUbVZHV25OVGJFWlhVa1ZLTTFZeWRHRlhiVTUwWTBVeFVGZEZOSHBhUlZaYVRsWndSVkpZVW1saVZGWlJWREJrWVZWdFNsaGhSRXBVVWxad2VGWnJWbkprUjFKRllVVndhV0pXY0ZGWFJFbDRWbFV4ZEZsNlVtcFhTRUpHVld0a1ZrNUdXa1ZpUmxKb1RWWktObGR0ZUc5aVYxWnlZbnBDV0ZaVk1UWlhiWE4zWld4a1ZrNVlTbFJXUjFKWlYxZHJkMDVXU25KVmJUbFBZVlJHVEZScVNUVlNSWGh6VTFoa1UyRXhjRzlXYkZaM1RVWmFTRTVYUm1oV01IQldWVzB3TlZkdFNsaFZha3BXWVd0d1VGVXhXazlrVm1SMFVteE9VMlZ0WnpBPQ
declare -gx REPL_OWNER_ID=42260754
declare -gx XDG_DATA_HOME=/home/runner/workspace/.local/share
declare -gx COLORTERM=truecolor
declare -gx REPLIT_DOMAINS=4c05857e-7028-459f-8370-b76e00b1c0eb-00-2l03ec00r0sjl.picard.replit.dev
declare -gx REPL_IDENTITY_KEY=k2.secret.oacxQyv6FpDtq9aD6aWtezz4JSmGKPprN4CqQLBc7hkFyxAVMeUecXkMAOqAz_ZHBAKkFw5yYebg4j5LWkuFcw
declare -gx REPL_SLUG=workspace
declare -gx NIX_CFLAGS_COMPILE='-isystem /nix/store/n5chc8i5za5jrr4biwwgx7a96p0a7aq9-jq-1.7.1-dev/include'
read -r _new_path <<< "/nix/store/7y2nxi5svi3ya06jyfw7l06rxvfb1zzf-jq-1.7.1-bin/bin:/nix/store/0z5iwcvalafm3j2c5pfhllsfbxrbyzf4-postgresql-16.5/bin:/nix/store/r2wrscmjzn4f2f7wk7q2ms2h96mjwzv7-npx/bin:/home/runner/workspace/.config/npm/node_global/bin:/home/runner/workspace/node_modules/.bin:/nix/store/rrz8cqhldyl17bbs60g7d8vbaadkxc40-nodejs-20.18.1-wrapped/bin:/nix/store/5q4dz85wgqhifng1fk2xy85pslkmiqvs-bun-1.2.12/bin:/nix/store/z8s3r4vwf4r26g2d7shnw5lva6ihim8f-pnpm-9.15.0/bin:/nix/store/jcgdksj946l5l42c2y9ks2l4g6n74h3f-yarn-1.22.22/bin:/nix/store/2s17mrby0ph00z22rkabfs9vzpzx1r70-prettier-3.3.3/bin:/nix/store/sww4j97gzg3wl9rykrmjfy8736iiz11n-pid1/bin:/nix/store/iz3j6pp7zlvk5kzwfiawz6g4lph67vji-replit-runtime-path/bin:/home/runner/.nix-profile/bin:/home/runner/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
#PATH=/nix/store/7y2nxi5svi3ya06jyfw7l06rxvfb1zzf-jq-1.7.1-bin/bin:/nix/store/0z5iwcvalafm3j2c5pfhllsfbxrbyzf4-postgresql-16.5/bin:/nix/store/r2wrscmjzn4f2f7wk7q2ms2h96mjwzv7-npx/bin:/home/runner/workspace/.config/npm/node_global/bin:/home/runner/workspace/node_modules/.bin:/nix/store/rrz8cqhldyl17bbs60g7d8vbaadkxc40-nodejs-20.18.1-wrapped/bin:/nix/store/5q4dz85wgqhifng1fk2xy85pslkmiqvs-bun-1.2.12/bin:/nix/store/z8s3r4vwf4r26g2d7shnw5lva6ihim8f-pnpm-9.15.0/bin:/nix/store/jcgdksj946l5l42c2y9ks2l4g6n74h3f-yarn-1.22.22/bin:/nix/store/2s17mrby0ph00z22rkabfs9vzpzx1r70-prettier-3.3.3/bin:/nix/store/sww4j97gzg3wl9rykrmjfy8736iiz11n-pid1/bin:/nix/store/iz3j6pp7zlvk5kzwfiawz6g4lph67vji-replit-runtime-path/bin:/home/runner/.nix-profile/bin:/home/runner/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
if [ -e "/run/replit/env/last" ]; then read -r _last_path < <(\grep '^#PATH=' /run/replit/env/last | cut -f 2 -d =); fi
_user_components="$(\tr : $'\n' <<< "${PATH:-}" |\grep -xv -f <(\tr : $'\n' <<< "${_last_path}") |\tr $'\n' :)"
declare -gx PATH="${_user_components}${_new_path}"
declare -gx REPLIT_SUBCLUSTER=paid
declare -gx LANG=en_US.UTF-8
declare -gx __EGL_VENDOR_LIBRARY_FILENAMES=/nix/store/1z62rda9iqnxi4ryvgmyvfaj979hgk7s-mesa-24.2.8-drivers/share/glvnd/egl_vendor.d/50_mesa.json
declare -gx REPLIT_RTLD_LOADER=1
declare -gx REPLIT_DB_URL=https://kv.replit.com/v0/eyJhbGciOiJIUzUxMiIsImlzcyI6ImNvbm1hbiIsImtpZCI6InByb2Q6MSIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJjb25tYW4iLCJleHAiOjE3NDc3NzA3MTIsImlhdCI6MTc0NzY1OTExMiwiZGF0YWJhc2VfaWQiOiI0YzA1ODU3ZS03MDI4LTQ1OWYtODM3MC1iNzZlMDBiMWMwZWIifQ.FfffgvvS6HHTcD_-mDHk0nImWs8b_JoZBfNtQsufLuerogbqeHsmI_t3rcj---ekS183KpShtAFroCmoPkLfxg
declare -gx REPL_IMAGE=gcr.io/marine-cycle-160323/nix:bf8590a3e2f0a8b70b7ca175eeed9074dffbfca9
declare -gx REPL_ID=4c05857e-7028-459f-8370-b76e00b1c0eb
declare -gx HOSTNAME=4f2770db861f
declare -gx NIX_PS1='\[\033[01;34m\]\w\[\033[00m\]\$ '
declare -gx XDG_DATA_DIRS=/nix/store/shvd454wy3lnhirj922yrzffzscci28s-jq-1.7.1-man/share:/nix/store/5cq70lcqc2aph4q03brijk3alfh5rnmz-jq-1.7.1-doc/share:/nix/store/iz3j6pp7zlvk5kzwfiawz6g4lph67vji-replit-runtime-path/share
declare -gx REPLIT_LD_AUDIT=/nix/store/n5x1kgbz8zjh63ymsijbislyi1n1hir6-replit_rtld_loader-1/rtld_loader.so
declare -gx PKG_CONFIG_PATH=/nix/store/n5chc8i5za5jrr4biwwgx7a96p0a7aq9-jq-1.7.1-dev/lib/pkgconfig
declare -gx DISPLAY=:0
declare -gx REPL_OWNER=haseeb22
declare -gx REPL_ORG_TYPE=TEAM
declare -gx LDFLAGS='-L/nix/store/bjf63mfkn3r6svmb4qlsy1v8bff4dwa9-jq-1.7.1-lib/lib -L/nix/store/n5chc8i5za5jrr4biwwgx7a96p0a7aq9-jq-1.7.1-dev/lib'
declare -gx PKG_CONFIG_PATH_FOR_TARGET=/nix/store/n5chc8i5za5jrr4biwwgx7a96p0a7aq9-jq-1.7.1-dev/lib/pkgconfig
declare -gx LOCALE_ARCHIVE=/usr/lib/locale/locale-archive
declare -gx DOCKER_CONFIG=/home/runner/workspace/.config/docker
declare -gx GI_TYPELIB_PATH=''
declare -gx NIXPKGS_ALLOW_UNFREE=1
declare -gx REPL_PUBKEYS='{"crosis-ci":"7YlpcYh82oR9NSTtSYtR5jDL4onNzCGJGq6b+9CuZII=","crosis-ci:1":"7YlpcYh82oR9NSTtSYtR5jDL4onNzCGJGq6b+9CuZII=","crosis-ci:latest":"7YlpcYh82oR9NSTtSYtR5jDL4onNzCGJGq6b+9CuZII=","prod":"tGsjlu/BJvWTgvMaX7acuUb7AO1dXOrRiuk7y083RFE=","prod:1":"tGsjlu/BJvWTgvMaX7acuUb7AO1dXOrRiuk7y083RFE=","prod:2":"8uGN+vfszlnV93/HCSHlVLG0xddMlPkir1Ni4JKT4+w=","prod:3":"9+MCOSHQSQlcodXoot8dC8NLhc862nLkx1/VMsbY2h8=","prod:4":"8uGN+vfszlnV93/HCSHlVLG0xddMlPkir1Ni4JKT4+w=","prod:5":"9+MCOSHQSQlcodXoot8dC8NLhc862nLkx1/VMsbY2h8=","prod:latest":"tGsjlu/BJvWTgvMaX7acuUb7AO1dXOrRiuk7y083RFE=","vault-goval-token":"D5jJoMx1Ml54HM92NLgXl+MzptwDqbSsfyFG6f52g9E=","vault-goval-token:1":"D5jJoMx1Ml54HM92NLgXl+MzptwDqbSsfyFG6f52g9E=","vault-goval-token:latest":"D5jJoMx1Ml54HM92NLgXl+MzptwDqbSsfyFG6f52g9E="}'
declare -gx REPL_ORG_ID=958lkm
declare -gx XDG_CONFIG_HOME=/home/runner/workspace/.config
declare -gx LIBGL_DRIVERS_PATH=/nix/store/1z62rda9iqnxi4ryvgmyvfaj979hgk7s-mesa-24.2.8-drivers/lib/dri
declare -gx REPL_LANGUAGE=nix
declare -gx XDG_CACHE_HOME=/home/runner/workspace/.cache
declare -gx REPLIT_LD_LIBRARY_PATH=/nix/store/bjf63mfkn3r6svmb4qlsy1v8bff4dwa9-jq-1.7.1-lib/lib:/nix/store/n5chc8i5za5jrr4biwwgx7a96p0a7aq9-jq-1.7.1-dev/lib
declare -gx REPLIT_RIPPKGS_INDICES=/nix/store/l5gcmdp908sji4wchfp8csflhjcgnmm3-rippkgs-indices
declare -gx REPLIT_PID1_VERSION=0.0.0-b1d6c11
declare -gx REPLIT_NIX_CHANNEL=stable-24_05
declare -gx REPLIT_DEV_DOMAIN=4c05857e-7028-459f-8370-b76e00b1c0eb-00-2l03ec00r0sjl.picard.replit.dev
declare -gx CFLAGS='-isystem /nix/store/n5chc8i5za5jrr4biwwgx7a96p0a7aq9-jq-1.7.1-dev/include'
</file>

<file path=".cache/replit/env/latest.json">
{"environment":{"CFLAGS":"-isystem /nix/store/n5chc8i5za5jrr4biwwgx7a96p0a7aq9-jq-1.7.1-dev/include","COLORTERM":"truecolor","DISPLAY":":0","DOCKER_CONFIG":"/home/runner/workspace/.config/docker","GIT_ASKPASS":"replit-git-askpass","GIT_EDITOR":"replit-git-editor","GI_TYPELIB_PATH":"","HOME":"/home/runner","HOSTNAME":"4f2770db861f","LANG":"en_US.UTF-8","LDFLAGS":"-L/nix/store/bjf63mfkn3r6svmb4qlsy1v8bff4dwa9-jq-1.7.1-lib/lib -L/nix/store/n5chc8i5za5jrr4biwwgx7a96p0a7aq9-jq-1.7.1-dev/lib","LIBGL_DRIVERS_PATH":"/nix/store/1z62rda9iqnxi4ryvgmyvfaj979hgk7s-mesa-24.2.8-drivers/lib/dri","LOCALE_ARCHIVE":"/usr/lib/locale/locale-archive","NIXPKGS_ALLOW_UNFREE":"1","NIX_CFLAGS_COMPILE":"-isystem /nix/store/n5chc8i5za5jrr4biwwgx7a96p0a7aq9-jq-1.7.1-dev/include","NIX_LDFLAGS":"-L/nix/store/bjf63mfkn3r6svmb4qlsy1v8bff4dwa9-jq-1.7.1-lib/lib -L/nix/store/n5chc8i5za5jrr4biwwgx7a96p0a7aq9-jq-1.7.1-dev/lib","NIX_PATH":"nixpkgs=/home/runner/.nix-defexpr/channels/nixpkgs-stable-24_05:/home/runner/.nix-defexpr/channels","NIX_PROFILES":"/nix/var/nix/profiles/default /home/runner/.nix-profile","NIX_PS1":"\\[\\033[01;34m\\]\\w\\[\\033[00m\\]\\$ ","PATH":"/nix/store/7y2nxi5svi3ya06jyfw7l06rxvfb1zzf-jq-1.7.1-bin/bin:/nix/store/0z5iwcvalafm3j2c5pfhllsfbxrbyzf4-postgresql-16.5/bin:/nix/store/r2wrscmjzn4f2f7wk7q2ms2h96mjwzv7-npx/bin:/home/runner/workspace/.config/npm/node_global/bin:/home/runner/workspace/node_modules/.bin:/nix/store/rrz8cqhldyl17bbs60g7d8vbaadkxc40-nodejs-20.18.1-wrapped/bin:/nix/store/5q4dz85wgqhifng1fk2xy85pslkmiqvs-bun-1.2.12/bin:/nix/store/z8s3r4vwf4r26g2d7shnw5lva6ihim8f-pnpm-9.15.0/bin:/nix/store/jcgdksj946l5l42c2y9ks2l4g6n74h3f-yarn-1.22.22/bin:/nix/store/2s17mrby0ph00z22rkabfs9vzpzx1r70-prettier-3.3.3/bin:/nix/store/sww4j97gzg3wl9rykrmjfy8736iiz11n-pid1/bin:/nix/store/iz3j6pp7zlvk5kzwfiawz6g4lph67vji-replit-runtime-path/bin:/home/runner/.nix-profile/bin:/home/runner/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin","PKG_CONFIG_PATH":"/nix/store/n5chc8i5za5jrr4biwwgx7a96p0a7aq9-jq-1.7.1-dev/lib/pkgconfig","PKG_CONFIG_PATH_FOR_TARGET":"/nix/store/n5chc8i5za5jrr4biwwgx7a96p0a7aq9-jq-1.7.1-dev/lib/pkgconfig","PROMPT_DIRTRIM":"2","REPLIT_BASHRC":"/nix/store/7mbv5hcsh9cj7pk4maggp301fma07cm0-replit-bashrc/bashrc","REPLIT_CLI":"/nix/store/kg7y2cbq8jfcs6qj2hikk83q594qnzpc-pid1-0.0.1/bin/replit","REPLIT_CLUSTER":"picard","REPLIT_DB_URL":"https://kv.replit.com/v0/eyJhbGciOiJIUzUxMiIsImlzcyI6ImNvbm1hbiIsImtpZCI6InByb2Q6MSIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJjb25tYW4iLCJleHAiOjE3NDc3NzA3MTIsImlhdCI6MTc0NzY1OTExMiwiZGF0YWJhc2VfaWQiOiI0YzA1ODU3ZS03MDI4LTQ1OWYtODM3MC1iNzZlMDBiMWMwZWIifQ.FfffgvvS6HHTcD_-mDHk0nImWs8b_JoZBfNtQsufLuerogbqeHsmI_t3rcj---ekS183KpShtAFroCmoPkLfxg","REPLIT_DEV_DOMAIN":"4c05857e-7028-459f-8370-b76e00b1c0eb-00-2l03ec00r0sjl.picard.replit.dev","REPLIT_DOMAINS":"4c05857e-7028-459f-8370-b76e00b1c0eb-00-2l03ec00r0sjl.picard.replit.dev","REPLIT_ENVIRONMENT":"production","REPLIT_LD_AUDIT":"/nix/store/n5x1kgbz8zjh63ymsijbislyi1n1hir6-replit_rtld_loader-1/rtld_loader.so","REPLIT_LD_LIBRARY_PATH":"/nix/store/bjf63mfkn3r6svmb4qlsy1v8bff4dwa9-jq-1.7.1-lib/lib:/nix/store/n5chc8i5za5jrr4biwwgx7a96p0a7aq9-jq-1.7.1-dev/lib","REPLIT_NIX_CHANNEL":"stable-24_05","REPLIT_PID1_FLAG_NIXMODULES_BEFORE_REPLIT_NIX":"1","REPLIT_PID1_FLAG_REPLIT_RTLD_LOADER":"1","REPLIT_PID1_VERSION":"0.0.0-b1d6c11","REPLIT_RIPPKGS_INDICES":"/nix/store/l5gcmdp908sji4wchfp8csflhjcgnmm3-rippkgs-indices","REPLIT_RTLD_LOADER":"1","REPLIT_SUBCLUSTER":"paid","REPL_HOME":"/home/runner/workspace","REPL_ID":"4c05857e-7028-459f-8370-b76e00b1c0eb","REPL_IDENTITY":"v2.public.Q2lRMFl6QTFPRFUzWlMwM01ESTRMVFExT1dZdE9ETTNNQzFpTnpabE1EQmlNV013WldJU0NHaGhjMlZsWWpJeUdpQkRhR2xzWkZSMlIzVnBaR1YyTWkxUWNtVnNZWFZ1WTJndFZtVnljMmx2YmlJa05HTXdOVGcxTjJVdE56QXlPQzAwTlRsbUxUZ3pOekF0WWpjMlpUQXdZakZqTUdWaU9KS3lreFJ5Q2dvR09UVTRiR3R0RUFKYURnb0djR2xqWVhKa0VnUndZV2xrY9ovpmrk61dR9lwiNB-mCAkneWBSlxAyTro6vRsce1oqyUMy6Tw5F-UDxW3sbPPpXw5UoLxMtIRNJ0uh3GbRAQ.R0FFaUJtTnZibTFoYmhLYkNIWXlMbkIxWW14cFl5NVJNbVI2VTFSS2ExTXpUak5WVm14U1N6QjBXVTFXU205VFZYaEVVekp3U1dSRk1VWlNNRlpSVFcwNE5WWldiR2hSVjJodVVtdGtjRmRWZEV0U1JrcHhWRlZTVms1Rk5WVmFSM2hOVmtkT00xUlhjRzVrUlRWRlZsUldZV0ZVUVRCVVdIQnFaREI0V0ZOVVRrOWlWbFl6VkZWa1NtVkdiRFpSYlhoYVlVYzVURkpYWkc5aU1XeFpWRzE0WVZZd2JEVlVWMmgyVW1zNVMxTXpiSEpsUmtab1VrVldTbE13VG01WFZGWlBWa2RvZWxsVVNYZFZWVVp2WWpCc1Nsb3hjRE5aVm1SUFlVZE9kRlZYUmtOaFZ6bEdXVEJrUjJOR2NFUlRWRVpvWld0c01Wa3dhRmRoVjBwSVlrZHdUV0V3Y0hGWmVrWkhVakZhUm1GSVRsUlNlbFpJVkd4V1UxRnNTa2xTYlRWVlZtcG9OVlpYTld0VmJFVjZVV3RPV2sxRWJIRlpiRlp2WkVVMVJrOVZjRTFXYXpFMFdUQldOR0l4WkVaTlJEQnBhREkyUjBkSExWaFRTSE4wVFhCemJVSkhNVWRhY25wcmQxRmthMUpvV2s5bFJXWkZja0l3VDJzeGVVaFFVM3BZTVdsQmRHOXZWbTEwWTJnell6WTBVblJTYlY5UmNFNXBZV2N6UjB3emJtZERiREJITGxJd1JrWmhWVXAwVkc1YWFXSlVSbTlaYldoTldXdEdkVmRZYkUxaWEwbDRWMWN4TkdOR2JEVk9Wa3BPWWxaSk1sWlVSbXROUjFaMFUyeGFWR0p1UWxkV2JURTBWVEZTY2xWdFJrNVdia0pYVlRKMFQxWkdXbGxoUlZaV1pXdEtjbFZxUVRGVFZrWnlVMnhhVGxKc2NGTldiWEJQV1ZkU1YySXphRk5pVjJoVFZtcEtiMlJXVmxoa1IzUnBZa1UxV0ZsclZrOVdiVXBWWWtWV1ZtRnJTa2hhUjNoelZteEtkVkpzU2xkV1dFSktWakp3UTJNeFpITlNiR2hvVTBad1UxUlZaRk5STVZwSFdrVmtVbUpWV2tsWGExVjRWVEF4ZEZWcmRGZE5WbHBVVlZSS1NtUXhVbkpoUmtwWFlURndkbFpXV210aU1rcHpWRzVLYVZORldsaFpiWFIzVkRGc1YxVnNaRTVOV0VKSVYydFdNR0ZyTVhKWGJHeFhVbTFvV0ZaRVJtRmtSMVpKWTBaa1YySldTa2xXUmxKTFZESk5lVk5xV2xaaGVteFlWRmQ0UzJJeFdYbE5WRkpVVFd0YVIxUldWbXRXUjBwR1YyeGFXbFo2UlRCWFZscHpUbXhHVlZKdGNHbFNXRUkyVmtSR1YxbFhSWGxUYkd4V1ZrVmFWMWxyV21GamJIQklaVVZhYkZKdVFrWldNakYzWVVkRmVHTkhPVmRoYTFwVVZYcEdUbVZHV25OVGJFWlhVa1ZLTTFZeWRHRlhiVTUwWTBVeFVGZEZOSHBhUlZaYVRsWndSVkpZVW1saVZGWlJWREJrWVZWdFNsaGhSRXBVVWxad2VGWnJWbkprUjFKRllVVndhV0pXY0ZGWFJFbDRWbFV4ZEZsNlVtcFhTRUpHVld0a1ZrNUdXa1ZpUmxKb1RWWktObGR0ZUc5aVYxWnlZbnBDV0ZaVk1UWlhiWE4zWld4a1ZrNVlTbFJXUjFKWlYxZHJkMDVXU25KVmJUbFBZVlJHVEZScVNUVlNSWGh6VTFoa1UyRXhjRzlXYkZaM1RVWmFTRTVYUm1oV01IQldWVzB3TlZkdFNsaFZha3BXWVd0d1VGVXhXazlrVm1SMFVteE9VMlZ0WnpBPQ","REPL_IDENTITY_KEY":"k2.secret.oacxQyv6FpDtq9aD6aWtezz4JSmGKPprN4CqQLBc7hkFyxAVMeUecXkMAOqAz_ZHBAKkFw5yYebg4j5LWkuFcw","REPL_IMAGE":"gcr.io/marine-cycle-160323/nix:bf8590a3e2f0a8b70b7ca175eeed9074dffbfca9","REPL_LANGUAGE":"nix","REPL_ORG_ID":"958lkm","REPL_ORG_TYPE":"TEAM","REPL_OWNER":"haseeb22","REPL_OWNER_ID":"42260754","REPL_PUBKEYS":"{\"crosis-ci\":\"7YlpcYh82oR9NSTtSYtR5jDL4onNzCGJGq6b+9CuZII=\",\"crosis-ci:1\":\"7YlpcYh82oR9NSTtSYtR5jDL4onNzCGJGq6b+9CuZII=\",\"crosis-ci:latest\":\"7YlpcYh82oR9NSTtSYtR5jDL4onNzCGJGq6b+9CuZII=\",\"prod\":\"tGsjlu/BJvWTgvMaX7acuUb7AO1dXOrRiuk7y083RFE=\",\"prod:1\":\"tGsjlu/BJvWTgvMaX7acuUb7AO1dXOrRiuk7y083RFE=\",\"prod:2\":\"8uGN+vfszlnV93/HCSHlVLG0xddMlPkir1Ni4JKT4+w=\",\"prod:3\":\"9+MCOSHQSQlcodXoot8dC8NLhc862nLkx1/VMsbY2h8=\",\"prod:4\":\"8uGN+vfszlnV93/HCSHlVLG0xddMlPkir1Ni4JKT4+w=\",\"prod:5\":\"9+MCOSHQSQlcodXoot8dC8NLhc862nLkx1/VMsbY2h8=\",\"prod:latest\":\"tGsjlu/BJvWTgvMaX7acuUb7AO1dXOrRiuk7y083RFE=\",\"vault-goval-token\":\"D5jJoMx1Ml54HM92NLgXl+MzptwDqbSsfyFG6f52g9E=\",\"vault-goval-token:1\":\"D5jJoMx1Ml54HM92NLgXl+MzptwDqbSsfyFG6f52g9E=\",\"vault-goval-token:latest\":\"D5jJoMx1Ml54HM92NLgXl+MzptwDqbSsfyFG6f52g9E=\"}","REPL_SLUG":"workspace","USER":"runner","XDG_CACHE_HOME":"/home/runner/workspace/.cache","XDG_CONFIG_HOME":"/home/runner/workspace/.config","XDG_DATA_DIRS":"/nix/store/shvd454wy3lnhirj922yrzffzscci28s-jq-1.7.1-man/share:/nix/store/5cq70lcqc2aph4q03brijk3alfh5rnmz-jq-1.7.1-doc/share:/nix/store/iz3j6pp7zlvk5kzwfiawz6g4lph67vji-replit-runtime-path/share","XDG_DATA_HOME":"/home/runner/workspace/.local/share","__EGL_VENDOR_LIBRARY_FILENAMES":"/nix/store/1z62rda9iqnxi4ryvgmyvfaj979hgk7s-mesa-24.2.8-drivers/share/glvnd/egl_vendor.d/50_mesa.json","npm_config_prefix":"/home/runner/workspace/.config/npm/node_global"}}
</file>

<file path=".cache/replit/modules/nodejs-20.res">
{"type":"resolve","resolvedModuleId":"nodejs-20","inputHash":"","resolutionPath":["nodejs-20"],"error":"","Changed":true}
</file>

<file path=".cache/replit/modules/postgresql-16.res">
{"type":"resolve","resolvedModuleId":"postgresql-16","inputHash":"","resolutionPath":["postgresql-16"],"error":"","Changed":true}
</file>

<file path=".cache/replit/modules/replit.res">
{"type":"resolve","resolvedModuleId":"replit","inputHash":"","resolutionPath":["replit"],"error":"","Changed":true}
</file>

<file path=".cache/replit/modules/web.res">
{"type":"resolve","resolvedModuleId":"web","inputHash":"","resolutionPath":["web"],"error":"","Changed":true}
</file>

<file path=".cache/replit/nix/dotreplitenv.json">
{"channel":"stable-24_05","channel_nix_path":"/nix/store/r9dxa39mzcwfm6qp398j3wkms3vwiqcd-nixpkgs-stable-24_05-24.05.tar.gz/nixpkgs-stable-24_05","env":{"CFLAGS":"-isystem /nix/store/n5chc8i5za5jrr4biwwgx7a96p0a7aq9-jq-1.7.1-dev/include","GI_TYPELIB_PATH":"","LDFLAGS":"-L/nix/store/bjf63mfkn3r6svmb4qlsy1v8bff4dwa9-jq-1.7.1-lib/lib -L/nix/store/n5chc8i5za5jrr4biwwgx7a96p0a7aq9-jq-1.7.1-dev/lib","NIX_CFLAGS_COMPILE":"-isystem /nix/store/n5chc8i5za5jrr4biwwgx7a96p0a7aq9-jq-1.7.1-dev/include","NIX_LDFLAGS":"-L/nix/store/bjf63mfkn3r6svmb4qlsy1v8bff4dwa9-jq-1.7.1-lib/lib -L/nix/store/n5chc8i5za5jrr4biwwgx7a96p0a7aq9-jq-1.7.1-dev/lib","PATH":"/nix/store/7y2nxi5svi3ya06jyfw7l06rxvfb1zzf-jq-1.7.1-bin/bin","PKG_CONFIG_PATH":"/nix/store/n5chc8i5za5jrr4biwwgx7a96p0a7aq9-jq-1.7.1-dev/lib/pkgconfig","PKG_CONFIG_PATH_FOR_TARGET":"/nix/store/n5chc8i5za5jrr4biwwgx7a96p0a7aq9-jq-1.7.1-dev/lib/pkgconfig","REPLIT_LD_LIBRARY_PATH":"/nix/store/bjf63mfkn3r6svmb4qlsy1v8bff4dwa9-jq-1.7.1-lib/lib:/nix/store/n5chc8i5za5jrr4biwwgx7a96p0a7aq9-jq-1.7.1-dev/lib","XDG_DATA_DIRS":"/nix/store/shvd454wy3lnhirj922yrzffzscci28s-jq-1.7.1-man/share:/nix/store/5cq70lcqc2aph4q03brijk3alfh5rnmz-jq-1.7.1-doc/share"},"packages":["jq"]}
</file>

<file path=".cache/replit/toolchain.json">
{"runs":[{"id":".replit/run", "name":"sh -c 'npm run dev'", "fileTypeAttrs":{}, "run":{"command":{"args":["sh", "-c", "npm run dev"]}}}, {"id":"module:nodejs-20/runner:nodeJS", "name":"Node.js", "fileParam":true, "language":"javascript", "fileTypeAttrs":{}, "displayVersion":"20.18.1", "run":{"command":{"args":["sh", "-c", "/nix/store/rrz8cqhldyl17bbs60g7d8vbaadkxc40-nodejs-20.18.1-wrapped/bin/node $file"]}}, "defaultEntrypoints":["index.js", "main.js"]}], "debuggers":[{"id":"module:nodejs-20/debugger:nodeDAP", "name":"Node DAP", "fileParam":true, "language":"javascript", "fileTypeAttrs":{}}], "languageServers":[{"id":"module:web/languageServer:typescript-language-server", "name":"TypeScript Language Server", "language":"javascript", "fileTypeAttrs":{"extensions":[".js", ".jsx", ".ts", ".tsx", ".mjs", ".mts", ".cjs", ".cts", ".es6", ".json"]}, "config":{"startCommand":{"args":["sh", "-c", "/nix/store/9cd76kqpml5gkw8jjnjx0flwdf0a1gv1-typescript-language-server-4.3.3/bin/typescript-language-server --stdio"]}, "initializationOptionsJson":"{\"tsserver\":{\"fallbackPath\":\"/nix/store/g6ns6m42fvybfzb2xjppcsfmb6k0jv5x-typescript-5.6.3/lib/node_modules/typescript/lib\"}}"}, "displayVersion":"4.3.3"}, {"id":"module:replit/languageServer:dotreplit-lsp", "name":".replit LSP", "language":"dotreplit", "fileTypeAttrs":{}, "config":{"startCommand":{"args":["sh", "-c", "/nix/store/bz8k1njgmm249fr5krhaq1jsi7jrhx5k-taplo-0.patched/bin/taplo lsp -c /nix/store/2zhz6va20gizdlqmvryab9b7pn6dp0v1-taplo-config.toml stdio"]}}}, {"id":"module:web/languageServer:css", "name":"CSS Language Server", "language":"css", "fileTypeAttrs":{"extensions":[".css", ".less", ".scss"]}, "config":{"startCommand":{"args":["sh", "-c", "/nix/store/ydkb3d7r0zs7wd7jcwnk1v24qmzjqnkh-vscode-langservers-extracted-4.10.0/bin/vscode-css-language-server --stdio"]}, "configurationJson":"{\"css\":{\"completion\":{\"completePropertyWithSemicolon\":true,\"triggerPropertyValueCompletion\":true},\"hover\":{\"documentation\":true,\"references\":true},\"lint\":{\"argumentsInColorFunction\":\"error\",\"boxModel\":\"ignore\",\"compatibleVendorPrefixes\":\"ignore\",\"duplicateProperties\":\"warning\",\"emptyRules\":\"warning\",\"float\":\"ignore\",\"fontFaceProperties\":\"warning\",\"hexColorLength\":\"error\",\"idSelector\":\"ignore\",\"ieHack\":\"ignore\",\"importStatement\":\"ignore\",\"important\":\"ignore\",\"propertyIgnoredDueToDisplay\":\"warning\",\"universalSelector\":\"ignore\",\"unknownAtRules\":\"warning\",\"unknownProperties\":\"warning\",\"unknownVendorSpecificProperties\":\"ignore\",\"validProperties\":[],\"vendorPrefix\":\"warning\",\"zeroUnits\":\"ignore\"},\"trace\":{\"server\":\"off\"}},\"less\":{\"completion\":{\"completePropertyWithSemicolon\":true,\"triggerPropertyValueCompletion\":true},\"hover\":{\"documentation\":true,\"references\":true},\"lint\":{\"argumentsInColorFunction\":\"error\",\"boxModel\":\"ignore\",\"compatibleVendorPrefixes\":\"ignore\",\"duplicateProperties\":\"warning\",\"emptyRules\":\"warning\",\"float\":\"ignore\",\"fontFaceProperties\":\"warning\",\"hexColorLength\":\"error\",\"idSelector\":\"ignore\",\"ieHack\":\"ignore\",\"importStatement\":\"ignore\",\"important\":\"ignore\",\"propertyIgnoredDueToDisplay\":\"warning\",\"universalSelector\":\"ignore\",\"unknownAtRules\":\"warning\",\"unknownProperties\":\"warning\",\"unknownVendorSpecificProperties\":\"ignore\",\"validProperties\":[],\"vendorPrefix\":\"warning\",\"zeroUnits\":\"ignore\"},\"trace\":{\"server\":\"off\"}},\"scss\":{\"completion\":{\"completePropertyWithSemicolon\":true,\"triggerPropertyValueCompletion\":true},\"hover\":{\"documentation\":true,\"references\":true},\"lint\":{\"argumentsInColorFunction\":\"error\",\"boxModel\":\"ignore\",\"compatibleVendorPrefixes\":\"ignore\",\"duplicateProperties\":\"warning\",\"emptyRules\":\"warning\",\"float\":\"ignore\",\"fontFaceProperties\":\"warning\",\"hexColorLength\":\"error\",\"idSelector\":\"ignore\",\"ieHack\":\"ignore\",\"importStatement\":\"ignore\",\"important\":\"ignore\",\"propertyIgnoredDueToDisplay\":\"warning\",\"universalSelector\":\"ignore\",\"unknownAtRules\":\"warning\",\"unknownProperties\":\"warning\",\"unknownVendorSpecificProperties\":\"ignore\",\"validProperties\":[],\"vendorPrefix\":\"warning\",\"zeroUnits\":\"ignore\"},\"trace\":{\"server\":\"off\"}}}", "initializationOptionsJson":"{\"provideFormatter\":true}"}}, {"id":"module:web/languageServer:html", "name":"HTML Language Server", "language":"html", "fileTypeAttrs":{"extensions":[".html"]}, "config":{"startCommand":{"args":["sh", "-c", "/nix/store/ydkb3d7r0zs7wd7jcwnk1v24qmzjqnkh-vscode-langservers-extracted-4.10.0/bin/vscode-html-language-server --stdio"]}, "configurationJson":"{\"html\":{\"autoClosingTags\":true,\"autoCreateQuotes\":true,\"completion\":{\"attributeDefaultValue\":\"doublequotes\"},\"customData\":[],\"format\":{\"contentUnformatted\":\"pre,code,textarea\",\"enable\":true,\"endWithNewline\":false,\"extraLiners\":\"head, body, /html\",\"indentHandlebars\":false,\"indentInnerHtml\":false,\"preserveNewLines\":true,\"templating\":false,\"unformatted\":\"wbr\",\"unformattedContentDelimiter\":\"\",\"wrapAttributes\":\"auto\",\"wrapLineLength\":120},\"hover\":{\"documentation\":true,\"references\":true},\"mirrorCursorOnMatchingTag\":false,\"suggest\":{\"html5\":true},\"trace\":{\"server\":\"off\"},\"validate\":{\"scripts\":true,\"styles\":true}}}", "initializationOptionsJson":"{\"enable\":true,\"provideFormatter\":true}"}}], "packagers":[{"id":"module:nodejs-20/packager:upmNodejs", "name":"Node.js packager (npm, yarn, pnpm, bun)", "language":"nodejs", "packageSearch":true, "guessImports":true}], "formatters":[{"id":"module:nodejs-20/formatter:prettier", "name":"Prettier", "startCommand":{"args":["/nix/store/070ycjyhpfv8n895zq7yz6z0pp57g0q9-run-prettier/bin/run-prettier"], "lifecycle":"STDIN", "splitStderr":true}, "fileTypeAttrs":{"extensions":[".js", ".jsx", ".ts", ".tsx", ".json", ".html"]}, "displayVersion":"3.3.3", "supportsRangeFormatting":true}, {"id":"module:replit/languageServer:dotreplit-lsp", "name":".replit LSP", "fileTypeAttrs":{}}, {"id":"module:web/languageServer:css", "name":"CSS Language Server", "fileTypeAttrs":{"extensions":[".css", ".less", ".scss"]}}, {"id":"module:web/languageServer:html", "name":"HTML Language Server", "fileTypeAttrs":{"extensions":[".html"]}}, {"id":"module:web/languageServer:typescript-language-server", "name":"TypeScript Language Server", "fileTypeAttrs":{"extensions":[".js", ".jsx", ".ts", ".tsx", ".mjs", ".mts", ".cjs", ".cts", ".es6", ".json"]}, "displayVersion":"4.3.3"}]}
</file>

<file path=".cache/typescript/5.6/package.json">
{"private":true,"dependencies":{"types-registry":"^0.1.721"},"devDependencies":{"@types/connect-pg-simple":"^7.0.3","@types/express":"^5.0.2","@types/express-session":"^1.18.1","@types/lodash":"^4.17.16","@types/multer":"^1.4.12","@types/passport":"^1.0.17","@types/passport-local":"^1.0.38","@types/react":"^19.1.4","@types/react-dom":"^19.1.5","@types/ws":"^8.18.1"}}
</file>

<file path=".config/.semgrep/settings.yml">
has_shown_metrics_notification: true
anonymous_user_id: b82f8e92-c6b7-451f-9408-ef239deec747
</file>

<file path=".local/state/replit/agent/.latest.json">
{"latest": "main"}
</file>

<file path=".upm/store.json">
{"version":2,"languages":{"nodejs-npm":{"specfileHash":"04ddf54d6f73e7cd5bce692e6b41c32b","lockfileHash":"8abd152328053c1a564122c67ae416d9"}}}
</file>

<file path="client/src/components/ui/accordion.tsx">
import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))

AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }
</file>

<file path="client/src/components/ui/alert-dialog.tsx">
import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}
</file>

<file path="client/src/components/ui/alert.tsx">
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }
</file>

<file path="client/src/components/ui/aspect-ratio.tsx">
import * as AspectRatioPrimitive from "@radix-ui/react-aspect-ratio"

const AspectRatio = AspectRatioPrimitive.Root

export { AspectRatio }
</file>

<file path="client/src/components/ui/avatar.tsx">
"use client"

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }
</file>

<file path="client/src/components/ui/badge.tsx">
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }
</file>

<file path="client/src/components/ui/breadcrumb.tsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"

const Breadcrumb = React.forwardRef<
  HTMLElement,
  React.ComponentPropsWithoutRef<"nav"> & {
    separator?: React.ReactNode
  }
>(({ ...props }, ref) => <nav ref={ref} aria-label="breadcrumb" {...props} />)
Breadcrumb.displayName = "Breadcrumb"

const BreadcrumbList = React.forwardRef<
  HTMLOListElement,
  React.ComponentPropsWithoutRef<"ol">
>(({ className, ...props }, ref) => (
  <ol
    ref={ref}
    className={cn(
      "flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5",
      className
    )}
    {...props}
  />
))
BreadcrumbList.displayName = "BreadcrumbList"

const BreadcrumbItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentPropsWithoutRef<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    className={cn("inline-flex items-center gap-1.5", className)}
    {...props}
  />
))
BreadcrumbItem.displayName = "BreadcrumbItem"

const BreadcrumbLink = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentPropsWithoutRef<"a"> & {
    asChild?: boolean
  }
>(({ asChild, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      className={cn("transition-colors hover:text-foreground", className)}
      {...props}
    />
  )
})
BreadcrumbLink.displayName = "BreadcrumbLink"

const BreadcrumbPage = React.forwardRef<
  HTMLSpanElement,
  React.ComponentPropsWithoutRef<"span">
>(({ className, ...props }, ref) => (
  <span
    ref={ref}
    role="link"
    aria-disabled="true"
    aria-current="page"
    className={cn("font-normal text-foreground", className)}
    {...props}
  />
))
BreadcrumbPage.displayName = "BreadcrumbPage"

const BreadcrumbSeparator = ({
  children,
  className,
  ...props
}: React.ComponentProps<"li">) => (
  <li
    role="presentation"
    aria-hidden="true"
    className={cn("[&>svg]:w-3.5 [&>svg]:h-3.5", className)}
    {...props}
  >
    {children ?? <ChevronRight />}
  </li>
)
BreadcrumbSeparator.displayName = "BreadcrumbSeparator"

const BreadcrumbEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    role="presentation"
    aria-hidden="true"
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More</span>
  </span>
)
BreadcrumbEllipsis.displayName = "BreadcrumbElipssis"

export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
}
</file>

<file path="client/src/components/ui/button.tsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-bold ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }
</file>

<file path="client/src/components/ui/calendar.tsx">
import * as React from "react"
import { ChevronLeft, ChevronRight } from "lucide-react"
import { DayPicker } from "react-day-picker"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

export type CalendarProps = React.ComponentProps<typeof DayPicker>

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: "h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20",
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "h-9 w-9 p-0 font-normal aria-selected:opacity-100"
        ),
        day_range_end: "day-range-end",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ className, ...props }) => (
          <ChevronLeft className={cn("h-4 w-4", className)} {...props} />
        ),
        IconRight: ({ className, ...props }) => (
          <ChevronRight className={cn("h-4 w-4", className)} {...props} />
        ),
      }}
      {...props}
    />
  )
}
Calendar.displayName = "Calendar"

export { Calendar }
</file>

<file path="client/src/components/ui/card.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }
</file>

<file path="client/src/components/ui/carousel.tsx">
import * as React from "react"
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from "embla-carousel-react"
import { ArrowLeft, ArrowRight } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"

type CarouselApi = UseEmblaCarouselType[1]
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
type CarouselOptions = UseCarouselParameters[0]
type CarouselPlugin = UseCarouselParameters[1]

type CarouselProps = {
  opts?: CarouselOptions
  plugins?: CarouselPlugin
  orientation?: "horizontal" | "vertical"
  setApi?: (api: CarouselApi) => void
}

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
  api: ReturnType<typeof useEmblaCarousel>[1]
  scrollPrev: () => void
  scrollNext: () => void
  canScrollPrev: boolean
  canScrollNext: boolean
} & CarouselProps

const CarouselContext = React.createContext<CarouselContextProps | null>(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />")
  }

  return context
}

const Carousel = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & CarouselProps
>(
  (
    {
      orientation = "horizontal",
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === "horizontal" ? "x" : "y",
      },
      plugins
    )
    const [canScrollPrev, setCanScrollPrev] = React.useState(false)
    const [canScrollNext, setCanScrollNext] = React.useState(false)

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return
      }

      setCanScrollPrev(api.canScrollPrev())
      setCanScrollNext(api.canScrollNext())
    }, [])

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev()
    }, [api])

    const scrollNext = React.useCallback(() => {
      api?.scrollNext()
    }, [api])

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault()
          scrollPrev()
        } else if (event.key === "ArrowRight") {
          event.preventDefault()
          scrollNext()
        }
      },
      [scrollPrev, scrollNext]
    )

    React.useEffect(() => {
      if (!api || !setApi) {
        return
      }

      setApi(api)
    }, [api, setApi])

    React.useEffect(() => {
      if (!api) {
        return
      }

      onSelect(api)
      api.on("reInit", onSelect)
      api.on("select", onSelect)

      return () => {
        api?.off("select", onSelect)
      }
    }, [api, onSelect])

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    )
  }
)
Carousel.displayName = "Carousel"

const CarouselContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props}
      />
    </div>
  )
})
CarouselContent.displayName = "CarouselContent"

const CarouselItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { orientation } = useCarousel()

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    />
  )
})
CarouselItem.displayName = "CarouselItem"

const CarouselPrevious = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute  h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-left-12 top-1/2 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  )
})
CarouselPrevious.displayName = "CarouselPrevious"

const CarouselNext = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-right-12 top-1/2 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  )
})
CarouselNext.displayName = "CarouselNext"

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
}
</file>

<file path="client/src/components/ui/chart.tsx">
"use client"

import * as React from "react"
import * as RechartsPrimitive from "recharts"

import { cn } from "@/lib/utils"

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" } as const

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode
    icon?: React.ComponentType
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  )
}

type ChartContextProps = {
  config: ChartConfig
}

const ChartContext = React.createContext<ChartContextProps | null>(null)

function useChart() {
  const context = React.useContext(ChartContext)

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />")
  }

  return context
}

const ChartContainer = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    config: ChartConfig
    children: React.ComponentProps<
      typeof RechartsPrimitive.ResponsiveContainer
    >["children"]
  }
>(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId()
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  )
})
ChartContainer.displayName = "Chart"

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([, config]) => config.theme || config.color
  )

  if (!colorConfig.length) {
    return null
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color
    return color ? `  --color-${key}: ${color};` : null
  })
  .join("\n")}
}
`
          )
          .join("\n"),
      }}
    />
  )
}

const ChartTooltip = RechartsPrimitive.Tooltip

const ChartTooltipContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
    React.ComponentProps<"div"> & {
      hideLabel?: boolean
      hideIndicator?: boolean
      indicator?: "line" | "dot" | "dashed"
      nameKey?: string
      labelKey?: string
    }
>(
  (
    {
      active,
      payload,
      className,
      indicator = "dot",
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref
  ) => {
    const { config } = useChart()

    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null
      }

      const [item] = payload
      const key = `${labelKey || item?.dataKey || item?.name || "value"}`
      const itemConfig = getPayloadConfigFromPayload(config, item, key)
      const value =
        !labelKey && typeof label === "string"
          ? config[label as keyof typeof config]?.label || label
          : itemConfig?.label

      if (labelFormatter) {
        return (
          <div className={cn("font-medium", labelClassName)}>
            {labelFormatter(value, payload)}
          </div>
        )
      }

      if (!value) {
        return null
      }

      return <div className={cn("font-medium", labelClassName)}>{value}</div>
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config,
      labelKey,
    ])

    if (!active || !payload?.length) {
      return null
    }

    const nestLabel = payload.length === 1 && indicator !== "dot"

    return (
      <div
        ref={ref}
        className={cn(
          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl",
          className
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || "value"}`
            const itemConfig = getPayloadConfigFromPayload(config, item, key)
            const indicatorColor = color || item.payload.fill || item.color

            return (
              <div
                key={item.dataKey}
                className={cn(
                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
                  indicator === "dot" && "items-center"
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn(
                            "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
                            {
                              "h-2.5 w-2.5": indicator === "dot",
                              "w-1": indicator === "line",
                              "w-0 border-[1.5px] border-dashed bg-transparent":
                                indicator === "dashed",
                              "my-0.5": nestLabel && indicator === "dashed",
                            }
                          )}
                          style={
                            {
                              "--color-bg": indicatorColor,
                              "--color-border": indicatorColor,
                            } as React.CSSProperties
                          }
                        />
                      )
                    )}
                    <div
                      className={cn(
                        "flex flex-1 justify-between leading-none",
                        nestLabel ? "items-end" : "items-center"
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            )
          })}
        </div>
      </div>
    )
  }
)
ChartTooltipContent.displayName = "ChartTooltip"

const ChartLegend = RechartsPrimitive.Legend

const ChartLegendContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> &
    Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
      hideIcon?: boolean
      nameKey?: string
    }
>(
  (
    { className, hideIcon = false, payload, verticalAlign = "bottom", nameKey },
    ref
  ) => {
    const { config } = useChart()

    if (!payload?.length) {
      return null
    }

    return (
      <div
        ref={ref}
        className={cn(
          "flex items-center justify-center gap-4",
          verticalAlign === "top" ? "pb-3" : "pt-3",
          className
        )}
      >
        {payload.map((item) => {
          const key = `${nameKey || item.dataKey || "value"}`
          const itemConfig = getPayloadConfigFromPayload(config, item, key)

          return (
            <div
              key={item.value}
              className={cn(
                "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground"
              )}
            >
              {itemConfig?.icon && !hideIcon ? (
                <itemConfig.icon />
              ) : (
                <div
                  className="h-2 w-2 shrink-0 rounded-[2px]"
                  style={{
                    backgroundColor: item.color,
                  }}
                />
              )}
              {itemConfig?.label}
            </div>
          )
        })}
      </div>
    )
  }
)
ChartLegendContent.displayName = "ChartLegend"

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string
) {
  if (typeof payload !== "object" || payload === null) {
    return undefined
  }

  const payloadPayload =
    "payload" in payload &&
    typeof payload.payload === "object" &&
    payload.payload !== null
      ? payload.payload
      : undefined

  let configLabelKey: string = key

  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === "string"
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config]
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
}
</file>

<file path="client/src/components/ui/checkbox.tsx">
import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }
</file>

<file path="client/src/components/ui/collapsible.tsx">
"use client"

import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

const Collapsible = CollapsiblePrimitive.Root

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent

export { Collapsible, CollapsibleTrigger, CollapsibleContent }
</file>

<file path="client/src/components/ui/command.tsx">
import * as React from "react"
import { type DialogProps } from "@radix-ui/react-dialog"
import { Command as CommandPrimitive } from "cmdk"
import { Search } from "lucide-react"

import { cn } from "@/lib/utils"
import { Dialog, DialogContent } from "@/components/ui/dialog"

const Command = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
>(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className
    )}
    {...props}
  />
))
Command.displayName = CommandPrimitive.displayName

const CommandDialog = ({ children, ...props }: DialogProps) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0 shadow-lg">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

const CommandInput = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Input>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    />
  </div>
))

CommandInput.displayName = CommandPrimitive.Input.displayName

const CommandList = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props}
  />
))

CommandList.displayName = CommandPrimitive.List.displayName

const CommandEmpty = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Empty>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => (
  <CommandPrimitive.Empty
    ref={ref}
    className="py-6 text-center text-sm"
    {...props}
  />
))

CommandEmpty.displayName = CommandPrimitive.Empty.displayName

const CommandGroup = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Group>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className
    )}
    {...props}
  />
))

CommandGroup.displayName = CommandPrimitive.Group.displayName

const CommandSeparator = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 h-px bg-border", className)}
    {...props}
  />
))
CommandSeparator.displayName = CommandPrimitive.Separator.displayName

const CommandItem = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      className
    )}
    {...props}
  />
))

CommandItem.displayName = CommandPrimitive.Item.displayName

const CommandShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
CommandShortcut.displayName = "CommandShortcut"

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}
</file>

<file path="client/src/components/ui/context-menu.tsx">
import * as React from "react"
import * as ContextMenuPrimitive from "@radix-ui/react-context-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const ContextMenu = ContextMenuPrimitive.Root

const ContextMenuTrigger = ContextMenuPrimitive.Trigger

const ContextMenuGroup = ContextMenuPrimitive.Group

const ContextMenuPortal = ContextMenuPrimitive.Portal

const ContextMenuSub = ContextMenuPrimitive.Sub

const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup

const ContextMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <ContextMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </ContextMenuPrimitive.SubTrigger>
))
ContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName

const ContextMenuSubContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]",
      className
    )}
    {...props}
  />
))
ContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName

const ContextMenuContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Portal>
    <ContextMenuPrimitive.Content
      ref={ref}
      className={cn(
        "z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]",
        className
      )}
      {...props}
    />
  </ContextMenuPrimitive.Portal>
))
ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName

const ContextMenuItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName

const ContextMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <ContextMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.CheckboxItem>
))
ContextMenuCheckboxItem.displayName =
  ContextMenuPrimitive.CheckboxItem.displayName

const ContextMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <ContextMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.RadioItem>
))
ContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName

const ContextMenuLabel = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold text-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName

const ContextMenuSeparator = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-border", className)}
    {...props}
  />
))
ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName

const ContextMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
ContextMenuShortcut.displayName = "ContextMenuShortcut"

export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup,
}
</file>

<file path="client/src/components/ui/dialog.tsx">
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}
</file>

<file path="client/src/components/ui/drawer.tsx">
"use client"

import * as React from "react"
import { Drawer as DrawerPrimitive } from "vaul"

import { cn } from "@/lib/utils"

const Drawer = ({
  shouldScaleBackground = true,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (
  <DrawerPrimitive.Root
    shouldScaleBackground={shouldScaleBackground}
    {...props}
  />
)
Drawer.displayName = "Drawer"

const DrawerTrigger = DrawerPrimitive.Trigger

const DrawerPortal = DrawerPrimitive.Portal

const DrawerClose = DrawerPrimitive.Close

const DrawerOverlay = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay
    ref={ref}
    className={cn("fixed inset-0 z-50 bg-black/80", className)}
    {...props}
  />
))
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName

const DrawerContent = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DrawerPortal>
    <DrawerOverlay />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn(
        "fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background",
        className
      )}
      {...props}
    >
      <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
      {children}
    </DrawerPrimitive.Content>
  </DrawerPortal>
))
DrawerContent.displayName = "DrawerContent"

const DrawerHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)}
    {...props}
  />
)
DrawerHeader.displayName = "DrawerHeader"

const DrawerFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("mt-auto flex flex-col gap-2 p-4", className)}
    {...props}
  />
)
DrawerFooter.displayName = "DrawerFooter"

const DrawerTitle = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DrawerTitle.displayName = DrawerPrimitive.Title.displayName

const DrawerDescription = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DrawerDescription.displayName = DrawerPrimitive.Description.displayName

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
}
</file>

<file path="client/src/components/ui/dropdown-menu.tsx">
import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}
</file>

<file path="client/src/components/ui/form.tsx">
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  FormProvider,
  useFormContext,
  type ControllerProps,
  type FieldPath,
  type FieldValues,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-sm text-muted-foreground", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message ?? "") : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-sm font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}
</file>

<file path="client/src/components/ui/hover-card.tsx">
"use client"

import * as React from "react"
import * as HoverCardPrimitive from "@radix-ui/react-hover-card"

import { cn } from "@/lib/utils"

const HoverCard = HoverCardPrimitive.Root

const HoverCardTrigger = HoverCardPrimitive.Trigger

const HoverCardContent = React.forwardRef<
  React.ElementRef<typeof HoverCardPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <HoverCardPrimitive.Content
    ref={ref}
    align={align}
    sideOffset={sideOffset}
    className={cn(
      "z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]",
      className
    )}
    {...props}
  />
))
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName

export { HoverCard, HoverCardTrigger, HoverCardContent }
</file>

<file path="client/src/components/ui/input-otp.tsx">
import * as React from "react"
import { OTPInput, OTPInputContext } from "input-otp"
import { Dot } from "lucide-react"

import { cn } from "@/lib/utils"

const InputOTP = React.forwardRef<
  React.ElementRef<typeof OTPInput>,
  React.ComponentPropsWithoutRef<typeof OTPInput>
>(({ className, containerClassName, ...props }, ref) => (
  <OTPInput
    ref={ref}
    containerClassName={cn(
      "flex items-center gap-2 has-[:disabled]:opacity-50",
      containerClassName
    )}
    className={cn("disabled:cursor-not-allowed", className)}
    {...props}
  />
))
InputOTP.displayName = "InputOTP"

const InputOTPGroup = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("flex items-center", className)} {...props} />
))
InputOTPGroup.displayName = "InputOTPGroup"

const InputOTPSlot = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div"> & { index: number }
>(({ index, className, ...props }, ref) => {
  const inputOTPContext = React.useContext(OTPInputContext)
  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]

  return (
    <div
      ref={ref}
      className={cn(
        "relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md",
        isActive && "z-10 ring-2 ring-ring ring-offset-background",
        className
      )}
      {...props}
    >
      {char}
      {hasFakeCaret && (
        <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
          <div className="h-4 w-px animate-caret-blink bg-foreground duration-1000" />
        </div>
      )}
    </div>
  )
})
InputOTPSlot.displayName = "InputOTPSlot"

const InputOTPSeparator = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ ...props }, ref) => (
  <div ref={ref} role="separator" {...props}>
    <Dot />
  </div>
))
InputOTPSeparator.displayName = "InputOTPSeparator"

export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }
</file>

<file path="client/src/components/ui/input.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }
</file>

<file path="client/src/components/ui/label.tsx">
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }
</file>

<file path="client/src/components/ui/menubar.tsx">
"use client"

import * as React from "react"
import * as MenubarPrimitive from "@radix-ui/react-menubar"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

function MenubarMenu({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {
  return <MenubarPrimitive.Menu {...props} />
}

function MenubarGroup({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Group>) {
  return <MenubarPrimitive.Group {...props} />
}

function MenubarPortal({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {
  return <MenubarPrimitive.Portal {...props} />
}

function MenubarRadioGroup({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {
  return <MenubarPrimitive.RadioGroup {...props} />
}

function MenubarSub({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {
  return <MenubarPrimitive.Sub data-slot="menubar-sub" {...props} />
}

const Menubar = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Root
    ref={ref}
    className={cn(
      "flex h-10 items-center space-x-1 rounded-md border bg-background p-1",
      className
    )}
    {...props}
  />
))
Menubar.displayName = MenubarPrimitive.Root.displayName

const MenubarTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      className
    )}
    {...props}
  />
))
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName

const MenubarSubTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <MenubarPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </MenubarPrimitive.SubTrigger>
))
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName

const MenubarSubContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]",
      className
    )}
    {...props}
  />
))
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName

const MenubarContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>
>(
  (
    { className, align = "start", alignOffset = -4, sideOffset = 8, ...props },
    ref
  ) => (
    <MenubarPrimitive.Portal>
      <MenubarPrimitive.Content
        ref={ref}
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          "z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]",
          className
        )}
        {...props}
      />
    </MenubarPrimitive.Portal>
  )
)
MenubarContent.displayName = MenubarPrimitive.Content.displayName

const MenubarItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarItem.displayName = MenubarPrimitive.Item.displayName

const MenubarCheckboxItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <MenubarPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.CheckboxItem>
))
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName

const MenubarRadioItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <MenubarPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.RadioItem>
))
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName

const MenubarLabel = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarLabel.displayName = MenubarPrimitive.Label.displayName

const MenubarSeparator = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName

const MenubarShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
MenubarShortcut.displayname = "MenubarShortcut"

export {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator,
  MenubarLabel,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarPortal,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarGroup,
  MenubarSub,
  MenubarShortcut,
}
</file>

<file path="client/src/components/ui/navigation-menu.tsx">
import * as React from "react"
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu"
import { cva } from "class-variance-authority"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const NavigationMenu = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      "relative z-10 flex max-w-max flex-1 items-center justify-center",
      className
    )}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
))
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName

const NavigationMenuList = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      "group flex flex-1 list-none items-center justify-center space-x-1",
      className
    )}
    {...props}
  />
))
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName

const NavigationMenuItem = NavigationMenuPrimitive.Item

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent"
)

const NavigationMenuTrigger = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), "group", className)}
    {...props}
  >
    {children}{" "}
    <ChevronDown
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuPrimitive.Trigger>
))
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName

const NavigationMenuContent = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ",
      className
    )}
    {...props}
  />
))
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName

const NavigationMenuLink = NavigationMenuPrimitive.Link

const NavigationMenuViewport = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className
      )}
      ref={ref}
      {...props}
    />
  </div>
))
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName

const NavigationMenuIndicator = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
      className
    )}
    {...props}
  >
    <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
  </NavigationMenuPrimitive.Indicator>
))
NavigationMenuIndicator.displayName =
  NavigationMenuPrimitive.Indicator.displayName

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
}
</file>

<file path="client/src/components/ui/pagination.tsx">
import * as React from "react"
import { ChevronLeft, ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"
import { ButtonProps, buttonVariants } from "@/components/ui/button"

const Pagination = ({ className, ...props }: React.ComponentProps<"nav">) => (
  <nav
    role="navigation"
    aria-label="pagination"
    className={cn("mx-auto flex w-full justify-center", className)}
    {...props}
  />
)
Pagination.displayName = "Pagination"

const PaginationContent = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    className={cn("flex flex-row items-center gap-1", className)}
    {...props}
  />
))
PaginationContent.displayName = "PaginationContent"

const PaginationItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li ref={ref} className={cn("", className)} {...props} />
))
PaginationItem.displayName = "PaginationItem"

type PaginationLinkProps = {
  isActive?: boolean
} & Pick<ButtonProps, "size"> &
  React.ComponentProps<"a">

const PaginationLink = ({
  className,
  isActive,
  size = "icon",
  ...props
}: PaginationLinkProps) => (
  <a
    aria-current={isActive ? "page" : undefined}
    className={cn(
      buttonVariants({
        variant: isActive ? "outline" : "ghost",
        size,
      }),
      className
    )}
    {...props}
  />
)
PaginationLink.displayName = "PaginationLink"

const PaginationPrevious = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to previous page"
    size="default"
    className={cn("gap-1 pl-2.5", className)}
    {...props}
  >
    <ChevronLeft className="h-4 w-4" />
    <span>Previous</span>
  </PaginationLink>
)
PaginationPrevious.displayName = "PaginationPrevious"

const PaginationNext = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to next page"
    size="default"
    className={cn("gap-1 pr-2.5", className)}
    {...props}
  >
    <span>Next</span>
    <ChevronRight className="h-4 w-4" />
  </PaginationLink>
)
PaginationNext.displayName = "PaginationNext"

const PaginationEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    aria-hidden
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More pages</span>
  </span>
)
PaginationEllipsis.displayName = "PaginationEllipsis"

export {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
}
</file>

<file path="client/src/components/ui/popover.tsx">
import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent }
</file>

<file path="client/src/components/ui/progress.tsx">
"use client"

import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-4 w-full overflow-hidden rounded-full bg-secondary",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }
</file>

<file path="client/src/components/ui/radio-group.tsx">
import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn("grid gap-2", className)}
      {...props}
      ref={ref}
    />
  )
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }
</file>

<file path="client/src/components/ui/resizable.tsx">
"use client"

import { GripVertical } from "lucide-react"
import * as ResizablePrimitive from "react-resizable-panels"

import { cn } from "@/lib/utils"

const ResizablePanelGroup = ({
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (
  <ResizablePrimitive.PanelGroup
    className={cn(
      "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
      className
    )}
    {...props}
  />
)

const ResizablePanel = ResizablePrimitive.Panel

const ResizableHandle = ({
  withHandle,
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
  withHandle?: boolean
}) => (
  <ResizablePrimitive.PanelResizeHandle
    className={cn(
      "relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
      className
    )}
    {...props}
  >
    {withHandle && (
      <div className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border">
        <GripVertical className="h-2.5 w-2.5" />
      </div>
    )}
  </ResizablePrimitive.PanelResizeHandle>
)

export { ResizablePanelGroup, ResizablePanel, ResizableHandle }
</file>

<file path="client/src/components/ui/scroll-area.tsx">
import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }
</file>

<file path="client/src/components/ui/select.tsx">
"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}
</file>

<file path="client/src/components/ui/separator.tsx">
import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }
</file>

<file path="client/src/components/ui/sheet.tsx">
"use client"

import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}
</file>

<file path="client/src/components/ui/sidebar.tsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { VariantProps, cva } from "class-variance-authority"
import { PanelLeft } from "lucide-react"

import { useIsMobile } from "@/hooks/use-mobile"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Separator } from "@/components/ui/separator"
import {
  Sheet,
  SheetContent,
  SheetDescription,
  SheetHeader,
  SheetTitle,
} from "@/components/ui/sheet"
import { Skeleton } from "@/components/ui/skeleton"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"

const SIDEBAR_COOKIE_NAME = "sidebar_state"
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7
const SIDEBAR_WIDTH = "16rem"
const SIDEBAR_WIDTH_MOBILE = "18rem"
const SIDEBAR_WIDTH_ICON = "3rem"
const SIDEBAR_KEYBOARD_SHORTCUT = "b"

type SidebarContextProps = {
  state: "expanded" | "collapsed"
  open: boolean
  setOpen: (open: boolean) => void
  openMobile: boolean
  setOpenMobile: (open: boolean) => void
  isMobile: boolean
  toggleSidebar: () => void
}

const SidebarContext = React.createContext<SidebarContextProps | null>(null)

function useSidebar() {
  const context = React.useContext(SidebarContext)
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.")
  }

  return context
}

const SidebarProvider = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    defaultOpen?: boolean
    open?: boolean
    onOpenChange?: (open: boolean) => void
  }
>(
  (
    {
      defaultOpen = true,
      open: openProp,
      onOpenChange: setOpenProp,
      className,
      style,
      children,
      ...props
    },
    ref
  ) => {
    const isMobile = useIsMobile()
    const [openMobile, setOpenMobile] = React.useState(false)

    // This is the internal state of the sidebar.
    // We use openProp and setOpenProp for control from outside the component.
    const [_open, _setOpen] = React.useState(defaultOpen)
    const open = openProp ?? _open
    const setOpen = React.useCallback(
      (value: boolean | ((value: boolean) => boolean)) => {
        const openState = typeof value === "function" ? value(open) : value
        if (setOpenProp) {
          setOpenProp(openState)
        } else {
          _setOpen(openState)
        }

        // This sets the cookie to keep the sidebar state.
        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
      },
      [setOpenProp, open]
    )

    // Helper to toggle the sidebar.
    const toggleSidebar = React.useCallback(() => {
      return isMobile
        ? setOpenMobile((open) => !open)
        : setOpen((open) => !open)
    }, [isMobile, setOpen, setOpenMobile])

    // Adds a keyboard shortcut to toggle the sidebar.
    React.useEffect(() => {
      const handleKeyDown = (event: KeyboardEvent) => {
        if (
          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
          (event.metaKey || event.ctrlKey)
        ) {
          event.preventDefault()
          toggleSidebar()
        }
      }

      window.addEventListener("keydown", handleKeyDown)
      return () => window.removeEventListener("keydown", handleKeyDown)
    }, [toggleSidebar])

    // We add a state so that we can do data-state="expanded" or "collapsed".
    // This makes it easier to style the sidebar with Tailwind classes.
    const state = open ? "expanded" : "collapsed"

    const contextValue = React.useMemo<SidebarContextProps>(
      () => ({
        state,
        open,
        setOpen,
        isMobile,
        openMobile,
        setOpenMobile,
        toggleSidebar,
      }),
      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
    )

    return (
      <SidebarContext.Provider value={contextValue}>
        <TooltipProvider delayDuration={0}>
          <div
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH,
                "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
                ...style,
              } as React.CSSProperties
            }
            className={cn(
              "group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar",
              className
            )}
            ref={ref}
            {...props}
          >
            {children}
          </div>
        </TooltipProvider>
      </SidebarContext.Provider>
    )
  }
)
SidebarProvider.displayName = "SidebarProvider"

const Sidebar = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    side?: "left" | "right"
    variant?: "sidebar" | "floating" | "inset"
    collapsible?: "offcanvas" | "icon" | "none"
  }
>(
  (
    {
      side = "left",
      variant = "sidebar",
      collapsible = "offcanvas",
      className,
      children,
      ...props
    },
    ref
  ) => {
    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()

    if (collapsible === "none") {
      return (
        <div
          className={cn(
            "flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground",
            className
          )}
          ref={ref}
          {...props}
        >
          {children}
        </div>
      )
    }

    if (isMobile) {
      return (
        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
          <SheetContent
            data-sidebar="sidebar"
            data-mobile="true"
            className="w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden"
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
              } as React.CSSProperties
            }
            side={side}
          >
            <SheetHeader className="sr-only">
              <SheetTitle>Sidebar</SheetTitle>
              <SheetDescription>Displays the mobile sidebar.</SheetDescription>
            </SheetHeader>
            <div className="flex h-full w-full flex-col">{children}</div>
          </SheetContent>
        </Sheet>
      )
    }

    return (
      <div
        ref={ref}
        className="group peer hidden text-sidebar-foreground md:block"
        data-state={state}
        data-collapsible={state === "collapsed" ? collapsible : ""}
        data-variant={variant}
        data-side={side}
      >
        {/* This is what handles the sidebar gap on desktop */}
        <div
          className={cn(
            "relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear",
            "group-data-[collapsible=offcanvas]:w-0",
            "group-data-[side=right]:rotate-180",
            variant === "floating" || variant === "inset"
              ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]"
          )}
        />
        <div
          className={cn(
            "fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex",
            side === "left"
              ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
              : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
            // Adjust the padding for floating and inset variants.
            variant === "floating" || variant === "inset"
              ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
            className
          )}
          {...props}
        >
          <div
            data-sidebar="sidebar"
            className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow"
          >
            {children}
          </div>
        </div>
      </div>
    )
  }
)
Sidebar.displayName = "Sidebar"

const SidebarTrigger = React.forwardRef<
  React.ElementRef<typeof Button>,
  React.ComponentProps<typeof Button>
>(({ className, onClick, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <Button
      ref={ref}
      data-sidebar="trigger"
      variant="ghost"
      size="icon"
      className={cn("h-7 w-7", className)}
      onClick={(event) => {
        onClick?.(event)
        toggleSidebar()
      }}
      {...props}
    >
      <PanelLeft />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  )
})
SidebarTrigger.displayName = "SidebarTrigger"

const SidebarRail = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button">
>(({ className, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <button
      ref={ref}
      data-sidebar="rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        "absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
        "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
        "group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar",
        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
        className
      )}
      {...props}
    />
  )
})
SidebarRail.displayName = "SidebarRail"

const SidebarInset = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"main">
>(({ className, ...props }, ref) => {
  return (
    <main
      ref={ref}
      className={cn(
        "relative flex w-full flex-1 flex-col bg-background",
        "md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
        className
      )}
      {...props}
    />
  )
})
SidebarInset.displayName = "SidebarInset"

const SidebarInput = React.forwardRef<
  React.ElementRef<typeof Input>,
  React.ComponentProps<typeof Input>
>(({ className, ...props }, ref) => {
  return (
    <Input
      ref={ref}
      data-sidebar="input"
      className={cn(
        "h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring",
        className
      )}
      {...props}
    />
  )
})
SidebarInput.displayName = "SidebarInput"

const SidebarHeader = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="header"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarHeader.displayName = "SidebarHeader"

const SidebarFooter = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="footer"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarFooter.displayName = "SidebarFooter"

const SidebarSeparator = React.forwardRef<
  React.ElementRef<typeof Separator>,
  React.ComponentProps<typeof Separator>
>(({ className, ...props }, ref) => {
  return (
    <Separator
      ref={ref}
      data-sidebar="separator"
      className={cn("mx-2 w-auto bg-sidebar-border", className)}
      {...props}
    />
  )
})
SidebarSeparator.displayName = "SidebarSeparator"

const SidebarContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="content"
      className={cn(
        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarContent.displayName = "SidebarContent"

const SidebarGroup = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="group"
      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
      {...props}
    />
  )
})
SidebarGroup.displayName = "SidebarGroup"

const SidebarGroupLabel = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "div"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-label"
      className={cn(
        "flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupLabel.displayName = "SidebarGroupLabel"

const SidebarGroupAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-action"
      className={cn(
        "absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupAction.displayName = "SidebarGroupAction"

const SidebarGroupContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="group-content"
    className={cn("w-full text-sm", className)}
    {...props}
  />
))
SidebarGroupContent.displayName = "SidebarGroupContent"

const SidebarMenu = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu"
    className={cn("flex w-full min-w-0 flex-col gap-1", className)}
    {...props}
  />
))
SidebarMenu.displayName = "SidebarMenu"

const SidebarMenuItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    data-sidebar="menu-item"
    className={cn("group/menu-item relative", className)}
    {...props}
  />
))
SidebarMenuItem.displayName = "SidebarMenuItem"

const sidebarMenuButtonVariants = cva(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline:
          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const SidebarMenuButton = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    isActive?: boolean
    tooltip?: string | React.ComponentProps<typeof TooltipContent>
  } & VariantProps<typeof sidebarMenuButtonVariants>
>(
  (
    {
      asChild = false,
      isActive = false,
      variant = "default",
      size = "default",
      tooltip,
      className,
      ...props
    },
    ref
  ) => {
    const Comp = asChild ? Slot : "button"
    const { isMobile, state } = useSidebar()

    const button = (
      <Comp
        ref={ref}
        data-sidebar="menu-button"
        data-size={size}
        data-active={isActive}
        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
        {...props}
      />
    )

    if (!tooltip) {
      return button
    }

    if (typeof tooltip === "string") {
      tooltip = {
        children: tooltip,
      }
    }

    return (
      <Tooltip>
        <TooltipTrigger asChild>{button}</TooltipTrigger>
        <TooltipContent
          side="right"
          align="center"
          hidden={state !== "collapsed" || isMobile}
          {...tooltip}
        />
      </Tooltip>
    )
  }
)
SidebarMenuButton.displayName = "SidebarMenuButton"

const SidebarMenuAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    showOnHover?: boolean
  }
>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-action"
      className={cn(
        "absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
          "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuAction.displayName = "SidebarMenuAction"

const SidebarMenuBadge = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="menu-badge"
    className={cn(
      "pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground",
      "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
      "peer-data-[size=sm]/menu-button:top-1",
      "peer-data-[size=default]/menu-button:top-1.5",
      "peer-data-[size=lg]/menu-button:top-2.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuBadge.displayName = "SidebarMenuBadge"

const SidebarMenuSkeleton = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    showIcon?: boolean
  }
>(({ className, showIcon = false, ...props }, ref) => {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`
  }, [])

  return (
    <div
      ref={ref}
      data-sidebar="menu-skeleton"
      className={cn("flex h-8 items-center gap-2 rounded-md px-2", className)}
      {...props}
    >
      {showIcon && (
        <Skeleton
          className="size-4 rounded-md"
          data-sidebar="menu-skeleton-icon"
        />
      )}
      <Skeleton
        className="h-4 max-w-[--skeleton-width] flex-1"
        data-sidebar="menu-skeleton-text"
        style={
          {
            "--skeleton-width": width,
          } as React.CSSProperties
        }
      />
    </div>
  )
})
SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton"

const SidebarMenuSub = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu-sub"
    className={cn(
      "mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuSub.displayName = "SidebarMenuSub"

const SidebarMenuSubItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ ...props }, ref) => <li ref={ref} {...props} />)
SidebarMenuSubItem.displayName = "SidebarMenuSubItem"

const SidebarMenuSubButton = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentProps<"a"> & {
    asChild?: boolean
    size?: "sm" | "md"
    isActive?: boolean
  }
>(({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        "flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground",
        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
        size === "sm" && "text-xs",
        size === "md" && "text-sm",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuSubButton.displayName = "SidebarMenuSubButton"

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
}
</file>

<file path="client/src/components/ui/skeleton.tsx">
import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-muted", className)}
      {...props}
    />
  )
}

export { Skeleton }
</file>

<file path="client/src/components/ui/slider.tsx">
import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex w-full touch-none select-none items-center",
      className
    )}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }
</file>

<file path="client/src/components/ui/switch.tsx">
import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }
</file>

<file path="client/src/components/ui/table.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}
</file>

<file path="client/src/components/ui/tabs.tsx">
import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }
</file>

<file path="client/src/components/ui/textarea.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Textarea = React.forwardRef<
  HTMLTextAreaElement,
  React.ComponentProps<"textarea">
>(({ className, ...props }, ref) => {
  return (
    <textarea
      className={cn(
        "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      )}
      ref={ref}
      {...props}
    />
  )
})
Textarea.displayName = "Textarea"

export { Textarea }
</file>

<file path="client/src/components/ui/toast.tsx">
import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}
</file>

<file path="client/src/components/ui/toaster.tsx">
import { useToast } from "@/hooks/use-toast"
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}
</file>

<file path="client/src/components/ui/toggle-group.tsx">
"use client"

import * as React from "react"
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group"
import { type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"
import { toggleVariants } from "@/components/ui/toggle"

const ToggleGroupContext = React.createContext<
  VariantProps<typeof toggleVariants>
>({
  size: "default",
  variant: "default",
})

const ToggleGroup = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, children, ...props }, ref) => (
  <ToggleGroupPrimitive.Root
    ref={ref}
    className={cn("flex items-center justify-center gap-1", className)}
    {...props}
  >
    <ToggleGroupContext.Provider value={{ variant, size }}>
      {children}
    </ToggleGroupContext.Provider>
  </ToggleGroupPrimitive.Root>
))

ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName

const ToggleGroupItem = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &
    VariantProps<typeof toggleVariants>
>(({ className, children, variant, size, ...props }, ref) => {
  const context = React.useContext(ToggleGroupContext)

  return (
    <ToggleGroupPrimitive.Item
      ref={ref}
      className={cn(
        toggleVariants({
          variant: context.variant || variant,
          size: context.size || size,
        }),
        className
      )}
      {...props}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  )
})

ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName

export { ToggleGroup, ToggleGroupItem }
</file>

<file path="client/src/components/ui/toggle.tsx">
import * as React from "react"
import * as TogglePrimitive from "@radix-ui/react-toggle"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const toggleVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline:
          "border border-input bg-transparent hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-10 px-3 min-w-10",
        sm: "h-9 px-2.5 min-w-9",
        lg: "h-11 px-5 min-w-11",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Toggle = React.forwardRef<
  React.ElementRef<typeof TogglePrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    className={cn(toggleVariants({ variant, size, className }))}
    {...props}
  />
))

Toggle.displayName = TogglePrimitive.Root.displayName

export { Toggle, toggleVariants }
</file>

<file path="client/src/components/ui/tooltip.tsx">
"use client"

import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]",
      className
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }
</file>

<file path="client/src/components/ColorPaletteCustomizer.tsx">
import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { 
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from '@/components/ui/dialog';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from '@/components/ui/tooltip';
import { Paintbrush, Check, Undo2 } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

// Define preset color themes
const colorPresets = {
  teal: {
    primary: '#285161',
    secondary: '#FFC107',
    accent: '#10B981',
  },
  purple: {
    primary: '#7C3AED',
    secondary: '#FFC107',
    accent: '#10B981',
  },
  blue: {
    primary: '#2563EB',
    secondary: '#F59E0B',
    accent: '#10B981',
  },
  green: {
    primary: '#047857',
    secondary: '#F59E0B',
    accent: '#6366F1',
  },
  red: {
    primary: '#B91C1C',
    secondary: '#FBBF24',
    accent: '#06B6D4',
  },
};

// Convert hex to HSL for CSS variables
function hexToHSL(hex: string) {
  // Remove the # if present
  hex = hex.replace(/^#/, '');
  
  // Parse the hex values
  let r = parseInt(hex.substring(0, 2), 16) / 255;
  let g = parseInt(hex.substring(2, 4), 16) / 255;
  let b = parseInt(hex.substring(4, 6), 16) / 255;
  
  // Find min and max values
  const max = Math.max(r, g, b);
  const min = Math.min(r, g, b);
  
  // Calculate lightness
  let l = (max + min) / 2;
  
  let h = 0;
  let s = 0;
  
  if (max !== min) {
    // Calculate saturation
    s = l > 0.5 ? (max - min) / (2 - max - min) : (max - min) / (max + min);
    
    // Calculate hue
    if (max === r) {
      h = (g - b) / (max - min) + (g < b ? 6 : 0);
    } else if (max === g) {
      h = (b - r) / (max - min) + 2;
    } else {
      h = (r - g) / (max - min) + 4;
    }
    h = h * 60;
  }
  
  // Round values
  h = Math.round(h);
  s = Math.round(s * 100);
  l = Math.round(l * 100);
  
  return { h, s, l };
}

// Interface for our color palette
interface ColorPalette {
  primary: string;
  secondary: string;
  accent: string;
}

export default function ColorPaletteCustomizer() {
  const { toast } = useToast();
  // Get stored colors from localStorage or use defaults
  const storedColors = localStorage.getItem('tvtantrumColorPalette');
  
  const [isOpen, setIsOpen] = useState(false);
  const [selectedTab, setSelectedTab] = useState('presets');
  const [selectedPreset, setSelectedPreset] = useState<string | null>(null);
  const [colorPalette, setColorPalette] = useState<ColorPalette>(
    storedColors 
      ? JSON.parse(storedColors) 
      : {
          primary: '#285161',   // Default teal
          secondary: '#FFC107', // Default yellow/gold
          accent: '#10B981',    // Default green
        }
  );
  
  // Apply colors to CSS variables
  const applyColorPalette = (palette: ColorPalette) => {
    // Convert HEX to HSL for CSS variables
    const primaryHSL = hexToHSL(palette.primary);
    const secondaryHSL = hexToHSL(palette.secondary);
    const accentHSL = hexToHSL(palette.accent);
    
    // Apply to CSS variables
    document.documentElement.style.setProperty('--primary', `${primaryHSL.h} ${primaryHSL.s}% ${primaryHSL.l}%`);
    document.documentElement.style.setProperty('--secondary', `${secondaryHSL.h} ${secondaryHSL.s}% ${secondaryHSL.l}%`);
    document.documentElement.style.setProperty('--accent', `${accentHSL.h} ${accentHSL.s}% ${accentHSL.l}%`);
    document.documentElement.style.setProperty('--chart-1', `${primaryHSL.h} ${primaryHSL.s}% ${primaryHSL.l}%`);
    
    // Save to localStorage
    localStorage.setItem('tvtantrumColorPalette', JSON.stringify(palette));
  };
  
  // Apply colors on component mount
  useEffect(() => {
    applyColorPalette(colorPalette);
  }, []);
  
  // Handle preset selection
  const selectPreset = (presetName: string) => {
    setSelectedPreset(presetName);
    const newPalette = colorPresets[presetName as keyof typeof colorPresets];
    setColorPalette(newPalette);
  };
  
  // Handle custom color change
  const handleColorChange = (colorType: keyof ColorPalette, value: string) => {
    setSelectedPreset(null); // Clear preset selection when custom colors are used
    setColorPalette(prev => ({
      ...prev,
      [colorType]: value
    }));
  };
  
  // Apply the selected colors
  const applyColors = () => {
    applyColorPalette(colorPalette);
    setIsOpen(false);
    
    toast({
      title: "Colors updated!",
      description: "Your custom color palette has been applied.",
    });
  };
  
  // Reset to default colors
  const resetToDefault = () => {
    const defaultPalette = colorPresets.teal;
    setColorPalette(defaultPalette);
    setSelectedPreset('teal');
    
    // This will update the preview, but not apply until "Apply" is clicked
  };
  
  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <TooltipProvider>
        <Tooltip>
          <TooltipTrigger asChild>
            <Button 
              variant="outline" 
              size="icon" 
              onClick={() => setIsOpen(true)}
              className="fixed bottom-4 right-4 rounded-full shadow-lg z-50"
            >
              <Paintbrush className="h-5 w-5" />
            </Button>
          </TooltipTrigger>
          <TooltipContent>
            <p>Customize Colors</p>
          </TooltipContent>
        </Tooltip>
      </TooltipProvider>
      
      <DialogContent className="sm:max-w-md">
        <DialogHeader>
          <DialogTitle>Customize Website Colors</DialogTitle>
          <DialogDescription>
            Personalize the website's color scheme to suit your preferences.
          </DialogDescription>
        </DialogHeader>
        
        <Tabs value={selectedTab} onValueChange={setSelectedTab} className="mt-4">
          <TabsList className="grid w-full grid-cols-2">
            <TabsTrigger value="presets">Color Presets</TabsTrigger>
            <TabsTrigger value="custom">Custom Colors</TabsTrigger>
          </TabsList>
          
          <TabsContent value="presets" className="py-4">
            <div className="grid grid-cols-3 gap-3">
              {Object.entries(colorPresets).map(([name, colors]) => (
                <button
                  key={name}
                  className={`relative flex flex-col items-center p-2 rounded-md transition-all ${
                    selectedPreset === name ? 'ring-2 ring-primary' : 'hover:bg-gray-100'
                  }`}
                  onClick={() => selectPreset(name)}
                >
                  <div className="flex gap-1 mb-2">
                    <div 
                      className="w-5 h-5 rounded-full" 
                      style={{ backgroundColor: colors.primary }}
                    />
                    <div 
                      className="w-5 h-5 rounded-full" 
                      style={{ backgroundColor: colors.secondary }}
                    />
                    <div 
                      className="w-5 h-5 rounded-full" 
                      style={{ backgroundColor: colors.accent }}
                    />
                  </div>
                  <span className="text-xs capitalize font-bold">{name}</span>
                  {selectedPreset === name && (
                    <div className="absolute top-1 right-1">
                      <Check className="h-3 w-3 text-primary" />
                    </div>
                  )}
                </button>
              ))}
            </div>
          </TabsContent>
          
          <TabsContent value="custom" className="py-4">
            <div className="space-y-4">
              <div className="space-y-2">
                <Label htmlFor="primary-color">Primary Color</Label>
                <div className="flex items-center gap-2">
                  <div 
                    className="w-8 h-8 rounded-md" 
                    style={{ backgroundColor: colorPalette.primary }}
                  />
                  <Input
                    id="primary-color"
                    type="text"
                    value={colorPalette.primary}
                    onChange={(e) => handleColorChange('primary', e.target.value)}
                    placeholder="#285161"
                  />
                  <Input 
                    type="color"
                    value={colorPalette.primary}
                    onChange={(e) => handleColorChange('primary', e.target.value)}
                    className="w-10 h-10 p-0 overflow-hidden"
                  />
                </div>
              </div>
              
              <div className="space-y-2">
                <Label htmlFor="secondary-color">Secondary Color</Label>
                <div className="flex items-center gap-2">
                  <div 
                    className="w-8 h-8 rounded-md" 
                    style={{ backgroundColor: colorPalette.secondary }}
                  />
                  <Input
                    id="secondary-color"
                    type="text"
                    value={colorPalette.secondary}
                    onChange={(e) => handleColorChange('secondary', e.target.value)}
                    placeholder="#FFC107"
                  />
                  <Input 
                    type="color"
                    value={colorPalette.secondary}
                    onChange={(e) => handleColorChange('secondary', e.target.value)}
                    className="w-10 h-10 p-0 overflow-hidden"
                  />
                </div>
              </div>
              
              <div className="space-y-2">
                <Label htmlFor="accent-color">Accent Color</Label>
                <div className="flex items-center gap-2">
                  <div 
                    className="w-8 h-8 rounded-md" 
                    style={{ backgroundColor: colorPalette.accent }}
                  />
                  <Input
                    id="accent-color"
                    type="text"
                    value={colorPalette.accent}
                    onChange={(e) => handleColorChange('accent', e.target.value)}
                    placeholder="#10B981"
                  />
                  <Input 
                    type="color"
                    value={colorPalette.accent}
                    onChange={(e) => handleColorChange('accent', e.target.value)}
                    className="w-10 h-10 p-0 overflow-hidden"
                  />
                </div>
              </div>
            </div>
          </TabsContent>
        </Tabs>
        
        <div className="mt-4 p-4 bg-gray-50 rounded-md">
          <h4 className="font-medium mb-2">Preview</h4>
          <div className="flex gap-2">
            <div className="flex-1 p-2 rounded-md text-white text-center font-medium" style={{ backgroundColor: colorPalette.primary }}>Primary</div>
            <div className="flex-1 p-2 rounded-md text-white text-center font-medium" style={{ backgroundColor: colorPalette.secondary }}>Secondary</div>
            <div className="flex-1 p-2 rounded-md text-white text-center font-medium" style={{ backgroundColor: colorPalette.accent }}>Accent</div>
          </div>
        </div>
        
        <DialogFooter className="flex justify-between items-center mt-4">
          <Button
            type="button"
            variant="outline"
            onClick={resetToDefault}
            className="gap-1"
          >
            <Undo2 className="h-4 w-4" /> Reset
          </Button>
          <div className="flex gap-2">
            <Button type="button" variant="outline" onClick={() => setIsOpen(false)}>
              Cancel
            </Button>
            <Button type="button" onClick={applyColors}>
              Apply Colors
            </Button>
          </div>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}
</file>

<file path="client/src/components/GhlScriptLoader.tsx">
import { useEffect, useRef } from 'react';

export default function GhlScriptLoader() {
  const scriptLoaded = useRef(false);
  
  useEffect(() => {
    if (scriptLoaded.current) return;
    
    const script = document.createElement('script');
    script.src = 'https://link.msgsndr.com/js/form_embed.js';
    script.async = true;
    script.onload = () => {
      scriptLoaded.current = true;
      
      // Re-initialize the form if needed
      if (window.ghl && window.ghl.loadEmbed) {
        window.ghl.loadEmbed();
      }
    };
    
    document.body.appendChild(script);
    
    return () => {
      document.body.removeChild(script);
    };
  }, []);
  
  return null;
}

// Add this to global.d.ts or a similar file
declare global {
  interface Window {
    ghl?: {
      loadEmbed: () => void;
      [key: string]: any;
    };
  }
}
</file>

<file path="client/src/components/RatingBar.tsx">
interface RatingBarProps {
  value: number;
  max: number;
  colorClass?: string;
  height?: string;
}

export default function RatingBar({ 
  value, 
  max, 
  colorClass = "bg-primary", 
  height = "h-2" 
}: RatingBarProps) {
  const percentage = (value / max) * 100;
  
  return (
    <div className={`w-24 ${height} bg-gray-200 rounded-full overflow-hidden`}>
      <div 
        className={`h-full ${colorClass} rounded-full`} 
        style={{ width: `${percentage}%` }}
      ></div>
    </div>
  );
}
</file>

<file path="client/src/components/ShowCard.tsx">
import { useState, useEffect } from "react";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import RatingBar from "@/components/RatingBar";
import { TvShow } from "@shared/schema";
import { getStimulationScoreColor } from "@/lib/showUtils";
import { useAuth } from "@/hooks/use-auth";
import { Heart } from "lucide-react";
import { useLocation } from "wouter";
import { useToast } from "@/hooks/use-toast";

interface ShowCardProps {
  show: TvShow;
  viewMode: "grid" | "list";
  onClick: () => void;
  isMobile?: boolean;
}

export default function ShowCard({ show, viewMode, onClick, isMobile = false }: ShowCardProps) {
  const [isFavorite, setIsFavorite] = useState(false);
  const { user, toggleFavorite: toggleFav } = useAuth();
  
  // Check if show is in favorites when component mounts or user changes
  useEffect(() => {
    const checkFavoriteStatus = async () => {
      if (user && show.id) {
        try {
          const isFav = await fetch(`/api/favorites/${show.id}`)
            .then(res => res.json())
            .then(data => data.isFavorite);
          setIsFavorite(isFav);
        } catch (error) {
          console.error("Failed to check favorite status:", error);
        }
      }
    };
    
    checkFavoriteStatus();
  }, [user, show.id]);
  
  const [, navigate] = useLocation();
  const { toast } = useToast();
  
  const toggleFavorite = (e: React.MouseEvent) => {
    e.stopPropagation();
    
    // Check if user is logged in
    if (!user) {
      toast({
        title: "Authentication required",
        description: "Please log in or register to save shows to your favorites.",
        variant: "default",
      });
      navigate("/auth");
      return;
    }
    
    // Use the auth context toggle favorite function
    toggleFav(show.id).then(() => {
      // Update local state (optimistic update)
      setIsFavorite(!isFavorite);
      
      toast({
        title: isFavorite ? "Removed from favorites" : "Added to favorites",
        description: isFavorite ? `${show.name} has been removed from your favorites.` : `${show.name} has been added to your favorites.`,
        variant: "default",
      });
    }).catch(error => {
      toast({
        title: "Error",
        description: "There was an error updating your favorites. Please try again.",
        variant: "destructive",
      });
      console.error("Error toggling favorite:", error);
    });
  };
  
  // Format release year range
  const releaseYears = show.releaseYear ? (
    show.endYear && show.endYear !== show.releaseYear 
      ? `(${show.releaseYear}-${show.endYear})` 
      : `(${show.releaseYear})`
  ) : '';
  
  // Theme colors based on categories
  const getThemeColor = (theme: string) => {
    const lowerTheme = theme.toLowerCase();
    if (lowerTheme.includes('friendship')) return 'bg-cyan-100 text-cyan-800';
    if (lowerTheme.includes('problem solving')) return 'bg-green-100 text-green-800';
    if (lowerTheme.includes('emotional intelligence')) return 'bg-rose-100 text-rose-800';
    if (lowerTheme.includes('creativity') || lowerTheme.includes('imagination')) return 'bg-purple-100 text-purple-800';
    if (lowerTheme.includes('adventure')) return 'bg-amber-100 text-amber-800';
    if (lowerTheme.includes('science') || lowerTheme.includes('stem')) return 'bg-sky-100 text-sky-800';
    if (lowerTheme.includes('nature')) return 'bg-emerald-100 text-emerald-800';
    if (lowerTheme.includes('mechanic') || lowerTheme.includes('engineering')) return 'bg-orange-100 text-orange-800';
    if (lowerTheme.includes('cultural') || lowerTheme.includes('social')) return 'bg-pink-100 text-pink-800';
    if (lowerTheme.includes('entertainment')) return 'bg-indigo-100 text-indigo-800';
    return 'bg-gray-100 text-gray-800';
  };
  
  // Get stimulation score colors based on index
  const getStimulationDotColor = (index: number) => {
    // Match the colors from details page
    const bgColors = [
      'bg-green-500',    // green for 1
      'bg-yellow-500',   // yellow for 2
      'bg-orange-500',   // orange for 3
      'bg-orange-600',   // dark orange for 4
      'bg-red-500'       // red for 5
    ];
    
    const borderColors = [
      'border-green-500',    // green for 1
      'border-yellow-500',   // yellow for 2
      'border-orange-500',   // orange for 3
      'border-orange-600',   // dark orange for 4
      'border-red-500'       // red for 5
    ];
    
    return { bgColor: bgColors[index], borderColor: borderColors[index] };
  };
  
  // Render stimulation score dots
  const renderStimulationDots = () => {
    const dots = [];
    const score = show.stimulationScore;
    
    for (let i = 0; i < 5; i++) {
      const { bgColor, borderColor } = getStimulationDotColor(i);
      dots.push(
        <div 
          key={i} 
          className={`w-3 h-3 rounded-full mx-0.5 ${
            // Active dots show their own color
            i < score 
              ? bgColor 
              // Inactive dots are outlined with their corresponding color
              : `border-2 ${borderColor} bg-white`
          }`} 
        />
      );
    }
    return dots;
  };
  
  // Get the stimulation score text representation
  const getStimulationText = (score: number) => {
    return score === 1 ? 'Low' : 
           score === 2 ? 'Low-Medium' : 
           score === 3 ? 'Medium' : 
           score === 4 ? 'Medium-High' : 
           'High';
  };
  
  // Format the stimulation score text (used for circular badge in mobile view)
  const getStimulationScoreText = (score: number) => {
    return `${score}/5`;
  };
  
  // Get color for circular stimulation score
  const getStimulationCircleColor = (score: number) => {
    if (score <= 1) return 'border-green-500 text-green-500';
    if (score <= 2) return 'border-green-400 text-green-500';
    if (score <= 3) return 'border-yellow-500 text-yellow-600';
    if (score <= 4) return 'border-orange-500 text-orange-600';
    return 'border-red-500 text-red-600';
  };

  // Mobile portrait style card - clean design as in screenshot
  if (isMobile && viewMode === "grid") {
    const stimulationLabel = getStimulationText(show.stimulationScore);
    
    return (
      <Card 
        className="bg-white rounded-lg shadow-sm overflow-hidden cursor-pointer h-full flex flex-col" 
        onClick={() => {
          // Scroll to top before triggering the onClick action
          window.scrollTo(0, 0);
          onClick();
        }}
      >
        {/* Image */}
        <div className="relative">
          {show.imageUrl ? (
            <div className="w-full aspect-[2/3] bg-gray-100 overflow-hidden">
              <img 
                className="w-full h-full object-cover"
                src={show.imageUrl}
                alt={show.name}
                style={{ objectPosition: 'center top' }}
              />
            </div>
          ) : (
            <div className="w-full aspect-[2/3] bg-gray-200 flex items-center justify-center">
              <i className="fas fa-tv text-gray-400 text-3xl"></i>
            </div>
          )}
          
          {/* Favorite button */}
          <Button 
            variant="ghost" 
            size="sm"
            className={`absolute top-1 right-1 p-1 bg-black/30 text-white rounded-full hover:bg-black/50 h-7 w-7 flex items-center justify-center`}
            onClick={(e) => {
              e.stopPropagation();
              toggleFavorite(e);
            }}
          >
            <Heart className={`w-4 h-4 ${isFavorite ? 'fill-red-500 text-red-500' : ''}`} />
          </Button>
        </div>
        
        <CardContent className="p-3 flex flex-col flex-grow">
          {/* Title with ellipsis */}
          <h3 className="text-sm font-bold line-clamp-1 mb-2">{show.name}</h3>
          
          {/* Age Badge */}
          <Badge variant="outline" className="bg-green-50 text-green-700 text-xs border-green-100 mb-2 w-fit">
            Ages {show.ageRange}
          </Badge>
          
          {/* Stimulation score dots and label */}
          <div className="mt-auto">
            <div className="flex flex-col items-center">
              <div className="flex items-center justify-center mb-1">
                {renderStimulationDots()}
              </div>
              <div className="text-xs text-gray-600 text-center">
                {stimulationLabel} Stimulation
              </div>
            </div>
          </div>
        </CardContent>
      </Card>
    );
  }

  // Original list view card
  if (viewMode === "list") {
    return (
      <Card 
        className="hover:shadow-lg transition-shadow duration-300 cursor-pointer" 
        onClick={() => {
          // Scroll to top before triggering the onClick action
          window.scrollTo(0, 0);
          onClick();
        }}>
        <div className="flex">
          <div className="flex-shrink-0 w-32 sm:w-48">
            {show.imageUrl ? (
              <div className="h-full w-full bg-gray-100 overflow-hidden flex items-center justify-center">
                <div className="w-full h-full relative">
                  <img 
                    className="absolute inset-0 w-full h-full object-cover"
                    src={show.imageUrl}
                    alt={show.name}
                    style={{ objectPosition: 'center top' }}
                  />
                </div>
              </div>
            ) : (
              <div className="h-full w-full bg-gray-200 flex items-center justify-center">
                <i className="fas fa-tv text-gray-400 text-2xl"></i>
              </div>
            )}
          </div>
          
          <CardContent className="p-4 w-full">
            <div className="flex justify-between items-start">
              <div>
                <h3 className="text-lg font-heading font-bold mb-1">{show.name}</h3>
                <div className="flex items-center flex-wrap gap-2 mb-2">
                  <Badge variant="outline" className="bg-green-100 text-green-800 text-xs font-medium">
                    Ages {show.ageRange}
                  </Badge>
                  {show.availableOn && show.availableOn.length > 0 && (
                    <Badge variant="outline" className="bg-blue-100 text-blue-800 text-xs font-medium">
                      {show.availableOn[0]}{show.availableOn.length > 1 ? "+" : ""}
                    </Badge>
                  )}
                </div>
                <p className="text-gray-600 text-sm mb-2 line-clamp-2">
                  {show.description}
                </p>
                
                {/* Theme tags */}
                {show.themes && show.themes.length > 0 && (
                  <div className="flex flex-wrap gap-1 mt-2 mb-3">
                    {show.themes.slice(0, 5).map((theme, index) => (
                      <Badge key={index} variant="outline" className={`${getThemeColor(theme)} text-xs`}>
                        {theme}
                      </Badge>
                    ))}
                    {show.themes.length > 5 && (
                      <Badge variant="outline" className="bg-gray-100 text-gray-800 text-xs">
                        +{show.themes.length - 5}
                      </Badge>
                    )}
                  </div>
                )}
              </div>
            </div>
            
            <div className="flex justify-between items-center mt-2">
              <div className="flex items-center">
                <div className="flex items-center mr-2">
                  {renderStimulationDots()}
                </div>
                <span className="text-sm text-gray-600">
                  {getStimulationText(show.stimulationScore)} Stimulation
                </span>
              </div>
              
              <div className="flex items-center space-x-2">
                <Button 
                  variant="ghost" 
                  size="sm"
                  className={`${isFavorite ? 'text-red-500' : 'text-gray-400 hover:text-red-500'}`}
                  onClick={toggleFavorite}
                >
                  <Heart className={`w-4 h-4 mr-1 ${isFavorite ? 'fill-red-500' : ''}`} />
                  {isFavorite ? 'Saved' : 'Save'}
                </Button>
                <Button 
                  variant="default" 
                  size="sm" 
                  className="bg-secondary hover:bg-secondary/90 text-white"
                  style={{fontWeight: 'bold'}}
                >
                  Learn More
                </Button>
              </div>
            </div>
          </CardContent>
        </div>
      </Card>
    );
  }
  
  // Default card view (grid) - smaller portrait style
  return (
    <Card 
      className="bg-white rounded-xl shadow-md overflow-hidden hover:shadow-lg transition-shadow duration-300 cursor-pointer h-full flex flex-col" 
      onClick={() => {
        // Scroll to top before triggering the onClick action
        window.scrollTo(0, 0);
        onClick();
      }}>
      <div className="relative">
        {show.imageUrl ? (
          <div className="w-full aspect-[2/3] bg-gray-100 overflow-hidden flex items-center justify-center">
            <div className="w-full h-full relative">
              <img 
                className="absolute inset-0 w-full h-full object-cover"
                src={show.imageUrl}
                alt={show.name}
                style={{ objectPosition: 'center top' }}
              />
            </div>
          </div>
        ) : (
          <div className="w-full aspect-[2/3] bg-gray-200 flex items-center justify-center">
            <i className="fas fa-tv text-gray-400 text-4xl"></i>
          </div>
        )}
        
        {/* Favorite button overlay */}
        <Button 
          variant="ghost" 
          size="sm"
          className={`absolute top-1 right-1 p-0.5 bg-black/30 text-white rounded-full hover:bg-black/50 h-6 w-6 flex items-center justify-center`}
          onClick={(e) => {
            e.stopPropagation();
            toggleFavorite(e);
          }}
        >
          <Heart className={`w-3 h-3 ${isFavorite ? 'fill-white' : ''}`} />
        </Button>
      </div>
      
      <CardContent className="p-2 flex-grow flex flex-col">
        <div className="flex-grow space-y-1">
          {/* Title and age */}
          <div>
            <h3 className="text-sm font-semibold line-clamp-1">{show.name}</h3>
            <div className="flex items-center gap-1 mt-0.5">
              <span className="text-xs text-gray-500">Ages {show.ageRange}</span>
            </div>
          </div>
          
          {/* Stimulation score indicator */}
          <div className="flex items-center gap-1">
            <div className="flex items-center scale-75">
              {renderStimulationDots()}
            </div>
            <span className="text-xs text-gray-600">
              {getStimulationText(show.stimulationScore)}
            </span>
          </div>
          
          {/* Theme tags - limited to 1 for smaller cards */}
          {show.themes && show.themes.length > 0 && (
            <div className="flex flex-wrap gap-1">
              {show.themes.slice(0, 1).map((theme, index) => (
                <Badge key={index} variant="outline" className={`${getThemeColor(theme)} text-xs py-0 px-1.5`}>
                  {theme}
                </Badge>
              ))}
              {show.themes.length > 1 && (
                <Badge variant="outline" className="bg-gray-100 text-gray-600 text-xs py-0 px-1.5">
                  +{show.themes.length - 1}
                </Badge>
              )}
            </div>
          )}
        </div>
        
        {/* Learn More button */}
        <div className="mt-auto pt-1">
          <Button 
            variant="default" 
            size="sm" 
            className="w-full bg-secondary hover:bg-secondary/90 text-white text-xs py-0.5 h-7"
            style={{fontWeight: 'bold'}}
          >
            Learn More
          </Button>
        </div>
      </CardContent>
    </Card>
  );
}
</file>

<file path="client/src/components/ShowFilters.tsx">
import { useState, useEffect, useRef } from "react";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Checkbox } from "@/components/ui/checkbox";
import {
  Card,
  CardContent,
} from "@/components/ui/card";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Slider } from "@/components/ui/slider";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
} from "@/components/ui/command";
import { useQuery } from "@tanstack/react-query";
import { TvShow } from "@shared/schema";
import { Search, CheckIcon, X } from "lucide-react";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";

interface FiltersType {
  ageGroup?: string;
  ageRange?: {min: number, max: number};
  tantrumFactor?: string; // We'll continue using this field name for continuity, but it maps to stimulationScore
  sortBy?: string;
  search?: string;
  themes?: string[];
  interactionLevel?: string;
  stimulationScoreRange?: {min: number, max: number};
}

interface ShowFiltersProps {
  activeFilters: FiltersType;
  onFilterChange: (filters: FiltersType) => void;
  onClearFilters: () => void;
}

export default function ShowFilters({ activeFilters, onFilterChange, onClearFilters }: ShowFiltersProps) {
  const [filters, setFilters] = useState<FiltersType>(activeFilters);
  const [searchInput, setSearchInput] = useState(activeFilters.search || "");
  const [selectedThemes, setSelectedThemes] = useState<string[]>(activeFilters.themes || []);
  const [openAutoComplete, setOpenAutoComplete] = useState(false);
  
  // Fetch shows for autocomplete and theme analysis
  const { data: shows } = useQuery<TvShow[]>({
    queryKey: ['/api/shows'],
    staleTime: 300000, // 5 minutes
  });
  
  // Computed state for relevant secondary themes based on the primary theme
  const [relevantSecondaryThemes, setRelevantSecondaryThemes] = useState<string[]>([]);
  
  // Common themes from the database
  const commonThemes = [
    "Adventure",
    "African Kids tales",
    "Animals",
    "American Sign Language",
    "Animal Behavior",
    "Cause and Effect",
    "Conflict Resolution",
    "Creativity & Imagination",
    "Critical Thinking",
    "Cultural & Social",
    "Curiosity",
    "Dance",
    "Discovery",
    "Early Childhood experiences",
    "Educational",
    "Emotional Intelligence",
    "Engineering Concepts",
    "Entertainment",
    "Environmental Awareness",
    "Exercise",
    "Exploration",
    "Family Relationships",
    "Family Values",
    "Fantasy Elements",
    "Farm Life",
    "Friendship",
    "Global Thinking",
    "Healthy Eating",
    "Humor",
    "Language Learning",
    "Life Lessons",
    "Literacy",
    "Mechanics",
    "Motor Skills",
    "Music",
    "Nature",
    "Numeracy",
    "Outdoor Exploration",
    "Perseverance",
    "Positive Role Models",
    "Preschool-Basics",
    "Problem Solving",
    "Relatable Situations",
    "Repetitive Learning",
    "Safety",
    "Science",
    "Social-Emotional",
    "STEM",
    "Teamwork"
  ];
  
  // Update local state when props change
  useEffect(() => {
    setFilters(activeFilters);
    setSearchInput(activeFilters.search || "");
    setSelectedThemes(activeFilters.themes || []);
  }, [activeFilters]);
  
  // Update relevant secondary themes when shows data loads or selected themes change
  useEffect(() => {
    if (shows && selectedThemes.length > 0) {
      findRelevantSecondaryThemes(selectedThemes[0]);
    } else {
      // Reset if no primary theme is selected
      setRelevantSecondaryThemes([]);
    }
  }, [shows, selectedThemes[0]]);
  
  // Find relevant secondary themes based on shows that have the primary theme
  const findRelevantSecondaryThemes = (primaryTheme: string) => {
    if (!shows || !primaryTheme || primaryTheme === "any") {
      setRelevantSecondaryThemes([]);
      return;
    }

    // Find all shows that have the primary theme
    const showsWithPrimaryTheme = shows.filter(show => 
      show.themes && Array.isArray(show.themes) && show.themes.includes(primaryTheme)
    );

    // Count occurrences of each secondary theme
    const themeCounts: Record<string, number> = {};
    
    showsWithPrimaryTheme.forEach(show => {
      if (show.themes && Array.isArray(show.themes)) {
        show.themes.forEach(theme => {
          // Skip the primary theme
          if (theme !== primaryTheme) {
            themeCounts[theme] = (themeCounts[theme] || 0) + 1;
          }
        });
      }
    });

    // Sort themes by frequency (most frequent first)
    const sortedThemes = Object.entries(themeCounts)
      .sort((a, b) => b[1] - a[1])  // Sort by count
      .map(([theme]) => theme);     // Take just the theme name

    // If we found relevant themes, use them; otherwise fall back to all themes
    const relevantThemes = sortedThemes.length > 0 
      ? sortedThemes 
      : commonThemes.filter(theme => theme !== primaryTheme);
    
    setRelevantSecondaryThemes(relevantThemes);
  };
  
  const handleFilterChange = (key: keyof FiltersType, value: any) => {
    const updatedFilters = { ...filters, [key]: value };
    setFilters(updatedFilters);
  };
  
  const handleThemeToggle = (theme: string) => {
    let newThemes: string[];
    
    if (selectedThemes.includes(theme)) {
      newThemes = selectedThemes.filter(t => t !== theme);
    } else {
      newThemes = [...selectedThemes, theme];
    }
    
    setSelectedThemes(newThemes);
    handleFilterChange('themes', newThemes.length ? newThemes : undefined);
  };
  
  const handleApplyFilters = () => {
    // Include search term from input
    onFilterChange({ 
      ...filters, 
      search: searchInput,
      themes: selectedThemes.length ? selectedThemes : undefined
    });
  };
  
  const removeFilter = (key: keyof FiltersType) => {
    const updatedFilters = { ...filters };
    delete updatedFilters[key];
    
    // Also clear search input if removing search filter
    if (key === 'search') {
      setSearchInput("");
    }
    
    // Clear selected themes if removing themes filter
    if (key === 'themes') {
      setSelectedThemes([]);
    }
    
    onFilterChange(updatedFilters);
  };
  
  // Get human-readable filter labels
  const getFilterLabel = (key: keyof FiltersType, value: any) => {
    switch (key) {
      case 'ageGroup':
        return `Age: ${value}`;
      case 'ageRange':
        const ageRange = value as {min: number, max: number};
        if (ageRange.min === 0 && ageRange.max === 13) {
          return 'Age: Any';
        } else if (ageRange.max === 13) {
          return `Age: ${ageRange.min}+`;
        } else {
          return `Age: ${ageRange.min}-${ageRange.max}`;
        }
      case 'tantrumFactor':
        switch (value) {
          case 'low': return 'Low Stimulation (1)';
          case 'low-medium': return 'Low-Medium Stimulation (2)';
          case 'medium': return 'Medium Stimulation (3)';
          case 'medium-high': return 'Medium-High Stimulation (4)';
          case 'high': return 'High Stimulation (5)';
          default: return value;
        }
      case 'interactionLevel':
        return `Interaction Level: ${value}`;
      case 'stimulationScoreRange':
        const range = value as {min: number, max: number};
        if (range.min === range.max) {
          return `Stimulation Score: ${range.min}`;
        } else {
          return `Stimulation Score: ${range.min}-${range.max}`;
        }
      case 'sortBy':
        switch (value) {
          case 'name': return 'Sorted by Name';
          case 'stimulation-score': return 'Sorted by Stimulation Score';
          case 'interactivity-level': return 'Sorted by Interactivity Level';
          case 'overall-rating': return 'Sorted by Rating';
          case 'popular': return 'Sorted by Popularity';
          default: return value;
        }
      case 'search':
        return `Search: "${value}"`;
      case 'themes':
        if (Array.isArray(value) && value.length === 1) {
          return `Theme: ${value[0]}`;
        } else if (Array.isArray(value) && value.length > 1) {
          return `Themes: ${value[0]} +${value.length - 1}`;
        }
        return 'Themes';
      default:
        return value;
    }
  };
  
  return (
    <Card className="mb-8 bg-white rounded-lg shadow">
      <CardContent className="p-6">
        <h2 className="text-xl font-heading font-bold mb-6">Filters</h2>
        
        <div className="space-y-6">
          {/* Search by show name with autocomplete */}
          <div>
            <Label htmlFor="show-name" className="block text-sm font-medium text-gray-700 mb-2">
              Show Name
            </Label>
            
            <form 
              onSubmit={(e) => {
                e.preventDefault();
                console.log('Search form submitted with term:', searchInput);
                handleFilterChange('search', searchInput);
                const updatedFilters = {
                  ...filters,
                  search: searchInput
                };
                console.log('Applying filters:', updatedFilters);
                onFilterChange(updatedFilters);
              }}
              className="flex"
            >
              <div className="relative flex-grow">
                <Search className="absolute left-2 top-2.5 h-4 w-4 text-gray-500" />
                <Input
                  id="show-name"
                  placeholder="Enter show title..."
                  value={searchInput}
                  onChange={(e) => {
                    setSearchInput(e.target.value);
                  }}
                  className="w-full pl-8 rounded-r-none"
                />
              </div>
              <Button 
                type="submit" 
                className="rounded-l-none"
              >
                Search
              </Button>
            </form>
              
            {/* Show matching results based on searchInput */}
            {searchInput.trim().length > 0 && (
              <div className="relative mt-1">
                <div className="absolute z-10 mt-1 w-full bg-white rounded-md shadow-lg max-h-60 overflow-auto border border-gray-200">
                  <div className="py-1">
                    {shows
                      ?.filter(show => {
                        // Skip if no search input
                        if (!searchInput.trim()) return false;
                        
                        const searchLower = searchInput.toLowerCase().trim();
                        const nameLower = show.name.toLowerCase();
                        
                        // Direct match in name
                        if (nameLower.includes(searchLower)) return true;
                        
                        // Handle shows with year ranges (e.g., "Show Name 2018-present")
                        const nameWithoutYears = nameLower.replace(/\s+\d{4}(-\d{4}|-present)?/g, '');
                        if (nameWithoutYears.includes(searchLower)) return true;
                        
                        // Match any part of a word (for show names like "Blue's Clues")
                        const words = nameLower.split(/\s+/);
                        if (words.some(word => word.includes(searchLower))) return true;
                        
                        // Handle apostrophes and special characters
                        const simplifiedName = nameLower.replace(/[''\.]/g, '');
                        if (simplifiedName.includes(searchLower)) return true;
                        
                        return false;
                      })
                      .slice(0, 8)
                      .map(show => (
                        <div
                          key={show.id}
                          className="px-4 py-2 hover:bg-gray-100 cursor-pointer"
                          onClick={() => {
                            console.log('Selecting show from dropdown:', show.name);
                            setSearchInput(show.name);
                            handleFilterChange('search', show.name);
                            const updatedFilters = {
                              ...filters,
                              search: show.name
                            };
                            console.log('Applying updated filters from dropdown selection:', updatedFilters);
                            onFilterChange(updatedFilters);
                          }}
                        >
                          <div className="font-medium">{show.name}</div>
                          <div className="text-xs text-gray-500">
                            Ages: {show.ageRange || 'Unknown'} 
                            {show.releaseYear ? ` • (${show.releaseYear})` : ''}
                          </div>
                        </div>
                      ))
                    }
                    
                    {shows?.filter(show => {
                      const searchLower = searchInput.toLowerCase().trim();
                      const nameLower = show.name.toLowerCase();
                      
                      // Direct match
                      if (nameLower.includes(searchLower)) return true;
                      
                      // Without years
                      const nameWithoutYears = nameLower.replace(/\s+\d{4}(-\d{4}|-present)?/g, '');
                      if (nameWithoutYears.includes(searchLower)) return true;
                      
                      // Within words
                      const words = nameLower.split(/\s+/);
                      if (words.some(word => word.includes(searchLower))) return true;
                      
                      // Simplified name
                      const simplifiedName = nameLower.replace(/[''\.]/g, '');
                      if (simplifiedName.includes(searchLower)) return true;
                      
                      return false;
                    }).length === 0 && (
                      <div className="px-4 py-2 text-sm text-gray-500">
                        No shows match your search
                      </div>
                    )}
                  </div>
                </div>
              </div>
            )}
          </div>
          
          {/* Age Range - using separate min/max sliders */}
          <div>
            <Label className="block text-sm font-medium text-gray-700 mb-1">
              Age Range
            </Label>
            <div className="flex flex-col space-y-4">
              {/* Min slider */}
              <div>
                <div className="flex justify-between mb-1">
                  <span className="text-xs font-medium">Minimum: {filters.ageRange?.min || 0} years</span>
                </div>
                <div className="relative pt-1">
                  <input 
                    type="range" 
                    min="0" 
                    max="13" 
                    step="1" 
                    value={filters.ageRange?.min || 0}
                    onChange={(e) => {
                      const newMin = parseInt(e.target.value);
                      const currentMax = filters.ageRange?.max || 13;
                      handleFilterChange('ageRange', {
                        min: newMin,
                        max: Math.max(newMin, currentMax) // Ensure max is at least equal to min
                      });
                    }}
                    className="w-full appearance-none rounded-full h-2 bg-gray-200 outline-none accent-green-600" 
                  />
                </div>
                <div className="flex justify-between text-[10px] text-gray-600 mt-1">
                  <span>0</span>
                  <span>2</span>
                  <span>4</span>
                  <span>6</span>
                  <span>8</span>
                  <span>10</span>
                  <span>13</span>
                </div>
              </div>
              
              {/* Max slider */}
              <div>
                <div className="flex justify-between mb-1">
                  <span className="text-xs font-medium">Maximum: {filters.ageRange?.max === 13 ? '13+' : filters.ageRange?.max || 13} years</span>
                </div>
                <div className="relative pt-1">
                  <input 
                    type="range" 
                    min="0" 
                    max="13" 
                    step="1" 
                    value={filters.ageRange?.max || 13}
                    onChange={(e) => {
                      const newMax = parseInt(e.target.value);
                      const currentMin = filters.ageRange?.min || 0;
                      handleFilterChange('ageRange', {
                        min: Math.min(currentMin, newMax), // Ensure min is at most equal to max
                        max: newMax
                      });
                    }}
                    className="w-full appearance-none rounded-full h-2 bg-gray-200 outline-none accent-green-600" 
                  />
                </div>
                <div className="flex justify-between text-[10px] text-gray-600 mt-1">
                  <span>0</span>
                  <span>2</span>
                  <span>4</span>
                  <span>6</span>
                  <span>8</span>
                  <span>10</span>
                  <span>13+</span>
                </div>
              </div>
            </div>
          </div>
          
          {/* Themes dropdown */}
          <div>
            <Label className="block text-sm font-medium text-gray-700 mb-2">
              Primary Theme
            </Label>
            <Select
              value={selectedThemes.length ? selectedThemes[0] : "any"}
              onValueChange={(value) => {
                // Clear previous selections and set this as the only theme
                if (value && value !== "any") {
                  setSelectedThemes([value]);
                  handleFilterChange('themes', [value]);
                  // Immediately update relevant secondary themes
                  findRelevantSecondaryThemes(value);
                } else {
                  setSelectedThemes([]);
                  handleFilterChange('themes', undefined);
                  setRelevantSecondaryThemes([]);
                }
              }}
            >
              <SelectTrigger className="w-full">
                <SelectValue placeholder="Select a theme" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="any">Any Theme</SelectItem>
                {commonThemes.map((theme) => (
                  <SelectItem key={theme} value={theme}>
                    {theme}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
            
            {/* Secondary theme dropdown (only appears when primary theme is selected) */}
            {selectedThemes.length > 0 && (
              <div className="mt-4">
                <Label className="block text-sm font-medium text-gray-700 mb-2">
                  Secondary Theme (Optional)
                </Label>
                <Select
                  value={selectedThemes.length > 1 ? selectedThemes[1] : "none"}
                  onValueChange={(value) => {
                    if (value && value !== "none") {
                      // Add as second theme
                      const newThemes = [selectedThemes[0], value];
                      setSelectedThemes(newThemes);
                      handleFilterChange('themes', newThemes);
                    } else {
                      // Remove secondary theme
                      const newThemes = [selectedThemes[0]];
                      setSelectedThemes(newThemes);
                      handleFilterChange('themes', newThemes);
                    }
                  }}
                >
                  <SelectTrigger className="w-full">
                    <SelectValue placeholder="Select a secondary theme" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="none">No Secondary Theme</SelectItem>
                    {relevantSecondaryThemes.map((theme) => (
                        <SelectItem key={theme} value={theme}>
                          {theme}
                        </SelectItem>
                      ))
                    }
                  </SelectContent>
                </Select>
              </div>
            )}
          </div>
          
          {/* Interaction Level */}
          <div>
            <Label htmlFor="interaction-level" className="block text-sm font-medium text-gray-700 mb-1">
              Interaction Level
            </Label>
            <Select 
              value={filters.interactionLevel} 
              onValueChange={(value) => handleFilterChange('interactionLevel', value)}
            >
              <SelectTrigger id="interaction-level">
                <SelectValue placeholder="Any" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="Any">Any</SelectItem>
                <SelectItem value="Low">Low</SelectItem>
                <SelectItem value="Moderate-Low">Moderate-Low</SelectItem>
                <SelectItem value="Moderate">Moderate</SelectItem>
                <SelectItem value="Moderate-High">Moderate-High</SelectItem>
                <SelectItem value="High">High</SelectItem>
              </SelectContent>
            </Select>
          </div>
          
          {/* Sort By */}
          <div>
            <Label htmlFor="sort-by" className="block text-sm font-medium text-gray-700 mb-1">
              Sort By
            </Label>
            <Select 
              value={filters.sortBy} 
              onValueChange={(value) => handleFilterChange('sortBy', value)}
            >
              <SelectTrigger id="sort-by">
                <SelectValue placeholder="Name (A-Z)" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="name">Name (A-Z)</SelectItem>
                <SelectItem value="stimulation-score">Stimulation Score (Low to High)</SelectItem>
                <SelectItem value="interactivity-level">Interactivity Level (Low to High)</SelectItem>
                <SelectItem value="overall-rating">Rating (High to Low)</SelectItem>
                <SelectItem value="popular">Popular</SelectItem>
              </SelectContent>
            </Select>
          </div>
          
          {/* Stimulation Score Range - always visible */}
          <div>
            <Label className="block text-sm font-medium text-gray-700 mb-1">
              Stimulation Score Range
            </Label>
            <div className="flex flex-col space-y-4">
              {/* Min slider */}
              <div>
                <div className="flex justify-between mb-1">
                  <span className="text-xs font-medium">Minimum: {filters.stimulationScoreRange?.min || 1}</span>
                </div>
                <div className="relative pt-1">
                  <input 
                    type="range" 
                    min="1" 
                    max="5" 
                    step="1" 
                    value={filters.stimulationScoreRange?.min || 1}
                    onChange={(e) => {
                      const newMin = parseInt(e.target.value);
                      const currentMax = filters.stimulationScoreRange?.max || 5;
                      handleFilterChange('stimulationScoreRange', {
                        min: newMin,
                        max: Math.max(newMin, currentMax) // Ensure max is at least equal to min
                      });
                    }}
                    className="w-full appearance-none rounded-full h-2 bg-gray-200 outline-none accent-green-600" 
                  />
                </div>
                <div className="flex justify-between text-[10px] text-gray-600 mt-1">
                  <span>1</span>
                  <span>2</span>
                  <span>3</span>
                  <span>4</span>
                  <span>5</span>
                </div>
              </div>
              
              {/* Max slider */}
              <div>
                <div className="flex justify-between mb-1">
                  <span className="text-xs font-medium">Maximum: {filters.stimulationScoreRange?.max || 5}</span>
                </div>
                <div className="relative pt-1">
                  <input 
                    type="range" 
                    min="1" 
                    max="5" 
                    step="1" 
                    value={filters.stimulationScoreRange?.max || 5}
                    onChange={(e) => {
                      const newMax = parseInt(e.target.value);
                      const currentMin = filters.stimulationScoreRange?.min || 1;
                      handleFilterChange('stimulationScoreRange', {
                        min: Math.min(currentMin, newMax), // Ensure min is at most equal to max
                        max: newMax
                      });
                    }}
                    className="w-full appearance-none rounded-full h-2 bg-gray-200 outline-none accent-green-600" 
                  />
                </div>
                <div className="flex justify-between text-[10px] text-gray-600 mt-1">
                  <span>1</span>
                  <span>2</span>
                  <span>3</span>
                  <span>4</span>
                  <span>5</span>
                </div>
              </div>
            </div>
          </div>
          
          {/* Apply Filters and Reset */}
          <div className="space-y-2">
            <Button
              type="button"
              onClick={handleApplyFilters}
              className="w-full bg-secondary hover:bg-secondary/90"
              style={{fontWeight: 'bold'}}
            >
              Apply Filters
            </Button>
            {Object.keys(filters).length > 0 && (
              <Button 
                type="button" 
                variant="outline" 
                onClick={onClearFilters} 
                className="w-full"
              >
                Reset All Filters
              </Button>
            )}
          </div>
        </div>
        
        {/* Active Filters Display */}
        {Object.keys(activeFilters).length > 0 && (
          <div className="mt-4 flex flex-wrap gap-2 items-center">
            {Object.entries(activeFilters).map(([key, value]) => {
              if (!value || (Array.isArray(value) && value.length === 0)) return null;
              return (
                <Badge 
                  key={key} 
                  variant="secondary" 
                  className="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-primary-100 text-primary-800"
                >
                  {getFilterLabel(key as keyof FiltersType, value)}
                  <button 
                    type="button" 
                    className="ml-1 focus:outline-none"
                    onClick={() => removeFilter(key as keyof FiltersType)}
                  >
                    <X className="h-3.5 w-3.5 text-gray-500" />
                  </button>
                </Badge>
              );
            })}
          </div>
        )}
      </CardContent>
    </Card>
  );
}
</file>

<file path="client/src/hooks/use-mobile.tsx">
import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}
</file>

<file path="client/src/hooks/use-toast.ts">
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }
</file>

<file path="client/src/lib/protected-route.tsx">
import { useAuth } from "@/hooks/use-auth";
import { Loader2 } from "lucide-react";
import { Redirect, Route, useLocation } from "wouter";

export function ProtectedRoute({
  path,
  component: Component,
}: {
  path: string;
  component: () => React.JSX.Element;
}) {
  const { user, isLoading } = useAuth();
  const [location] = useLocation();

  if (isLoading) {
    return (
      <Route path={path}>
        <div className="flex items-center justify-center min-h-screen">
          <Loader2 className="h-8 w-8 animate-spin text-border" />
        </div>
      </Route>
    );
  }

  if (!user) {
    return (
      <Route path={path}>
        <Redirect to={`/auth?redirect=${encodeURIComponent(location)}`} />
      </Route>
    );
  }

  return <Route path={path} component={Component} />;
}
</file>

<file path="client/src/lib/showUtils.ts">
import { TvShow } from "@shared/schema";

/**
 * Returns a color class based on the stimulation score value
 * Lower stimulation score is better for calmness
 */
export function getStimulationScoreColor(value: number): string {
  if (value <= 2) return "green-rating";
  if (value <= 4) return "yellow-rating";
  return "red-rating";
}

/**
 * Returns a color class based on overall rating
 */
export function getPositiveRatingColor(value: number): string {
  if (value >= 4) return "purple-rating";
  if (value >= 3) return "yellow-rating";
  return "red-rating";
}

/**
 * Returns a text description for the stimulation score
 */
export function getStimulationScoreDescription(value: number): string {
  if (value === 1) {
    return "Low stimulation - calming content with gentle pacing.";
  } else if (value === 2) {
    return "Low-Medium stimulation - mostly calm content with occasional moderate energy.";
  } else if (value === 3) {
    return "Medium stimulation - balanced content with moderate energy.";
  } else if (value === 4) {
    return "Medium-High stimulation - moderately energetic content with some intense moments.";
  } else {
    return "High stimulation - energetic content that may be overstimulating for some children.";
  }
}

/**
 * Returns a description for interactivity level
 */
export function getInteractivityLevelDescription(value: string): string {
  switch (value) {
    case "Low":
      return "Minimal audience interaction, children mostly observe passively.";
    case "Moderate-Low":
      return "Some audience engagement, primarily through questions or simple responses.";
    case "Moderate":
      return "Balanced audience engagement with regular interaction throughout the show.";
    case "Moderate-High":
      return "Frequent audience engagement with multiple interactive elements.";
    case "High":
      return "Very interactive format that encourages active participation throughout.";
    default:
      return "Moderate level of interactivity.";
  }
}

/**
 * Returns a description for dialogue intensity
 */
export function getDialogueIntensityDescription(value: string): string {
  switch (value) {
    case "Low":
      return "Minimal dialogue, relies more on visuals and music.";
    case "Moderate-Low":
      return "Simple dialogue with plenty of pauses and visual storytelling.";
    case "Moderate":
      return "Balanced dialogue that's appropriate for the target age group.";
    case "Moderate-High":
      return "Conversation-heavy with more complex language patterns.";
    case "High":
      return "Very dialogue-rich content with complex vocabulary or frequent conversations.";
    default:
      return "Moderate level of dialogue.";
  }
}

/**
 * Returns a description for sound effects level
 */
export function getSoundEffectsLevelDescription(value: string): string {
  switch (value) {
    case "Low":
      return "Minimal sound effects, creating a calm viewing experience.";
    case "Moderate-Low":
      return "Gentle sound effects that enhance the content without overwhelming.";
    case "Moderate":
      return "Balanced use of sound effects to support the storytelling.";
    case "Moderate-High":
      return "Frequent sound effects that play a significant role in the experience.";
    case "High":
      return "Sound effect-heavy show with prominent audio elements throughout.";
    default:
      return "Moderate level of sound effects.";
  }
}

/**
 * Generate a default placeholder image URL for a show
 */
export function getDefaultShowImage(showName: string): string {
  // This function would typically return a real image URL
  // But since we can't use images, returning empty string
  return "";
}

/**
 * Filter shows based on provided filters
 */
export function filterShows(
  shows: TvShow[],
  filters: {
    ageGroup?: string;
    tantrumFactor?: string;
    search?: string;
    themes?: string[];
    interactionLevel?: string;
    stimulationScoreRange?: {min: number, max: number};
  }
): TvShow[] {
  return shows.filter(show => {
    // Filter by age group
    if (filters.ageGroup && show.ageRange) {
      if (filters.ageGroup === 'Toddler' && !show.ageRange.match(/^[0-3]|toddler/i)) {
        return false;
      }
      if (filters.ageGroup === 'Preschool' && !show.ageRange.match(/^[2-5]|preschool/i)) {
        return false;
      }
      if (filters.ageGroup === 'School-Age' && !show.ageRange.match(/^[5-9]|school/i)) {
        return false;
      }
      if (filters.ageGroup === 'Tween' && !show.ageRange.match(/^[8-9]|10-1[2-3]|tween/i)) {
        return false;
      }
    }
    
    // Filter by tantrum factor (stimulation score)
    if (filters.tantrumFactor) {
      if (filters.tantrumFactor.toLowerCase() === 'low' && show.stimulationScore !== 1) {
        return false;
      }
      if (filters.tantrumFactor.toLowerCase() === 'low-medium' && show.stimulationScore !== 2) {
        return false;
      }
      if (filters.tantrumFactor.toLowerCase() === 'medium' && show.stimulationScore !== 3) {
        return false;
      }
      if (filters.tantrumFactor.toLowerCase() === 'medium-high' && show.stimulationScore !== 4) {
        return false;
      }
      if (filters.tantrumFactor.toLowerCase() === 'high' && show.stimulationScore !== 5) {
        return false;
      }
    }
    
    // Filter by themes
    if (filters.themes && filters.themes.length > 0) {
      if (!show.themes || show.themes.length === 0) {
        return false;
      }
      
      // Check if ALL selected themes are present in the show's themes
      const showThemesLower = show.themes.map(t => t.toLowerCase());
      if (!filters.themes.every(theme => showThemesLower.some(t => t.includes(theme.toLowerCase())))) {
        return false;
      }
    }
    
    // Filter by interactivity level
    if (filters.interactionLevel && show.interactivityLevel) {
      // Handle exact match or level-based match
      if (filters.interactionLevel === 'Low' && 
          !['Low', 'Limited', 'Minimal'].some(term => show.interactivityLevel?.includes(term))) {
        return false;
      }
      if (filters.interactionLevel === 'Moderate' && 
          !['Moderate', 'Medium', 'Some'].some(term => show.interactivityLevel?.includes(term))) {
        return false;
      }
      if (filters.interactionLevel === 'High' && 
          !['High', 'Heavy', 'Strong', 'Frequent'].some(term => show.interactivityLevel?.includes(term))) {
        return false;
      }
    }
    

    
    // Filter by stimulation score range
    if (filters.stimulationScoreRange && show.stimulationScore) {
      if (show.stimulationScore < filters.stimulationScoreRange.min || 
          show.stimulationScore > filters.stimulationScoreRange.max) {
        return false;
      }
    }
    
    // Search by show name or description
    if (filters.search && filters.search.trim()) {
      const searchTerm = filters.search.trim().toLowerCase();
      const showName = show.name.toLowerCase();
      const showDescription = (show.description || '').toLowerCase();

      // Check for exact match first - highest priority
      if (showName === searchTerm) {
        return true;
      }
      
      // Direct match in name or description
      if (showName.includes(searchTerm) || showDescription.includes(searchTerm)) {
        return true;
      }
      
      // Handle shows with year ranges (e.g., "Show Name 2018-present")
      const nameWithoutYears = showName.replace(/\s+\d{4}(-\d{4}|-present)?/g, '');
      if (nameWithoutYears.includes(searchTerm)) {
        return true;
      }
      
      // Match any part of a word (for show names like "Blue's Clues")
      const words = showName.split(/\s+/);
      if (words.some(word => word.includes(searchTerm))) {
        return true;
      }
      
      // Handle apostrophes and special characters
      const simplifiedName = showName.replace(/[''\.]/g, '');
      if (simplifiedName.includes(searchTerm)) {
        return true;
      }
      
      // Check themes for matches
      if (show.themes && show.themes.some(theme => theme.toLowerCase().includes(searchTerm))) {
        return true;
      }
      
      // If no match found, exclude this show
      return false;
    }
    
    return true;
  });
}

/**
 * Sort shows based on provided sort option
 */
export function sortShows(
  shows: TvShow[],
  sortBy?: string
): TvShow[] {
  if (!sortBy) return shows;
  
  return [...shows].sort((a, b) => {
    switch (sortBy) {
      case 'name':
        return a.name.localeCompare(b.name);
      case 'stimulation-score':
        return a.stimulationScore - b.stimulationScore; // Lower is better
      case 'interactivity-level':
        // Sort by interactivity level - Low, Moderate, High
        const levelMap: {[key: string]: number} = {
          'Low': 1,
          'Moderate-Low': 2,
          'Moderate': 3,
          'Moderate-High': 4,
          'High': 5
        };
        const aLevel = levelMap[a.interactivityLevel || 'Moderate'] || 3;
        const bLevel = levelMap[b.interactivityLevel || 'Moderate'] || 3;
        return aLevel - bLevel;
      case 'popular':
        // Popular would be handled by a separate API endpoint, so this is a fallback
        // The views+searches metrics impact popularity
        const aPopularity = ((a as any).views || 0) * 2 + ((a as any).searches || 0);
        const bPopularity = ((b as any).views || 0) * 2 + ((b as any).searches || 0);
        return bPopularity - aPopularity; // Higher popularity first
      case 'overall-rating':
        return b.overallRating - a.overallRating;
      default:
        return 0;
    }
  });
}
</file>

<file path="client/src/lib/utils.ts">
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
</file>

<file path="client/src/pages/about.tsx">
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";

export default function About() {
  return (
    <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <h1 className="text-3xl font-heading font-bold text-center mb-8">About TV Tantrum</h1>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-8 mb-12">
        <div>
          <h2 className="text-2xl font-heading font-bold mb-4">Our Mission</h2>
          <p className="text-gray-700 mb-4">
            TV Tantrum was created to help parents make informed decisions about the children's TV shows their kids watch. We understand that screen time is inevitable, so why not make it count?
          </p>
          <p className="text-gray-700 mb-4">
            Our unique rating system focuses on metrics that matter to parents, including:
          </p>
          <ul className="list-disc pl-6 mb-4 text-gray-700 space-y-2">
            <li><span className="font-semibold">Stimulation Score</span> - Measure of how visually and audibly stimulating the content is.</li>
            <li><span className="font-semibold">Themes</span> - Understand what topics and concepts are covered in each show, from adventure and creativity to social-emotional learning and problem-solving.</li>
            <li><span className="font-semibold">Interactivity Level</span> - How engaging and interactive is the content for children?</li>
          </ul>
        </div>
        
        <div className="bg-primary-50 rounded-lg p-6">
          <h2 className="text-2xl font-heading font-bold mb-4">Data Sources</h2>
          <p className="text-gray-700 mb-4">
            Our comprehensive database aggregates ratings and information from:
          </p>
          <ul className="list-disc pl-6 mb-4 text-gray-700 space-y-2">
            <li>Parent surveys and reviews</li>
            <li>Child development expert assessments</li>
            <li>Content analysis by our team</li>
            <li>User contributions and feedback</li>
          </ul>
          <p className="text-gray-700">
            We're constantly updating our database as new shows emerge and more parents contribute their experiences.
          </p>
        </div>
      </div>
      
      <h2 className="text-2xl font-heading font-bold mb-6">How to Use Our Features</h2>
      
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6 mb-12">
        <Card>
          <CardContent className="pt-6">
            <div className="text-center mb-4">
              <div className="bg-primary-100 rounded-full w-16 h-16 flex items-center justify-center mx-auto mb-4">
                <i className="fas fa-search text-primary-600 text-2xl"></i>
              </div>
              <h3 className="text-xl font-heading font-bold mb-2">Browse</h3>
              <p className="text-gray-600">
                Explore our comprehensive database of children's TV shows with detailed ratings and reviews.
              </p>
            </div>
          </CardContent>
        </Card>
        
        <Card>
          <CardContent className="pt-6">
            <div className="text-center mb-4">
              <div className="bg-secondary-100 rounded-full w-16 h-16 flex items-center justify-center mx-auto mb-4">
                <i className="fas fa-filter text-secondary-600 text-2xl"></i>
              </div>
              <h3 className="text-xl font-heading font-bold mb-2">Filter</h3>
              <p className="text-gray-600">
                Narrow down shows by age appropriateness, stimulation score, themes, and more.
              </p>
            </div>
          </CardContent>
        </Card>
        
        <Card>
          <CardContent className="pt-6">
            <div className="text-center mb-4">
              <div className="bg-accent-100 rounded-full w-16 h-16 flex items-center justify-center mx-auto mb-4">
                <i className="fas fa-balance-scale text-accent-600 text-2xl"></i>
              </div>
              <h3 className="text-xl font-heading font-bold mb-2">Compare</h3>
              <p className="text-gray-600">
                Side-by-side comparison of shows to find the best fit for your family and child.
              </p>
            </div>
          </CardContent>
        </Card>
        
        <Card>
          <CardContent className="pt-6">
            <div className="text-center mb-4">
              <div className="bg-red-100 rounded-full w-16 h-16 flex items-center justify-center mx-auto mb-4">
                <i className="fas fa-heart text-red-500 text-2xl"></i>
              </div>
              <h3 className="text-xl font-heading font-bold mb-2">Save</h3>
              <p className="text-gray-600">
                Bookmark your favorite shows and create personalized lists for easy reference.
              </p>
            </div>
          </CardContent>
        </Card>
      </div>
      
      <h2 className="text-2xl font-heading font-bold mb-6">Understanding Stimulation Ratings</h2>
      
      <div className="bg-gray-50 rounded-lg p-8 mb-12">
        <p className="text-gray-700 mb-6">
          Our stimulation ratings help you understand how a show may affect your child's sensory system and behavior. Lower-rated shows allow for longer watching periods before causing overstimulation, while higher-rated shows may lead to overstimulation more quickly, potentially resulting in tantrums. Keep in mind that younger children are more sensitive to stimulation, while older children can typically handle higher levels of stimulation.
        </p>
        
        <div className="grid grid-cols-1 md:grid-cols-5 gap-4 mt-6">
          <div className="bg-green-100 rounded-lg p-4">
            <div className="flex items-center mb-2">
              <div className="w-8 h-8 rounded-full bg-green-500 flex items-center justify-center text-white font-bold">1</div>
              <h3 className="ml-2 text-lg font-bold text-green-800">Low</h3>
            </div>
            <p className="text-green-800">
              Gentle pacing with minimal scene changes. Soft sounds and music. Calm dialogue and predictable content. Ideal for very young children, bedtime viewing, or children sensitive to stimulation.
            </p>
          </div>
          
          <div className="bg-yellow-50 rounded-lg p-4">
            <div className="flex items-center mb-2">
              <div className="w-8 h-8 rounded-full bg-yellow-500 flex items-center justify-center text-white font-bold">2</div>
              <h3 className="ml-2 text-lg font-bold text-yellow-800">Low-Medium</h3>
            </div>
            <p className="text-yellow-800">
              Moderate pacing with occasional transitions. Mild sound effects and harmonious music. Engaging but not overwhelming content. Good for longer viewing sessions and younger children.
            </p>
          </div>
          
          <div className="bg-orange-50 rounded-lg p-4">
            <div className="flex items-center mb-2">
              <div className="w-8 h-8 rounded-full bg-orange-500 flex items-center justify-center text-white font-bold">3</div>
              <h3 className="ml-2 text-lg font-bold text-orange-800">Medium</h3>
            </div>
            <p className="text-orange-800">
              Balanced pacing with regular scene changes. Moderate sound effects and varied music. Mix of calm and exciting moments. Suitable for most children but monitor younger viewers for signs of overstimulation.
            </p>
          </div>
          
          <div className="bg-red-100 rounded-lg p-4">
            <div className="flex items-center mb-2">
              <div className="w-8 h-8 rounded-full bg-red-400 flex items-center justify-center text-white font-bold">4</div>
              <h3 className="ml-2 text-lg font-bold text-red-700">Medium-High</h3>
            </div>
            <p className="text-red-700">
              Fast-paced with frequent scene changes. Prominent sound effects and dynamic music. Energetic dialogue and action. Better for older children and shorter viewing sessions. May feel intense to younger viewers.
            </p>
          </div>
          
          <div className="bg-red-50 rounded-lg p-4">
            <div className="flex items-center mb-2">
              <div className="w-8 h-8 rounded-full bg-red-500 flex items-center justify-center text-white font-bold">5</div>
              <h3 className="ml-2 text-lg font-bold text-red-800">High</h3>
            </div>
            <p className="text-red-800">
              Rapid pacing with constant scene changes. Loud sound effects and intense music. Highly energetic content with many elements competing for attention. Use with caution.
            </p>
          </div>
        </div>
      </div>
      
      <div id="contact" className="bg-gray-50 rounded-lg p-8 mb-12">
        <h2 className="text-2xl font-heading font-bold mb-6 text-center">Contact Us</h2>
        <p className="text-gray-700 mb-6 text-center max-w-2xl mx-auto">
          Have a question, suggestion, or want to work with us? Use the form below to get in touch with our team.
        </p>
        
        <form className="max-w-xl mx-auto">
          <div className="grid grid-cols-1 gap-6">
            {/* Name */}
            <div>
              <label htmlFor="name" className="block text-sm font-medium text-gray-700 mb-1">
                Name <span className="text-red-500">*</span>
              </label>
              <input
                type="text"
                id="name"
                name="name"
                required
                className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary"
                placeholder="Your name"
              />
            </div>
            
            {/* Email */}
            <div>
              <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-1">
                Email Address <span className="text-red-500">*</span>
              </label>
              <input
                type="email"
                id="email"
                name="email"
                required
                className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary"
                placeholder="your.email@example.com"
              />
            </div>
            
            {/* Phone (optional) */}
            <div>
              <label htmlFor="phone" className="block text-sm font-medium text-gray-700 mb-1">
                Phone Number <span className="text-gray-400 text-xs">(Optional)</span>
              </label>
              <input
                type="tel"
                id="phone"
                name="phone"
                className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary"
                placeholder="Your phone number"
              />
            </div>
            
            {/* Enquiry Type */}
            <div>
              <label htmlFor="enquiryType" className="block text-sm font-medium text-gray-700 mb-1">
                Enquiry Type <span className="text-red-500">*</span>
              </label>
              <select
                id="enquiryType"
                name="enquiryType"
                required
                defaultValue=""
                className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary"
              >
                <option value="" disabled>Select an option</option>
                <option value="feedback">Feedback</option>
                <option value="add-show">Add a show listing</option>
                <option value="get-featured">Get featured</option>
                <option value="press">Press</option>
                <option value="partnership">Partnership/Collaborate</option>
              </select>
            </div>
            
            {/* Message */}
            <div>
              <label htmlFor="message" className="block text-sm font-medium text-gray-700 mb-1">
                Message <span className="text-red-500">*</span>
              </label>
              <textarea
                id="message"
                name="message"
                required
                rows={6}
                className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary"
                placeholder="Your message here..."
              ></textarea>
            </div>
            
            <div>
              <Button type="submit" className="w-full">
                Send Message
              </Button>
            </div>
          </div>
        </form>
      </div>
    </main>
  );
}
</file>

<file path="client/src/pages/browse.tsx">
import { useState, useEffect, useRef } from "react";
import { useQuery } from "@tanstack/react-query";
import { useLocation, useSearch } from "wouter";
import ShowFilters from "@/components/ShowFilters";
import ShowCard from "@/components/ShowCard";
import { Button } from "@/components/ui/button";
import { Skeleton } from "@/components/ui/skeleton";
import {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious
} from "@/components/ui/pagination";
import { TvShow } from "@shared/schema";

export default function Browse() {
  const [_, setLocation] = useLocation();
  const search = useSearch();
  const [isMobile, setIsMobile] = useState(false);
  const resultsRef = useRef<HTMLDivElement>(null); // Ref for the results section
  const [activeFilters, setActiveFilters] = useState<{
    ageGroup?: string;
    ageRange?: {min: number, max: number};
    tantrumFactor?: string;
    sortBy?: string;
    search?: string;
    themes?: string[];
    interactionLevel?: string;
    dialogueIntensity?: string;
    soundFrequency?: string;
    stimulationScoreRange?: {min: number, max: number};
  }>({});
  const [viewMode, setViewMode] = useState<"grid" | "list">("grid");
  const [currentPage, setCurrentPage] = useState(1);
  const showsPerPage = 12;

  // Parse URL search params to set initial filters
  useEffect(() => {
    const searchParams = new URLSearchParams(search);
    const initialFilters: typeof activeFilters = {};
    
    // Get search query from URL
    const searchQuery = searchParams.get('search');
    if (searchQuery) {
      initialFilters.search = searchQuery;
    }
    
    // Get age group from URL (legacy support)
    const ageGroup = searchParams.get('ageGroup');
    if (ageGroup) {
      initialFilters.ageGroup = ageGroup;
    }
    
    // Get age range from URL
    const ageRange = searchParams.get('ageRange');
    if (ageRange) {
      try {
        const parsedRange = JSON.parse(decodeURIComponent(ageRange));
        if (parsedRange && typeof parsedRange === 'object' && 'min' in parsedRange && 'max' in parsedRange) {
          initialFilters.ageRange = parsedRange;
          console.log('Parsed age range:', parsedRange);
        }
      } catch (e) {
        console.error('Error parsing age range:', e);
      }
    }
    
    // Get themes from URL
    const themes = searchParams.get('themes');
    if (themes) {
      initialFilters.themes = themes.split(',');
    }
    
    // Get sort option from URL
    const sortBy = searchParams.get('sortBy');
    if (sortBy) {
      initialFilters.sortBy = sortBy;
    }
    
    // Get tantrumFactor from URL
    const tantrumFactor = searchParams.get('tantrumFactor');
    if (tantrumFactor) {
      initialFilters.tantrumFactor = tantrumFactor;
    }
    
    // Get interactivity level from URL
    const interactionLevel = searchParams.get('interactionLevel');
    if (interactionLevel) {
      initialFilters.interactionLevel = interactionLevel;
    }
    
    // Get stimulation score range from URL
    const stimulationScoreRange = searchParams.get('stimulationScoreRange');
    if (stimulationScoreRange) {
      try {
        const parsedRange = JSON.parse(decodeURIComponent(stimulationScoreRange));
        if (parsedRange && typeof parsedRange === 'object' && 'min' in parsedRange && 'max' in parsedRange) {
          initialFilters.stimulationScoreRange = parsedRange;
          console.log('Parsed stimulation score range:', parsedRange);
        }
      } catch (e) {
        console.error('Error parsing stimulation score range:', e);
      }
    }
    
    // Apply filters from URL if any exist
    if (Object.keys(initialFilters).length > 0) {
      setActiveFilters(initialFilters);
    }
  }, [search]);

  // Fetch TV shows with applied filters
  console.log('Browse page - activeFilters:', activeFilters);
  const { data: shows, isLoading, error } = useQuery<TvShow[]>({
    queryKey: ['/api/shows', activeFilters],
    staleTime: 60000, // 1 minute
  });
  
  // Handler for navigating to show details
  const handleShowClick = (id: number) => {
    // Scroll to top first, then navigate
    window.scrollTo(0, 0);
    setLocation(`/shows/${id}`);
  };
  
  // Log the results separately
  useEffect(() => {
    if (shows) {
      console.log('Query success! Number of shows received:', shows.length);
      if (shows.length > 0) {
        console.log('First few shows:', shows.slice(0, 3).map(show => show.name));
      }
    }
    
    if (error) {
      console.error('Query error:', error);
    }
  }, [shows, error]);
  
  // Effect to detect mobile screen size
  useEffect(() => {
    const checkMobile = () => {
      const isMobileView = window.innerWidth < 640; // sm breakpoint in Tailwind
      console.log('Window width:', window.innerWidth, 'isMobile:', isMobileView);
      setIsMobile(isMobileView);
    };
    
    // Check initially
    checkMobile();
    
    // Add resize listener
    window.addEventListener('resize', checkMobile);
    
    // Clean up
    return () => window.removeEventListener('resize', checkMobile);
  }, []);

  const handleFilterChange = (filters: typeof activeFilters) => {
    setActiveFilters(filters);
    setCurrentPage(1); // Reset to first page when filters change
    
    // Update URL with new filters
    const searchParams = new URLSearchParams();
    if (filters.search) searchParams.set('search', filters.search);
    
    // Handle age filters
    if (filters.ageRange) {
      searchParams.set('ageRange', encodeURIComponent(JSON.stringify(filters.ageRange)));
    } else if (filters.ageGroup) {
      // Legacy support for ageGroup parameter
      searchParams.set('ageGroup', filters.ageGroup);
    }
    
    if (filters.themes && filters.themes.length > 0) searchParams.set('themes', filters.themes.join(','));
    if (filters.sortBy) searchParams.set('sortBy', filters.sortBy);
    if (filters.tantrumFactor) searchParams.set('tantrumFactor', filters.tantrumFactor);
    if (filters.interactionLevel) searchParams.set('interactionLevel', filters.interactionLevel);
    if (filters.stimulationScoreRange) searchParams.set('stimulationScoreRange', 
        encodeURIComponent(JSON.stringify(filters.stimulationScoreRange)));
    
    const newSearch = searchParams.toString() ? `?${searchParams.toString()}` : '';
    setLocation(`/browse${newSearch}`);
  };

  const clearFilters = () => {
    setActiveFilters({});
    setCurrentPage(1);
    setLocation('/browse');
  };

  // Calculate pagination
  const indexOfLastShow = currentPage * showsPerPage;
  const indexOfFirstShow = indexOfLastShow - showsPerPage;
  const currentShows = shows ? shows.slice(indexOfFirstShow, indexOfLastShow) : [];
  const totalPages = shows ? Math.ceil(shows.length / showsPerPage) : 0;
  const totalShows = shows?.length || 0;

  const handlePageChange = (page: number) => {
    setCurrentPage(page);
    
    // Scroll to the results section instead of the top of the page
    if (resultsRef.current) {
      // Adding a small offset to position just above the results
      const yOffset = -20; 
      const y = resultsRef.current.getBoundingClientRect().top + window.pageYOffset + yOffset;
      
      window.scrollTo({
        top: y,
        behavior: 'smooth'
      });
    }
  };

  // Generate pagination items
  const renderPaginationItems = () => {
    const items = [];
    
    // Always show first page
    items.push(
      <PaginationItem key="page-1">
        <PaginationLink 
          onClick={() => handlePageChange(1)} 
          isActive={currentPage === 1}
        >
          1
        </PaginationLink>
      </PaginationItem>
    );
    
    // Add ellipsis if needed
    if (currentPage > 3) {
      items.push(
        <PaginationItem key="ellipsis-1">
          <PaginationEllipsis />
        </PaginationItem>
      );
    }
    
    // Add pages around current page
    for (let i = Math.max(2, currentPage - 1); i <= Math.min(currentPage + 1, totalPages - 1); i++) {
      items.push(
        <PaginationItem key={`page-${i}`}>
          <PaginationLink 
            onClick={() => handlePageChange(i)} 
            isActive={currentPage === i}
          >
            {i}
          </PaginationLink>
        </PaginationItem>
      );
    }
    
    // Add ellipsis if needed
    if (currentPage < totalPages - 2) {
      items.push(
        <PaginationItem key="ellipsis-2">
          <PaginationEllipsis />
        </PaginationItem>
      );
    }
    
    // Always show last page if there are multiple pages
    if (totalPages > 1) {
      items.push(
        <PaginationItem key={`page-${totalPages}`}>
          <PaginationLink 
            onClick={() => handlePageChange(totalPages)} 
            isActive={currentPage === totalPages}
          >
            {totalPages}
          </PaginationLink>
        </PaginationItem>
      );
    }
    
    return items;
  };

  return (
    <div className="bg-gray-50 min-h-screen">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Page Header */}
        <h1 className="text-2xl font-heading font-bold text-primary-800 mb-4">
          Browse Shows
        </h1>
        <p className="text-gray-600 mb-6">
          Showing {indexOfFirstShow + 1}-{Math.min(indexOfLastShow, totalShows)} of {totalShows} results
        </p>
        
        <div className="flex flex-col md:flex-row gap-6">
          {/* Left Column - Filters */}
          <div className="md:w-1/4">
            <ShowFilters 
              activeFilters={activeFilters} 
              onFilterChange={handleFilterChange}
              onClearFilters={clearFilters}
            />
          </div>
          
          {/* Right Column - Show Grid */}
          <div className="md:w-3/4">
            {isLoading ? (
              // Loading skeleton grid
              <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
                {[...Array(6)].map((_, index) => (
                  <div key={index} className="bg-white rounded-xl shadow-md overflow-hidden">
                    <Skeleton className="h-48 w-full" />
                    <div className="p-4">
                      <Skeleton className="h-6 w-3/4 mb-4" />
                      <Skeleton className="h-4 w-full mb-2" />
                      <Skeleton className="h-4 w-full mb-2" />
                      <Skeleton className="h-4 w-full mb-2" />
                    </div>
                  </div>
                ))}
              </div>
            ) : error ? (
              <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded">
                <p>Error loading TV shows. Please try again later.</p>
              </div>
            ) : shows?.length === 0 ? (
              <div className="bg-yellow-50 border border-yellow-200 text-yellow-700 px-4 py-3 rounded">
                <p>No TV shows found matching your filters. Try adjusting your criteria.</p>
                {Object.keys(activeFilters).length > 0 && (
                  <Button variant="outline" size="sm" onClick={clearFilters} className="mt-2">
                    Clear All Filters
                  </Button>
                )}
              </div>
            ) : (
              <div ref={resultsRef}>
                {/* Show Cards Grid - Mobile uses portrait, desktop uses landscape */}
                {isMobile ? (
                  <div className="grid grid-cols-3 gap-3">
                    {/* Mobile grid layout with portrait cards */}
                    {currentShows.map(show => (
                      <ShowCard 
                        key={show.id} 
                        show={show} 
                        viewMode="grid"
                        isMobile={true}
                        onClick={() => handleShowClick(show.id)}
                      />
                    ))}
                  </div>
                ) : (
                  <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
                    {currentShows.map(show => (
                      <ShowCard 
                        key={show.id} 
                        show={show} 
                        viewMode="grid"
                        onClick={() => handleShowClick(show.id)}
                      />
                    ))}
                  </div>
                )}
                
                {/* Pagination */}
                {totalPages > 1 && (
                  <div className="mt-8 flex justify-center">
                    <Pagination>
                      <PaginationContent>
                        <PaginationItem>
                          <PaginationPrevious 
                            onClick={() => currentPage > 1 && handlePageChange(currentPage - 1)}
                            className={currentPage === 1 ? "pointer-events-none opacity-50" : "cursor-pointer"}
                          />
                        </PaginationItem>
                        
                        {renderPaginationItems()}
                        
                        <PaginationItem>
                          <PaginationNext 
                            onClick={() => currentPage < totalPages && handlePageChange(currentPage + 1)}
                            className={currentPage === totalPages ? "pointer-events-none opacity-50" : "cursor-pointer"}
                          />
                        </PaginationItem>
                      </PaginationContent>
                    </Pagination>
                  </div>
                )}
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}
</file>

<file path="client/src/pages/compare.tsx">
import { useState, useEffect } from "react";
import { useQuery } from "@tanstack/react-query";
import { useLocation } from "wouter";
import { Button } from "@/components/ui/button";
import { Skeleton } from "@/components/ui/skeleton";
import { Badge } from "@/components/ui/badge";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { getStimulationScoreColor } from "@/lib/showUtils";
import RatingBar from "@/components/RatingBar";
import { TvShow } from "@shared/schema";

export default function Compare() {
  const [_, setLocation] = useLocation();
  const [selectedShowIds, setSelectedShowIds] = useState<number[]>([]);
  const [showToAdd, setShowToAdd] = useState<string>("");

  // Fetch all TV shows for the selector
  const { data: allShows, isLoading: loadingShows } = useQuery<TvShow[]>({
    queryKey: ['/api/shows'],
  });

  // Fetch details for selected shows
  const { data: selectedShows, isLoading: loadingSelected } = useQuery<TvShow[]>({
    queryKey: ['/api/shows', { ids: selectedShowIds }],
    enabled: selectedShowIds.length > 0,
    select: (data) => {
      return data.filter(show => selectedShowIds.includes(show.id));
    }
  });

  const handleBackClick = () => {
    setLocation("/");
  };

  const handleRemoveShow = (id: number) => {
    setSelectedShowIds(prev => prev.filter(showId => showId !== id));
  };

  // Update to immediately add show when selected from dropdown
  const handleAddShow = (value: string) => {
    if (value && !selectedShowIds.includes(Number(value))) {
      setSelectedShowIds(prev => [...prev, Number(value)]);
      setShowToAdd("");
    }
  };

  // Load comparison data from localStorage on component mount
  useEffect(() => {
    const savedComparison = localStorage.getItem('tvShowComparison');
    if (savedComparison) {
      try {
        const parsed = JSON.parse(savedComparison);
        if (Array.isArray(parsed)) {
          setSelectedShowIds(parsed);
        }
      } catch (e) {
        console.error("Error parsing saved comparison data", e);
      }
    }
  }, []);

  // Save comparison to localStorage when it changes
  useEffect(() => {
    if (selectedShowIds.length > 0) {
      localStorage.setItem('tvShowComparison', JSON.stringify(selectedShowIds));
    }
  }, [selectedShowIds]);

  const isLoading = loadingShows || loadingSelected;

  // Get available shows that aren't already in the comparison
  const availableShows = allShows?.filter(
    show => !selectedShowIds.includes(show.id)
  );

  // Helper function to get level percentage for bar charts
  const getLevelPercentage = (level: string) => {
    switch(level) {
      case 'Low': return 20;
      case 'Limited': return 20;
      case 'Minimal': return 20;
      case 'Moderate-Low': return 40;
      case 'Moderate': return 60;
      case 'Moderate-High': return 80;
      case 'High': return 100;
      default: return 60;
    }
  };
  
  // Helper function to determine rating level based on text
  const getRatingLevel = (rating: string | null | undefined): number => {
    if (!rating) return 3; // Default to moderate
    
    if (rating.includes('Low-Moderate') || rating.includes('Low to Moderate')) {
      return 2;
    } else if (rating.includes('Moderate-Low')) {
      return 2;
    } else if (rating.includes('Moderate-High') || rating.includes('Moderate to High')) {
      return 4;
    } else if (rating.includes('Mod-High')) {
      return 4;
    } else if (rating === 'Low') {
      return 1;
    } else if (rating === 'Moderate') {
      return 3;
    } else if (rating === 'High') {
      return 5;
    } else if (rating === 'Limited') {
      return 1;
    } else if (rating === 'Minimal') {
      return 1;
    }
    
    return 3; // Default to moderate
  };
  
  // Function to render segmented bar like on the details page
  const renderSegmentedBar = (ratingText: string | null | undefined) => {
    const level = getRatingLevel(ratingText);
    const percentage = level * 20;
    
    return (
      <div className="w-full h-6 relative">
        <div className="w-full h-6 bg-gray-200 rounded-full overflow-hidden flex">
          {[1, 2, 3, 4, 5].map((segment) => {
            const color = 
              segment === 1 ? 'bg-green-500' : 
              segment === 2 ? 'bg-green-400' : 
              segment === 3 ? 'bg-yellow-500' : 
              segment === 4 ? 'bg-orange-500' : 
              'bg-red-500';
            
            return (
              <div
                key={segment}
                className={`h-full w-1/5 ${segment <= level ? color : 'bg-gray-200'}`}
              />
            );
          })}
        </div>
        <div 
          className="absolute h-full flex items-center" 
          style={{ 
            width: '4px', 
            backgroundColor: 'black',
            left: `calc(${percentage}% - 2px)`,
            top: 0
          }}
        ></div>
      </div>
    );
  };

  // Helper function to get stimulation score dots
  const getStimulationScoreDots = (score: number) => {
    return (
      <div className="flex justify-center gap-1 mb-1">
        {[1, 2, 3, 4, 5].map((dot) => {
          let bgColor = '';
          if (dot === 1) bgColor = 'bg-green-500';
          else if (dot === 2) bgColor = 'bg-green-400';
          else if (dot === 3) bgColor = 'bg-yellow-500';
          else if (dot === 4) bgColor = 'bg-orange-500';
          else bgColor = 'bg-red-500';
          
          return (
            <div 
              key={dot} 
              className={`w-4 h-4 rounded-full ${dot <= score ? bgColor : 'border border-gray-300'}`}
            />
          );
        })}
      </div>
    );
  };

  return (
    <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <div className="flex items-center justify-between mb-6">
        <div className="flex items-center">
          <Button variant="ghost" className="mr-4 text-primary" onClick={handleBackClick}>
            <i className="fas fa-arrow-left mr-2"></i> Back
          </Button>
          <h2 className="text-2xl font-heading font-bold">Compare Shows</h2>
        </div>
      </div>
      
      {isLoading ? (
        <div className="bg-white rounded-xl shadow-md overflow-hidden p-8">
          <Skeleton className="h-96 w-full" />
        </div>
      ) : (
        <div>
          {/* Show selector area */}
          <div className="mb-6 grid grid-cols-1 md:grid-cols-3 gap-4">
            {[0, 1, 2].map((index) => {
              const show = selectedShows && selectedShows[index];
              return (
                <div key={index} className="bg-white rounded-lg shadow-md p-4">
                  <div className="flex flex-col items-center">
                    <p className="text-sm text-gray-500 mb-2">Show {index + 1}</p>
                    {show ? (
                      <>
                        <div className="relative mb-2">
                          {show.imageUrl ? (
                            <img
                              src={show.imageUrl}
                              alt={show.name}
                              className="w-24 h-24 object-cover rounded-lg"
                            />
                          ) : (
                            <div className="w-24 h-24 bg-gray-200 rounded-lg flex items-center justify-center">
                              <i className="fas fa-tv text-gray-400 text-2xl"></i>
                            </div>
                          )}
                          <button
                            onClick={() => handleRemoveShow(show.id)}
                            className="absolute -top-2 -right-2 bg-red-500 text-white rounded-full w-6 h-6 flex items-center justify-center"
                          >
                            <i className="fas fa-times text-xs"></i>
                          </button>
                        </div>
                        <p className="font-medium text-center">{show.name}</p>
                      </>
                    ) : (
                      <div className="w-full">
                        <Select
                          value={showToAdd}
                          onValueChange={(value) => handleAddShow(value)}
                        >
                          <SelectTrigger className="bg-white">
                            <SelectValue placeholder="Select a show" />
                          </SelectTrigger>
                          <SelectContent>
                            {availableShows && availableShows.length > 0 ? (
                              availableShows.map(show => (
                                <SelectItem key={show.id} value={String(show.id)}>
                                  {show.name}
                                </SelectItem>
                              ))
                            ) : (
                              <SelectItem value="no-shows" disabled>
                                No more shows available
                              </SelectItem>
                            )}
                          </SelectContent>
                        </Select>
                      </div>
                    )}
                  </div>
                </div>
              );
            })}
          </div>

          {selectedShows && selectedShows.length > 0 ? (
            <div className="bg-white rounded-xl shadow-md overflow-hidden p-6">
              <h3 className="text-xl font-bold mb-6">Compare Shows</h3>
              
              {/* Comparison table with the modern layout */}
              <div className="grid grid-cols-[180px_1fr_1fr_1fr] gap-4 mb-8">
                <div className="font-medium">Feature</div>
                {selectedShows.map(show => (
                  <div key={show.id} className="font-medium text-center">{show.name}</div>
                ))}
                {selectedShows.length < 3 && (
                  <div className="font-medium text-center text-gray-400">-</div>
                )}
                
                {/* Target Age */}
                <div className="font-medium py-2">Target Age</div>
                {selectedShows.map(show => (
                  <div key={show.id} className="text-center py-2">{show.ageRange}</div>
                ))}
                {selectedShows.length < 3 && (
                  <div className="text-center py-2 text-gray-400">-</div>
                )}
                
                {/* Animation Style */}
                <div className="font-medium py-2">Animation Style</div>
                {selectedShows.map(show => (
                  <div key={show.id} className="text-center py-2">
                    {show.animationStyle || 'Traditional Animation'}
                  </div>
                ))}
                {selectedShows.length < 3 && (
                  <div className="text-center py-2 text-gray-400">-</div>
                )}
                
                {/* Themes */}
                <div className="font-medium py-2">Themes</div>
                {selectedShows.map(show => (
                  <div key={show.id} className="flex flex-wrap justify-center gap-1 py-2">
                    {show.themes && show.themes.map((theme, index) => (
                      <Badge key={index} className="bg-blue-100 text-blue-800 text-xs font-medium">
                        {theme}
                      </Badge>
                    ))}
                  </div>
                ))}
                {selectedShows.length < 3 && (
                  <div className="text-center py-2 text-gray-400">-</div>
                )}
              </div>
              
              {/* Stimulation Score Comparison using dots */}
              <div className="mb-8">
                <h3 className="text-lg font-bold mb-4">Stimulation Score Comparison</h3>
                <div className="grid grid-cols-[180px_1fr_1fr_1fr] gap-4">
                  <div></div>
                  {selectedShows.map(show => (
                    <div key={show.id} className="font-medium text-center">{show.name}</div>
                  ))}
                  {selectedShows.length < 3 && (
                    <div className="font-medium text-center text-gray-400">-</div>
                  )}
                  
                  <div className="font-medium py-2">Stimulation Score</div>
                  {selectedShows.map(show => (
                    <div key={show.id} className="flex flex-col items-center py-2">
                      {getStimulationScoreDots(show.stimulationScore)}
                      <div className="text-center text-sm font-medium">
                        {show.stimulationScore}/5
                      </div>
                    </div>
                  ))}
                  {selectedShows.length < 3 && (
                    <div className="text-center py-2 text-gray-400">-</div>
                  )}
                </div>
              </div>
              
              {/* Sensory Metrics with Bar Charts */}
              <div className="mb-4">
                <h3 className="text-lg font-bold mb-4">Sensory Metrics Comparison</h3>
                
                <div className="grid grid-cols-[180px_1fr_1fr_1fr] gap-4 mb-3">
                  <div></div>
                  {selectedShows.map(show => (
                    <div key={show.id} className="font-medium text-center">{show.name}</div>
                  ))}
                  {selectedShows.length < 3 && (
                    <div className="font-medium text-center text-gray-400">-</div>
                  )}
                </div>
                
                {/* Interactivity Level */}
                <div className="mb-6">
                  <div className="grid grid-cols-[180px_1fr_1fr_1fr] gap-4">
                    <div className="font-medium">Interaction Level:</div>
                    {selectedShows.map(show => (
                      <div key={show.id} className="flex flex-col">
                        <div className="flex justify-end mb-1">
                          <span className="text-sm font-medium">{show.interactivityLevel || 'Moderate'}</span>
                        </div>
                        {renderSegmentedBar(show.interactivityLevel)}
                      </div>
                    ))}
                    {selectedShows.length < 3 && (
                      <div className="flex items-center justify-center">
                        <div className="text-gray-400">-</div>
                      </div>
                    )}
                  </div>
                </div>
                
                {/* Dialogue Intensity */}
                <div className="mb-6">
                  <div className="grid grid-cols-[180px_1fr_1fr_1fr] gap-4">
                    <div className="font-medium">Dialogue Intensity:</div>
                    {selectedShows.map(show => (
                      <div key={show.id} className="flex flex-col">
                        <div className="flex justify-end mb-1">
                          <span className="text-sm font-medium">{show.dialogueIntensity || 'Moderate'}</span>
                        </div>
                        {renderSegmentedBar(show.dialogueIntensity)}
                      </div>
                    ))}
                    {selectedShows.length < 3 && (
                      <div className="flex items-center justify-center">
                        <div className="text-gray-400">-</div>
                      </div>
                    )}
                  </div>
                </div>
                
                {/* Sound Effects Level */}
                <div className="mb-6">
                  <div className="grid grid-cols-[180px_1fr_1fr_1fr] gap-4">
                    <div className="font-medium">Sound Effects Level:</div>
                    {selectedShows.map(show => (
                      <div key={show.id} className="flex flex-col">
                        <div className="flex justify-end mb-1">
                          <span className="text-sm font-medium">{show.soundEffectsLevel || 'Moderate'}</span>
                        </div>
                        {renderSegmentedBar(show.soundEffectsLevel)}
                      </div>
                    ))}
                    {selectedShows.length < 3 && (
                      <div className="flex items-center justify-center">
                        <div className="text-gray-400">-</div>
                      </div>
                    )}
                  </div>
                </div>
                
                {/* Scene Frequency */}
                <div className="mb-6">
                  <div className="grid grid-cols-[180px_1fr_1fr_1fr] gap-4">
                    <div className="font-medium">Scene Frequency:</div>
                    {selectedShows.map(show => (
                      <div key={show.id} className="flex flex-col">
                        <div className="flex justify-end mb-1">
                          <span className="text-sm font-medium">{show.sceneFrequency || 'Moderate'}</span>
                        </div>
                        {renderSegmentedBar(show.sceneFrequency)}
                      </div>
                    ))}
                    {selectedShows.length < 3 && (
                      <div className="flex items-center justify-center">
                        <div className="text-gray-400">-</div>
                      </div>
                    )}
                  </div>
                </div>

                {/* Music Tempo */}
                <div className="mb-6">
                  <div className="grid grid-cols-[180px_1fr_1fr_1fr] gap-4">
                    <div className="font-medium">Music Tempo:</div>
                    {selectedShows.map(show => (
                      <div key={show.id} className="flex flex-col">
                        <div className="flex justify-end mb-1">
                          <span className="text-sm font-medium">{show.musicTempo || 'Moderate'}</span>
                        </div>
                        {renderSegmentedBar(show.musicTempo)}
                      </div>
                    ))}
                    {selectedShows.length < 3 && (
                      <div className="flex items-center justify-center">
                        <div className="text-gray-400">-</div>
                      </div>
                    )}
                  </div>
                </div>
                
                {/* Total Music Level */}
                <div className="mb-6">
                  <div className="grid grid-cols-[180px_1fr_1fr_1fr] gap-4">
                    <div className="font-medium">Total Music Level:</div>
                    {selectedShows.map(show => (
                      <div key={show.id} className="flex flex-col">
                        <div className="flex justify-end mb-1">
                          <span className="text-sm font-medium">{show.totalMusicLevel || 'Moderate'}</span>
                        </div>
                        {renderSegmentedBar(show.totalMusicLevel)}
                      </div>
                    ))}
                    {selectedShows.length < 3 && (
                      <div className="flex items-center justify-center">
                        <div className="text-gray-400">-</div>
                      </div>
                    )}
                  </div>
                </div>
              </div>
            </div>
          ) : (
            <div className="p-8 text-center bg-white rounded-xl shadow-md">
              <div className="mb-4 text-gray-400">
                <i className="fas fa-search text-5xl"></i>
              </div>
              <h3 className="text-xl font-heading font-bold mb-2">No Shows Selected for Comparison</h3>
              <p className="text-gray-600 mb-4">
                Add shows to compare their features side by side.
              </p>
              <Button onClick={handleBackClick}>
                Browse Shows
              </Button>
            </div>
          )}
        </div>
      )}
    </main>
  );
}
</file>

<file path="client/src/pages/home.tsx">
import { useState, useRef, useEffect } from "react";
import { useQuery } from "@tanstack/react-query";
import { useLocation } from "wouter";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { Card, CardContent } from "@/components/ui/card";
import ShowCard from "@/components/ShowCard";
import { TvShow } from "@shared/schema";
import { Heart, Search } from "lucide-react";
import { useAuth } from "@/hooks/use-auth";
import { useToast } from "@/hooks/use-toast";
import {
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselNext,
  CarouselPrevious,
} from "@/components/ui/carousel";

export default function Home() {
  const [_, setLocation] = useLocation();
  const [searchQuery, setSearchQuery] = useState("");
  const [showResults, setShowResults] = useState(false);
  const [isMobile, setIsMobile] = useState(false);
  const { user, toggleFavorite } = useAuth();
  const { toast } = useToast();
  
  // Hide results when clicking outside
  useEffect(() => {
    const handleClickOutside = () => setShowResults(false);
    document.addEventListener('click', handleClickOutside);
    return () => document.removeEventListener('click', handleClickOutside);
  }, []);
  
  // Effect to detect mobile screen size
  useEffect(() => {
    const checkMobile = () => {
      const isMobileView = window.innerWidth < 640; // sm breakpoint in Tailwind
      setIsMobile(isMobileView);
    };
    
    // Check initially
    checkMobile();
    
    // Add resize listener
    window.addEventListener('resize', checkMobile);
    
    // Clean up
    return () => window.removeEventListener('resize', checkMobile);
  }, []);
  
  // Fetch all TV shows
  const { data: allShows, isLoading: allShowsLoading } = useQuery<TvShow[]>({
    queryKey: ['/api/shows'],
    staleTime: 60000, // 1 minute
  });
  
  // Fetch popular shows from our tracking data
  const { data: popularShowsData, isLoading: popularShowsLoading } = useQuery<TvShow[]>({
    queryKey: ['/api/shows/popular'],
    staleTime: 60000, // 1 minute
  });
  
  // Combined loading state
  const isLoading = allShowsLoading || popularShowsLoading;
  
  // Find a featured show (using something with good data for demonstration)
  const featuredShow = allShows?.find(show => 
    show.name.includes("Brambly") || 
    (show.themes?.includes("Adventure") && show.themes?.includes("Fantasy"))
  ) || allShows?.[0];
  
  // Filter shows by categories - ensure at least 24 shows per category for better browsing
  const lowStimulationShows = allShows?.filter(show => show.stimulationScore <= 2).slice(0, 24);
  // Using stimulation score as a proxy for ratings since overallRating is not in the schema
  const highlyRatedShows = allShows?.filter(show => 
    (show.stimulationScore <= 3 && show.themes && show.themes.length >= 3) || 
    (show.stimulationScore <= 2)
  ).slice(0, 24);
  const popularShows = popularShowsData?.slice(0, 24) || allShows?.slice(0, 24); // Use our tracked popular shows data
  const highInteractionShows = allShows?.filter(
    show => show.interactivityLevel === 'High' || show.interactivityLevel === 'Moderate-High'
  ).slice(0, 24);
  
  // Find shows by popular themes - ensure at least 24 shows per category
  const educationalShows = allShows?.filter(show => 
    show.themes?.some(theme => theme.toLowerCase().includes('education') || theme.toLowerCase().includes('learning'))
  ).slice(0, 24);
  
  const adventureShows = allShows?.filter(show => 
    show.themes?.some(theme => theme.toLowerCase().includes('adventure'))
  ).slice(0, 24);
  
  const musicalShows = allShows?.filter(show => 
    show.themes?.some(theme => theme.toLowerCase().includes('music'))
  ).slice(0, 24);
  
  const fantasyShows = allShows?.filter(show => 
    show.themes?.some(theme => theme.toLowerCase().includes('fantasy'))
  ).slice(0, 24);
  
  const preschoolerShows = allShows?.filter(show => 
    show.ageRange?.toLowerCase().includes('preschool') || 
    (show.ageRange && parseInt(show.ageRange.split('-')[0]) <= 4)
  ).slice(0, 24);
  
  // Filter shows based on search term
  const filteredShows = allShows?.filter((show: TvShow) => {
    if (!searchQuery.trim()) return false;
    
    const searchLower = searchQuery.toLowerCase().trim();
    const nameLower = show.name.toLowerCase();
    
    // Direct match in name
    if (nameLower.includes(searchLower)) return true;
    
    // Handle shows with year ranges
    const nameWithoutYears = nameLower.replace(/\s+\d{4}(-\d{4}|-present)?/g, '');
    if (nameWithoutYears.includes(searchLower)) return true;
    
    // Match any part of a word
    const words = nameLower.split(/\s+/);
    if (words.some((word: string) => word.includes(searchLower))) return true;
    
    // Handle apostrophes and special characters
    const simplifiedName = nameLower.replace(/[''\.]/g, '');
    if (simplifiedName.includes(searchLower)) return true;
    
    return false;
  }).slice(0, 6);

  const handleSearch = (e: React.FormEvent) => {
    e.preventDefault();
    if (searchQuery.trim()) {
      // For all searches, direct to browse page with search filter
      setLocation(`/browse?search=${encodeURIComponent(searchQuery.trim())}`);
      setShowResults(false);
    }
  };
  
  const handleShowCardClick = (id: number) => {
    // Scroll to top first, then navigate
    window.scrollTo(0, 0);
    setLocation(`/shows/${id}`);
  };
  
  const renderCategorySection = (title: string, description: string, shows: TvShow[] | undefined, viewAllLink: string) => (
    <section className="mb-12">
      <div className="flex justify-between items-center mb-4">
        <div>
          <h2 className="text-xl font-heading font-bold text-gray-900">{title}</h2>
          <p className="text-sm text-gray-600">{description}</p>
        </div>
        <Button 
          variant="link" 
          className="text-primary-600 hover:text-primary-800"
          onClick={() => setLocation(viewAllLink)}
        >
          View All →
        </Button>
      </div>
      
      {isLoading ? (
        // Placeholder loading state
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
          {Array(4).fill(0).map((_, i) => (
            <Card key={i} className="bg-gray-100 animate-pulse h-64"></Card>
          ))}
        </div>
      ) : shows?.length ? (
        <div className="relative">
          <Carousel
            opts={{
              align: "start",
              loop: true,
              dragFree: true,
              containScroll: "trimSnaps",
              slidesToScroll: 3
            }}
            className="w-full"
          >
            <CarouselContent className="-ml-2 md:-ml-4">
              {shows.map((show) => (
                <CarouselItem key={show.id} className={`pl-2 md:pl-4 ${isMobile ? 'basis-1/3' : 'md:basis-1/4 lg:basis-1/5'}`}>
                  <ShowCard 
                    show={show} 
                    viewMode="grid"
                    isMobile={isMobile}
                    onClick={() => handleShowCardClick(show.id)}
                  />
                </CarouselItem>
              ))}
            </CarouselContent>
            <div className="flex justify-end gap-2 mt-4">
              <CarouselPrevious className="static translate-y-0 mr-0" />
              <CarouselNext className="static translate-y-0" />
            </div>
          </Carousel>
        </div>
      ) : (
        <div className="text-center py-8 text-gray-500">
          No shows found in this category.
        </div>
      )}
    </section>
  );
  
  return (
    <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      {/* Hero Section */}
      <div className="bg-white rounded-xl p-8 mb-12 text-center">
        <h1 className="text-3xl md:text-4xl font-heading font-bold mb-3">
          Screen Time Stimulation Scores
        </h1>
        <p className="text-gray-600 mb-6 max-w-2xl mx-auto">
          Find TV shows measured by stimulation levels, helping you discover content
          that fits your child's needs.
        </p>
        
        <form onSubmit={handleSearch} className="relative max-w-md mx-auto" onClick={(e) => e.stopPropagation()}>
          <div className="flex">
            <div className="relative flex-grow">
              <Search className="absolute left-3 top-3 h-4 w-4 text-gray-500" />
              <Input 
                type="text" 
                placeholder="Search show by name, theme, platform..." 
                className="rounded-r-none pl-10"
                value={searchQuery}
                onChange={(e) => {
                  setSearchQuery(e.target.value);
                  // Show results dropdown if there's text to search
                  if (e.target.value.trim().length > 0) {
                    setShowResults(true);
                  } else {
                    setShowResults(false);
                  }
                }}
                onFocus={() => {
                  if (searchQuery.trim().length > 0) {
                    setShowResults(true);
                  }
                }}
              />
              
              {/* Search Results Dropdown */}
              {showResults && searchQuery.trim().length > 0 && (
                <div className="absolute z-50 mt-1 w-full bg-white rounded-md shadow-lg max-h-60 overflow-auto border border-gray-200">
                  <div className="py-1">
                    {filteredShows?.length ? (
                      filteredShows.map((show: TvShow) => (
                        <div
                          key={show.id}
                          className="px-4 py-2 hover:bg-gray-100 cursor-pointer"
                          onClick={() => {
                            setSearchQuery(show.name);
                            setShowResults(false);
                            setLocation(`/browse?search=${encodeURIComponent(show.name)}`);
                          }}
                        >
                          <div className="font-medium">{show.name}</div>
                          <div className="text-xs text-gray-500">
                            Ages: {show.ageRange || 'Unknown'} 
                            {show.stimulationScore ? ` • Stimulation: ${show.stimulationScore}` : ''}
                          </div>
                        </div>
                      ))
                    ) : (
                      <div className="px-4 py-2 text-sm text-gray-500">
                        No shows match your search
                      </div>
                    )}
                  </div>
                </div>
              )}
            </div>
            <Button type="submit" className="rounded-l-none">
              <i className="fas fa-search mr-2"></i> Search
            </Button>
          </div>
        </form>
      </div>
      
      {/* Featured Show */}
      {featuredShow && (
        <div className="bg-indigo-50 rounded-xl overflow-hidden mb-12">
          <div className="flex flex-col md:flex-row">
            <div className="md:w-1/3 p-6">
              <div className="mb-2">
                <Badge variant="outline" className="bg-purple-100 text-purple-800 uppercase text-xs font-bold tracking-wide">
                  Featured Listing
                </Badge>
              </div>
              {featuredShow.imageUrl ? (
                <img 
                  src={featuredShow.imageUrl} 
                  alt={featuredShow.name} 
                  className="w-full h-80 object-cover rounded-md shadow-lg"
                />
              ) : (
                <div className="w-full h-80 bg-gray-200 rounded-md shadow-lg flex items-center justify-center">
                  <i className="fas fa-tv text-gray-400 text-5xl"></i>
                </div>
              )}
            </div>
            
            <div className="md:w-2/3 p-6">
              <h2 className="text-2xl font-heading font-bold mb-2 text-gray-900">
                {featuredShow.name}
              </h2>
              <div className="mb-3">
                <Badge variant="outline" className="bg-green-100 text-green-800 mr-2">
                  Ages {featuredShow.ageRange}
                </Badge>
                <div className="inline-flex items-center">
                  <div className="flex items-center mr-2">
                    {Array(5).fill(0).map((_, i) => {
                      const scoreColors = [
                        'bg-green-500 border-green-500',    // green for 1
                        'bg-yellow-500 border-yellow-500',  // yellow for 2
                        'bg-orange-500 border-orange-500',  // orange for 3
                        'bg-orange-600 border-orange-600',  // dark orange for 4
                        'bg-red-500 border-red-500'         // red for 5
                      ];
                      const color = scoreColors[i];
                      const isActive = i < featuredShow.stimulationScore;
                      return (
                        <div 
                          key={i} 
                          className={`w-3 h-3 rounded-full mx-0.5 ${
                            isActive ? color.split(' ')[0] : `border-2 ${color.split(' ')[1]} bg-white`
                          }`}
                        />
                      );
                    })}
                  </div>
                  <span className="text-sm text-gray-600">
                    {featuredShow.stimulationScore === 1 ? 'Low' : 
                     featuredShow.stimulationScore === 2 ? 'Low-Medium' : 
                     featuredShow.stimulationScore === 3 ? 'Medium' : 
                     featuredShow.stimulationScore === 4 ? 'Medium-High' : 
                     'High'} Stimulation
                  </span>
                </div>
              </div>
              
              <p className="text-gray-700 mb-4">
                {featuredShow.description}
              </p>
              
              <div className="mb-4">
                <h3 className="font-medium text-gray-900 mb-2">Key Themes:</h3>
                <div className="flex flex-wrap gap-1">
                  {featuredShow.themes?.map((theme, index) => (
                    <Badge key={index} variant="outline" className="bg-gray-100 text-gray-800">
                      {theme}
                    </Badge>
                  ))}
                </div>
              </div>
              
              <div className="flex items-center gap-2">
                <Button 
                  variant="ghost" 
                  size="sm"
                  className="text-gray-400 hover:text-red-500"
                  onClick={(e) => {
                    e.stopPropagation();
                    if (user) {
                      toggleFavorite(featuredShow.id);
                    } else {
                      toast({
                        title: "Authentication required",
                        description: "Please log in or register to save shows to your favorites.",
                        variant: "default",
                      });
                      setLocation("/auth");
                    }
                  }}
                >
                  <Heart className="w-5 h-5 mr-1" />
                  Add to Favorites
                </Button>
                <Button 
                  className="mt-2" 
                  onClick={() => handleShowCardClick(featuredShow.id)}
                >
                  View Show Details
                </Button>
              </div>
            </div>
          </div>
        </div>
      )}
      
      {/* Explore Categories */}
      <section className="mb-12">
        <h2 className="text-2xl font-heading font-bold mb-6 text-gray-900">Explore Categories</h2>
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
          <Card 
            className="hover:shadow-lg transition-shadow cursor-pointer bg-green-50" 
            onClick={() => setLocation(`/browse?stimulationScoreRange=${encodeURIComponent(JSON.stringify({min: 1, max: 2}))}`)}
          >
            <CardContent className="p-6 text-center">
              <div className="inline-flex p-3 rounded-full bg-green-100 text-green-600 mb-3">
                <i className="fas fa-leaf text-2xl"></i>
              </div>
              <h3 className="font-heading font-bold mb-2">Lower Stimulation</h3>
              <p className="text-sm text-gray-600">Shows with calm pacing for sensitive viewers (1-2)</p>
            </CardContent>
          </Card>
          
          <Card 
            className="hover:shadow-lg transition-shadow cursor-pointer bg-blue-50" 
            onClick={() => setLocation("/browse?sortBy=stimulationScore&sortDirection=asc")}
          >
            <CardContent className="p-6 text-center">
              <div className="inline-flex p-3 rounded-full bg-blue-100 text-blue-600 mb-3">
                <i className="fas fa-star text-2xl"></i>
              </div>
              <h3 className="font-heading font-bold mb-2">Highly Rated</h3>
              <p className="text-sm text-gray-600">Shows with top ratings from our parent reviewers</p>
            </CardContent>
          </Card>
          
          <Card 
            className="hover:shadow-lg transition-shadow cursor-pointer bg-purple-50" 
            onClick={() => setLocation("/browse?interactivityLevel=High")}
          >
            <CardContent className="p-6 text-center">
              <div className="inline-flex p-3 rounded-full bg-purple-100 text-purple-600 mb-3">
                <i className="fas fa-gamepad text-2xl"></i>
              </div>
              <h3 className="font-heading font-bold mb-2">Higher Interaction</h3>
              <p className="text-sm text-gray-600">Shows that encourage audience participation</p>
            </CardContent>
          </Card>
          
          <Card 
            className="hover:shadow-lg transition-shadow cursor-pointer bg-amber-50" 
            onClick={() => setLocation("/browse?sortBy=popular")}
          >
            <CardContent className="p-6 text-center">
              <div className="inline-flex p-3 rounded-full bg-amber-100 text-amber-600 mb-3">
                <i className="fas fa-fire text-2xl"></i>
              </div>
              <h3 className="font-heading font-bold mb-2">Popular</h3>
              <p className="text-sm text-gray-600">Shows our community watches and searches for the most</p>
            </CardContent>
          </Card>
        </div>
      </section>
      
      {/* Popular Shows */}
      {renderCategorySection(
        "Popular Shows", 
        "Most-viewed shows across all age groups", 
        popularShows, 
        "/browse"
      )}
      
      {/* Highly Rated */}
      {renderCategorySection(
        "Highly Rated Shows",
        "Top-rated shows across all categories", 
        highlyRatedShows,
        "/browse?sortBy=stimulationScore&sortDirection=asc"
      )}
      
      {/* Lower Stimulation */}
      {renderCategorySection(
        "Lower Stimulation (Scores 1-2)",
        "Calmer shows with gentle pacing, perfect for sensitive viewers", 
        lowStimulationShows, 
        `/browse?stimulationScoreRange=${encodeURIComponent(JSON.stringify({min: 1, max: 2}))}`
      )}
      
      {/* Higher Interaction */}
      {renderCategorySection(
        "Higher Interaction",
        "Shows that encourage audience participation and engagement", 
        highInteractionShows, 
        "/browse?interactivityLevel=High"
      )}
      
      {/* Educational Shows */}
      {educationalShows && educationalShows.length > 0 && renderCategorySection(
        "Educational Shows",
        "Shows that focus on learning and educational content", 
        educationalShows, 
        "/browse?search=education"
      )}
      
      {/* Adventure Shows */}
      {adventureShows && adventureShows.length > 0 && renderCategorySection(
        "Adventure Shows",
        "Shows focused on exploration, excitement and adventures", 
        adventureShows, 
        "/browse?search=adventure"
      )}
      
      {/* Musical Shows */}
      {musicalShows && musicalShows.length > 0 && renderCategorySection(
        "Musical Shows",
        "Shows featuring songs, musical numbers and rhythmic content", 
        musicalShows, 
        "/browse?search=music"
      )}
      
      {/* Fantasy Shows */}
      {fantasyShows && fantasyShows.length > 0 && renderCategorySection(
        "Fantasy Shows",
        "Shows with magical, imaginative and fantasy elements", 
        fantasyShows, 
        "/browse?search=fantasy"
      )}
      
      {/* Preschooler Shows */}
      {preschoolerShows && preschoolerShows.length > 0 && renderCategorySection(
        "Preschooler Favorites",
        "Shows specifically designed for children ages 2-4", 
        preschoolerShows, 
        "/browse?ageGroup=Preschool"
      )}
    </main>
  );
}
</file>

<file path="client/src/pages/not-found.tsx">
import { Card, CardContent } from "@/components/ui/card";
import { AlertCircle } from "lucide-react";

export default function NotFound() {
  return (
    <div className="min-h-screen w-full flex items-center justify-center bg-gray-50">
      <Card className="w-full max-w-md mx-4">
        <CardContent className="pt-6">
          <div className="flex mb-4 gap-2">
            <AlertCircle className="h-8 w-8 text-red-500" />
            <h1 className="text-2xl font-bold text-gray-900">404 Page Not Found</h1>
          </div>

          <p className="mt-4 text-sm text-gray-600">
            Did you forget to add the page to the router?
          </p>
        </CardContent>
      </Card>
    </div>
  );
}
</file>

<file path="client/src/index.css">
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --background: 0 0% 100%;
  --foreground: 20 14.3% 4.1%;
  --muted: 60 4.8% 95.9%;
  --muted-foreground: 25 5.3% 44.7%;
  --popover: 0 0% 100%;
  --popover-foreground: 20 14.3% 4.1%;
  --card: 0 0% 100%;
  --card-foreground: 20 14.3% 4.1%;
  --border: 20 5.9% 90%;
  --input: 20 5.9% 90%;
  --primary: 196 42% 27%; /* Changed from purple to teal blue #285161 */
  --primary-foreground: 210 20% 98%;
  --secondary: 40 100% 50%; /* Changed to yellow/gold */
  --secondary-foreground: 24 9.8% 10%;
  --accent: 142 71% 45%; /* Green for accent */
  --accent-foreground: 24 9.8% 10%;
  --destructive: 0 84.2% 60.2%;
  --destructive-foreground: 60 9.1% 97.8%;
  --ring: 20 14.3% 4.1%;
  --radius: 0.5rem;
  --chart-1: 196 42% 27%; /* Teal Blue #285161 */
  --chart-2: 40 100% 50%; /* Yellow */
  --chart-3: 142 71% 45%; /* Green */
  --chart-4: 0 84.2% 60.2%; /* Red */
  --chart-5: 199 89% 48%; /* Blue */
}

.dark {
  --background: 240 10% 3.9%;
  --foreground: 0 0% 98%;
  --muted: 240 3.7% 15.9%;
  --muted-foreground: 240 5% 64.9%;
  --popover: 240 10% 3.9%;
  --popover-foreground: 0 0% 98%;
  --card: 240 10% 3.9%;
  --card-foreground: 0 0% 98%;
  --border: 240 3.7% 15.9%;
  --input: 240 3.7% 15.9%;
  --primary: 196 42% 27%; /* Changed from purple to teal blue #285161 */
  --primary-foreground: 0 0% 98%;
  --secondary: 40 100% 50%; /* Changed to yellow/gold */
  --secondary-foreground: 0 0% 98%;
  --accent: 142 71% 45%; /* Green for accent */
  --accent-foreground: 0 0% 98%;
  --destructive: 0 62.8% 30.6%;
  --destructive-foreground: 0 0% 98%;
  --ring: 240 4.9% 83.9%;
  --radius: 0.5rem;
}

@layer base {
  * {
    @apply border-border;
  }

  body {
    @apply font-sans antialiased bg-background text-foreground;
  }
}

@layer components {
  .green-rating {
    @apply bg-green-500;
  }
  
  .yellow-rating {
    @apply bg-yellow-500;
  }
  
  .red-rating {
    @apply bg-red-500;
  }
  
  .teal-rating {
    @apply bg-primary;
  }
}

/* Custom font settings */
h1, h2, h3, h4, h5, h6 {
  font-family: 'Nunito', sans-serif;
  font-weight: 700;
}

body {
  font-family: 'Open Sans', sans-serif;
}
</file>

<file path="migrations/meta/_journal.json">
{
  "version": "7",
  "dialect": "postgresql",
  "entries": [
    {
      "idx": 0,
      "version": "7",
      "when": 1747135740446,
      "tag": "0000_nostalgic_mister_fear",
      "breakpoints": true
    }
  ]
}
</file>

<file path="migrations/meta/0000_snapshot.json">
{
  "id": "fec13a2d-9e22-40ec-a927-b7a9e8121255",
  "prevId": "00000000-0000-0000-0000-000000000000",
  "version": "7",
  "dialect": "postgresql",
  "tables": {
    "public.favorites": {
      "name": "favorites",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "serial",
          "primaryKey": true,
          "notNull": true
        },
        "user_id": {
          "name": "user_id",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "tv_show_id": {
          "name": "tv_show_id",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "default": "'2025-05-13T11:29:00.429Z'"
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.tv_show_reviews": {
      "name": "tv_show_reviews",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "serial",
          "primaryKey": true,
          "notNull": true
        },
        "tv_show_id": {
          "name": "tv_show_id",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "user_name": {
          "name": "user_name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "rating": {
          "name": "rating",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "review": {
          "name": "review",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "default": "'2025-05-13T11:29:00.431Z'"
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.tv_show_searches": {
      "name": "tv_show_searches",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "serial",
          "primaryKey": true,
          "notNull": true
        },
        "tv_show_id": {
          "name": "tv_show_id",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "search_count": {
          "name": "search_count",
          "type": "integer",
          "primaryKey": false,
          "notNull": true,
          "default": 1
        },
        "view_count": {
          "name": "view_count",
          "type": "integer",
          "primaryKey": false,
          "notNull": true,
          "default": 0
        },
        "last_searched": {
          "name": "last_searched",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "default": "'2025-05-13T11:29:00.431Z'"
        },
        "last_viewed": {
          "name": "last_viewed",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.tv_shows": {
      "name": "tv_shows",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "serial",
          "primaryKey": true,
          "notNull": true
        },
        "name": {
          "name": "name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "description": {
          "name": "description",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "age_range": {
          "name": "age_range",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "episode_length": {
          "name": "episode_length",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "creator": {
          "name": "creator",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "release_year": {
          "name": "release_year",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "end_year": {
          "name": "end_year",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "is_ongoing": {
          "name": "is_ongoing",
          "type": "boolean",
          "primaryKey": false,
          "notNull": false,
          "default": true
        },
        "seasons": {
          "name": "seasons",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "stimulation_score": {
          "name": "stimulation_score",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "interactivity_level": {
          "name": "interactivity_level",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "dialogue_intensity": {
          "name": "dialogue_intensity",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "sound_effects_level": {
          "name": "sound_effects_level",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "music_tempo": {
          "name": "music_tempo",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "total_music_level": {
          "name": "total_music_level",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "total_sound_effect_time_level": {
          "name": "total_sound_effect_time_level",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "scene_frequency": {
          "name": "scene_frequency",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "friendship_rating": {
          "name": "friendship_rating",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "problem_solving_rating": {
          "name": "problem_solving_rating",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "relatable_situations_rating": {
          "name": "relatable_situations_rating",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "emotional_intelligence_rating": {
          "name": "emotional_intelligence_rating",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "creativity_rating": {
          "name": "creativity_rating",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "educational_value_rating": {
          "name": "educational_value_rating",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "available_on": {
          "name": "available_on",
          "type": "text[]",
          "primaryKey": false,
          "notNull": false
        },
        "themes": {
          "name": "themes",
          "type": "text[]",
          "primaryKey": false,
          "notNull": false
        },
        "animation_style": {
          "name": "animation_style",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "image_url": {
          "name": "image_url",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.users": {
      "name": "users",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "serial",
          "primaryKey": true,
          "notNull": true
        },
        "email": {
          "name": "email",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "password": {
          "name": "password",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "is_admin": {
          "name": "is_admin",
          "type": "boolean",
          "primaryKey": false,
          "notNull": false,
          "default": false
        },
        "username": {
          "name": "username",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "country": {
          "name": "country",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "default": "'2025-05-13T11:29:00.425Z'"
        },
        "is_approved": {
          "name": "is_approved",
          "type": "boolean",
          "primaryKey": false,
          "notNull": false,
          "default": false
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "users_email_unique": {
          "name": "users_email_unique",
          "nullsNotDistinct": false,
          "columns": [
            "email"
          ]
        }
      },
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    }
  },
  "enums": {},
  "schemas": {},
  "sequences": {},
  "roles": {},
  "policies": {},
  "views": {},
  "_meta": {
    "columns": {},
    "schemas": {},
    "tables": {}
  }
}
</file>

<file path="migrations/0000_nostalgic_mister_fear.sql">
CREATE TABLE "favorites" (
	"id" serial PRIMARY KEY NOT NULL,
	"user_id" integer NOT NULL,
	"tv_show_id" integer NOT NULL,
	"created_at" text DEFAULT '2025-05-13T11:29:00.429Z' NOT NULL
);
--> statement-breakpoint
CREATE TABLE "tv_show_reviews" (
	"id" serial PRIMARY KEY NOT NULL,
	"tv_show_id" integer NOT NULL,
	"user_name" text NOT NULL,
	"rating" integer NOT NULL,
	"review" text NOT NULL,
	"created_at" text DEFAULT '2025-05-13T11:29:00.431Z' NOT NULL
);
--> statement-breakpoint
CREATE TABLE "tv_show_searches" (
	"id" serial PRIMARY KEY NOT NULL,
	"tv_show_id" integer NOT NULL,
	"search_count" integer DEFAULT 1 NOT NULL,
	"view_count" integer DEFAULT 0 NOT NULL,
	"last_searched" text DEFAULT '2025-05-13T11:29:00.431Z' NOT NULL,
	"last_viewed" text
);
--> statement-breakpoint
CREATE TABLE "tv_shows" (
	"id" serial PRIMARY KEY NOT NULL,
	"name" text NOT NULL,
	"description" text NOT NULL,
	"age_range" text NOT NULL,
	"episode_length" integer NOT NULL,
	"creator" text,
	"release_year" integer,
	"end_year" integer,
	"is_ongoing" boolean DEFAULT true,
	"seasons" integer,
	"stimulation_score" integer NOT NULL,
	"interactivity_level" text,
	"dialogue_intensity" text,
	"sound_effects_level" text,
	"music_tempo" text,
	"total_music_level" text,
	"total_sound_effect_time_level" text,
	"scene_frequency" text,
	"friendship_rating" integer,
	"problem_solving_rating" integer,
	"relatable_situations_rating" integer,
	"emotional_intelligence_rating" integer,
	"creativity_rating" integer,
	"educational_value_rating" integer,
	"available_on" text[],
	"themes" text[],
	"animation_style" text,
	"image_url" text
);
--> statement-breakpoint
CREATE TABLE "users" (
	"id" serial PRIMARY KEY NOT NULL,
	"email" text NOT NULL,
	"password" text NOT NULL,
	"is_admin" boolean DEFAULT false,
	"username" text NOT NULL,
	"country" text,
	"created_at" text DEFAULT '2025-05-13T11:29:00.425Z' NOT NULL,
	"is_approved" boolean DEFAULT false,
	CONSTRAINT "users_email_unique" UNIQUE("email")
);
</file>

<file path="postgres/base/1/PG_VERSION">
16
</file>

<file path="postgres/base/4/PG_VERSION">
16
</file>

<file path="postgres/base/5/PG_VERSION">
16
</file>

<file path="postgres/pg_hba.conf">
# PostgreSQL Client Authentication Configuration File
# ===================================================
#
# Refer to the "Client Authentication" section in the PostgreSQL
# documentation for a complete description of this file.  A short
# synopsis follows.
#
# ----------------------
# Authentication Records
# ----------------------
#
# This file controls: which hosts are allowed to connect, how clients
# are authenticated, which PostgreSQL user names they can use, which
# databases they can access.  Records take one of these forms:
#
# local         DATABASE  USER  METHOD  [OPTIONS]
# host          DATABASE  USER  ADDRESS  METHOD  [OPTIONS]
# hostssl       DATABASE  USER  ADDRESS  METHOD  [OPTIONS]
# hostnossl     DATABASE  USER  ADDRESS  METHOD  [OPTIONS]
# hostgssenc    DATABASE  USER  ADDRESS  METHOD  [OPTIONS]
# hostnogssenc  DATABASE  USER  ADDRESS  METHOD  [OPTIONS]
#
# (The uppercase items must be replaced by actual values.)
#
# The first field is the connection type:
# - "local" is a Unix-domain socket
# - "host" is a TCP/IP socket (encrypted or not)
# - "hostssl" is a TCP/IP socket that is SSL-encrypted
# - "hostnossl" is a TCP/IP socket that is not SSL-encrypted
# - "hostgssenc" is a TCP/IP socket that is GSSAPI-encrypted
# - "hostnogssenc" is a TCP/IP socket that is not GSSAPI-encrypted
#
# DATABASE can be "all", "sameuser", "samerole", "replication", a
# database name, a regular expression (if it starts with a slash (/))
# or a comma-separated list thereof.  The "all" keyword does not match
# "replication".  Access to replication must be enabled in a separate
# record (see example below).
#
# USER can be "all", a user name, a group name prefixed with "+", a
# regular expression (if it starts with a slash (/)) or a comma-separated
# list thereof.  In both the DATABASE and USER fields you can also write
# a file name prefixed with "@" to include names from a separate file.
#
# ADDRESS specifies the set of hosts the record matches.  It can be a
# host name, or it is made up of an IP address and a CIDR mask that is
# an integer (between 0 and 32 (IPv4) or 128 (IPv6) inclusive) that
# specifies the number of significant bits in the mask.  A host name
# that starts with a dot (.) matches a suffix of the actual host name.
# Alternatively, you can write an IP address and netmask in separate
# columns to specify the set of hosts.  Instead of a CIDR-address, you
# can write "samehost" to match any of the server's own IP addresses,
# or "samenet" to match any address in any subnet that the server is
# directly connected to.
#
# METHOD can be "trust", "reject", "md5", "password", "scram-sha-256",
# "gss", "sspi", "ident", "peer", "pam", "ldap", "radius" or "cert".
# Note that "password" sends passwords in clear text; "md5" or
# "scram-sha-256" are preferred since they send encrypted passwords.
#
# OPTIONS are a set of options for the authentication in the format
# NAME=VALUE.  The available options depend on the different
# authentication methods -- refer to the "Client Authentication"
# section in the documentation for a list of which options are
# available for which authentication methods.
#
# Database and user names containing spaces, commas, quotes and other
# special characters must be quoted.  Quoting one of the keywords
# "all", "sameuser", "samerole" or "replication" makes the name lose
# its special character, and just match a database or username with
# that name.
#
# ---------------
# Include Records
# ---------------
#
# This file allows the inclusion of external files or directories holding
# more records, using the following keywords:
#
# include           FILE
# include_if_exists FILE
# include_dir       DIRECTORY
#
# FILE is the file name to include, and DIR is the directory name containing
# the file(s) to include.  Any file in a directory will be loaded if suffixed
# with ".conf".  The files of a directory are ordered by name.
# include_if_exists ignores missing files.  FILE and DIRECTORY can be
# specified as a relative or an absolute path, and can be double-quoted if
# they contain spaces.
#
# -------------
# Miscellaneous
# -------------
#
# This file is read on server startup and when the server receives a
# SIGHUP signal.  If you edit the file on a running system, you have to
# SIGHUP the server for the changes to take effect, run "pg_ctl reload",
# or execute "SELECT pg_reload_conf()".
#
# ----------------------------------
# Put your actual configuration here
# ----------------------------------
#
# If you want to allow non-local connections, you need to add more
# "host" records.  In that case you will also need to make PostgreSQL
# listen on a non-local interface via the listen_addresses
# configuration parameter, or via the -i or -h command line switches.

# CAUTION: Configuring the system for local "trust" authentication
# allows any local user to connect as any PostgreSQL user, including
# the database superuser.  If you do not trust all your local users,
# use another authentication method.


# TYPE  DATABASE        USER            ADDRESS                 METHOD

# "local" is for Unix domain socket connections only
local   all             all                                     trust
# IPv4 local connections:
host    all             all             127.0.0.1/32            trust
# IPv6 local connections:
host    all             all             ::1/128                 trust
# Allow replication connections from localhost, by a user with the
# replication privilege.
local   replication     all                                     trust
host    replication     all             127.0.0.1/32            trust
host    replication     all             ::1/128                 trust
</file>

<file path="postgres/pg_ident.conf">
# PostgreSQL User Name Maps
# =========================
#
# ---------------
# Mapping Records
# ---------------
#
# Refer to the PostgreSQL documentation, chapter "Client
# Authentication" for a complete description.  A short synopsis
# follows.
#
# This file controls PostgreSQL user name mapping.  It maps external
# user names to their corresponding PostgreSQL user names.  Records
# are of the form:
#
# MAPNAME  SYSTEM-USERNAME  PG-USERNAME
#
# (The uppercase quantities must be replaced by actual values.)
#
# MAPNAME is the (otherwise freely chosen) map name that was used in
# pg_hba.conf.  SYSTEM-USERNAME is the detected user name of the
# client.  PG-USERNAME is the requested PostgreSQL user name.  The
# existence of a record specifies that SYSTEM-USERNAME may connect as
# PG-USERNAME.
#
# If SYSTEM-USERNAME starts with a slash (/), it will be treated as a
# regular expression.  Optionally this can contain a capture (a
# parenthesized subexpression).  The substring matching the capture
# will be substituted for \1 (backslash-one) if present in
# PG-USERNAME.
#
# PG-USERNAME can be "all", a user name, a group name prefixed with "+", or
# a regular expression (if it starts with a slash (/)).  If it is a regular
# expression, the substring matching with \1 has no effect.
#
# Multiple maps may be specified in this file and used by pg_hba.conf.
#
# No map names are defined in the default configuration.  If all
# system user names and PostgreSQL user names are the same, you don't
# need anything in this file.
#
# ---------------
# Include Records
# ---------------
#
# This file allows the inclusion of external files or directories holding
# more records, using the following keywords:
#
# include           FILE
# include_if_exists FILE
# include_dir       DIRECTORY
#
# FILE is the file name to include, and DIR is the directory name containing
# the file(s) to include.  Any file in a directory will be loaded if suffixed
# with ".conf".  The files of a directory are ordered by name.
# include_if_exists ignores missing files.  FILE and DIRECTORY can be
# specified as a relative or an absolute path, and can be double-quoted if
# they contain spaces.
#
# -------------------------------
# Miscellaneous
# -------------------------------
#
# This file is read on server startup and when the postmaster receives
# a SIGHUP signal.  If you edit the file on a running system, you have
# to SIGHUP the postmaster for the changes to take effect.  You can
# use "pg_ctl reload" to do that.

# Put your actual configuration here
# ----------------------------------

# MAPNAME       SYSTEM-USERNAME         PG-USERNAME
</file>

<file path="postgres/PG_VERSION">
16
</file>

<file path="postgres/postgresql.auto.conf">
# Do not edit this file manually!
# It will be overwritten by the ALTER SYSTEM command.
</file>

<file path="postgres/postgresql.conf">
# -----------------------------
# PostgreSQL configuration file
# -----------------------------
#
# This file consists of lines of the form:
#
#   name = value
#
# (The "=" is optional.)  Whitespace may be used.  Comments are introduced with
# "#" anywhere on a line.  The complete list of parameter names and allowed
# values can be found in the PostgreSQL documentation.
#
# The commented-out settings shown in this file represent the default values.
# Re-commenting a setting is NOT sufficient to revert it to the default value;
# you need to reload the server.
#
# This file is read on server startup and when the server receives a SIGHUP
# signal.  If you edit the file on a running system, you have to SIGHUP the
# server for the changes to take effect, run "pg_ctl reload", or execute
# "SELECT pg_reload_conf()".  Some parameters, which are marked below,
# require a server shutdown and restart to take effect.
#
# Any parameter can also be given as a command-line option to the server, e.g.,
# "postgres -c log_connections=on".  Some parameters can be changed at run time
# with the "SET" SQL command.
#
# Memory units:  B  = bytes            Time units:  us  = microseconds
#                kB = kilobytes                     ms  = milliseconds
#                MB = megabytes                     s   = seconds
#                GB = gigabytes                     min = minutes
#                TB = terabytes                     h   = hours
#                                                   d   = days


#------------------------------------------------------------------------------
# FILE LOCATIONS
#------------------------------------------------------------------------------

# The default values of these variables are driven from the -D command-line
# option or PGDATA environment variable, represented here as ConfigDir.

#data_directory = 'ConfigDir'		# use data in another directory
					# (change requires restart)
#hba_file = 'ConfigDir/pg_hba.conf'	# host-based authentication file
					# (change requires restart)
#ident_file = 'ConfigDir/pg_ident.conf'	# ident configuration file
					# (change requires restart)

# If external_pid_file is not explicitly set, no extra PID file is written.
#external_pid_file = ''			# write an extra PID file
					# (change requires restart)


#------------------------------------------------------------------------------
# CONNECTIONS AND AUTHENTICATION
#------------------------------------------------------------------------------

# - Connection Settings -

#listen_addresses = 'localhost'		# what IP address(es) to listen on;
					# comma-separated list of addresses;
					# defaults to 'localhost'; use '*' for all
					# (change requires restart)
#port = 5432				# (change requires restart)
max_connections = 100			# (change requires restart)
#reserved_connections = 0		# (change requires restart)
#superuser_reserved_connections = 3	# (change requires restart)
#unix_socket_directories = '/run/postgresql' # comma-separated list of directories
					# (change requires restart)
#unix_socket_group = ''			# (change requires restart)
#unix_socket_permissions = 0777		# begin with 0 to use octal notation
					# (change requires restart)
#bonjour = off				# advertise server via Bonjour
					# (change requires restart)
#bonjour_name = ''			# defaults to the computer name
					# (change requires restart)

# - TCP settings -
# see "man tcp" for details

#tcp_keepalives_idle = 0		# TCP_KEEPIDLE, in seconds;
					# 0 selects the system default
#tcp_keepalives_interval = 0		# TCP_KEEPINTVL, in seconds;
					# 0 selects the system default
#tcp_keepalives_count = 0		# TCP_KEEPCNT;
					# 0 selects the system default
#tcp_user_timeout = 0			# TCP_USER_TIMEOUT, in milliseconds;
					# 0 selects the system default

#client_connection_check_interval = 0	# time between checks for client
					# disconnection while running queries;
					# 0 for never

# - Authentication -

#authentication_timeout = 1min		# 1s-600s
#password_encryption = scram-sha-256	# scram-sha-256 or md5
#scram_iterations = 4096
#db_user_namespace = off

# GSSAPI using Kerberos
#krb_server_keyfile = 'FILE:${sysconfdir}/krb5.keytab'
#krb_caseins_users = off
#gss_accept_delegation = off

# - SSL -

#ssl = off
#ssl_ca_file = ''
#ssl_cert_file = 'server.crt'
#ssl_crl_file = ''
#ssl_crl_dir = ''
#ssl_key_file = 'server.key'
#ssl_ciphers = 'HIGH:MEDIUM:+3DES:!aNULL' # allowed SSL ciphers
#ssl_prefer_server_ciphers = on
#ssl_ecdh_curve = 'prime256v1'
#ssl_min_protocol_version = 'TLSv1.2'
#ssl_max_protocol_version = ''
#ssl_dh_params_file = ''
#ssl_passphrase_command = ''
#ssl_passphrase_command_supports_reload = off


#------------------------------------------------------------------------------
# RESOURCE USAGE (except WAL)
#------------------------------------------------------------------------------

# - Memory -

shared_buffers = 128MB			# min 128kB
					# (change requires restart)
#huge_pages = try			# on, off, or try
					# (change requires restart)
#huge_page_size = 0			# zero for system default
					# (change requires restart)
#temp_buffers = 8MB			# min 800kB
#max_prepared_transactions = 0		# zero disables the feature
					# (change requires restart)
# Caution: it is not advisable to set max_prepared_transactions nonzero unless
# you actively intend to use prepared transactions.
#work_mem = 4MB				# min 64kB
#hash_mem_multiplier = 2.0		# 1-1000.0 multiplier on hash table work_mem
#maintenance_work_mem = 64MB		# min 1MB
#autovacuum_work_mem = -1		# min 1MB, or -1 to use maintenance_work_mem
#logical_decoding_work_mem = 64MB	# min 64kB
#max_stack_depth = 2MB			# min 100kB
#shared_memory_type = mmap		# the default is the first option
					# supported by the operating system:
					#   mmap
					#   sysv
					#   windows
					# (change requires restart)
dynamic_shared_memory_type = posix	# the default is usually the first option
					# supported by the operating system:
					#   posix
					#   sysv
					#   windows
					#   mmap
					# (change requires restart)
#min_dynamic_shared_memory = 0MB	# (change requires restart)
#vacuum_buffer_usage_limit = 256kB	# size of vacuum and analyze buffer access strategy ring;
					# 0 to disable vacuum buffer access strategy;
					# range 128kB to 16GB

# - Disk -

#temp_file_limit = -1			# limits per-process temp file space
					# in kilobytes, or -1 for no limit

# - Kernel Resources -

#max_files_per_process = 1000		# min 64
					# (change requires restart)

# - Cost-Based Vacuum Delay -

#vacuum_cost_delay = 0			# 0-100 milliseconds (0 disables)
#vacuum_cost_page_hit = 1		# 0-10000 credits
#vacuum_cost_page_miss = 2		# 0-10000 credits
#vacuum_cost_page_dirty = 20		# 0-10000 credits
#vacuum_cost_limit = 200		# 1-10000 credits

# - Background Writer -

#bgwriter_delay = 200ms			# 10-10000ms between rounds
#bgwriter_lru_maxpages = 100		# max buffers written/round, 0 disables
#bgwriter_lru_multiplier = 2.0		# 0-10.0 multiplier on buffers scanned/round
#bgwriter_flush_after = 512kB		# measured in pages, 0 disables

# - Asynchronous Behavior -

#backend_flush_after = 0		# measured in pages, 0 disables
#effective_io_concurrency = 1		# 1-1000; 0 disables prefetching
#maintenance_io_concurrency = 10	# 1-1000; 0 disables prefetching
#max_worker_processes = 8		# (change requires restart)
#max_parallel_workers_per_gather = 2	# limited by max_parallel_workers
#max_parallel_maintenance_workers = 2	# limited by max_parallel_workers
#max_parallel_workers = 8		# number of max_worker_processes that
					# can be used in parallel operations
#parallel_leader_participation = on
#old_snapshot_threshold = -1		# 1min-60d; -1 disables; 0 is immediate
					# (change requires restart)


#------------------------------------------------------------------------------
# WRITE-AHEAD LOG
#------------------------------------------------------------------------------

# - Settings -

#wal_level = replica			# minimal, replica, or logical
					# (change requires restart)
#fsync = on				# flush data to disk for crash safety
					# (turning this off can cause
					# unrecoverable data corruption)
#synchronous_commit = on		# synchronization level;
					# off, local, remote_write, remote_apply, or on
#wal_sync_method = fsync		# the default is the first option
					# supported by the operating system:
					#   open_datasync
					#   fdatasync (default on Linux and FreeBSD)
					#   fsync
					#   fsync_writethrough
					#   open_sync
#full_page_writes = on			# recover from partial page writes
#wal_log_hints = off			# also do full page writes of non-critical updates
					# (change requires restart)
#wal_compression = off			# enables compression of full-page writes;
					# off, pglz, lz4, zstd, or on
#wal_init_zero = on			# zero-fill new WAL files
#wal_recycle = on			# recycle WAL files
#wal_buffers = -1			# min 32kB, -1 sets based on shared_buffers
					# (change requires restart)
#wal_writer_delay = 200ms		# 1-10000 milliseconds
#wal_writer_flush_after = 1MB		# measured in pages, 0 disables
#wal_skip_threshold = 2MB

#commit_delay = 0			# range 0-100000, in microseconds
#commit_siblings = 5			# range 1-1000

# - Checkpoints -

#checkpoint_timeout = 5min		# range 30s-1d
#checkpoint_completion_target = 0.9	# checkpoint target duration, 0.0 - 1.0
#checkpoint_flush_after = 256kB		# measured in pages, 0 disables
#checkpoint_warning = 30s		# 0 disables
max_wal_size = 1GB
min_wal_size = 80MB

# - Prefetching during recovery -

#recovery_prefetch = try		# prefetch pages referenced in the WAL?
#wal_decode_buffer_size = 512kB		# lookahead window used for prefetching
					# (change requires restart)

# - Archiving -

#archive_mode = off		# enables archiving; off, on, or always
				# (change requires restart)
#archive_library = ''		# library to use to archive a WAL file
				# (empty string indicates archive_command should
				# be used)
#archive_command = ''		# command to use to archive a WAL file
				# placeholders: %p = path of file to archive
				#               %f = file name only
				# e.g. 'test ! -f /mnt/server/archivedir/%f && cp %p /mnt/server/archivedir/%f'
#archive_timeout = 0		# force a WAL file switch after this
				# number of seconds; 0 disables

# - Archive Recovery -

# These are only used in recovery mode.

#restore_command = ''		# command to use to restore an archived WAL file
				# placeholders: %p = path of file to restore
				#               %f = file name only
				# e.g. 'cp /mnt/server/archivedir/%f %p'
#archive_cleanup_command = ''	# command to execute at every restartpoint
#recovery_end_command = ''	# command to execute at completion of recovery

# - Recovery Target -

# Set these only when performing a targeted recovery.

#recovery_target = ''		# 'immediate' to end recovery as soon as a
                                # consistent state is reached
				# (change requires restart)
#recovery_target_name = ''	# the named restore point to which recovery will proceed
				# (change requires restart)
#recovery_target_time = ''	# the time stamp up to which recovery will proceed
				# (change requires restart)
#recovery_target_xid = ''	# the transaction ID up to which recovery will proceed
				# (change requires restart)
#recovery_target_lsn = ''	# the WAL LSN up to which recovery will proceed
				# (change requires restart)
#recovery_target_inclusive = on # Specifies whether to stop:
				# just after the specified recovery target (on)
				# just before the recovery target (off)
				# (change requires restart)
#recovery_target_timeline = 'latest'	# 'current', 'latest', or timeline ID
				# (change requires restart)
#recovery_target_action = 'pause'	# 'pause', 'promote', 'shutdown'
				# (change requires restart)


#------------------------------------------------------------------------------
# REPLICATION
#------------------------------------------------------------------------------

# - Sending Servers -

# Set these on the primary and on any standby that will send replication data.

#max_wal_senders = 10		# max number of walsender processes
				# (change requires restart)
#max_replication_slots = 10	# max number of replication slots
				# (change requires restart)
#wal_keep_size = 0		# in megabytes; 0 disables
#max_slot_wal_keep_size = -1	# in megabytes; -1 disables
#wal_sender_timeout = 60s	# in milliseconds; 0 disables
#track_commit_timestamp = off	# collect timestamp of transaction commit
				# (change requires restart)

# - Primary Server -

# These settings are ignored on a standby server.

#synchronous_standby_names = ''	# standby servers that provide sync rep
				# method to choose sync standbys, number of sync standbys,
				# and comma-separated list of application_name
				# from standby(s); '*' = all

# - Standby Servers -

# These settings are ignored on a primary server.

#primary_conninfo = ''			# connection string to sending server
#primary_slot_name = ''			# replication slot on sending server
#hot_standby = on			# "off" disallows queries during recovery
					# (change requires restart)
#max_standby_archive_delay = 30s	# max delay before canceling queries
					# when reading WAL from archive;
					# -1 allows indefinite delay
#max_standby_streaming_delay = 30s	# max delay before canceling queries
					# when reading streaming WAL;
					# -1 allows indefinite delay
#wal_receiver_create_temp_slot = off	# create temp slot if primary_slot_name
					# is not set
#wal_receiver_status_interval = 10s	# send replies at least this often
					# 0 disables
#hot_standby_feedback = off		# send info from standby to prevent
					# query conflicts
#wal_receiver_timeout = 60s		# time that receiver waits for
					# communication from primary
					# in milliseconds; 0 disables
#wal_retrieve_retry_interval = 5s	# time to wait before retrying to
					# retrieve WAL after a failed attempt
#recovery_min_apply_delay = 0		# minimum delay for applying changes during recovery

# - Subscribers -

# These settings are ignored on a publisher.

#max_logical_replication_workers = 4	# taken from max_worker_processes
					# (change requires restart)
#max_sync_workers_per_subscription = 2	# taken from max_logical_replication_workers
#max_parallel_apply_workers_per_subscription = 2	# taken from max_logical_replication_workers


#------------------------------------------------------------------------------
# QUERY TUNING
#------------------------------------------------------------------------------

# - Planner Method Configuration -

#enable_async_append = on
#enable_bitmapscan = on
#enable_gathermerge = on
#enable_hashagg = on
#enable_hashjoin = on
#enable_incremental_sort = on
#enable_indexscan = on
#enable_indexonlyscan = on
#enable_material = on
#enable_memoize = on
#enable_mergejoin = on
#enable_nestloop = on
#enable_parallel_append = on
#enable_parallel_hash = on
#enable_partition_pruning = on
#enable_partitionwise_join = off
#enable_partitionwise_aggregate = off
#enable_presorted_aggregate = on
#enable_seqscan = on
#enable_sort = on
#enable_tidscan = on

# - Planner Cost Constants -

#seq_page_cost = 1.0			# measured on an arbitrary scale
#random_page_cost = 4.0			# same scale as above
#cpu_tuple_cost = 0.01			# same scale as above
#cpu_index_tuple_cost = 0.005		# same scale as above
#cpu_operator_cost = 0.0025		# same scale as above
#parallel_setup_cost = 1000.0	# same scale as above
#parallel_tuple_cost = 0.1		# same scale as above
#min_parallel_table_scan_size = 8MB
#min_parallel_index_scan_size = 512kB
#effective_cache_size = 4GB

#jit_above_cost = 100000		# perform JIT compilation if available
					# and query more expensive than this;
					# -1 disables
#jit_inline_above_cost = 500000		# inline small functions if query is
					# more expensive than this; -1 disables
#jit_optimize_above_cost = 500000	# use expensive JIT optimizations if
					# query is more expensive than this;
					# -1 disables

# - Genetic Query Optimizer -

#geqo = on
#geqo_threshold = 12
#geqo_effort = 5			# range 1-10
#geqo_pool_size = 0			# selects default based on effort
#geqo_generations = 0			# selects default based on effort
#geqo_selection_bias = 2.0		# range 1.5-2.0
#geqo_seed = 0.0			# range 0.0-1.0

# - Other Planner Options -

#default_statistics_target = 100	# range 1-10000
#constraint_exclusion = partition	# on, off, or partition
#cursor_tuple_fraction = 0.1		# range 0.0-1.0
#from_collapse_limit = 8
#jit = on				# allow JIT compilation
#join_collapse_limit = 8		# 1 disables collapsing of explicit
					# JOIN clauses
#plan_cache_mode = auto			# auto, force_generic_plan or
					# force_custom_plan
#recursive_worktable_factor = 10.0	# range 0.001-1000000


#------------------------------------------------------------------------------
# REPORTING AND LOGGING
#------------------------------------------------------------------------------

# - Where to Log -

#log_destination = 'stderr'		# Valid values are combinations of
					# stderr, csvlog, jsonlog, syslog, and
					# eventlog, depending on platform.
					# csvlog and jsonlog require
					# logging_collector to be on.

# This is used when logging to stderr:
#logging_collector = off		# Enable capturing of stderr, jsonlog,
					# and csvlog into log files. Required
					# to be on for csvlogs and jsonlogs.
					# (change requires restart)

# These are only used if logging_collector is on:
#log_directory = 'log'			# directory where log files are written,
					# can be absolute or relative to PGDATA
#log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'	# log file name pattern,
					# can include strftime() escapes
#log_file_mode = 0600			# creation mode for log files,
					# begin with 0 to use octal notation
#log_rotation_age = 1d			# Automatic rotation of logfiles will
					# happen after that time.  0 disables.
#log_rotation_size = 10MB		# Automatic rotation of logfiles will
					# happen after that much log output.
					# 0 disables.
#log_truncate_on_rotation = off		# If on, an existing log file with the
					# same name as the new log file will be
					# truncated rather than appended to.
					# But such truncation only occurs on
					# time-driven rotation, not on restarts
					# or size-driven rotation.  Default is
					# off, meaning append to existing files
					# in all cases.

# These are relevant when logging to syslog:
#syslog_facility = 'LOCAL0'
#syslog_ident = 'postgres'
#syslog_sequence_numbers = on
#syslog_split_messages = on

# This is only relevant when logging to eventlog (Windows):
# (change requires restart)
#event_source = 'PostgreSQL'

# - When to Log -

#log_min_messages = warning		# values in order of decreasing detail:
					#   debug5
					#   debug4
					#   debug3
					#   debug2
					#   debug1
					#   info
					#   notice
					#   warning
					#   error
					#   log
					#   fatal
					#   panic

#log_min_error_statement = error	# values in order of decreasing detail:
					#   debug5
					#   debug4
					#   debug3
					#   debug2
					#   debug1
					#   info
					#   notice
					#   warning
					#   error
					#   log
					#   fatal
					#   panic (effectively off)

#log_min_duration_statement = -1	# -1 is disabled, 0 logs all statements
					# and their durations, > 0 logs only
					# statements running at least this number
					# of milliseconds

#log_min_duration_sample = -1		# -1 is disabled, 0 logs a sample of statements
					# and their durations, > 0 logs only a sample of
					# statements running at least this number
					# of milliseconds;
					# sample fraction is determined by log_statement_sample_rate

#log_statement_sample_rate = 1.0	# fraction of logged statements exceeding
					# log_min_duration_sample to be logged;
					# 1.0 logs all such statements, 0.0 never logs


#log_transaction_sample_rate = 0.0	# fraction of transactions whose statements
					# are logged regardless of their duration; 1.0 logs all
					# statements from all transactions, 0.0 never logs

#log_startup_progress_interval = 10s	# Time between progress updates for
					# long-running startup operations.
					# 0 disables the feature, > 0 indicates
					# the interval in milliseconds.

# - What to Log -

#debug_print_parse = off
#debug_print_rewritten = off
#debug_print_plan = off
#debug_pretty_print = on
#log_autovacuum_min_duration = 10min	# log autovacuum activity;
					# -1 disables, 0 logs all actions and
					# their durations, > 0 logs only
					# actions running at least this number
					# of milliseconds.
#log_checkpoints = on
#log_connections = off
#log_disconnections = off
#log_duration = off
#log_error_verbosity = default		# terse, default, or verbose messages
#log_hostname = off
#log_line_prefix = '%m [%p] '		# special values:
					#   %a = application name
					#   %u = user name
					#   %d = database name
					#   %r = remote host and port
					#   %h = remote host
					#   %b = backend type
					#   %p = process ID
					#   %P = process ID of parallel group leader
					#   %t = timestamp without milliseconds
					#   %m = timestamp with milliseconds
					#   %n = timestamp with milliseconds (as a Unix epoch)
					#   %Q = query ID (0 if none or not computed)
					#   %i = command tag
					#   %e = SQL state
					#   %c = session ID
					#   %l = session line number
					#   %s = session start timestamp
					#   %v = virtual transaction ID
					#   %x = transaction ID (0 if none)
					#   %q = stop here in non-session
					#        processes
					#   %% = '%'
					# e.g. '<%u%%%d> '
#log_lock_waits = off			# log lock waits >= deadlock_timeout
#log_recovery_conflict_waits = off	# log standby recovery conflict waits
					# >= deadlock_timeout
#log_parameter_max_length = -1		# when logging statements, limit logged
					# bind-parameter values to N bytes;
					# -1 means print in full, 0 disables
#log_parameter_max_length_on_error = 0	# when logging an error, limit logged
					# bind-parameter values to N bytes;
					# -1 means print in full, 0 disables
#log_statement = 'none'			# none, ddl, mod, all
#log_replication_commands = off
#log_temp_files = -1			# log temporary files equal or larger
					# than the specified size in kilobytes;
					# -1 disables, 0 logs all temp files
log_timezone = UTC

# - Process Title -

#cluster_name = ''			# added to process titles if nonempty
					# (change requires restart)
#update_process_title = on


#------------------------------------------------------------------------------
# STATISTICS
#------------------------------------------------------------------------------

# - Cumulative Query and Index Statistics -

#track_activities = on
#track_activity_query_size = 1024	# (change requires restart)
#track_counts = on
#track_io_timing = off
#track_wal_io_timing = off
#track_functions = none			# none, pl, all
#stats_fetch_consistency = cache	# cache, none, snapshot


# - Monitoring -

#compute_query_id = auto
#log_statement_stats = off
#log_parser_stats = off
#log_planner_stats = off
#log_executor_stats = off


#------------------------------------------------------------------------------
# AUTOVACUUM
#------------------------------------------------------------------------------

#autovacuum = on			# Enable autovacuum subprocess?  'on'
					# requires track_counts to also be on.
#autovacuum_max_workers = 3		# max number of autovacuum subprocesses
					# (change requires restart)
#autovacuum_naptime = 1min		# time between autovacuum runs
#autovacuum_vacuum_threshold = 50	# min number of row updates before
					# vacuum
#autovacuum_vacuum_insert_threshold = 1000	# min number of row inserts
					# before vacuum; -1 disables insert
					# vacuums
#autovacuum_analyze_threshold = 50	# min number of row updates before
					# analyze
#autovacuum_vacuum_scale_factor = 0.2	# fraction of table size before vacuum
#autovacuum_vacuum_insert_scale_factor = 0.2	# fraction of inserts over table
					# size before insert vacuum
#autovacuum_analyze_scale_factor = 0.1	# fraction of table size before analyze
#autovacuum_freeze_max_age = 200000000	# maximum XID age before forced vacuum
					# (change requires restart)
#autovacuum_multixact_freeze_max_age = 400000000	# maximum multixact age
					# before forced vacuum
					# (change requires restart)
#autovacuum_vacuum_cost_delay = 2ms	# default vacuum cost delay for
					# autovacuum, in milliseconds;
					# -1 means use vacuum_cost_delay
#autovacuum_vacuum_cost_limit = -1	# default vacuum cost limit for
					# autovacuum, -1 means use
					# vacuum_cost_limit


#------------------------------------------------------------------------------
# CLIENT CONNECTION DEFAULTS
#------------------------------------------------------------------------------

# - Statement Behavior -

#client_min_messages = notice		# values in order of decreasing detail:
					#   debug5
					#   debug4
					#   debug3
					#   debug2
					#   debug1
					#   log
					#   notice
					#   warning
					#   error
#search_path = '"$user", public'	# schema names
#row_security = on
#default_table_access_method = 'heap'
#default_tablespace = ''		# a tablespace name, '' uses the default
#default_toast_compression = 'pglz'	# 'pglz' or 'lz4'
#temp_tablespaces = ''			# a list of tablespace names, '' uses
					# only default tablespace
#check_function_bodies = on
#default_transaction_isolation = 'read committed'
#default_transaction_read_only = off
#default_transaction_deferrable = off
#session_replication_role = 'origin'
#statement_timeout = 0			# in milliseconds, 0 is disabled
#lock_timeout = 0			# in milliseconds, 0 is disabled
#idle_in_transaction_session_timeout = 0	# in milliseconds, 0 is disabled
#idle_session_timeout = 0		# in milliseconds, 0 is disabled
#vacuum_freeze_table_age = 150000000
#vacuum_freeze_min_age = 50000000
#vacuum_failsafe_age = 1600000000
#vacuum_multixact_freeze_table_age = 150000000
#vacuum_multixact_freeze_min_age = 5000000
#vacuum_multixact_failsafe_age = 1600000000
#bytea_output = 'hex'			# hex, escape
#xmlbinary = 'base64'
#xmloption = 'content'
#gin_pending_list_limit = 4MB
#createrole_self_grant = ''		# set and/or inherit

# - Locale and Formatting -

datestyle = 'iso, mdy'
#intervalstyle = 'postgres'
timezone = UTC
#timezone_abbreviations = 'Default'     # Select the set of available time zone
					# abbreviations.  Currently, there are
					#   Default
					#   Australia (historical usage)
					#   India
					# You can create your own file in
					# share/timezonesets/.
#extra_float_digits = 1			# min -15, max 3; any value >0 actually
					# selects precise output mode
#client_encoding = sql_ascii		# actually, defaults to database
					# encoding

# These settings are initialized by initdb, but they can be changed.
lc_messages = 'en_US.UTF-8'		# locale for system error message
					# strings
lc_monetary = 'en_US.UTF-8'		# locale for monetary formatting
lc_numeric = 'en_US.UTF-8'		# locale for number formatting
lc_time = 'en_US.UTF-8'			# locale for time formatting

#icu_validation_level = warning		# report ICU locale validation
					# errors at the given level

# default configuration for text search
default_text_search_config = 'pg_catalog.english'

# - Shared Library Preloading -

#local_preload_libraries = ''
#session_preload_libraries = ''
#shared_preload_libraries = ''	# (change requires restart)
#jit_provider = 'llvmjit'		# JIT library to use

# - Other Defaults -

#dynamic_library_path = '$libdir'
#gin_fuzzy_search_limit = 0


#------------------------------------------------------------------------------
# LOCK MANAGEMENT
#------------------------------------------------------------------------------

#deadlock_timeout = 1s
#max_locks_per_transaction = 64		# min 10
					# (change requires restart)
#max_pred_locks_per_transaction = 64	# min 10
					# (change requires restart)
#max_pred_locks_per_relation = -2	# negative values mean
					# (max_pred_locks_per_transaction
					#  / -max_pred_locks_per_relation) - 1
#max_pred_locks_per_page = 2            # min 0


#------------------------------------------------------------------------------
# VERSION AND PLATFORM COMPATIBILITY
#------------------------------------------------------------------------------

# - Previous PostgreSQL Versions -

#array_nulls = on
#backslash_quote = safe_encoding	# on, off, or safe_encoding
#escape_string_warning = on
#lo_compat_privileges = off
#quote_all_identifiers = off
#standard_conforming_strings = on
#synchronize_seqscans = on

# - Other Platforms and Clients -

#transform_null_equals = off


#------------------------------------------------------------------------------
# ERROR HANDLING
#------------------------------------------------------------------------------

#exit_on_error = off			# terminate session on any error?
#restart_after_crash = on		# reinitialize after backend crash?
#data_sync_retry = off			# retry or panic on failure to fsync
					# data?
					# (change requires restart)
#recovery_init_sync_method = fsync	# fsync, syncfs (Linux 5.8+)


#------------------------------------------------------------------------------
# CONFIG FILE INCLUDES
#------------------------------------------------------------------------------

# These options allow settings to be loaded from files other than the
# default postgresql.conf.  Note that these are directives, not variable
# assignments, so they can usefully be given more than once.

#include_dir = '...'			# include files ending in '.conf' from
					# a directory, e.g., 'conf.d'
#include_if_exists = '...'		# include file only if it exists
#include = '...'			# include file


#------------------------------------------------------------------------------
# CUSTOMIZED OPTIONS
#------------------------------------------------------------------------------

# Add settings for extensions here
</file>

<file path="public/img/tv-tantrum-preview.svg">
<svg xmlns="http://www.w3.org/2000/svg" width="600" height="400" viewBox="0 0 600 400">
  <rect width="600" height="400" fill="#F1F5F9" />
  <g fill="#64748b">
    <text x="300" y="180" font-family="Arial, sans-serif" font-size="24" text-anchor="middle">TV Tantrum Preview</text>
    <text x="300" y="220" font-family="Arial, sans-serif" font-size="16" text-anchor="middle">Coming Soon</text>
    <rect x="200" y="240" width="200" height="2" />
    
    <!-- TV Icon -->
    <g transform="translate(270, 80)">
      <rect x="0" y="0" width="60" height="40" rx="2" />
      <line x1="10" y1="45" x2="30" y2="45" stroke-width="3" stroke="#64748b" />
      <line x1="20" y1="40" x2="20" y2="45" stroke-width="2" stroke="#64748b" />
      <rect x="10" y="5" width="40" height="30" fill="#F1F5F9" />
    </g>
    
    <!-- Tantrum waves -->
    <g stroke="#64748b" fill="none" stroke-width="2">
      <path d="M340 100 C350 90, 360 110, 370 100" />
      <path d="M345 110 C355 100, 365 120, 375 110" />
      <path d="M350 120 C360 110, 370 130, 380 120" />
    </g>
  </g>
</svg>
</file>

<file path="server/github.ts">
import { Octokit } from "octokit";
import { TvShowGitHub, tvShowGitHubSchema } from "@shared/schema";

export class GitHubService {
  private octokit: Octokit;
  private owner: string;
  private repo: string;
  private dataPath: string;

  constructor(
    githubToken?: string,
    owner: string = "ledhaseeb",
    repo: string = "tvtantrum",
    dataPath: string = "database"
  ) {
    this.octokit = new Octokit({ auth: githubToken });
    this.owner = owner;
    this.repo = repo;
    this.dataPath = dataPath;
  }

  async fetchTvShowsData(): Promise<TvShowGitHub[]> {
    try {
      // Get the specific reviewed_shows.json file as mentioned by user
      const reviewedShowsPath = `${this.dataPath}/reviewed_shows.json`;
      console.log(`Fetching TV shows data from GitHub: ${this.owner}/${this.repo}/${reviewedShowsPath}`);
      
      const { data: fileContent } = await this.octokit.rest.repos.getContent({
        owner: this.owner,
        repo: this.repo,
        path: reviewedShowsPath,
      });

      // Process file content
      const showsData: TvShowGitHub[] = [];
      
      if ("content" in fileContent && typeof fileContent.content === "string") {
        // Decode Base64 content
        const content = Buffer.from(fileContent.content, "base64").toString();
        
        try {
          // Parse and validate JSON
          const jsonData = JSON.parse(content);
          
          // If it's an array, process each item as a show
          if (Array.isArray(jsonData)) {
            console.log(`Found ${jsonData.length} shows in reviewed_shows.json`);
            for (const item of jsonData) {
              const validatedShow = this.validateTvShow(item);
              if (validatedShow) {
                // Images are stored directly by filename in the data
                validatedShow.imageUrl = `https://raw.githubusercontent.com/${this.owner}/${this.repo}/main/client/public/images/${validatedShow.image_filename}`;
                showsData.push(validatedShow);
              }
            }
          } else {
            // It's a single show object
            const validatedShow = this.validateTvShow(jsonData);
            if (validatedShow) {
              // Images are stored directly by filename in the data
              validatedShow.imageUrl = `https://raw.githubusercontent.com/${this.owner}/${this.repo}/main/client/public/images/${validatedShow.image_filename}`;
              showsData.push(validatedShow);
            }
          }
        } catch (error) {
          console.error(`Error parsing JSON from ${reviewedShowsPath}:`, error);
        }
      }

      return showsData;
    } catch (error) {
      console.error("Error fetching TV shows data from GitHub:", error);
      throw new Error(`Failed to fetch TV shows data: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }

  private validateTvShow(data: any): TvShowGitHub | null {
    try {
      return tvShowGitHubSchema.parse(data);
    } catch (error) {
      console.error("Invalid TV show data:", error);
      return null;
    }
  }
}

// Create and export a singleton instance
export const githubService = new GitHubService(
  process.env.GITHUB_TOKEN
);
</file>

<file path="server/image-optimizer.ts">
import { omdbService } from './omdb';
import { storage } from './storage';
import { TvShow } from '@shared/schema';
import fetch from 'node-fetch';

interface ImageDimensions {
  width: number;
  height: number;
  isLandscape: boolean;
}

interface ImageCheckResult {
  id: number;
  name: string;
  currentImageUrl: string;
  dimensions?: ImageDimensions;
  isLandscape?: boolean;
  error?: string;
}

interface ImageUpdateResult {
  id: number;
  name: string;
  oldImageUrl: string;
  newImageUrl: string;
  imdbId?: string;
  error?: string;
}

export async function checkImageOrientation(imageUrl: string): Promise<ImageDimensions | null> {
  // Skip checks for images that don't exist or are from OMDB already
  if (!imageUrl || imageUrl === 'N/A' || imageUrl.includes('omdbapi.com') || imageUrl.includes('m.media-amazon.com')) {
    return null;
  }

  // In a Node.js environment, we can't use the Image object directly
  // Instead, we'll assume OMDB images are portrait and just continue with the update process
  
  // The Image object check would work in a browser environment, but not in Node.js
  // For now, we'll just consider all shows as candidates for optimization
  console.log(`Assuming image needs optimization: ${imageUrl}`);
  return null;
}

export async function updateShowImagesFromOmdb() {
  // Get all shows
  const shows = await storage.getAllTvShows();
  
  const landscapeShows: ImageCheckResult[] = [];
  const successfulUpdates: ImageUpdateResult[] = [];
  const failedUpdates: ImageUpdateResult[] = [];
  
  console.log(`Starting image optimization for ${shows.length} shows`);
  
  // Process each show to find landscape images or shows without good images
  for (const show of shows) {
    if (!show.imageUrl) {
      // Add shows with no images
      landscapeShows.push({
        id: show.id,
        name: show.name,
        currentImageUrl: '',
        isLandscape: true // Assume we need a replacement
      });
      continue;
    }
    
    try {
      // Check if the current image is landscape
      const dimensions = await checkImageOrientation(show.imageUrl);
      
      if (!dimensions) {
        // If we couldn't check dimensions, include it for potential update
        landscapeShows.push({
          id: show.id,
          name: show.name,
          currentImageUrl: show.imageUrl,
          isLandscape: true // Default to try updating
        });
      } else if (dimensions.isLandscape) {
        // If the image is landscape, include it for update
        landscapeShows.push({
          id: show.id,
          name: show.name,
          currentImageUrl: show.imageUrl,
          dimensions,
          isLandscape: true
        });
        console.log(`Found landscape image for "${show.name}": ${dimensions.width}x${dimensions.height}`);
      }
    } catch (error) {
      console.error(`Error checking dimensions for "${show.name}":`, error);
      // Include it anyway in case there's an error
      landscapeShows.push({
        id: show.id,
        name: show.name,
        currentImageUrl: show.imageUrl,
        error: error instanceof Error ? error.message : 'Unknown dimension check error',
        isLandscape: true // Default to try updating
      });
    }
  }
  
  console.log(`Found ${landscapeShows.length} shows with landscape or problematic images to update`);
  
  // Try to update each show with OMDB poster
  for (const show of landscapeShows) {
    try {
      console.log(`Looking up OMDB poster for "${show.name}"`);
      const omdbData = await omdbService.getShowData(show.name);
      
      if (omdbData && omdbData.poster && omdbData.poster !== 'N/A') {
        // Before updating, verify the OMDB poster is portrait-oriented
        let isOmdbPosterPortrait = true; // Assume portrait by default for OMDB
        
        // Only update if we're replacing a landscape image with a portrait one
        if (isOmdbPosterPortrait) {
          const updatedShow = await storage.updateTvShow(show.id, {
            imageUrl: omdbData.poster
          });
          
          if (updatedShow) {
            successfulUpdates.push({
              id: show.id,
              name: show.name,
              oldImageUrl: show.currentImageUrl,
              newImageUrl: omdbData.poster,
              imdbId: omdbData.imdbId
            });
            console.log(`✓ Updated "${show.name}" with OMDB poster`);
          } else {
            failedUpdates.push({
              id: show.id,
              name: show.name,
              oldImageUrl: show.currentImageUrl,
              newImageUrl: omdbData.poster,
              error: 'Storage update failed'
            });
            console.log(`✗ Failed to update "${show.name}" in storage`);
          }
        } else {
          failedUpdates.push({
            id: show.id,
            name: show.name,
            oldImageUrl: show.currentImageUrl,
            newImageUrl: omdbData.poster,
            error: 'OMDB poster is not portrait-oriented'
          });
          console.log(`✗ Skipped "${show.name}" because OMDB poster is not portrait-oriented`);
        }
      } else {
        failedUpdates.push({
          id: show.id,
          name: show.name,
          oldImageUrl: show.currentImageUrl,
          newImageUrl: '',
          error: 'No OMDB poster found'
        });
        console.log(`✗ No OMDB poster found for "${show.name}"`);
      }
    } catch (error) {
      failedUpdates.push({
        id: show.id,
        name: show.name,
        oldImageUrl: show.currentImageUrl,
        newImageUrl: '',
        error: error instanceof Error ? error.message : 'Unknown error'
      });
      console.log(`✗ Error updating "${show.name}": ${error}`);
    }
    
    // Add a small delay between requests to avoid rate limiting
    await new Promise(resolve => setTimeout(resolve, 300));
  }
  
  return {
    total: landscapeShows.length,
    successful: successfulUpdates,
    failed: failedUpdates
  };
}
</file>

<file path="server/omdb.ts">
import fetch from 'node-fetch';

// Interface for OMDb response
export interface OmdbResponse {
  Title: string;
  Year: string;
  Rated: string;
  Released: string;
  Runtime: string;
  Genre: string;
  Director: string;
  Writer: string;
  Actors: string;
  Plot: string;
  Language: string;
  Country: string;
  Awards: string;
  Poster: string;
  Ratings: Array<{
    Source: string;
    Value: string;
  }>;
  Metascore: string;
  imdbRating: string;
  imdbVotes: string;
  imdbID: string;
  Type: string;
  totalSeasons: string;
  Response: string;
  Error?: string;
}

// Interface for data we want to store
export interface OmdbShowData {
  runtime: string;
  rated: string;
  totalSeasons: string;
  language: string;
  country: string;
  director: string;
  writer: string;
  imdbRating: string;
  awards: string;
  poster: string;
  imdbId: string;
}

export class OmdbService {
  private apiKey: string;
  private baseUrl: string = 'http://www.omdbapi.com/';
  private cache: Map<string, OmdbShowData> = new Map();
  private cacheExpiry: Map<string, number> = new Map();
  private readonly CACHE_TTL = 24 * 60 * 60 * 1000; // 24 hours in milliseconds

  constructor() {
    const apiKey = process.env.OMDB_API_KEY;
    if (!apiKey) {
      throw new Error('OMDB_API_KEY environment variable is not set');
    }
    this.apiKey = apiKey;
  }

  async getShowData(title: string): Promise<OmdbShowData | null> {
    try {
      // Check cache first
      if (this.isInCache(title)) {
        console.log(`Using cached data for "${title}"`);
        return this.getFromCache(title);
      }

      console.log(`Fetching OMDb data for "${title}"`);
      const url = `${this.baseUrl}?t=${encodeURIComponent(title)}&type=series&apikey=${this.apiKey}`;
      
      const response = await fetch(url);
      const data = await response.json() as OmdbResponse;
      
      if (data.Response === 'False') {
        console.warn(`OMDb API error for "${title}": ${data.Error}`);
        return null;
      }
      
      // Extract only the fields we need
      const showData: OmdbShowData = {
        runtime: data.Runtime || 'N/A',
        rated: data.Rated || 'N/A',
        totalSeasons: data.totalSeasons || 'N/A',
        language: data.Language || 'N/A',
        country: data.Country || 'N/A',
        director: data.Director || 'N/A',
        writer: data.Writer || 'N/A',
        imdbRating: data.imdbRating || 'N/A',
        awards: data.Awards || 'N/A',
        poster: data.Poster || 'N/A',
        imdbId: data.imdbID || ''
      };
      
      // Store in cache
      this.addToCache(title, showData);
      
      return showData;
    } catch (error) {
      console.error(`Error fetching data from OMDb for "${title}":`, error);
      return null;
    }
  }

  private isInCache(title: string): boolean {
    const cacheKey = this.getCacheKey(title);
    const expiry = this.cacheExpiry.get(cacheKey);
    
    if (!expiry) return false;
    
    if (Date.now() > expiry) {
      // Cache expired
      this.cache.delete(cacheKey);
      this.cacheExpiry.delete(cacheKey);
      return false;
    }
    
    return this.cache.has(cacheKey);
  }

  private getFromCache(title: string): OmdbShowData | null {
    const cacheKey = this.getCacheKey(title);
    return this.cache.get(cacheKey) || null;
  }

  private addToCache(title: string, data: OmdbShowData): void {
    const cacheKey = this.getCacheKey(title);
    this.cache.set(cacheKey, data);
    this.cacheExpiry.set(cacheKey, Date.now() + this.CACHE_TTL);
  }

  private getCacheKey(title: string): string {
    return title.toLowerCase().trim();
  }
}

export const omdbService = new OmdbService();
</file>

<file path="server/storage.ts">
import { users, type User, type InsertUser, type TvShow, type TvShowReview, type InsertTvShow, type InsertTvShowReview, type TvShowGitHub, type TvShowSearch, type InsertTvShowSearch, type Favorite } from "@shared/schema";

export interface IStorage {
  // User methods
  getUser(id: number): Promise<User | undefined>;
  getUserByEmail(email: string): Promise<User | undefined>;
  getUserByUsername(username: string): Promise<User | undefined>;
  createUser(user: InsertUser): Promise<User>;
  
  // TV Shows methods
  getAllTvShows(): Promise<TvShow[]>;
  getTvShowById(id: number): Promise<TvShow | undefined>;
  getTvShowsByFilter(filters: { 
    ageGroup?: string; 
    tantrumFactor?: string; 
    sortBy?: string; 
    search?: string;
    themes?: string[];
    interactionLevel?: string;
    dialogueIntensity?: string;
    soundFrequency?: string;
    stimulationScoreRange?: {min: number, max: number};
  }): Promise<TvShow[]>;
  addTvShow(show: InsertTvShow): Promise<TvShow>;
  updateTvShow(id: number, show: Partial<InsertTvShow>): Promise<TvShow | undefined>;
  deleteTvShow(id: number): Promise<boolean>;
  
  // Reviews methods
  getReviewsByTvShowId(tvShowId: number): Promise<TvShowReview[]>;
  addReview(review: InsertTvShowReview): Promise<TvShowReview>;
  
  // Search/Popularity tracking methods
  trackShowSearch(tvShowId: number): Promise<void>;
  trackShowView(tvShowId: number): Promise<void>;
  getPopularShows(limit?: number): Promise<TvShow[]>;
  
  // Import shows from GitHub data
  importShowsFromGitHub(shows: TvShowGitHub[]): Promise<TvShow[]>;
  
  // Favorites methods
  addFavorite(userId: number, tvShowId: number): Promise<Favorite>;
  removeFavorite(userId: number, tvShowId: number): Promise<boolean>;
  getUserFavorites(userId: number): Promise<TvShow[]>;
  isFavorite(userId: number, tvShowId: number): Promise<boolean>;
  getSimilarShows(userId: number, limit?: number): Promise<TvShow[]>;
  getSimilarShowsByShowId(showId: number, limit?: number): Promise<TvShow[]>;
}

export class MemStorage implements IStorage {
  private users: Map<number, User>;
  private tvShows: Map<number, TvShow>;
  private tvShowReviews: Map<number, TvShowReview>;
  private tvShowSearches: Map<number, TvShowSearch>;
  private userCurrentId: number;
  private tvShowCurrentId: number;
  private reviewCurrentId: number;
  private searchCurrentId: number;

  constructor() {
    this.users = new Map();
    this.tvShows = new Map();
    this.tvShowReviews = new Map();
    this.tvShowSearches = new Map();
    this.userCurrentId = 1;
    this.tvShowCurrentId = 1;
    this.reviewCurrentId = 1;
    this.searchCurrentId = 1;
    
    // Create an admin test user for development
    // The password hash is generated using the hashPassword function in auth.ts
    // This is the hash for password: "admin123"
    const adminPasswordHash = "7f109fc73f0989b7f927a0b1348c95cc54354a624d321e0bc391a78e5d02be699e356821891ff6d8bbb4129e6f86d88a7460d69acdb060d79e9868447cee14f5.30095aeccc3401a9393d84557eaac61b";
    
    // Add an admin user for testing
    this.createUser({
      email: "admin@tvtantrum.com",
      password: adminPasswordHash,
      username: "admin",
      isAdmin: true
    }).then(user => console.log("Created admin user with ID:", user.id));
  }

  // User methods
  async getUser(id: number): Promise<User | undefined> {
    return this.users.get(id);
  }

  async getUserByEmail(email: string): Promise<User | undefined> {
    return Array.from(this.users.values()).find(
      (user) => user.email === email,
    );
  }

  async getUserByUsername(username: string): Promise<User | undefined> {
    return Array.from(this.users.values()).find(
      (user) => user.username === username,
    );
  }

  async createUser(insertUser: InsertUser): Promise<User> {
    const id = this.userCurrentId++;
    const now = new Date().toISOString();
    const user: User = { 
      ...insertUser, 
      id,
      createdAt: now,
      isAdmin: insertUser.isAdmin ?? false,
      username: insertUser.username ?? null
    };
    this.users.set(id, user);
    return user;
  }

  // TV Shows methods
  async getAllTvShows(): Promise<TvShow[]> {
    return Array.from(this.tvShows.values());
  }

  async getTvShowById(id: number): Promise<TvShow | undefined> {
    return this.tvShows.get(id);
  }

  async getTvShowsByFilter(filters: { 
    ageGroup?: string; 
    tantrumFactor?: string; 
    sortBy?: string;
    search?: string;
    themes?: string[];
    interactionLevel?: string;
    dialogueIntensity?: string;
    soundFrequency?: string;
    stimulationScoreRange?: {min: number, max: number};
  }): Promise<TvShow[]> {
    let shows = Array.from(this.tvShows.values());
    
    // Filter by age group
    if (filters.ageGroup) {
      shows = shows.filter(show => {
        const [min, max] = filters.ageGroup!.split('-').map(Number);
        const [showMin, showMax] = show.ageRange.split('-').map(Number);
        
        // Check if there's any overlap between the filter range and the show's range
        return (showMin <= max && showMax >= min);
      });
    }
    
    // Filter by stimulation score (replacing tantrum factor)
    if (filters.tantrumFactor) {
      switch (filters.tantrumFactor) {
        case 'low':
          shows = shows.filter(show => show.stimulationScore <= 2); // Low stimulation
          break;
        case 'medium':
          shows = shows.filter(show => show.stimulationScore > 2 && show.stimulationScore <= 4); // Medium stimulation
          break;
        case 'high':
          shows = shows.filter(show => show.stimulationScore > 4); // High stimulation
          break;
      }
    }
    
    // Enhanced search by name with ranking and sorting
    if (filters.search) {
      console.log(`Storage: Processing search term: "${filters.search}"`);
      const searchTerm = filters.search.toLowerCase().trim();
      
      if (searchTerm.length > 0) {
        const preFilterCount = shows.length;
        
        // Instead of just filtering, we'll score each show and then sort by relevance
        interface ScoredShow {
          show: typeof shows[0];
          score: number;
          matchType: string;
        }
        
        // Calculate relevance score for each show
        const scoredShows: ScoredShow[] = shows.map(show => {
          const nameLower = show.name.toLowerCase();
          const descLower = show.description?.toLowerCase() || '';
          const themesLower = show.themes?.map(t => t.toLowerCase()) || [];
          
          // Default score and match type
          let score = 0;
          let matchType = 'none';
          
          // Exact match has highest score - if show name is exactly the search term
          if (nameLower === searchTerm) {
            score = 100;
            matchType = 'exact-match';
          }
          // Show name starts with the search term
          else if (nameLower.startsWith(searchTerm)) {
            score = 90;
            matchType = 'starts-with';
          }
          // Words in the show name start with the search term 
          else if (nameLower.split(/\s+/).some(word => word.startsWith(searchTerm))) {
            score = 80;
            matchType = 'word-starts-with';
          }
          // Direct match anywhere in the name
          else if (nameLower.includes(searchTerm)) {
            score = 70;
            matchType = 'name-contains';
          }
          // Show name without years contains search term
          else {
            const nameWithoutYears = nameLower.replace(/\s+\d{4}(-\d{4}|-present)?/g, '');
            if (nameWithoutYears.includes(searchTerm)) {
              score = 60;
              matchType = 'name-without-years';
            }
            // Words in the name include the search term
            else if (nameLower.split(/\s+/).some(word => word.includes(searchTerm))) {
              score = 50;
              matchType = 'word-contains';
            }
            // Description contains the search term
            else if (descLower.includes(searchTerm)) {
              score = 40;
              matchType = 'description';
            }
            // Themes contain the search term
            else if (themesLower.some(theme => theme.includes(searchTerm))) {
              score = 30;
              matchType = 'theme';
            }
            // Simplified name (no special chars) contains the search term
            else {
              const simplifiedName = nameLower.replace(/[''\.]/g, '');
              if (simplifiedName.includes(searchTerm)) {
                score = 20;
                matchType = 'simplified-name';
              }
            }
          }
          
          return { show, score, matchType };
        });
        
        // Filter out shows with no match (score = 0)
        const matchedShows = scoredShows.filter(item => item.score > 0);
        
        // Sort by score (highest first)
        matchedShows.sort((a, b) => b.score - a.score);
        
        // Extract just the shows from the scored results
        shows = matchedShows.map(item => item.show);
        
        console.log(`Storage: Search for "${searchTerm}" filtered ${preFilterCount} shows to ${shows.length} matches`);
        
        // Debug log for top matches
        if (shows.length > 0) {
          console.log(`Storage: First matches: ${shows.slice(0, 5).map(s => s.name).join(', ')}`);
          console.log(`Storage: Match types: ${matchedShows.slice(0, 5).map(s => s.matchType).join(', ')}`);
        }
      }
    }
    
    // Filter by themes
    if (filters.themes && filters.themes.length > 0) {
      shows = shows.filter(show => {
        // Convert both arrays to lowercase for case-insensitive comparison
        const showThemesLower = show.themes?.map(t => t.toLowerCase()) || [];
        const filterThemesLower = filters.themes!.map(t => t.toLowerCase());
        
        // Check if show has at least one of the selected themes
        return filterThemesLower.some(theme => 
          showThemesLower.some(showTheme => showTheme.includes(theme))
        );
      });
    }
    
    // Filter by interaction level
    if (filters.interactionLevel) {
      shows = shows.filter(show => 
        show.interactivityLevel === filters.interactionLevel || 
        filters.interactionLevel === 'Any'
      );
    }
    
    // Filter by dialogue intensity
    if (filters.dialogueIntensity) {
      shows = shows.filter(show => 
        show.dialogueIntensity === filters.dialogueIntensity || 
        filters.dialogueIntensity === 'Any'
      );
    }
    
    // Filter by sound frequency
    if (filters.soundFrequency) {
      shows = shows.filter(show => 
        show.soundEffectsLevel === filters.soundFrequency || 
        filters.soundFrequency === 'Any'
      );
    }
    
    // Filter by stimulation score range
    if (filters.stimulationScoreRange) {
      shows = shows.filter(show => 
        show.stimulationScore >= filters.stimulationScoreRange!.min && 
        show.stimulationScore <= filters.stimulationScoreRange!.max
      );
    }
    
    // Sort results
    if (filters.sortBy) {
      switch (filters.sortBy) {
        case 'name':
          shows.sort((a, b) => a.name.localeCompare(b.name));
          break;
        case 'stimulation-score':
          shows.sort((a, b) => a.stimulationScore - b.stimulationScore); // Lower is better
          break;
        case 'interactivity-level':
          // Sort by interactivity level - Low, Moderate, High
          shows.sort((a, b) => {
            const levelMap: {[key: string]: number} = {
              'Low': 1,
              'Moderate-Low': 2,
              'Moderate': 3,
              'Moderate-High': 4,
              'High': 5
            };
            const aLevel = levelMap[a.interactivityLevel || 'Moderate'] || 3;
            const bLevel = levelMap[b.interactivityLevel || 'Moderate'] || 3;
            return aLevel - bLevel;
          });
          break;
        case 'dialogue-intensity':
          // Sort by dialogue intensity
          shows.sort((a, b) => {
            const levelMap: {[key: string]: number} = {
              'Low': 1,
              'Moderate-Low': 2,
              'Moderate': 3,
              'Moderate-High': 4,
              'High': 5
            };
            const aLevel = levelMap[a.dialogueIntensity || 'Moderate'] || 3;
            const bLevel = levelMap[b.dialogueIntensity || 'Moderate'] || 3;
            return aLevel - bLevel;
          });
          break;
        case 'overall-rating':
          // Sort by stimulation score (inverse, since higher stimulation is more intense)
          shows.sort((a, b) => a.stimulationScore - b.stimulationScore);
          break;
      }
    }
    
    return shows;
  }

  async addTvShow(show: InsertTvShow): Promise<TvShow> {
    const id = this.tvShowCurrentId++;
    // Ensure all fields match the schema by explicitly setting null for undefined optional fields
    const processedShow = {
      ...show,
      creator: show.creator ?? null,
      releaseYear: show.releaseYear ?? null,
      endYear: show.endYear ?? null,
      isOngoing: show.isOngoing ?? true,
      imageUrl: show.imageUrl ?? null,
      availableOn: show.availableOn ?? [],
      friendshipRating: show.friendshipRating ?? null,
      problemSolvingRating: show.problemSolvingRating ?? null,
      relatableSituationsRating: show.relatableSituationsRating ?? null,
      emotionalIntelligenceRating: show.emotionalIntelligenceRating ?? null,
      creativityRating: show.creativityRating ?? null,
      educationalValueRating: show.educationalValueRating ?? null
    };
    
    // Use explicit casting to TvShow to handle any type issues
    const tvShow = { ...processedShow, id } as TvShow;
    this.tvShows.set(id, tvShow);
    return tvShow;
  }

  async updateTvShow(id: number, show: Partial<InsertTvShow>): Promise<TvShow | undefined> {
    const existingShow = this.tvShows.get(id);
    if (!existingShow) return undefined;
    
    const updatedShow: TvShow = { ...existingShow, ...show };
    this.tvShows.set(id, updatedShow);
    return updatedShow;
  }

  async deleteTvShow(id: number): Promise<boolean> {
    return this.tvShows.delete(id);
  }

  // Review methods
  async getReviewsByTvShowId(tvShowId: number): Promise<TvShowReview[]> {
    return Array.from(this.tvShowReviews.values())
      .filter(review => review.tvShowId === tvShowId);
  }

  async addReview(review: InsertTvShowReview): Promise<TvShowReview> {
    const id = this.reviewCurrentId++;
    const now = new Date().toISOString();
    const newReview: TvShowReview = { 
      ...review, 
      id,
      createdAt: now
    };
    this.tvShowReviews.set(id, newReview);
    return newReview;
  }
  
  // Search/Popularity tracking methods
  async trackShowSearch(tvShowId: number): Promise<void> {
    // Check if this show has been searched before
    const existingSearch = Array.from(this.tvShowSearches.values())
      .find(search => search.tvShowId === tvShowId);
    
    const now = new Date().toISOString();
    
    if (existingSearch) {
      // Increment the search count
      const updatedSearch: TvShowSearch = {
        ...existingSearch,
        searchCount: existingSearch.searchCount + 1,
        lastSearched: now,
        lastViewed: existingSearch.lastViewed
      };
      this.tvShowSearches.set(existingSearch.id, updatedSearch);
    } else {
      // Create a new search record
      const id = this.searchCurrentId++;
      const newSearch: TvShowSearch = {
        id,
        tvShowId,
        searchCount: 1,
        viewCount: 0,
        lastSearched: now,
        lastViewed: null
      };
      this.tvShowSearches.set(id, newSearch);
    }
  }
  
  async trackShowView(tvShowId: number): Promise<void> {
    // Check if this show has been viewed/searched before
    const existingSearch = Array.from(this.tvShowSearches.values())
      .find(search => search.tvShowId === tvShowId);
    
    const now = new Date().toISOString();
    
    if (existingSearch) {
      // Increment the view count
      const updatedSearch: TvShowSearch = {
        ...existingSearch,
        viewCount: existingSearch.viewCount + 1,
        lastSearched: existingSearch.lastSearched,
        lastViewed: now // Update timestamp for last viewed
      };
      this.tvShowSearches.set(existingSearch.id, updatedSearch);
    } else {
      // Create a new record with view count = 1
      const id = this.searchCurrentId++;
      const newSearch: TvShowSearch = {
        id,
        tvShowId,
        searchCount: 0,
        viewCount: 1,
        lastSearched: now,
        lastViewed: now
      };
      this.tvShowSearches.set(id, newSearch);
    }
  }
  
  async getPopularShows(limit: number = 10): Promise<TvShow[]> {
    // Get all search records
    const searches = Array.from(this.tvShowSearches.values());
    
    if (searches.length === 0) {
      // If no search data, return shows with lowest stimulation scores
      const allShows = Array.from(this.tvShows.values());
      return allShows
        .sort((a, b) => a.stimulationScore - b.stimulationScore)
        .slice(0, limit);
    }
    
    // Sort by popularity (combined search and view count)
    searches.sort((a, b) => {
      const scoreA = a.searchCount * 1 + a.viewCount * 2; // Views worth double
      const scoreB = b.searchCount * 1 + b.viewCount * 2;
      return scoreB - scoreA; // Higher score first
    });
    
    // Get the top N show IDs
    const topShowIds = searches
      .slice(0, Math.min(limit, searches.length))
      .map(search => search.tvShowId);
    
    // Get the actual show data for these IDs
    return topShowIds
      .map(id => this.tvShows.get(id))
      .filter(show => show !== undefined) as TvShow[];
  }

  // Import shows from GitHub data
  async importShowsFromGitHub(shows: TvShowGitHub[]): Promise<TvShow[]> {
    const importedShows: TvShow[] = [];
    
    // Clear existing shows to prevent duplicates
    // This is a temporary solution to fix duplicate data
    this.tvShows.clear();
    this.tvShowReviews.clear();
    this.tvShowCurrentId = 1;
    this.reviewCurrentId = 1;
    
    for (const show of shows) {
      // Lower stimulation score is better for calmness
      // We no longer need to calculate an overall rating as we use stimulation score directly
      
      // Extract episode length in minutes if available
      let episodeLength = 15; // Default
      if (show.avg_episode_length) {
        if (show.avg_episode_length.includes("Short")) {
          episodeLength = 5;
        } else if (show.avg_episode_length.includes("Medium")) {
          episodeLength = 15;
        } else if (show.avg_episode_length.includes("Long")) {
          episodeLength = 30;
        }
      }
      
      // Determine topic-specific ratings based on themes and other metrics
      const hasFriendshipTheme = show.themes.some(theme => 
        theme.toLowerCase().includes('friendship') || 
        theme.toLowerCase().includes('relationships'));
      
      const hasProblemSolvingTheme = show.themes.some(theme => 
        theme.toLowerCase().includes('problem solving') || 
        theme.toLowerCase().includes('critical thinking'));
      
      const hasRelatableTheme = show.themes.some(theme => 
        theme.toLowerCase().includes('relatable') || 
        theme.toLowerCase().includes('social') || 
        theme.toLowerCase().includes('life lessons'));
      
      const hasEmotionalIntelligenceTheme = show.themes.some(theme => 
        theme.toLowerCase().includes('emotional intelligence') || 
        theme.toLowerCase().includes('feelings'));
      
      const hasCreativeTheme = show.themes.some(theme => 
        theme.toLowerCase().includes('creativity') || 
        theme.toLowerCase().includes('imagination') ||
        theme.toLowerCase().includes('art'));
      
      const hasEducationalTheme = show.themes.some(theme => 
        theme.toLowerCase().includes('educational') || 
        theme.toLowerCase().includes('stem') || 
        theme.toLowerCase().includes('learning') || 
        theme.toLowerCase().includes('school'));
        
      // Create and add the TV show - using the metrics directly from GitHub data
      const tvShow = await this.addTvShow({
        name: show.title,
        description: `${show.title} is a ${show.animation_style} show for ${show.target_age_group} year olds. It features ${show.themes.join(", ")} themes.`,
        ageRange: show.target_age_group,
        episodeLength: episodeLength,
        creator: null,
        releaseYear: show.release_year || null,
        endYear: show.end_year || null,
        isOngoing: true,
        
        // Direct metrics from GitHub, normalizing "Very High" to "High"
        stimulationScore: show.stimulation_score,
        interactivityLevel: show.interactivity_level?.replace(/very high/i, "High"),
        dialogueIntensity: show.dialogue_intensity?.replace(/very high/i, "High"),
        soundEffectsLevel: show.sound_effects_level?.replace(/very high/i, "High"),
        musicTempo: show.music_tempo?.replace(/very high/i, "High"),
        totalMusicLevel: show.total_music_level?.replace(/very high/i, "High"),
        totalSoundEffectTimeLevel: show.total_sound_effect_time_level?.replace(/very high/i, "High"),
        sceneFrequency: show.scene_frequency?.replace(/very high/i, "High"),
        animationStyle: show.animation_style,
        themes: show.themes,
        
        // Topic-specific ratings based on themes
        friendshipRating: hasFriendshipTheme ? Math.floor(Math.random() * 2) + 3 : Math.floor(Math.random() * 3) + 1,
        problemSolvingRating: hasProblemSolvingTheme ? Math.floor(Math.random() * 2) + 3 : Math.floor(Math.random() * 3) + 1,
        relatableSituationsRating: hasRelatableTheme ? Math.floor(Math.random() * 2) + 3 : Math.floor(Math.random() * 3) + 1,
        emotionalIntelligenceRating: hasEmotionalIntelligenceTheme ? Math.floor(Math.random() * 2) + 3 : Math.floor(Math.random() * 3) + 1,
        creativityRating: hasCreativeTheme ? Math.floor(Math.random() * 2) + 3 : Math.floor(Math.random() * 3) + 1,
        educationalValueRating: hasEducationalTheme ? Math.floor(Math.random() * 2) + 3 : Math.floor(Math.random() * 3) + 1,
        
        // Derived fields
        availableOn: [show.platform],
        imageUrl: show.imageUrl ? show.imageUrl : null,
      });
      
      // Generate some sample reviews
      const reviewCount = Math.floor(Math.random() * 3) + 1; // 1-3 reviews
      for (let i = 0; i < reviewCount; i++) {
        const rating = Math.floor(Math.random() * 3) + 3; // 3-5 rating
        await this.addReview({
          tvShowId: tvShow.id,
          userName: `parent${i + 1}`,
          rating: rating,
          review: `My child ${rating >= 4 ? 'loves' : 'likes'} this show. ${show.themes[i % show.themes.length]} is their favorite part.`,
        });
      }
      
      importedShows.push(tvShow);
    }
    
    return importedShows;
  }
  
  // These methods are implemented in DatabaseStorage but need stubs here
  // Favorites methods
  async addFavorite(userId: number, tvShowId: number): Promise<Favorite> {
    // This is just a stub since we're using DatabaseStorage
    throw new Error('Method not implemented in MemStorage');
  }
  
  async removeFavorite(userId: number, tvShowId: number): Promise<boolean> {
    // This is just a stub since we're using DatabaseStorage
    throw new Error('Method not implemented in MemStorage');
  }
  
  async getUserFavorites(userId: number): Promise<TvShow[]> {
    // This is just a stub since we're using DatabaseStorage
    throw new Error('Method not implemented in MemStorage');
  }
  
  async isFavorite(userId: number, tvShowId: number): Promise<boolean> {
    // This is just a stub since we're using DatabaseStorage
    throw new Error('Method not implemented in MemStorage');
  }
  
  async getSimilarShows(userId: number, limit: number = 5): Promise<TvShow[]> {
    // This is just a stub since we're using DatabaseStorage
    throw new Error('Method not implemented in MemStorage');
  }
  
  async getSimilarShowsByShowId(showId: number, limit: number = 4): Promise<TvShow[]> {
    // Get the show details
    const show = await this.getTvShowById(showId);
    if (!show) {
      console.log(`Show with ID ${showId} not found - can't find similar shows`);
      return [];
    }
    
    console.log(`Finding similar shows for ${show.name} (ID: ${showId}), stimulation: ${show.stimulationScore}, themes: ${show.themes?.join(', ')}`);
    
    // Get all shows except the current one
    const allShows = Array.from(this.tvShows.values()).filter(s => s.id !== showId);
    console.log(`Comparing against ${allShows.length} other shows`);
    
    // Calculate similarity score for each show based on:
    // 1. Similar stimulation score (+3 points if within 1 point difference)
    // 2. Similar themes (+2 points for each matching theme)
    // 3. Similar interactivity level (+2 points if same)
    // 4. Similar target age range (+1 point if overlapping)
    interface ScoredShow {
      show: TvShow;
      score: number;
    }
    
    const scoredShows: ScoredShow[] = allShows.map(otherShow => {
      let score = 0;
      
      // 1. Similar stimulation score
      if (Math.abs(otherShow.stimulationScore - show.stimulationScore) <= 1) {
        score += 3;
      }
      
      // 2. Similar themes
      if (show.themes && otherShow.themes) {
        const showThemesLower = show.themes.map(t => t.toLowerCase());
        const otherThemesLower = otherShow.themes.map(t => t.toLowerCase());
        
        // Count matching themes
        for (const theme of showThemesLower) {
          if (otherThemesLower.some(t => t.includes(theme) || theme.includes(t))) {
            score += 2;
          }
        }
      }
      
      // 3. Similar interactivity level
      if (show.interactivityLevel === otherShow.interactivityLevel) {
        score += 2;
      }
      
      // 4. Similar target age range
      if (show.ageRange && otherShow.ageRange) {
        const [showMin, showMax] = show.ageRange.split('-').map(Number);
        const [otherMin, otherMax] = otherShow.ageRange.split('-').map(Number);
        
        // Check for overlap in age ranges
        if (showMin <= otherMax && showMax >= otherMin) {
          score += 1;
        }
      }
      
      return { show: otherShow, score };
    });
    
    // Sort by similarity score (highest first)
    scoredShows.sort((a, b) => b.score - a.score);
    
    // Return the top N similar shows
    const result = scoredShows.slice(0, limit).map(item => item.show);
    
    // Log the results
    if (result.length === 0) {
      console.log(`No similar shows found for ${show.name} with score > 0`);
    } else {
      console.log(`Found ${result.length} similar shows for ${show.name}:`);
      result.forEach((s, i) => {
        console.log(`  ${i+1}. ${s.name} (ID: ${s.id}), score: ${scoredShows[i].score}`);
      });
    }
    
    return result;
  }
}

// Temporarily reverting to MemStorage due to database connection issues
// import { DatabaseStorage } from './database-storage';

// Using in-memory storage for development
export const storage = new MemStorage();
</file>

<file path="server/vite.ts">
import express, { type Express } from "express";
import fs from "fs";
import path from "path";
import { createServer as createViteServer, createLogger } from "vite";
import { type Server } from "http";
import viteConfig from "../vite.config";
import { nanoid } from "nanoid";

const viteLogger = createLogger();

export function log(message: string, source = "express") {
  const formattedTime = new Date().toLocaleTimeString("en-US", {
    hour: "numeric",
    minute: "2-digit",
    second: "2-digit",
    hour12: true,
  });

  console.log(`${formattedTime} [${source}] ${message}`);
}

export async function setupVite(app: Express, server: Server) {
  const serverOptions = {
    middlewareMode: true,
    hmr: { server },
    allowedHosts: true,
  };

  const vite = await createViteServer({
    ...viteConfig,
    configFile: false,
    customLogger: {
      ...viteLogger,
      error: (msg, options) => {
        viteLogger.error(msg, options);
        process.exit(1);
      },
    },
    server: serverOptions,
    appType: "custom",
  });

  app.use(vite.middlewares);
  app.use("*", async (req, res, next) => {
    const url = req.originalUrl;

    try {
      const clientTemplate = path.resolve(
        import.meta.dirname,
        "..",
        "client",
        "index.html",
      );

      // always reload the index.html file from disk incase it changes
      let template = await fs.promises.readFile(clientTemplate, "utf-8");
      template = template.replace(
        `src="/src/main.tsx"`,
        `src="/src/main.tsx?v=${nanoid()}"`,
      );
      const page = await vite.transformIndexHtml(url, template);
      res.status(200).set({ "Content-Type": "text/html" }).end(page);
    } catch (e) {
      vite.ssrFixStacktrace(e as Error);
      next(e);
    }
  });
}

export function serveStatic(app: Express) {
  const distPath = path.resolve(import.meta.dirname, "public");

  if (!fs.existsSync(distPath)) {
    throw new Error(
      `Could not find the build directory: ${distPath}, make sure to build the client first`,
    );
  }

  app.use(express.static(distPath));

  // fall through to index.html if the file doesn't exist
  app.use("*", (_req, res) => {
    res.sendFile(path.resolve(distPath, "index.html"));
  });
}
</file>

<file path=".gitignore">
node_modules
dist
.DS_Store
server/public
vite.config.ts.*
*.tar.gz
</file>

<file path=".replit">
modules = ["nodejs-20", "web", "postgresql-16"]
run = "npm run dev"
hidden = [".config", ".git", "generated-icon.png", "node_modules", "dist"]

[nix]
channel = "stable-24_05"
packages = ["jq"]

[deployment]
deploymentTarget = "autoscale"
build = ["npm", "run", "build"]
run = ["npm", "run", "start"]

[[ports]]
localPort = 5000
externalPort = 80

[workflows]
runButton = "Project"

[[workflows.workflow]]
name = "Project"
mode = "parallel"
author = "agent"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "Start application"

[[workflows.workflow]]
name = "Start application"
author = "agent"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "npm run dev"
waitForPort = 5000
</file>

<file path="check-image-orientation.js">
const fetch = require('node-fetch');

// Function to check if image is landscape or portrait
async function checkImageOrientation(imageUrl) {
  try {
    const response = await fetch(imageUrl);
    if (!response.ok) {
      return { success: false, error: `Failed to fetch image: ${response.statusText}` };
    }
    
    return new Promise((resolve) => {
      const img = new Image();
      img.onload = function() {
        const isLandscape = img.width > img.height;
        resolve({
          success: true,
          url: imageUrl,
          width: img.width,
          height: img.height,
          isLandscape: isLandscape,
          isPortrait: !isLandscape
        });
      };
      img.onerror = function() {
        resolve({ success: false, error: 'Failed to load image', url: imageUrl });
      };
      img.src = URL.createObjectURL(response.blob());
    });
  } catch (error) {
    return { success: false, error: error.message, url: imageUrl };
  }
}

// Import the shows from our data
const fs = require('fs');
const path = require('path');

// This script will run from the project root
const showsPath = path.join(__dirname, 'shows.json');

fs.readFile(showsPath, 'utf8', async (err, data) => {
  if (err) {
    console.error('Error reading shows.json:', err);
    return;
  }
  
  try {
    const shows = JSON.parse(data);
    console.log(`Found ${shows.length} shows in shows.json`);
    
    const landscapeImages = [];
    const portraitImages = [];
    const failedChecks = [];
    
    for (const show of shows) {
      if (show.imageUrl) {
        const result = await checkImageOrientation(show.imageUrl);
        if (result.success) {
          if (result.isLandscape) {
            landscapeImages.push({
              id: show.id,
              name: show.name,
              imageUrl: show.imageUrl,
              width: result.width,
              height: result.height
            });
          } else {
            portraitImages.push({
              id: show.id,
              name: show.name,
              imageUrl: show.imageUrl,
              width: result.width,
              height: result.height
            });
          }
        } else {
          failedChecks.push({
            id: show.id,
            name: show.name,
            imageUrl: show.imageUrl,
            error: result.error
          });
        }
      }
    }
    
    console.log(`\nFound ${landscapeImages.length} shows with landscape images:`);
    landscapeImages.forEach(show => {
      console.log(`- ID: ${show.id}, Name: ${show.name}, Dimensions: ${show.width}x${show.height}`);
    });
    
    console.log(`\nFound ${portraitImages.length} shows with portrait images.`);
    
    console.log(`\n${failedChecks.length} images failed to check:`);
    failedChecks.forEach(show => {
      console.log(`- ID: ${show.id}, Name: ${show.name}, Error: ${show.error}`);
    });
    
    // Save results to file
    fs.writeFileSync('landscape-shows.json', JSON.stringify(landscapeImages, null, 2));
    console.log('\nSaved landscape show list to landscape-shows.json');
  } catch (error) {
    console.error('Error processing shows:', error);
  }
});
</file>

<file path="check-images.js">
// Script to identify landscape images and attempt to replace them with OMDB portrait images

const fs = require('fs');
const path = require('path');
const fetch = require('node-fetch');

// OMDB API Key
const omdbApiKey = process.env.OMDB_API_KEY;

// Function to fetch image metadata
async function getImageMetadata(imageUrl) {
  try {
    const response = await fetch(imageUrl, { method: 'HEAD' });
    if (!response.ok) {
      return { 
        success: false, 
        error: `Failed to fetch image: ${response.statusText}`,
        url: imageUrl
      };
    }
    
    return { success: true, url: imageUrl };
  } catch (error) {
    return { success: false, error: error.message, url: imageUrl };
  }
}

// Function to search for a show on OMDB
async function searchOmdb(title) {
  try {
    const url = `http://www.omdbapi.com/?apikey=${omdbApiKey}&t=${encodeURIComponent(title)}&type=series`;
    const response = await fetch(url);
    const data = await response.json();
    
    if (data.Response === 'True' && data.Poster && data.Poster !== 'N/A') {
      return {
        success: true,
        title: data.Title,
        poster: data.Poster,
        imdbId: data.imdbID
      };
    } else {
      return {
        success: false,
        error: data.Error || 'No poster available',
        searchedTitle: title
      };
    }
  } catch (error) {
    return {
      success: false,
      error: error.message,
      searchedTitle: title
    };
  }
}

// Main function
async function main() {
  try {
    // Read the shows from shows.json
    const showsPath = path.join(__dirname, 'shows.json');
    const data = fs.readFileSync(showsPath, 'utf8');
    const shows = JSON.parse(data);
    
    console.log(`Found ${shows.length} shows in shows.json`);
    
    // Create arrays to track our process
    const needOMDB = [];
    const successfulUpdates = [];
    const notFoundOnOMDB = [];
    
    // Check each show's image URL
    for (const show of shows) {
      if (show.imageUrl) {
        // For now, let's just add all shows to the needOMDB list
        // In a real implementation, we would check if the image is landscape
        needOMDB.push({
          id: show.id,
          name: show.name,
          currentImageUrl: show.imageUrl
        });
      }
    }
    
    console.log(`\nFound ${needOMDB.length} shows that need OMDB poster lookup`);
    
    // Try to get OMDB posters for all shows in the needOMDB list
    for (const show of needOMDB) {
      console.log(`Looking up OMDB poster for "${show.name}"...`);
      
      const omdbResult = await searchOmdb(show.name);
      
      if (omdbResult.success) {
        successfulUpdates.push({
          id: show.id,
          name: show.name,
          oldImageUrl: show.currentImageUrl,
          newImageUrl: omdbResult.poster,
          imdbId: omdbResult.imdbId
        });
        
        console.log(`✓ Found OMDB poster for "${show.name}"`);
      } else {
        notFoundOnOMDB.push({
          id: show.id,
          name: show.name,
          currentImageUrl: show.currentImageUrl,
          error: omdbResult.error
        });
        
        console.log(`✗ No OMDB poster found for "${show.name}": ${omdbResult.error}`);
      }
      
      // Add a small delay between requests to avoid rate limiting
      await new Promise(resolve => setTimeout(resolve, 500));
    }
    
    // Save results to files
    fs.writeFileSync('omdb-updates.json', JSON.stringify(successfulUpdates, null, 2));
    fs.writeFileSync('shows-missing-posters.json', JSON.stringify(notFoundOnOMDB, null, 2));
    
    console.log('\nResults:');
    console.log(`- ${successfulUpdates.length} shows can be updated with OMDB posters`);
    console.log(`- ${notFoundOnOMDB.length} shows were not found on OMDB`);
    console.log('\nSaved results to:');
    console.log('- omdb-updates.json (shows with available OMDB posters)');
    console.log('- shows-missing-posters.json (shows not found on OMDB)');
    
  } catch (error) {
    console.error('Error processing shows:', error);
  }
}

// Check if OMDB API key is available
if (!omdbApiKey) {
  console.error('Error: OMDB_API_KEY environment variable is not set.');
  console.log('Please set the OMDB_API_KEY environment variable and try again.');
  process.exit(1);
}

// Run the main function
main();
</file>

<file path="components.json">
{
    "$schema": "https://ui.shadcn.com/schema.json",
    "style": "new-york",
    "rsc": false,
    "tsx": true,
    "tailwind": {
      "config": "tailwind.config.ts",
      "css": "client/src/index.css",
      "baseColor": "neutral",
      "cssVariables": true,
      "prefix": ""
    },
    "aliases": {
      "components": "@/components",
      "utils": "@/lib/utils",
      "ui": "@/components/ui",
      "lib": "@/lib",
      "hooks": "@/hooks"
    }
}
</file>

<file path="convert-avif.js">
import sharp from 'sharp';

async function convertAvifToJpg() {
  try {
    await sharp('attached_assets/the enchanted world of brambly hedge.avif')
      .jpeg({ quality: 90 })
      .toFile('./client/public/custom-images/the-enchanted-world-of-brambly-hedge.jpg');
    console.log('Conversion successful');
  } catch (error) {
    console.error('Error converting image:', error);
  }
}

convertAvifToJpg();
</file>

<file path="cookies.txt">
# Netscape HTTP Cookie File
# https://curl.se/docs/http-cookies.html
# This file was generated by libcurl! Edit at your own risk.
</file>

<file path="drizzle.config.ts">
import { defineConfig } from "drizzle-kit";

if (!process.env.DATABASE_URL) {
  throw new Error("DATABASE_URL, ensure the database is provisioned");
}

export default defineConfig({
  out: "./migrations",
  schema: "./shared/schema.ts",
  dialect: "postgresql",
  dbCredentials: {
    url: process.env.DATABASE_URL,
  },
});
</file>

<file path="generate-hash.ts">
import { scrypt, randomBytes } from "crypto";
import { promisify } from "util";

const scryptAsync = promisify(scrypt);

async function hashPassword(password: string) {
  const salt = randomBytes(16).toString("hex");
  const buf = (await scryptAsync(password, salt, 64)) as Buffer;
  return `${buf.toString("hex")}.${salt}`;
}

// Generate hash for admin password
async function main() {
  const adminPassword = "admin123";
  const hash = await hashPassword(adminPassword);
  console.log(`Hash for '${adminPassword}': ${hash}`);
}

main().catch(console.error);
</file>

<file path="postcss.config.js">
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
</file>

<file path="refresh-data.js">
// Simple script to refresh data from GitHub
import fetch from 'node-fetch';

async function refreshData() {
  try {
    console.log('Refreshing data from GitHub...');
    const response = await fetch('http://localhost:5000/api/refresh-data', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      }
    });
    
    const data = await response.json();
    console.log('Response:', data);
  } catch (error) {
    console.error('Error refreshing data:', error);
  }
}

refreshData();
</file>

<file path="shows.json">
[{"name":"A for Adley","description":"A for Adley is a Live-Action Family Videos show for 3-8 year olds. It features Preschool-Basics, Creativity & Imagination, Family Relationships, Family Values, Conflict Resolution, Problem Solving, Relatable Situations themes.","ageRange":"3-8","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":4,"interactivityLevel":"High","dialogueIntensity":"Moderate-High","soundEffectsLevel":"Moderate-High","musicTempo":"Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Moderate","sceneFrequency":"Moderate-High","animationStyle":"Live-Action Family Videos","themes":["Preschool-Basics","Creativity & Imagination","Family Relationships","Family Values","Conflict Resolution","Problem Solving","Relatable Situations"],"friendshipRating":4,"problemSolvingRating":3,"relatableSituationsRating":4,"emotionalIntelligenceRating":2,"creativityRating":4,"educationalValueRating":4,"overallRating":2,"availableOn":["YouTube"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/a-for-adley.jpg","id":1},{"name":"Ada Twist, Scientist","description":"Ada Twist, Scientist is a 3D CGI animation with bright and vivid colors show for 4-8 year olds. It features Positive Role Models, STEM, Critical Thinking, Curiosity, Problem Solving, Teamwork, Perseverance, Science themes.","ageRange":"4-8","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"High","dialogueIntensity":"Moderate-High","soundEffectsLevel":"Moderate","musicTempo":"Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Moderate","sceneFrequency":"Moderate","animationStyle":"3D CGI animation with bright and vivid colors","themes":["Positive Role Models","STEM","Critical Thinking","Curiosity","Problem Solving","Teamwork","Perseverance","Science"],"friendshipRating":2,"problemSolvingRating":4,"relatableSituationsRating":2,"emotionalIntelligenceRating":2,"creativityRating":3,"educationalValueRating":3,"overallRating":3,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/ada-twist-scientist.jpg","id":2},{"name":"Adventure Agents","description":"Adventure Agents is a Live Action Outdoors Survival Adventure show for 6-12, 12+ year olds. It features Environmental Awareness, Cause and Effect, Life Lessons, Outdoor Exploration, Nature, Natural World, Exploration, Motor Skills, Animals, Farm Life, Emotional Intelligence, Problem Solving, Critical Thinking, Teamwork, Curiosity, Adventure, Discovery, Safety, Nature Sounds, Healthy Eating, Confidence Building, Mature Themes, Wild Animal Captures and Cooking themes.","ageRange":"6-12, 12+","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":4,"interactivityLevel":"High","dialogueIntensity":"Moderate-High","soundEffectsLevel":"Moderate-High","musicTempo":"Low","totalMusicLevel":"Low","totalSoundEffectTimeLevel":"Moderate-High","sceneFrequency":"Moderate","animationStyle":"Live Action Outdoors Survival Adventure","themes":["Environmental Awareness","Cause and Effect","Life Lessons","Outdoor Exploration","Nature","Natural World","Exploration","Motor Skills","Animals","Farm Life","Emotional Intelligence","Problem Solving","Critical Thinking","Teamwork","Curiosity","Adventure","Discovery","Safety","Nature Sounds","Healthy Eating","Confidence Building","Mature Themes","Wild Animal Captures and Cooking"],"friendshipRating":3,"problemSolvingRating":3,"relatableSituationsRating":3,"emotionalIntelligenceRating":3,"creativityRating":3,"educationalValueRating":1,"overallRating":2,"availableOn":["YouTube"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/adventure-agents.jpg","id":3},{"name":"Adventure Time (2010-2018)","description":"Adventure Time (2010-2018) is a Traditional hand-drawn 2D animation show for 10-14 year olds. It features Creativity & Imagination, Humor, Problem Solving, Friendship, Entertainment, Fantasy Elements, Adventure, Mild Mature Themes themes.","ageRange":"10-14","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":5,"interactivityLevel":"Low-Moderate","dialogueIntensity":"High","soundEffectsLevel":"High","musicTempo":"Moderate-High","totalMusicLevel":"High","totalSoundEffectTimeLevel":"High","sceneFrequency":"High","animationStyle":"Traditional hand-drawn 2D animation","themes":["Creativity & Imagination","Humor","Problem Solving","Friendship","Entertainment","Fantasy Elements","Adventure","Mild Mature Themes"],"friendshipRating":3,"problemSolvingRating":4,"relatableSituationsRating":1,"emotionalIntelligenceRating":2,"creativityRating":4,"educationalValueRating":1,"overallRating":1,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/adv-time.jpg","id":4},{"name":"Akili and Me","description":"Akili and Me is a 2D digital animation with a hand-drawn look. Bright and cheerful colors with simple backgrounds show for 3-6 year olds. It features Creativity & Imagination, Early Childhood experiences, Cultures & Traditions, Cultural & Social, Life Lessons, Preschool-Basics, Numeracy, Literacy, Motor Skills, Music, Repetitive Learning, Language Learning, Exercise, Colours, Shapes, sing-a-long, Social-Emotional, Cognitive Development themes.","ageRange":"3-6","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"High","dialogueIntensity":"High","soundEffectsLevel":"Moderate","musicTempo":"Moderate","totalMusicLevel":"High","totalSoundEffectTimeLevel":"Moderate","sceneFrequency":"Moderate","animationStyle":"2D digital animation with a hand-drawn look. Bright and cheerful colors with simple backgrounds","themes":["Creativity & Imagination","Early Childhood experiences","Cultures & Traditions","Cultural & Social","Life Lessons","Preschool-Basics","Numeracy","Literacy","Motor Skills","Music","Repetitive Learning","Language Learning","Exercise","Colours","Shapes","sing-a-long","Social-Emotional","Cognitive Development"],"friendshipRating":2,"problemSolvingRating":3,"relatableSituationsRating":4,"emotionalIntelligenceRating":1,"creativityRating":4,"educationalValueRating":3,"overallRating":3,"availableOn":["YouTube"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/akili-and-me.jpg","id":5},{"name":"Alma's Way","description":"Alma's Way is a 2D digital animation with a hand-drawn look. Bright and cheerful colors with simple backgrounds show for 4-8 year olds. It features Cultures & Traditions, Cause and Effect, Social-Emotional, Critical Thinking, Problem Solving themes.","ageRange":"4-8","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":2,"interactivityLevel":"High","dialogueIntensity":"Moderate","soundEffectsLevel":"Low-Moderate","musicTempo":"Moderate","totalMusicLevel":"Moderate-High","totalSoundEffectTimeLevel":"Low","sceneFrequency":"Low","animationStyle":"2D digital animation with a hand-drawn look. Bright and cheerful colors with simple backgrounds","themes":["Cultures & Traditions","Cause and Effect","Social-Emotional","Critical Thinking","Problem Solving"],"friendshipRating":1,"problemSolvingRating":3,"relatableSituationsRating":4,"emotionalIntelligenceRating":3,"creativityRating":1,"educationalValueRating":3,"overallRating":4,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/almas-way.jpg","id":6},{"name":"Alphablocks","description":"Alphablocks is a 2D digital animation with colorful and stylized block characters. show for 3-6 year olds. It features Preschool-Basics, Literacy, Phonics, Language Learning themes.","ageRange":"3-6","episodeLength":5,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"High","dialogueIntensity":"Moderate","soundEffectsLevel":"Moderate","musicTempo":"Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Moderate","sceneFrequency":"Moderate","animationStyle":"2D digital animation with colorful and stylized block characters.","themes":["Preschool-Basics","Literacy","Phonics","Language Learning"],"friendshipRating":3,"problemSolvingRating":1,"relatableSituationsRating":1,"emotionalIntelligenceRating":3,"creativityRating":1,"educationalValueRating":4,"overallRating":3,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/alpha-blocks.jpg","id":7},{"name":"Amakandu","description":"Amakandu is a Real Props No Animations show for 2+ year olds. It features Engineering Concepts, Creativity & Imagination, Sensory Exploration, Mindfulness, Nature, Relaxation, Captivating Visuals, Nature Sounds, ASMR themes.","ageRange":"2+","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":1,"interactivityLevel":"Low","dialogueIntensity":"None","soundEffectsLevel":"High","musicTempo":"Low","totalMusicLevel":"Low","totalSoundEffectTimeLevel":"High","sceneFrequency":"High","animationStyle":"Real Props No Animations","themes":["Engineering Concepts","Creativity & Imagination","Sensory Exploration","Mindfulness","Nature","Relaxation","Captivating Visuals","Nature Sounds","ASMR"],"friendshipRating":3,"problemSolvingRating":2,"relatableSituationsRating":2,"emotionalIntelligenceRating":1,"creativityRating":4,"educationalValueRating":3,"overallRating":5,"availableOn":["YouTube"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/amakandu.jpg","id":8},{"name":"Andy's Dinosaur Adventures","description":"Andy's Dinosaur Adventures is a Combination of live-action and CGI animation. show for 4-8 year olds. It features Dinosaurs, Paleontology, Adventure, Science, Natural History, Curiosity themes.","ageRange":"4-8","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"Moderate","dialogueIntensity":"Moderate","soundEffectsLevel":"Moderate","musicTempo":"Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Moderate","sceneFrequency":"Moderate","animationStyle":"Combination of live-action and CGI animation.","themes":["Dinosaurs","Paleontology","Adventure","Science","Natural History","Curiosity"],"friendshipRating":3,"problemSolvingRating":1,"relatableSituationsRating":1,"emotionalIntelligenceRating":2,"creativityRating":2,"educationalValueRating":1,"overallRating":3,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/andys-dinosaur-adventure.jpg","id":9},{"name":"Angelina Ballerina (2008-2010)","description":"Angelina Ballerina (2008-2010) is a 3D CGI Animation show for 3-6 year olds. It features Cultural Appreciation, Creativity & Imagination, Perseverance, Friendship, Problem Solving, Ballet, Motor Skills themes.","ageRange":"3-6","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"Low-Moderate","dialogueIntensity":"Moderate","soundEffectsLevel":"Moderate","musicTempo":"Moderate","totalMusicLevel":"High","totalSoundEffectTimeLevel":"Moderate","sceneFrequency":"Moderate","animationStyle":"3D CGI Animation","themes":["Cultural Appreciation","Creativity & Imagination","Perseverance","Friendship","Problem Solving","Ballet","Motor Skills"],"friendshipRating":4,"problemSolvingRating":3,"relatableSituationsRating":1,"emotionalIntelligenceRating":3,"creativityRating":4,"educationalValueRating":2,"overallRating":3,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/angelina-ballerina.jpg","id":10},{"name":"Art Kids TV","description":"Art Kids TV is a Live-Action with Bright Colors and Simple Settings show for 5-12 year olds. It features Arts & Crafts, Preschool-Basics, Creativity & Imagination, Origami, Painting, Drawing, Motor Skills, Literacy, Numeracy, Shapes, Colours themes.","ageRange":"5-12","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"High","dialogueIntensity":"Moderate-High","soundEffectsLevel":"Moderate","musicTempo":"Moderate","totalMusicLevel":"Moderate-High","totalSoundEffectTimeLevel":"Moderate","sceneFrequency":"Low-Moderate","animationStyle":"Live-Action with Bright Colors and Simple Settings","themes":["Arts & Crafts","Preschool-Basics","Creativity & Imagination","Origami","Painting","Drawing","Motor Skills","Literacy","Numeracy","Shapes","Colours"],"friendshipRating":1,"problemSolvingRating":3,"relatableSituationsRating":2,"emotionalIntelligenceRating":1,"creativityRating":4,"educationalValueRating":3,"overallRating":3,"availableOn":["YouTube"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/art-kids-tv.jpg","id":11},{"name":"Arthur","description":"Arthur is a 2D Traditional hand-drawn show for 6-10 year olds. It features Social-Emotional, Friendship, Problem Solving, Family Values, Relatable Situations, Social Development themes.","ageRange":"6-10","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":2,"interactivityLevel":"Moderate","dialogueIntensity":"Moderate-High","soundEffectsLevel":"Low-Moderate","musicTempo":"Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Low-Moderate","sceneFrequency":"Moderate","animationStyle":"2D Traditional hand-drawn","themes":["Social-Emotional","Friendship","Problem Solving","Family Values","Relatable Situations","Social Development"],"friendshipRating":4,"problemSolvingRating":4,"relatableSituationsRating":4,"emotionalIntelligenceRating":3,"creativityRating":2,"educationalValueRating":2,"overallRating":4,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/arthur.jpg","id":12},{"name":"Avatar: The Last Airbender","description":"Avatar: The Last Airbender is a 2D animation inspired by anime styles. show for 8-14 year olds. It features Life Lessons, Cultural Appreciation, Cultures & Traditions, Teamwork, Morality, Emotional Intelligence, Entertainment, Fantasy Elements, Martial Arts, Friendship, Responsibility, Perseverance, Mild Peril, Mild Fantasy Violence themes.","ageRange":"8-14","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":5,"interactivityLevel":"Low-Moderate","dialogueIntensity":"High","soundEffectsLevel":"High","musicTempo":"Moderate","totalMusicLevel":"Moderate-High","totalSoundEffectTimeLevel":"High","sceneFrequency":"High","animationStyle":"2D animation inspired by anime styles.","themes":["Life Lessons","Cultural Appreciation","Cultures & Traditions","Teamwork","Morality","Emotional Intelligence","Entertainment","Fantasy Elements","Martial Arts","Friendship","Responsibility","Perseverance","Mild Peril","Mild Fantasy Violence"],"friendshipRating":4,"problemSolvingRating":2,"relatableSituationsRating":3,"emotionalIntelligenceRating":3,"creativityRating":4,"educationalValueRating":2,"overallRating":1,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/avatar-last-airbender.jpg","id":13},{"name":"Baba blast","description":"Baba blast is a Combination of Live-Action and 2D Animation. Color Palette: Bright and primary colors. show for 3-6 year olds. It features Early Childhood experiences, Dinosaurs, Paleontology, Natural History, sing-a-long, Dance, Social-Emotional, Exploration, Entertainment themes.","ageRange":"3-6","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":4,"interactivityLevel":"High","dialogueIntensity":"High","soundEffectsLevel":"Moderate-High","musicTempo":"Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Moderate-High","sceneFrequency":"Moderate","animationStyle":"Combination of Live-Action and 2D Animation. Color Palette: Bright and primary colors.","themes":["Early Childhood experiences","Dinosaurs","Paleontology","Natural History","sing-a-long","Dance","Social-Emotional","Exploration","Entertainment"],"friendshipRating":1,"problemSolvingRating":2,"relatableSituationsRating":3,"emotionalIntelligenceRating":2,"creativityRating":1,"educationalValueRating":2,"overallRating":2,"availableOn":["YouTube"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/baba-blast.jpg","id":14},{"name":"Babar","description":"Babar is a Traditional 2D hand-drawn animation. show for 4-8 year olds. It features Friendship, Responsibility, Problem Solving, Leadership, Emotional Intelligence, Perseverance, Family Values, Teamwork themes.","ageRange":"4-8","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":2,"interactivityLevel":"Moderate","dialogueIntensity":"Moderate","soundEffectsLevel":"Low-Moderate","musicTempo":"Low-Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Low","sceneFrequency":"Moderate","animationStyle":"Traditional 2D hand-drawn animation.","themes":["Friendship","Responsibility","Problem Solving","Leadership","Emotional Intelligence","Perseverance","Family Values","Teamwork"],"friendshipRating":3,"problemSolvingRating":4,"relatableSituationsRating":2,"emotionalIntelligenceRating":3,"creativityRating":1,"educationalValueRating":3,"overallRating":4,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/babar.jpg","id":15},{"name":"Babblarna","description":"Babblarna is a 3D CGI animation delivered slowly and smoothly show for 1-4 year olds. It features Creativity & Imagination, Language Learning, Repetitive Learning, Social-Emotional, Phonics themes.","ageRange":"1-4","episodeLength":5,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":1,"interactivityLevel":"High","dialogueIntensity":"Very Low","soundEffectsLevel":"Low","musicTempo":"Moderate","totalMusicLevel":"High","totalSoundEffectTimeLevel":"Low","sceneFrequency":"Low","animationStyle":"3D CGI animation delivered slowly and smoothly","themes":["Creativity & Imagination","Language Learning","Repetitive Learning","Social-Emotional","Phonics"],"friendshipRating":3,"problemSolvingRating":2,"relatableSituationsRating":3,"emotionalIntelligenceRating":3,"creativityRating":3,"educationalValueRating":4,"overallRating":5,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/babblarna.jpg","id":16},{"name":"Badanamu","description":"Badanamu is a 3D CGI animation with bright and vivid colors. show for 1-5 year olds. It features Preschool-Basics, sing-a-long, Numeracy, Literacy, Motor Skills, Cognitive Development, Language Learning, Phonics, Emotional Intelligence themes.","ageRange":"1-5","episodeLength":5,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":4,"interactivityLevel":"High","dialogueIntensity":"Low-Moderate","soundEffectsLevel":"High","musicTempo":"Moderate-High","totalMusicLevel":"High","totalSoundEffectTimeLevel":"High","sceneFrequency":"High","animationStyle":"3D CGI animation with bright and vivid colors.","themes":["Preschool-Basics","sing-a-long","Numeracy","Literacy","Motor Skills","Cognitive Development","Language Learning","Phonics","Emotional Intelligence"],"friendshipRating":1,"problemSolvingRating":2,"relatableSituationsRating":1,"emotionalIntelligenceRating":3,"creativityRating":1,"educationalValueRating":4,"overallRating":2,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/badanamu.jpg","id":17},{"name":"Bananas in Pyjamas (2011-2013)","description":"Bananas in Pyjamas (2011-2013) is a 3D CGI animation introduces brighter colors and more dynamic visuals but the animation remains straightforward to prevent overstimulation show for 2-5 year olds. It features Friendship, Problem Solving, Social-Emotional, sing-a-long, Repetitive Learning themes.","ageRange":"2-5","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":1,"interactivityLevel":"Moderate","dialogueIntensity":"Moderate","soundEffectsLevel":"Low-Moderate","musicTempo":"Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Moderate","sceneFrequency":"Moderate","animationStyle":"3D CGI animation introduces brighter colors and more dynamic visuals but the animation remains straightforward to prevent overstimulation","themes":["Friendship","Problem Solving","Social-Emotional","sing-a-long","Repetitive Learning"],"friendshipRating":3,"problemSolvingRating":4,"relatableSituationsRating":3,"emotionalIntelligenceRating":3,"creativityRating":3,"educationalValueRating":4,"overallRating":5,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/bananas-in-pyjamas.jpg","id":18},{"name":"Barbapapa (1973-2003)","description":"Barbapapa (1973-2003) is a traditional hand-drawn 2D animation show for 3-7 year olds. It features Environmental Awareness, Creativity & Imagination, Social-Emotional themes.","ageRange":"3-7","episodeLength":5,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"Moderate","dialogueIntensity":"Moderate","soundEffectsLevel":"Low-Moderate","musicTempo":"Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Low-Moderate","sceneFrequency":"Moderate","animationStyle":"traditional hand-drawn 2D animation","themes":["Environmental Awareness","Creativity & Imagination","Social-Emotional"],"friendshipRating":2,"problemSolvingRating":2,"relatableSituationsRating":3,"emotionalIntelligenceRating":2,"creativityRating":3,"educationalValueRating":1,"overallRating":3,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/barbapapa.jpg","id":19},{"name":"Barney & Friends","description":"Barney & Friends is a Live action with costumed characters show for 2-5 year olds. It features Preschool-Basics, Dance, Social-Emotional, Friendship, Numeracy, Literacy, Music, Teamwork, Shapes, Emotional Intelligence, sing-a-long themes.","ageRange":"2-5","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":2,"interactivityLevel":"High","dialogueIntensity":"Moderate","soundEffectsLevel":"Low","musicTempo":"Moderate","totalMusicLevel":"High","totalSoundEffectTimeLevel":"Low","sceneFrequency":"Moderate","animationStyle":"Live action with costumed characters","themes":["Preschool-Basics","Dance","Social-Emotional","Friendship","Numeracy","Literacy","Music","Teamwork","Shapes","Emotional Intelligence","sing-a-long"],"friendshipRating":4,"problemSolvingRating":3,"relatableSituationsRating":4,"emotionalIntelligenceRating":4,"creativityRating":1,"educationalValueRating":3,"overallRating":4,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/barney-and-friends.jpg","id":20},{"name":"Be Cool, Scooby-Doo! (2015–2018)","description":"Be Cool, Scooby-Doo! (2015–2018) is a Cartoonish 2D animation style show for 7-12 year olds. It features Problem Solving, Teamwork, Mystery, Entertainment, Humor, Critical Thinking, Mild Peril, Mild Fantasy Violence themes.","ageRange":"7-12","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":5,"interactivityLevel":"Low","dialogueIntensity":"High","soundEffectsLevel":"High","musicTempo":"High","totalMusicLevel":"High","totalSoundEffectTimeLevel":"Very High","sceneFrequency":"High","animationStyle":"Cartoonish 2D animation style","themes":["Problem Solving","Teamwork","Mystery","Entertainment","Humor","Critical Thinking","Mild Peril","Mild Fantasy Violence"],"friendshipRating":3,"problemSolvingRating":4,"relatableSituationsRating":2,"emotionalIntelligenceRating":3,"creativityRating":2,"educationalValueRating":2,"overallRating":1,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/be-cool-scooby-doo.jpg","id":21},{"name":"Bear in the Big Blue House","description":"Bear in the Big Blue House is a Live-action costumed puppetry with detailed sets. show for 2-5 year olds. It features Social-Emotional, Friendship, Routine, Problem Solving, Emotional Intelligence, Social Development, Relatable Situations, sing-a-long, Bedtime Routines themes.","ageRange":"2-5","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":2,"interactivityLevel":"High","dialogueIntensity":"Moderate","soundEffectsLevel":"Low-Moderate","musicTempo":"Low-Moderate","totalMusicLevel":"Low-Moderate","totalSoundEffectTimeLevel":"Low","sceneFrequency":"Low-Moderate","animationStyle":"Live-action costumed puppetry with detailed sets.","themes":["Social-Emotional","Friendship","Routine","Problem Solving","Emotional Intelligence","Social Development","Relatable Situations","sing-a-long","Bedtime Routines"],"friendshipRating":3,"problemSolvingRating":4,"relatableSituationsRating":4,"emotionalIntelligenceRating":3,"creativityRating":3,"educationalValueRating":2,"overallRating":4,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/bear-in-the-big-blue-house.jpg","id":22},{"name":"Beep and Mort","description":"Beep and Mort is a Live-action puppetry with colorful characters. show for 3-6 year olds. It features Creativity & Imagination, Friendship, Problem Solving, Emotional Intelligence, Adventure, Teamwork, Perseverance, Curiosity themes.","ageRange":"3-6","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":1,"interactivityLevel":"Moderate","dialogueIntensity":"Moderate","soundEffectsLevel":"Low","musicTempo":"Low-Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Low-Moderate","sceneFrequency":"Low","animationStyle":"Live-action puppetry with colorful characters.","themes":["Creativity & Imagination","Friendship","Problem Solving","Emotional Intelligence","Adventure","Teamwork","Perseverance","Curiosity"],"friendshipRating":4,"problemSolvingRating":3,"relatableSituationsRating":1,"emotionalIntelligenceRating":3,"creativityRating":3,"educationalValueRating":1,"overallRating":5,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/beep-and-mort.jpg","id":23},{"name":"Ben & Holly's Little Kingdom (2009-2013)","description":"Ben & Holly's Little Kingdom (2009-2013) is a Digital 2D animation show for 4-8 year olds. It features Creativity & Imagination, Problem Solving, Friendship, Teamwork themes.","ageRange":"4-8","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"Moderate","dialogueIntensity":"Moderate","soundEffectsLevel":"Moderate","musicTempo":"Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Moderate","sceneFrequency":"Moderate","animationStyle":"Digital 2D animation","themes":["Creativity & Imagination","Problem Solving","Friendship","Teamwork"],"friendshipRating":3,"problemSolvingRating":4,"relatableSituationsRating":3,"emotionalIntelligenceRating":2,"creativityRating":3,"educationalValueRating":1,"overallRating":3,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/ben-and-hollys-little-kingdom.jpg","id":24},{"name":"Between the Lions","description":"Between the Lions is a Combination of live-action puppetry, 2D animation, and CGI effects. Bright but balanced colors, with emphasis on text and literacy elements. show for 4-8 year olds. It features Literacy, Phonics, Language Learning, Reading Comprehension, Music, Humor themes.","ageRange":"4-8","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"High","dialogueIntensity":"High","soundEffectsLevel":"Moderate","musicTempo":"Moderate","totalMusicLevel":"High","totalSoundEffectTimeLevel":"Moderate","sceneFrequency":"Moderate-High","animationStyle":"Combination of live-action puppetry, 2D animation, and CGI effects. Bright but balanced colors, with emphasis on text and literacy elements.","themes":["Literacy","Phonics","Language Learning","Reading Comprehension","Music","Humor"],"friendshipRating":1,"problemSolvingRating":1,"relatableSituationsRating":3,"emotionalIntelligenceRating":2,"creativityRating":1,"educationalValueRating":4,"overallRating":3,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/between-the-lions.jpg","id":25},{"name":"Bill Nye the Science Guy","description":"Bill Nye the Science Guy is a Live-action with fast-paced editing, animations, and special effects. show for 8-14 year olds. It features STEM, Cause and Effect, Safety, Discovery, Science, Critical Thinking, Experimentation, Curiosity, Natural World, Problem Solving themes.","ageRange":"8-14","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":5,"interactivityLevel":"High","dialogueIntensity":"High","soundEffectsLevel":"High","musicTempo":"Moderate-High","totalMusicLevel":"High","totalSoundEffectTimeLevel":"High","sceneFrequency":"High","animationStyle":"Live-action with fast-paced editing, animations, and special effects.","themes":["STEM","Cause and Effect","Safety","Discovery","Science","Critical Thinking","Experimentation","Curiosity","Natural World","Problem Solving"],"friendshipRating":1,"problemSolvingRating":4,"relatableSituationsRating":2,"emotionalIntelligenceRating":1,"creativityRating":1,"educationalValueRating":3,"overallRating":1,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/bill-nye-the-science-guy.jpg","id":26},{"name":"Bing","description":"Bing is a 3D CGI animation show for 2-4 year olds. It features Social Development, Emotional Intelligence, Problem Solving themes.","ageRange":"2-4","episodeLength":5,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":2,"interactivityLevel":"Low-Moderate","dialogueIntensity":"Moderate","soundEffectsLevel":"Low-Moderate","musicTempo":"Low-Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Low","sceneFrequency":"Low","animationStyle":"3D CGI animation","themes":["Social Development","Emotional Intelligence","Problem Solving"],"friendshipRating":1,"problemSolvingRating":4,"relatableSituationsRating":4,"emotionalIntelligenceRating":3,"creativityRating":3,"educationalValueRating":2,"overallRating":4,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/bing.jpg","id":27},{"name":"Blippi","description":"Blippi is a Live-Action with Bright Colors and Real-World Settings show for 2-5 year olds. It features Preschool-Basics, Early Childhood experiences, Creativity & Imagination, Curiosity, Animals, Natural World, Exploration, sing-a-long, Dance, Vocabulary, Adventure, Silly Comedy, Colours, Shapes, Nature, Hyper-Activity themes.","ageRange":"2-5","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":5,"interactivityLevel":"High","dialogueIntensity":"High","soundEffectsLevel":"High","musicTempo":"High","totalMusicLevel":"High","totalSoundEffectTimeLevel":"High","sceneFrequency":"High","animationStyle":"Live-Action with Bright Colors and Real-World Settings","themes":["Preschool-Basics","Early Childhood experiences","Creativity & Imagination","Curiosity","Animals","Natural World","Exploration","sing-a-long","Dance","Vocabulary","Adventure","Silly Comedy","Colours","Shapes","Nature","Hyper-Activity"],"friendshipRating":1,"problemSolvingRating":3,"relatableSituationsRating":1,"emotionalIntelligenceRating":2,"creativityRating":4,"educationalValueRating":3,"overallRating":1,"availableOn":["YouTube"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/blippi.jpg","id":28},{"name":"Blue's Clues (1996-2007)","description":"Blue's Clues (1996-2007) is a Live action, Digital 2D animation show for 3-6 year olds. It features Preschool-Basics, Emotional Intelligence, Critical Thinking, Problem Solving themes.","ageRange":"3-6","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":1,"interactivityLevel":"High","dialogueIntensity":"Moderate","soundEffectsLevel":"Low","musicTempo":"Low-Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Low","sceneFrequency":"Very Low","animationStyle":"Live action, Digital 2D animation","themes":["Preschool-Basics","Emotional Intelligence","Critical Thinking","Problem Solving"],"friendshipRating":3,"problemSolvingRating":4,"relatableSituationsRating":2,"emotionalIntelligenceRating":3,"creativityRating":3,"educationalValueRating":3,"overallRating":5,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/blues-clues.jpg","id":29},{"name":"Blue's Clues & You! (2019)","description":"Blue's Clues & You! (2019) is a Live action, 3D CGI animation show for 3-6 year olds. It features Preschool-Basics, Emotional Intelligence, Problem Solving, Critical Thinking themes.","ageRange":"3-6","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":1,"interactivityLevel":"High","dialogueIntensity":"Moderate","soundEffectsLevel":"Low","musicTempo":"Low-Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Low","sceneFrequency":"Very Low","animationStyle":"Live action, 3D CGI animation","themes":["Preschool-Basics","Emotional Intelligence","Problem Solving","Critical Thinking"],"friendshipRating":2,"problemSolvingRating":3,"relatableSituationsRating":1,"emotionalIntelligenceRating":4,"creativityRating":1,"educationalValueRating":3,"overallRating":5,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/blues-clues-and-you.jpg","id":30},{"name":"Bluey 2018-present","description":"Bluey 2018-present is a Digital 2D animation show for 3-8 year olds. It features Creativity & Imagination, Emotional Intelligence, Conflict Resolution, Family Values, Family Relationships themes.","ageRange":"3-8","episodeLength":5,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"Moderate","dialogueIntensity":"Moderate","soundEffectsLevel":"Moderate","musicTempo":"Moderate","totalMusicLevel":"High","totalSoundEffectTimeLevel":"Moderate","sceneFrequency":"Moderate","animationStyle":"Digital 2D animation","themes":["Creativity & Imagination","Emotional Intelligence","Conflict Resolution","Family Values","Family Relationships"],"friendshipRating":4,"problemSolvingRating":2,"relatableSituationsRating":1,"emotionalIntelligenceRating":4,"creativityRating":4,"educationalValueRating":2,"overallRating":3,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/bluey.jpg","id":31},{"name":"Bob the Builder (1997-2015)","description":"Bob the Builder (1997-2015) is a Traditional Stop-Motion animation show for 3-6 year olds. It features Creativity & Imagination, Problem Solving, Friendship, Teamwork, Repetitive Learning, Construction themes.","ageRange":"3-6","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"Low-Moderate","dialogueIntensity":"Moderate","soundEffectsLevel":"Moderate","musicTempo":"Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Moderate","sceneFrequency":"Low-Moderate","animationStyle":"Traditional Stop-Motion animation","themes":["Creativity & Imagination","Problem Solving","Friendship","Teamwork","Repetitive Learning","Construction"],"friendshipRating":4,"problemSolvingRating":4,"relatableSituationsRating":1,"emotionalIntelligenceRating":1,"creativityRating":4,"educationalValueRating":3,"overallRating":3,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/bob-the-builder.jpg","id":32},{"name":"Bob the Builder (2015-2018)","description":"Bob the Builder (2015-2018) is a 3D CGI animation show for 3-6 year olds. It features Creativity & Imagination, Problem Solving, Friendship, Teamwork, Repetitive Learning, Construction themes.","ageRange":"3-6","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":4,"interactivityLevel":"Low-Moderate","dialogueIntensity":"Moderate","soundEffectsLevel":"Moderate-High","musicTempo":"Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Moderate","sceneFrequency":"Moderate-High","animationStyle":"3D CGI animation","themes":["Creativity & Imagination","Problem Solving","Friendship","Teamwork","Repetitive Learning","Construction"],"friendshipRating":4,"problemSolvingRating":3,"relatableSituationsRating":3,"emotionalIntelligenceRating":1,"creativityRating":4,"educationalValueRating":4,"overallRating":2,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/bob-the-builder-2015.jpg","id":33},{"name":"Boba the Show (2021-present)","description":"Boba the Show (2021-present) is a 3D CGI animation with realistic textures and environments. show for 3-6 year olds. It features Creativity & Imagination, Early Childhood experiences, Social-Emotional, Friendship, Emotional Intelligence, Social Development, sing-a-long, Dance, Humor, Motor Skills themes.","ageRange":"3-6","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":4,"interactivityLevel":"Moderate","dialogueIntensity":"Low","soundEffectsLevel":"High","musicTempo":"Moderate-High","totalMusicLevel":"High","totalSoundEffectTimeLevel":"High","sceneFrequency":"High","animationStyle":"3D CGI animation with realistic textures and environments.","themes":["Creativity & Imagination","Early Childhood experiences","Social-Emotional","Friendship","Emotional Intelligence","Social Development","sing-a-long","Dance","Humor","Motor Skills"],"friendshipRating":4,"problemSolvingRating":1,"relatableSituationsRating":4,"emotionalIntelligenceRating":3,"creativityRating":3,"educationalValueRating":3,"overallRating":2,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/boba.jpg","id":34},{"name":"Bounce Patrol","description":"Bounce Patrol is a Live-Action with Bright Colors and Simple Settings show for 3-6 year olds. It features Preschool-Basics, Literacy, Numeracy, Colours, Animals, Social-Emotional, sing-a-long, Dance, Phonics, Vocabulary, Exercise themes.","ageRange":"3-6","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":5,"interactivityLevel":"High","dialogueIntensity":"High","soundEffectsLevel":"High","musicTempo":"High","totalMusicLevel":"Very High","totalSoundEffectTimeLevel":"High","sceneFrequency":"High","animationStyle":"Live-Action with Bright Colors and Simple Settings","themes":["Preschool-Basics","Literacy","Numeracy","Colours","Animals","Social-Emotional","sing-a-long","Dance","Phonics","Vocabulary","Exercise"],"friendshipRating":1,"problemSolvingRating":2,"relatableSituationsRating":4,"emotionalIntelligenceRating":2,"creativityRating":3,"educationalValueRating":4,"overallRating":1,"availableOn":["YouTube"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/bounce-patrol.jpg","id":35},{"name":"Brain Candy TV","description":"Brain Candy TV is a 3D CGI Animation with Bright Colors and Realistic Models show for 2+ year olds. It features Spacetime and the Cosmos, Preschool-Basics, Elementary-Basics, STEM, Early Childhood experiences, Engineering Concepts, Science, Language Learning, Phonics, Vocabulary, Cognitive Development, Curiosity, Natural History, Colours, Literacy themes.","ageRange":"2+","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":5,"interactivityLevel":"High","dialogueIntensity":"Moderate-High","soundEffectsLevel":"Moderate-High","musicTempo":"Moderate","totalMusicLevel":"Moderate-High","totalSoundEffectTimeLevel":"High","sceneFrequency":"Moderate","animationStyle":"3D CGI Animation with Bright Colors and Realistic Models","themes":["Spacetime and the Cosmos","Preschool-Basics","Elementary-Basics","STEM","Early Childhood experiences","Engineering Concepts","Science","Language Learning","Phonics","Vocabulary","Cognitive Development","Curiosity","Natural History","Colours","Literacy"],"friendshipRating":3,"problemSolvingRating":3,"relatableSituationsRating":3,"emotionalIntelligenceRating":2,"creativityRating":2,"educationalValueRating":4,"overallRating":1,"availableOn":["YouTube"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/brain-candy-tv.jpg","id":36},{"name":"Bubble Guppies","description":"Bubble Guppies is a 3D CGI animation set in an underwater world. Extremely bright and vivid colors with high saturation. show for 3-6 year olds. It features Elementary-Basics, Math, Literacy, Science, Social-Emotional, Teamwork, sing-a-long, Problem Solving, Numeracy, Cognitive Development themes.","ageRange":"3-6","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":5,"interactivityLevel":"High","dialogueIntensity":"High","soundEffectsLevel":"High","musicTempo":"Moderate-High","totalMusicLevel":"High","totalSoundEffectTimeLevel":"High","sceneFrequency":"High","animationStyle":"3D CGI animation set in an underwater world. Extremely bright and vivid colors with high saturation.","themes":["Elementary-Basics","Math","Literacy","Science","Social-Emotional","Teamwork","sing-a-long","Problem Solving","Numeracy","Cognitive Development"],"friendshipRating":2,"problemSolvingRating":3,"relatableSituationsRating":4,"emotionalIntelligenceRating":2,"creativityRating":1,"educationalValueRating":1,"overallRating":1,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/bubble-guppies.jpg","id":37},{"name":"Builder Brothers' Dream Factory","description":"Builder Brothers' Dream Factory is a 3D CGI Animation with detailed environments. show for 4-8 year olds. It features STEM, Creativity & Imagination, Engineering Concepts, Teamwork, Critical Thinking themes.","ageRange":"4-8","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"High","dialogueIntensity":"Moderate-High","soundEffectsLevel":"Moderate","musicTempo":"Moderate-High","totalMusicLevel":"Moderate-High","totalSoundEffectTimeLevel":"Moderate-High","sceneFrequency":"Moderate-High","animationStyle":"3D CGI Animation with detailed environments.","themes":["STEM","Creativity & Imagination","Engineering Concepts","Teamwork","Critical Thinking"],"friendshipRating":2,"problemSolvingRating":4,"relatableSituationsRating":1,"emotionalIntelligenceRating":1,"creativityRating":3,"educationalValueRating":4,"overallRating":3,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/builder-brothers-dream-factory.jpg","id":38},{"name":"Caillou (1997-2010)","description":"Caillou (1997-2010) is a Traditional hand-drawn 2D animation. DIgital later in the seasons show for 2-5 year olds. It features Social-Emotional, Family Relationships, Relatable Situations, Patience, Emotional Intelligence, Conflict Resolution, Friendship, Frequent Whining, Tantrums, Lack of Consequences themes.","ageRange":"2-5","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":2,"interactivityLevel":"Low","dialogueIntensity":"Moderate","soundEffectsLevel":"Low-Moderate","musicTempo":"Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Low-Moderate","sceneFrequency":"Low-Moderate","animationStyle":"Traditional hand-drawn 2D animation. DIgital later in the seasons","themes":["Social-Emotional","Family Relationships","Relatable Situations","Patience","Emotional Intelligence","Conflict Resolution","Friendship","Frequent Whining","Tantrums","Lack of Consequences"],"friendshipRating":3,"problemSolvingRating":1,"relatableSituationsRating":4,"emotionalIntelligenceRating":3,"creativityRating":1,"educationalValueRating":2,"overallRating":4,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/caillou.jpg","id":39},{"name":"Caitie's Classroom (SuperSimplePlay)","description":"Caitie's Classroom (SuperSimplePlay) is a Live-Action with Puppetry and Props show for 1-5 year olds. It features Preschool-Basics, Early Childhood experiences, STEM, Elementary-Basics, Cultural & Social, sing-a-long, Dance, Music, Social-Emotional, Literacy, Numeracy, Social Development, Emotional Intelligence, Motor Skills themes.","ageRange":"1-5","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"High","dialogueIntensity":"High","soundEffectsLevel":"Moderate","musicTempo":"Moderate","totalMusicLevel":"High","totalSoundEffectTimeLevel":"Moderate","sceneFrequency":"Moderate","animationStyle":"Live-Action with Puppetry and Props","themes":["Preschool-Basics","Early Childhood experiences","STEM","Elementary-Basics","Cultural & Social","sing-a-long","Dance","Music","Social-Emotional","Literacy","Numeracy","Social Development","Emotional Intelligence","Motor Skills"],"friendshipRating":2,"problemSolvingRating":3,"relatableSituationsRating":3,"emotionalIntelligenceRating":3,"creativityRating":3,"educationalValueRating":4,"overallRating":3,"availableOn":["YouTube"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/caitie_s-classroom-(superssimpleplay).jpg","id":40},{"name":"Canticos (2016-present)","description":"Canticos (2016-present) is a Digital 2D animation with a simple, storybook-inspired art style. The characters are designed with soft, rounded features and bright, pastel colors, reflecting the show's musical and educational focus. The animation often incorporates interactive elements, encouraging audience participation. show for 1-5 year olds. It features Cultures & Traditions, Cultural & Social, Cultural Appreciation, Language Learning, Literacy, sing-a-long, Music themes.","ageRange":"1-5","episodeLength":5,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"High","dialogueIntensity":"Moderate-High","soundEffectsLevel":"Moderate","musicTempo":"Moderate-High","totalMusicLevel":"High","totalSoundEffectTimeLevel":"Moderate","sceneFrequency":"Moderate-High","animationStyle":"Digital 2D animation with a simple, storybook-inspired art style. The characters are designed with soft, rounded features and bright, pastel colors, reflecting the show's musical and educational focus. The animation often incorporates interactive elements, encouraging audience participation.","themes":["Cultures & Traditions","Cultural & Social","Cultural Appreciation","Language Learning","Literacy","sing-a-long","Music"],"friendshipRating":1,"problemSolvingRating":1,"relatableSituationsRating":4,"emotionalIntelligenceRating":3,"creativityRating":2,"educationalValueRating":4,"overallRating":3,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/canticos-(2016-present).jpg","id":41},{"name":"Captain Planet and the Planeteers (1990-1996)","description":"Captain Planet and the Planeteers (1990-1996) is a Traditional 2D Animation with Bold Designs show for 7-12 year olds. It features Superhero Themes, Environmental Awareness, Teamwork, Ecosystems, Responsibility, Social Development, Entertainment, Mild Peril themes.","ageRange":"7-12","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":4,"interactivityLevel":"Moderate","dialogueIntensity":"High","soundEffectsLevel":"High","musicTempo":"High","totalMusicLevel":"High","totalSoundEffectTimeLevel":"High","sceneFrequency":"High","animationStyle":"Traditional 2D Animation with Bold Designs","themes":["Superhero Themes","Environmental Awareness","Teamwork","Ecosystems","Responsibility","Social Development","Entertainment","Mild Peril"],"friendshipRating":2,"problemSolvingRating":2,"relatableSituationsRating":3,"emotionalIntelligenceRating":2,"creativityRating":1,"educationalValueRating":3,"overallRating":2,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/captain-planet-and-the-planeteers-(1990-1996).jpg","id":42},{"name":"Care Bears: Unlock the Magic (2019-present)","description":"Care Bears: Unlock the Magic (2019-present) is a 2D Digital Animation with a modern, vibrant design. Color Palette: Bright and pastel colors with high saturation. show for 4-8 year olds. It features Learning from Mistakes, Emotional Intelligence, Social-Emotional, Social Development, Friendship themes.","ageRange":"4-8","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"Moderate","dialogueIntensity":"Moderate","soundEffectsLevel":"Moderate","musicTempo":"Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Moderate","sceneFrequency":"Moderate","animationStyle":"2D Digital Animation with a modern, vibrant design. Color Palette: Bright and pastel colors with high saturation.","themes":["Learning from Mistakes","Emotional Intelligence","Social-Emotional","Social Development","Friendship"],"friendshipRating":4,"problemSolvingRating":1,"relatableSituationsRating":4,"emotionalIntelligenceRating":4,"creativityRating":2,"educationalValueRating":3,"overallRating":3,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/care-bears-unlock-the-magi-(2019-present).jpg","id":43},{"name":"Casper Babypants","description":"Casper Babypants is a Simple Animations or Live-Action with Gentle Imagery show for 1-5 year olds. It features Preschool-Basics, Music, sing-a-long, Vocabulary, Dance, Relaxation, Repetitive Learning, Language Learning, Literacy, Numeracy, Phonics, Routine, Bedtime Routines, Motor Skills, Sensory Exploration, Cognitive Development themes.","ageRange":"1-5","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":2,"interactivityLevel":"Moderate","dialogueIntensity":"Moderate","soundEffectsLevel":"Moderate","musicTempo":"Moderate","totalMusicLevel":"Very High","totalSoundEffectTimeLevel":"Low-Moderate","sceneFrequency":"Low-Moderate","animationStyle":"Simple Animations or Live-Action with Gentle Imagery","themes":["Preschool-Basics","Music","sing-a-long","Vocabulary","Dance","Relaxation","Repetitive Learning","Language Learning","Literacy","Numeracy","Phonics","Routine","Bedtime Routines","Motor Skills","Sensory Exploration","Cognitive Development"],"friendshipRating":1,"problemSolvingRating":3,"relatableSituationsRating":1,"emotionalIntelligenceRating":2,"creativityRating":3,"educationalValueRating":3,"overallRating":4,"availableOn":["YouTube"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/casper-babypants.jpg","id":44},{"name":"Charlie's Colorform City","description":"Charlie's Colorform City is a 2D Digital Animation using Colorforms-inspired designs. Color Palette: Bright and bold primary colors with simple shapes. show for 2-5 year olds. It features Creativity & Imagination, Preschool-Basics, Shapes, Colours, Critical Thinking, Cognitive Development, Repetitive Learning themes.","ageRange":"2-5","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":2,"interactivityLevel":"High","dialogueIntensity":"Moderate","soundEffectsLevel":"Low-Moderate","musicTempo":"Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Low","sceneFrequency":"Moderate","animationStyle":"2D Digital Animation using Colorforms-inspired designs. Color Palette: Bright and bold primary colors with simple shapes.","themes":["Creativity & Imagination","Preschool-Basics","Shapes","Colours","Critical Thinking","Cognitive Development","Repetitive Learning"],"friendshipRating":1,"problemSolvingRating":4,"relatableSituationsRating":1,"emotionalIntelligenceRating":3,"creativityRating":3,"educationalValueRating":3,"overallRating":4,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/charlies-colorform-city.jpg","id":45},{"name":"Chip and Potato","description":"Chip and Potato is a 2D Digital Animation with soft, rounded designs. Color Palette: Warm and pastel colors. show for 3-6 year olds. It features Overcoming Fears, Social-Emotional, Friendship, Problem Solving, Family Values, Emotional Intelligence, Perseverance themes.","ageRange":"3-6","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"Moderate","dialogueIntensity":"Moderate","soundEffectsLevel":"Moderate","musicTempo":"Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Moderate","sceneFrequency":"Moderate","animationStyle":"2D Digital Animation with soft, rounded designs. Color Palette: Warm and pastel colors.","themes":["Overcoming Fears","Social-Emotional","Friendship","Problem Solving","Family Values","Emotional Intelligence","Perseverance"],"friendshipRating":4,"problemSolvingRating":4,"relatableSituationsRating":4,"emotionalIntelligenceRating":3,"creativityRating":2,"educationalValueRating":3,"overallRating":3,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/chip-and-potato.jpg","id":46},{"name":"City of friends","description":"City of friends is a 3D CGI Animation with detailed environments. show for 3-6 year olds. It features Community Service, Teamwork, Responsibility, Problem Solving themes.","ageRange":"3-6","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"Moderate","dialogueIntensity":"Moderate","soundEffectsLevel":"Moderate","musicTempo":"Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Moderate","sceneFrequency":"Moderate","animationStyle":"3D CGI Animation with detailed environments.","themes":["Community Service","Teamwork","Responsibility","Problem Solving"],"friendshipRating":1,"problemSolvingRating":4,"relatableSituationsRating":2,"emotionalIntelligenceRating":1,"creativityRating":1,"educationalValueRating":2,"overallRating":3,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/city-of-friends.jpg","id":47},{"name":"CITY VEHICLES","description":"CITY VEHICLES is a 3D CGI Animation with Bright Colors and Realistic Models show for 2-5 year olds. It features Vehicle Themes, Creativity & Imagination, Engineering Concepts, Mechanics, Problem Solving, Teamwork, Music, Entertainment themes.","ageRange":"2-5","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":5,"interactivityLevel":"Low","dialogueIntensity":"Moderate","soundEffectsLevel":"High","musicTempo":"High","totalMusicLevel":"Very High","totalSoundEffectTimeLevel":"Very High","sceneFrequency":"High","animationStyle":"3D CGI Animation with Bright Colors and Realistic Models","themes":["Vehicle Themes","Creativity & Imagination","Engineering Concepts","Mechanics","Problem Solving","Teamwork","Music","Entertainment"],"friendshipRating":3,"problemSolvingRating":4,"relatableSituationsRating":2,"emotionalIntelligenceRating":3,"creativityRating":3,"educationalValueRating":3,"overallRating":1,"availableOn":["YouTube"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/city-vehicles.jpg","id":48},{"name":"Clifford the Big Red Dog (2000)","description":"Clifford the Big Red Dog (2000) is a Digital 2D animation show for 4-8 year olds. It features Emotional Intelligence, Social Development, Problem Solving, Friendship, Community themes.","ageRange":"4-8","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":2,"interactivityLevel":"Low-Moderate","dialogueIntensity":"Moderate","soundEffectsLevel":"Moderate","musicTempo":"Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Moderate","sceneFrequency":"Moderate","animationStyle":"Digital 2D animation","themes":["Emotional Intelligence","Social Development","Problem Solving","Friendship","Community"],"friendshipRating":3,"problemSolvingRating":4,"relatableSituationsRating":3,"emotionalIntelligenceRating":4,"creativityRating":1,"educationalValueRating":2,"overallRating":4,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/clifford-the-big-red-dog-(2000).jpg","id":49},{"name":"Clifford the Big Red Dog (2019)","description":"Clifford the Big Red Dog (2019) is a 3D CGI animation show for 3-6 year olds. It features Emotional Intelligence, Friendship, Problem Solving, Social Development, Community themes.","ageRange":"3-6","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"Low-Moderate","dialogueIntensity":"Moderate","soundEffectsLevel":"Moderate-High","musicTempo":"Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Moderate","sceneFrequency":"Moderate","animationStyle":"3D CGI animation","themes":["Emotional Intelligence","Friendship","Problem Solving","Social Development","Community"],"friendshipRating":3,"problemSolvingRating":4,"relatableSituationsRating":3,"emotionalIntelligenceRating":3,"creativityRating":3,"educationalValueRating":3,"overallRating":3,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/clifford-the-big-red-dog-(2019).jpg","id":50},{"name":"Cloudbabies","description":"Cloudbabies is a 3D CGI Animation with a soft aesthetic. Color Palette: Pastel colors and gentle hues. show for 2-5 year olds. It features Environmental Awareness, Social-Emotional, Responsibility, Teamwork, Social Development, Routine, Bedtime Routines, Natural World, Natural Science, Relaxation, Nature, sing-a-long themes.","ageRange":"2-5","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":2,"interactivityLevel":"Moderate","dialogueIntensity":"Moderate","soundEffectsLevel":"Low-Moderate","musicTempo":"Moderate","totalMusicLevel":"Moderate-High","totalSoundEffectTimeLevel":"Low-Moderate","sceneFrequency":"Low-Moderate","animationStyle":"3D CGI Animation with a soft aesthetic. Color Palette: Pastel colors and gentle hues.","themes":["Environmental Awareness","Social-Emotional","Responsibility","Teamwork","Social Development","Routine","Bedtime Routines","Natural World","Natural Science","Relaxation","Nature","sing-a-long"],"friendshipRating":3,"problemSolvingRating":3,"relatableSituationsRating":4,"emotionalIntelligenceRating":3,"creativityRating":2,"educationalValueRating":2,"overallRating":4,"availableOn":["YouTube"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/cloudbabies.jpg","id":51},{"name":"CoasterFan2105","description":"CoasterFan2105 is a High-Definition Live-Action Footage show for 2+ year olds. It features Engineering Concepts, Cultural Appreciation, Locomotive History, History, Hobbies, Entertainment, Travel Geography, Curiosity, Machinery, Trains themes.","ageRange":"2+","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"Low-Moderate","dialogueIntensity":"Low","soundEffectsLevel":"High","musicTempo":"Low-Moderate","totalMusicLevel":"Low","totalSoundEffectTimeLevel":"High","sceneFrequency":"Moderate","animationStyle":"High-Definition Live-Action Footage","themes":["Engineering Concepts","Cultural Appreciation","Locomotive History","History","Hobbies","Entertainment","Travel Geography","Curiosity","Machinery","Trains"],"friendshipRating":2,"problemSolvingRating":2,"relatableSituationsRating":3,"emotionalIntelligenceRating":1,"creativityRating":1,"educationalValueRating":1,"overallRating":3,"availableOn":["YouTube"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/coasterfan2105.jpg","id":52},{"name":"Cocomelon","description":"Cocomelon is a 3D CGI Animation with extremely bright and vivid colors. show for 1-4 year olds. It features Preschool-Basics, Numeracy, Literacy, Shapes, Routine, Social-Emotional, Cognitive Development, Language Learning, sing-a-long themes.","ageRange":"1-4","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":5,"interactivityLevel":"High","dialogueIntensity":"Low","soundEffectsLevel":"High","musicTempo":"Moderate-High","totalMusicLevel":"Very High","totalSoundEffectTimeLevel":"High","sceneFrequency":"High","animationStyle":"3D CGI Animation with extremely bright and vivid colors.","themes":["Preschool-Basics","Numeracy","Literacy","Shapes","Routine","Social-Emotional","Cognitive Development","Language Learning","sing-a-long"],"friendshipRating":3,"problemSolvingRating":2,"relatableSituationsRating":4,"emotionalIntelligenceRating":2,"creativityRating":1,"educationalValueRating":4,"overallRating":1,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/cocomelon.jpg","id":53},{"name":"Codename: Kids Next Door","description":"Codename: Kids Next Door is a 2D Digital Animation with stylized character designs. Color Palette: Bright and varied colors with bold outlines. show for 7-12 year olds. It features Creativity & Imagination, Teamwork, Problem Solving, Courage, Mischievous Behaviour, Mild Fantasy Violence themes.","ageRange":"7-12","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":4,"interactivityLevel":"Low-Moderate","dialogueIntensity":"High","soundEffectsLevel":"High","musicTempo":"Moderate-High","totalMusicLevel":"High","totalSoundEffectTimeLevel":"High","sceneFrequency":"High","animationStyle":"2D Digital Animation with stylized character designs. Color Palette: Bright and varied colors with bold outlines.","themes":["Creativity & Imagination","Teamwork","Problem Solving","Courage","Mischievous Behaviour","Mild Fantasy Violence"],"friendshipRating":2,"problemSolvingRating":3,"relatableSituationsRating":1,"emotionalIntelligenceRating":1,"creativityRating":3,"educationalValueRating":3,"overallRating":2,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/codename-kids-next-door.jpg","id":54},{"name":"Colourblocks","description":"Colourblocks is a 2D Digital Animation using Colorforms-inspired designs. Color Palette: Bright and bold primary colors with simple shapes. show for 3-6 year olds. It features Preschool-Basics, Creativity & Imagination, Colours, Shapes, Art, Motor Skills, Colour Combinations themes.","ageRange":"3-6","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"High","dialogueIntensity":"Moderate-High","soundEffectsLevel":"Moderate","musicTempo":"Moderate-High","totalMusicLevel":"High","totalSoundEffectTimeLevel":"Moderate","sceneFrequency":"Moderate-High","animationStyle":"2D Digital Animation using Colorforms-inspired designs. Color Palette: Bright and bold primary colors with simple shapes.","themes":["Preschool-Basics","Creativity & Imagination","Colours","Shapes","Art","Motor Skills","Colour Combinations"],"friendshipRating":2,"problemSolvingRating":3,"relatableSituationsRating":3,"emotionalIntelligenceRating":3,"creativityRating":4,"educationalValueRating":4,"overallRating":3,"availableOn":["YouTube"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/colourblocks.jpg","id":55},{"name":"Cosmic kids yoga","description":"Cosmic kids yoga is a Live-Action with Colorful Green Screen Animations show for 3-8 year olds. It features Life Lessons, Positive Engaging Screen-Time, Mindfulness, Exercise, Yoga, Emotional Intelligence, Routine, Sensory Exploration, Relaxation, sing-a-long, Positive Mindset themes.","ageRange":"3-8","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"High","dialogueIntensity":"High","soundEffectsLevel":"Moderate","musicTempo":"Moderate","totalMusicLevel":"Moderate-High","totalSoundEffectTimeLevel":"Moderate","sceneFrequency":"Moderate","animationStyle":"Live-Action with Colorful Green Screen Animations","themes":["Life Lessons","Positive Engaging Screen-Time","Mindfulness","Exercise","Yoga","Emotional Intelligence","Routine","Sensory Exploration","Relaxation","sing-a-long","Positive Mindset"],"friendshipRating":3,"problemSolvingRating":3,"relatableSituationsRating":3,"emotionalIntelligenceRating":3,"creativityRating":2,"educationalValueRating":3,"overallRating":3,"availableOn":["YouTube"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/cosmic-kids-yoga.jpg","id":56},{"name":"Courage the Cowardly Dog (1999-2002)","description":"Courage the Cowardly Dog (1999-2002) is a Traditional 2D Animation with surreal and sometimes dark visuals. Color Palette: Varied colors with contrasting dark and bright tones. show for 10-14 year olds. It features Creativity & Imagination, Overcoming Fears, Problem Solving, Entertainment, Humor, Courage, Perseverance, Dark Themes, Surreal Imagery, Mild Intense Scenes themes.","ageRange":"10-14","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":5,"interactivityLevel":"Low-Moderate","dialogueIntensity":"Moderate","soundEffectsLevel":"High","musicTempo":"Varies","totalMusicLevel":"High","totalSoundEffectTimeLevel":"High","sceneFrequency":"High","animationStyle":"Traditional 2D Animation with surreal and sometimes dark visuals. Color Palette: Varied colors with contrasting dark and bright tones.","themes":["Creativity & Imagination","Overcoming Fears","Problem Solving","Entertainment","Humor","Courage","Perseverance","Dark Themes","Surreal Imagery","Mild Intense Scenes"],"friendshipRating":3,"problemSolvingRating":3,"relatableSituationsRating":2,"emotionalIntelligenceRating":3,"creativityRating":3,"educationalValueRating":1,"overallRating":1,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/courage-the-cowardly-dog-(1999-2002).jpg","id":57},{"name":"Cowboy Jack","description":"Cowboy Jack is a Live-Action with Real-World Exploration show for 3-8 year olds. It features Cultures & Traditions, Cultural & Social, Positive Role Models, Life Lessons, Exploration, Relatable Situations, Vocabulary, Social Development, Social-Emotional, Curiosity, History, Adventure, Discovery, Travel Geography themes.","ageRange":"3-8","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":4,"interactivityLevel":"High","dialogueIntensity":"High","soundEffectsLevel":"Moderate-High","musicTempo":"Moderate-High","totalMusicLevel":"High","totalSoundEffectTimeLevel":"Moderate-High","sceneFrequency":"High","animationStyle":"Live-Action with Real-World Exploration","themes":["Cultures & Traditions","Cultural & Social","Positive Role Models","Life Lessons","Exploration","Relatable Situations","Vocabulary","Social Development","Social-Emotional","Curiosity","History","Adventure","Discovery","Travel Geography"],"friendshipRating":2,"problemSolvingRating":3,"relatableSituationsRating":3,"emotionalIntelligenceRating":3,"creativityRating":3,"educationalValueRating":1,"overallRating":2,"availableOn":["YouTube"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/cowboy-jack.jpg","id":58},{"name":"Curious George (2006-present)","description":"Curious George (2006-present) is a Digital hand-drawn 2D artwork animation. show for 3-6 year olds. It features STEM, Motor Skills, Discovery, Science, Curiosity, Exploration themes.","ageRange":"3-6","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":2,"interactivityLevel":"Moderate","dialogueIntensity":"Moderate","soundEffectsLevel":"Moderate","musicTempo":"Moderate","totalMusicLevel":"Moderate-High","totalSoundEffectTimeLevel":"Moderate-High","sceneFrequency":"Moderate","animationStyle":"Digital hand-drawn 2D artwork animation.","themes":["STEM","Motor Skills","Discovery","Science","Curiosity","Exploration"],"friendshipRating":3,"problemSolvingRating":3,"relatableSituationsRating":2,"emotionalIntelligenceRating":1,"creativityRating":3,"educationalValueRating":4,"overallRating":4,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/curious-george-(2006-present).jpg","id":59},{"name":"Cyberchase (2002-present)","description":"Cyberchase (2002-present) is a traditional 2D hand-drawn animation. Digital in later series. show for 8-12 year olds. It features STEM, Problem Solving, Critical Thinking, Math, Science, Entertainment themes.","ageRange":"8-12","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":4,"interactivityLevel":"High","dialogueIntensity":"Moderate-High","soundEffectsLevel":"High","musicTempo":"Moderate-High","totalMusicLevel":"High","totalSoundEffectTimeLevel":"High","sceneFrequency":"Moderate","animationStyle":"traditional 2D hand-drawn animation. Digital in later series.","themes":["STEM","Problem Solving","Critical Thinking","Math","Science","Entertainment"],"friendshipRating":3,"problemSolvingRating":3,"relatableSituationsRating":3,"emotionalIntelligenceRating":3,"creativityRating":2,"educationalValueRating":4,"overallRating":2,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/cyberchase-2002-present).jpg","id":60},{"name":"Daniel Tiger's Neighbourhood","description":"Daniel Tiger's Neighbourhood is a Digital 2D animation show for 2-5 year olds. It features Communication & Expression, Life Lessons, Social-Emotional, Emotional Intelligence, Problem Solving, Social Development, Relatable Situations, Friendship, Family Relationships themes.","ageRange":"2-5","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":2,"interactivityLevel":"High","dialogueIntensity":"Moderate","soundEffectsLevel":"Low","musicTempo":"Low-Moderate","totalMusicLevel":"High","totalSoundEffectTimeLevel":"Low","sceneFrequency":"Low-Moderate","animationStyle":"Digital 2D animation","themes":["Communication & Expression","Life Lessons","Social-Emotional","Emotional Intelligence","Problem Solving","Social Development","Relatable Situations","Friendship","Family Relationships"],"friendshipRating":3,"problemSolvingRating":4,"relatableSituationsRating":4,"emotionalIntelligenceRating":3,"creativityRating":3,"educationalValueRating":2,"overallRating":4,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/daniel-tigers-neighbourhood.jpg","id":61},{"name":"Danny Go!","description":"Danny Go! is a Live-Action with Bright Colors and Interactive Elements show for 3-7 year olds. It features Physical Fitness, Cultural Appreciation, Creativity & Imagination, Preschool-Basics, sing-a-long, Phonics, Entertainment, Interactive Game Elements, Dance, Repetitive Learning, Music, Exercise themes.","ageRange":"3-7","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":5,"interactivityLevel":"High","dialogueIntensity":"High","soundEffectsLevel":"High","musicTempo":"High","totalMusicLevel":"High","totalSoundEffectTimeLevel":"High","sceneFrequency":"High","animationStyle":"Live-Action with Bright Colors and Interactive Elements","themes":["Physical Fitness","Cultural Appreciation","Creativity & Imagination","Preschool-Basics","sing-a-long","Phonics","Entertainment","Interactive Game Elements","Dance","Repetitive Learning","Music","Exercise"],"friendshipRating":3,"problemSolvingRating":2,"relatableSituationsRating":3,"emotionalIntelligenceRating":3,"creativityRating":4,"educationalValueRating":3,"overallRating":1,"availableOn":["YouTube"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/danny-go!.jpg","id":62},{"name":"Davey and Goliath","description":"Davey and Goliath is a Stop-Motion Animation using clay figures show for 4-8 year olds. It features Cause and Effect, Life Lessons, Morality, Family Values, Religion, Responsibility, Emotional Intelligence themes.","ageRange":"4-8","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":2,"interactivityLevel":"Moderate","dialogueIntensity":"Moderate","soundEffectsLevel":"Low","musicTempo":"Low-Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Low","sceneFrequency":"Moderate","animationStyle":"Stop-Motion Animation using clay figures","themes":["Cause and Effect","Life Lessons","Morality","Family Values","Religion","Responsibility","Emotional Intelligence"],"friendshipRating":3,"problemSolvingRating":2,"relatableSituationsRating":3,"emotionalIntelligenceRating":3,"creativityRating":1,"educationalValueRating":3,"overallRating":4,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/davey-and-goliath.jpg","id":63},{"name":"De Zoete Zusjes","description":"De Zoete Zusjes is a Live-Action with Puppetry and Props show for 4-10 year olds. It features Creativity & Imagination, Family Values, Family Relationships, Relatable Situations, Problem Solving, Vocabulary, Dutch Language themes.","ageRange":"4-10","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"Moderate","dialogueIntensity":"Moderate-High","soundEffectsLevel":"Moderate","musicTempo":"Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Moderate","sceneFrequency":"Moderate-High","animationStyle":"Live-Action with Puppetry and Props","themes":["Creativity & Imagination","Family Values","Family Relationships","Relatable Situations","Problem Solving","Vocabulary","Dutch Language"],"friendshipRating":3,"problemSolvingRating":4,"relatableSituationsRating":4,"emotionalIntelligenceRating":1,"creativityRating":3,"educationalValueRating":3,"overallRating":3,"availableOn":["YouTube"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/de-zoete-zusjes.jpg","id":64},{"name":"DG Bible Songs","description":"DG Bible Songs is a high-quality animation and music show for 3-8 year olds. It features Religious Teachings, Cultural Appreciation, Cultures & Traditions, Spiritual Development, Biblical Stories, Religion, sing-a-long, Family Values, Music, Christian Values, Faith, Social-Emotional themes.","ageRange":"3-8","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"Moderate","dialogueIntensity":"Moderate","soundEffectsLevel":"Moderate","musicTempo":"Moderate","totalMusicLevel":"Very High","totalSoundEffectTimeLevel":"Moderate","sceneFrequency":"Moderate","animationStyle":"high-quality animation and music","themes":["Religious Teachings","Cultural Appreciation","Cultures & Traditions","Spiritual Development","Biblical Stories","Religion","sing-a-long","Family Values","Music","Christian Values","Faith","Social-Emotional"],"friendshipRating":2,"problemSolvingRating":2,"relatableSituationsRating":3,"emotionalIntelligenceRating":1,"creativityRating":2,"educationalValueRating":3,"overallRating":3,"availableOn":["YouTube"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/dg-bible-songs.jpg","id":65},{"name":"Diego","description":"Diego is a 2D digital animation with a hand-drawn look. Bright and cheerful colors with simple backgrounds show for 3-6 year olds. It features Cultural & Social, Environmental Awareness, Animal Behaviour, Wildlife Conservation, Language Learning, Problem Solving, Natural World themes.","ageRange":"3-6","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":4,"interactivityLevel":"High","dialogueIntensity":"High","soundEffectsLevel":"High","musicTempo":"Moderate-High","totalMusicLevel":"Moderate-High","totalSoundEffectTimeLevel":"High","sceneFrequency":"High","animationStyle":"2D digital animation with a hand-drawn look. Bright and cheerful colors with simple backgrounds","themes":["Cultural & Social","Environmental Awareness","Animal Behaviour","Wildlife Conservation","Language Learning","Problem Solving","Natural World"],"friendshipRating":2,"problemSolvingRating":3,"relatableSituationsRating":3,"emotionalIntelligenceRating":3,"creativityRating":3,"educationalValueRating":3,"overallRating":2,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/diego.jpg","id":66},{"name":"Digimon: Digital Monsters","description":"Digimon: Digital Monsters is a Traditional 2D Anime-style Animation. show for 8-14 year olds. It features Teamwork, Friendship, Perseverance, Entertainment, Adventure, Fantasy Elements, Mild Fantasy Violence themes.","ageRange":"8-14","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":5,"interactivityLevel":"Low","dialogueIntensity":"High","soundEffectsLevel":"High","musicTempo":"Moderate-High","totalMusicLevel":"High","totalSoundEffectTimeLevel":"High","sceneFrequency":"High","animationStyle":"Traditional 2D Anime-style Animation.","themes":["Teamwork","Friendship","Perseverance","Entertainment","Adventure","Fantasy Elements","Mild Fantasy Violence"],"friendshipRating":3,"problemSolvingRating":1,"relatableSituationsRating":1,"emotionalIntelligenceRating":3,"creativityRating":1,"educationalValueRating":1,"overallRating":1,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/digimon-digital-monsters.jpg","id":67},{"name":"Dino Dana","description":"Dino Dana is a Live-Action with CGI Dinosaurs. Color Palette: Natural colors with realistic environments. show for 5-9 year olds. It features Creativity & Imagination, Paleontology, Science, Curiosity, Problem Solving, Critical Thinking, Natural History, Ecosystems themes.","ageRange":"5-9","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"High","dialogueIntensity":"Moderate","soundEffectsLevel":"Moderate","musicTempo":"Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Moderate","sceneFrequency":"Moderate","animationStyle":"Live-Action with CGI Dinosaurs. Color Palette: Natural colors with realistic environments.","themes":["Creativity & Imagination","Paleontology","Science","Curiosity","Problem Solving","Critical Thinking","Natural History","Ecosystems"],"friendshipRating":3,"problemSolvingRating":4,"relatableSituationsRating":3,"emotionalIntelligenceRating":2,"creativityRating":4,"educationalValueRating":4,"overallRating":3,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/dino-dana.jpg","id":68},{"name":"Dino Ranch","description":"Dino Ranch is a 3D CGI animation show for 3-6 year olds. It features Teamwork, Responsibility, Problem Solving, Adventure, Dinosaurs themes.","ageRange":"3-6","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"Moderate","dialogueIntensity":"Moderate","soundEffectsLevel":"Moderate","musicTempo":"Moderate-High","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Moderate-High","sceneFrequency":"Moderate","animationStyle":"3D CGI animation","themes":["Teamwork","Responsibility","Problem Solving","Adventure","Dinosaurs"],"friendshipRating":3,"problemSolvingRating":4,"relatableSituationsRating":2,"emotionalIntelligenceRating":1,"creativityRating":3,"educationalValueRating":3,"overallRating":3,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/dino-ranch.jpg","id":69},{"name":"Dinosaur train","description":"Dinosaur train is a 3D CGI animation show for 3-6 year olds. It features STEM, Friendship, Paleontology, Natural History, Dinosaurs, Natural World, Exploration, Science themes.","ageRange":"3-6","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":5,"interactivityLevel":"Moderate","dialogueIntensity":"High","soundEffectsLevel":"High","musicTempo":"Moderate-High","totalMusicLevel":"High","totalSoundEffectTimeLevel":"High","sceneFrequency":"Moderate-High","animationStyle":"3D CGI animation","themes":["STEM","Friendship","Paleontology","Natural History","Dinosaurs","Natural World","Exploration","Science"],"friendshipRating":3,"problemSolvingRating":2,"relatableSituationsRating":2,"emotionalIntelligenceRating":2,"creativityRating":1,"educationalValueRating":3,"overallRating":1,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/dinosaur-train.jpg","id":70},{"name":"Dinotrux","description":"Dinotrux is a 3D CGI Animation with detailed characters and environments. Color Palette: Bright and vivid colors with metallic textures. show for 4-8 year olds. It features Creativity & Imagination, Teamwork, Entertainment, Problem Solving, Engineering Concepts, Dinosaurs, Perseverance themes.","ageRange":"4-8","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":4,"interactivityLevel":"Moderate","dialogueIntensity":"Moderate","soundEffectsLevel":"High","musicTempo":"Moderate-High","totalMusicLevel":"High","totalSoundEffectTimeLevel":"High","sceneFrequency":"High","animationStyle":"3D CGI Animation with detailed characters and environments. Color Palette: Bright and vivid colors with metallic textures.","themes":["Creativity & Imagination","Teamwork","Entertainment","Problem Solving","Engineering Concepts","Dinosaurs","Perseverance"],"friendshipRating":2,"problemSolvingRating":3,"relatableSituationsRating":3,"emotionalIntelligenceRating":1,"creativityRating":3,"educationalValueRating":1,"overallRating":2,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/dinotrux.jpg","id":71},{"name":"Doc McStuffins","description":"Doc McStuffins is a 3D CGI Animation with soft, rounded designs. Color Palette: Bright and cheerful colors. show for 3-6 year olds. It features Health & Well-being, Social-Emotional, Problem Solving, Emotional Intelligence, Medical Care, Curiosity themes.","ageRange":"3-6","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"High","dialogueIntensity":"Moderate-High","soundEffectsLevel":"Moderate","musicTempo":"Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Moderate","sceneFrequency":"Moderate","animationStyle":"3D CGI Animation with soft, rounded designs. Color Palette: Bright and cheerful colors.","themes":["Health & Well-being","Social-Emotional","Problem Solving","Emotional Intelligence","Medical Care","Curiosity"],"friendshipRating":3,"problemSolvingRating":3,"relatableSituationsRating":4,"emotionalIntelligenceRating":3,"creativityRating":3,"educationalValueRating":2,"overallRating":3,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/doc-mcstuffins.jpg","id":72},{"name":"Doggyland","description":"Doggyland is a 3D Animation with Bright Colors and Anthropomorphic Dogs show for 2-6 year olds. It features Preschool-Basics, Learning through Songs, Dance, sing-a-long, Cognitive Development, Literacy, Numeracy, Colours, Shapes, Animals, Social-Emotional, Repetitive Learning, Music themes.","ageRange":"2-6","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":4,"interactivityLevel":"High","dialogueIntensity":"High","soundEffectsLevel":"High","musicTempo":"High","totalMusicLevel":"Very High","totalSoundEffectTimeLevel":"High","sceneFrequency":"High","animationStyle":"3D Animation with Bright Colors and Anthropomorphic Dogs","themes":["Preschool-Basics","Learning through Songs","Dance","sing-a-long","Cognitive Development","Literacy","Numeracy","Colours","Shapes","Animals","Social-Emotional","Repetitive Learning","Music"],"friendshipRating":1,"problemSolvingRating":1,"relatableSituationsRating":4,"emotionalIntelligenceRating":3,"creativityRating":1,"educationalValueRating":4,"overallRating":2,"availableOn":["YouTube"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/doggyland.jpg","id":73},{"name":"Dora the Explorer (2000-2014)","description":"Dora the Explorer (2000-2014) is a Digital 2D animation show for 2-6 year olds. It features Elementary-Basics, Language Learning, Problem Solving, Geography, Teamwork, Cognitive Development, Adventure themes.","ageRange":"2-6","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":5,"interactivityLevel":"High","dialogueIntensity":"High","soundEffectsLevel":"High","musicTempo":"High","totalMusicLevel":"High","totalSoundEffectTimeLevel":"High","sceneFrequency":"High","animationStyle":"Digital 2D animation","themes":["Elementary-Basics","Language Learning","Problem Solving","Geography","Teamwork","Cognitive Development","Adventure"],"friendshipRating":1,"problemSolvingRating":3,"relatableSituationsRating":3,"emotionalIntelligenceRating":3,"creativityRating":3,"educationalValueRating":3,"overallRating":1,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/dora-the-explorer-(2000-2014).jpg","id":74},{"name":"Dragon Ball","description":"Dragon Ball is a 2D Hand-drawn animation (Anime style). show for 10-16 year olds. It features Superhero Themes, Positive Role Models, Entertainment, Adventure, Martial Arts, Fantasy Elements, Morality, Mild Violent themes, Mild Fantasy Violence, Mild Peril themes.","ageRange":"10-16","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":5,"interactivityLevel":"Low","dialogueIntensity":"High","soundEffectsLevel":"Very High","musicTempo":"Moderate-High","totalMusicLevel":"High","totalSoundEffectTimeLevel":"High","sceneFrequency":"High","animationStyle":"2D Hand-drawn animation (Anime style).","themes":["Superhero Themes","Positive Role Models","Entertainment","Adventure","Martial Arts","Fantasy Elements","Morality","Mild Violent themes","Mild Fantasy Violence","Mild Peril"],"friendshipRating":2,"problemSolvingRating":1,"relatableSituationsRating":3,"emotionalIntelligenceRating":2,"creativityRating":4,"educationalValueRating":3,"overallRating":1,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/dragon-ball.jpg","id":75},{"name":"Dragon Tales","description":"Dragon Tales is a Traditional 2D Animation with soft designs. Color Palette: Pastel colors with whimsical settings. show for 3-7 year olds. It features Creativity & Imagination, Emotional Intelligence, Teamwork, Social Development, Social-Emotional, Problem Solving, Perseverance themes.","ageRange":"3-7","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":2,"interactivityLevel":"Low-Moderate","dialogueIntensity":"Moderate","soundEffectsLevel":"Low-Moderate","musicTempo":"Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Low","sceneFrequency":"Moderate","animationStyle":"Traditional 2D Animation with soft designs. Color Palette: Pastel colors with whimsical settings.","themes":["Creativity & Imagination","Emotional Intelligence","Teamwork","Social Development","Social-Emotional","Problem Solving","Perseverance"],"friendshipRating":1,"problemSolvingRating":3,"relatableSituationsRating":4,"emotionalIntelligenceRating":3,"creativityRating":3,"educationalValueRating":1,"overallRating":4,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/dragon-tales.jpg","id":76},{"name":"Duck & Goose","description":"Duck & Goose is a 2D Digital Animation with a watercolor aesthetic. Color Palette: Soft and natural colors with pastel hues. show for 2-5 year olds. It features Problem Solving, Friendship, Social-Emotional, Teamwork, Emotional Intelligence, Social Development themes.","ageRange":"2-5","episodeLength":5,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":2,"interactivityLevel":"Moderate","dialogueIntensity":"Moderate","soundEffectsLevel":"Low-Moderate","musicTempo":"Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Low-Moderate","sceneFrequency":"Low-Moderate","animationStyle":"2D Digital Animation with a watercolor aesthetic. Color Palette: Soft and natural colors with pastel hues.","themes":["Problem Solving","Friendship","Social-Emotional","Teamwork","Emotional Intelligence","Social Development"],"friendshipRating":3,"problemSolvingRating":3,"relatableSituationsRating":4,"emotionalIntelligenceRating":3,"creativityRating":2,"educationalValueRating":3,"overallRating":4,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/duck-and-goose.jpg","id":77},{"name":"Ed Edd n Eddy","description":"Ed Edd n Eddy is a Traditional 2D Animation with exaggerated designs. Color Palette: Bright colors with bold outlines. show for 8-12 year olds. It features Cause and Effect, Creativity & Imagination, Friendship, Problem Solving, Humor, Mischievous Behaviour themes.","ageRange":"8-12","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":5,"interactivityLevel":"Low","dialogueIntensity":"High","soundEffectsLevel":"High","musicTempo":"Moderate-High","totalMusicLevel":"High","totalSoundEffectTimeLevel":"High","sceneFrequency":"High","animationStyle":"Traditional 2D Animation with exaggerated designs. Color Palette: Bright colors with bold outlines.","themes":["Cause and Effect","Creativity & Imagination","Friendship","Problem Solving","Humor","Mischievous Behaviour"],"friendshipRating":3,"problemSolvingRating":4,"relatableSituationsRating":1,"emotionalIntelligenceRating":3,"creativityRating":3,"educationalValueRating":2,"overallRating":1,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/ed-edd-n-eddy.jpg","id":78},{"name":"Elena of Avalor","description":"Elena of Avalor is a 3D CGI Animation with detailed designs. Color Palette: Bright and vibrant colors with cultural motifs. show for 5-9 year olds. It features Cultural Appreciation, Cultures & Traditions, Positive Role Models, Leadership, Responsibility, Emotional Intelligence, Morality themes.","ageRange":"5-9","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":4,"interactivityLevel":"Moderate","dialogueIntensity":"High","soundEffectsLevel":"High","musicTempo":"Moderate-High","totalMusicLevel":"High","totalSoundEffectTimeLevel":"High","sceneFrequency":"High","animationStyle":"3D CGI Animation with detailed designs. Color Palette: Bright and vibrant colors with cultural motifs.","themes":["Cultural Appreciation","Cultures & Traditions","Positive Role Models","Leadership","Responsibility","Emotional Intelligence","Morality"],"friendshipRating":3,"problemSolvingRating":2,"relatableSituationsRating":2,"emotionalIntelligenceRating":4,"creativityRating":2,"educationalValueRating":2,"overallRating":2,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/elena-of-avalor.jpg","id":79},{"name":"Elmo's World","description":"Elmo's World is a Combination of Live-Action and 2D Animation. Color Palette: Bright and primary colors. show for 1-4 year olds. It features Preschool-Basics, Motor Skills, sing-a-long, Dance, Social-Emotional, Numeracy, Literacy, Colours, Shapes themes.","ageRange":"1-4","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":2,"interactivityLevel":"High","dialogueIntensity":"Moderate","soundEffectsLevel":"Moderate","musicTempo":"Moderate-High","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Low-Moderate","sceneFrequency":"Low-Moderate","animationStyle":"Combination of Live-Action and 2D Animation. Color Palette: Bright and primary colors.","themes":["Preschool-Basics","Motor Skills","sing-a-long","Dance","Social-Emotional","Numeracy","Literacy","Colours","Shapes"],"friendshipRating":1,"problemSolvingRating":3,"relatableSituationsRating":3,"emotionalIntelligenceRating":3,"creativityRating":2,"educationalValueRating":3,"overallRating":4,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/elmos-world.jpg","id":80},{"name":"English Tree","description":"English Tree is a 2D and 3D Animation with Bright Colors and Simple Characters show for 2-6 year olds. It features Learning through Songs, Repetitive Learning, Literacy, Phonics, Vocabulary, Music, Numeracy, Colours, Shapes, Cognitive Development, Language Learning, sing-a-long themes.","ageRange":"2-6","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"High","dialogueIntensity":"Moderate-High","soundEffectsLevel":"Moderate","musicTempo":"Moderate","totalMusicLevel":"High","totalSoundEffectTimeLevel":"Moderate","sceneFrequency":"Moderate","animationStyle":"2D and 3D Animation with Bright Colors and Simple Characters","themes":["Learning through Songs","Repetitive Learning","Literacy","Phonics","Vocabulary","Music","Numeracy","Colours","Shapes","Cognitive Development","Language Learning","sing-a-long"],"friendshipRating":2,"problemSolvingRating":3,"relatableSituationsRating":1,"emotionalIntelligenceRating":1,"creativityRating":3,"educationalValueRating":4,"overallRating":3,"availableOn":["YouTube"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/english-tree.jpg","id":81},{"name":"Ernst, Bobbie en de rest","description":"Ernst, Bobbie en de rest is a Dutch children's show, Live-Action with comedic elements. show for 4-8 year olds. It features Problem Solving, Teamwork, Humor, Social Development, Perseverance themes.","ageRange":"4-8","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"Moderate","dialogueIntensity":"High","soundEffectsLevel":"Moderate","musicTempo":"Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Moderate","sceneFrequency":"Moderate","animationStyle":"Dutch children's show, Live-Action with comedic elements.","themes":["Problem Solving","Teamwork","Humor","Social Development","Perseverance"],"friendshipRating":1,"problemSolvingRating":3,"relatableSituationsRating":4,"emotionalIntelligenceRating":2,"creativityRating":3,"educationalValueRating":2,"overallRating":3,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/ernst-bobbie-en-de-rest.jpg","id":82},{"name":"Fireman Sam (1987)","description":"Fireman Sam (1987) is a Traditional Stop-Motion animation show for 4-8 year olds. It features Positive Role Models, Community Service, Safety, Teamwork, Problem Solving, Responsibility themes.","ageRange":"4-8","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":2,"interactivityLevel":"Low-Moderate","dialogueIntensity":"Moderate","soundEffectsLevel":"Low-Moderate","musicTempo":"Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Low-Moderate","sceneFrequency":"Low","animationStyle":"Traditional Stop-Motion animation","themes":["Positive Role Models","Community Service","Safety","Teamwork","Problem Solving","Responsibility"],"friendshipRating":1,"problemSolvingRating":4,"relatableSituationsRating":2,"emotionalIntelligenceRating":3,"creativityRating":2,"educationalValueRating":1,"overallRating":4,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/fireman-sam-(1987).jpg","id":83},{"name":"Fireman Sam (2008)","description":"Fireman Sam (2008) is a 3D CGI animation show for 3-6 year olds. It features Positive Role Models, Community Service, Safety, Teamwork, Problem Solving, Responsibility themes.","ageRange":"3-6","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":4,"interactivityLevel":"Low-Moderate","dialogueIntensity":"Moderate","soundEffectsLevel":"Moderate-High","musicTempo":"Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Moderate","sceneFrequency":"Moderate-High","animationStyle":"3D CGI animation","themes":["Positive Role Models","Community Service","Safety","Teamwork","Problem Solving","Responsibility"],"friendshipRating":3,"problemSolvingRating":3,"relatableSituationsRating":2,"emotionalIntelligenceRating":1,"creativityRating":1,"educationalValueRating":1,"overallRating":2,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/fireman-sam-(2008).jpg","id":84},{"name":"Franklin (1997-2004)","description":"Franklin (1997-2004) is a Traditional Hand-drawn 2D animation show for 4-8 year olds. It features Social-Emotional, Friendship, Problem Solving, Relatable Situations themes.","ageRange":"4-8","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":1,"interactivityLevel":"Low-Moderate","dialogueIntensity":"Moderate","soundEffectsLevel":"Low","musicTempo":"Low","totalMusicLevel":"Low-Moderate","totalSoundEffectTimeLevel":"Low","sceneFrequency":"Low","animationStyle":"Traditional Hand-drawn 2D animation","themes":["Social-Emotional","Friendship","Problem Solving","Relatable Situations"],"friendshipRating":3,"problemSolvingRating":4,"relatableSituationsRating":3,"emotionalIntelligenceRating":2,"creativityRating":1,"educationalValueRating":3,"overallRating":5,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/franklin-(1997-2004).jpg","id":85},{"name":"Franklin and Friends (2011)","description":"Franklin and Friends (2011) is a 3D CGI animation show for 3-6 year olds. It features Social-Emotional, Friendship, Teamwork, Relatable Situations, Problem Solving themes.","ageRange":"3-6","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"Low-Moderate","dialogueIntensity":"Moderate","soundEffectsLevel":"Low-Moderate","musicTempo":"Low-Moderate","totalMusicLevel":"Low-Moderate","totalSoundEffectTimeLevel":"Low","sceneFrequency":"Low-Moderate","animationStyle":"3D CGI animation","themes":["Social-Emotional","Friendship","Teamwork","Relatable Situations","Problem Solving"],"friendshipRating":4,"problemSolvingRating":4,"relatableSituationsRating":3,"emotionalIntelligenceRating":3,"creativityRating":2,"educationalValueRating":3,"overallRating":3,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/franklin-and-friends-(2011).jpg","id":86},{"name":"Frog and Toad","description":"Frog and Toad is a 2D Digital Animation with a hand-drawn aesthetic. show for 3-7 year olds. It features Friendship, Problem Solving, Emotional Intelligence, Nature, Relatable Situations, Patience themes.","ageRange":"3-7","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":1,"interactivityLevel":"Moderate","dialogueIntensity":"Moderate","soundEffectsLevel":"Low","musicTempo":"Low-Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Low","sceneFrequency":"Low","animationStyle":"2D Digital Animation with a hand-drawn aesthetic.","themes":["Friendship","Problem Solving","Emotional Intelligence","Nature","Relatable Situations","Patience"],"friendshipRating":4,"problemSolvingRating":3,"relatableSituationsRating":3,"emotionalIntelligenceRating":4,"creativityRating":2,"educationalValueRating":1,"overallRating":5,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/frog-and-toad.jpg","id":87},{"name":"Gabby's Dollhouse","description":"Gabby's Dollhouse is a Live-action and 3D CGI animation show for 3-7 year olds. It features Creativity & Imagination, Problem Solving, Emotional Intelligence themes.","ageRange":"3-7","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":4,"interactivityLevel":"Moderate","dialogueIntensity":"Moderate","soundEffectsLevel":"High","musicTempo":"Moderate-High","totalMusicLevel":"High","totalSoundEffectTimeLevel":"Moderate-High","sceneFrequency":"High","animationStyle":"Live-action and 3D CGI animation","themes":["Creativity & Imagination","Problem Solving","Emotional Intelligence"],"friendshipRating":3,"problemSolvingRating":3,"relatableSituationsRating":3,"emotionalIntelligenceRating":4,"creativityRating":3,"educationalValueRating":2,"overallRating":2,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/gabbys-dollhouse.jpg","id":88},{"name":"Gecko’s Garage","description":"Gecko’s Garage is a 3D CGI Animation with bright and vibrant colors. Color Palette: Bright and cheerful colors with high saturation. show for 2-5 year olds. It features Vehicle Themes, Engineering Concepts, Mechanics, Teamwork, Shapes, Colours themes.","ageRange":"2-5","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"Moderate","dialogueIntensity":"Moderate-High","soundEffectsLevel":"High","musicTempo":"Moderate","totalMusicLevel":"Moderate-High","totalSoundEffectTimeLevel":"High","sceneFrequency":"Moderate","animationStyle":"3D CGI Animation with bright and vibrant colors. Color Palette: Bright and cheerful colors with high saturation.","themes":["Vehicle Themes","Engineering Concepts","Mechanics","Teamwork","Shapes","Colours"],"friendshipRating":2,"problemSolvingRating":3,"relatableSituationsRating":3,"emotionalIntelligenceRating":1,"creativityRating":2,"educationalValueRating":3,"overallRating":3,"availableOn":["YouTube"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/geckos-garage.jpg","id":89},{"name":"Genevieve playhouse","description":"Genevieve playhouse is a Live-Action Toy Demonstrations with Bright Colors show for 2-5 year olds. It features Teaching with Toys, Preschool-Basics, Colours, Numeracy, Literacy, Multilingual Learning, Entertainment, Humor, Vocabulary themes.","ageRange":"2-5","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"High","dialogueIntensity":"Moderate","soundEffectsLevel":"Moderate-High","musicTempo":"Moderate","totalMusicLevel":"High","totalSoundEffectTimeLevel":"High","sceneFrequency":"Moderate-High","animationStyle":"Live-Action Toy Demonstrations with Bright Colors","themes":["Teaching with Toys","Preschool-Basics","Colours","Numeracy","Literacy","Multilingual Learning","Entertainment","Humor","Vocabulary"],"friendshipRating":2,"problemSolvingRating":3,"relatableSituationsRating":3,"emotionalIntelligenceRating":2,"creativityRating":3,"educationalValueRating":3,"overallRating":3,"availableOn":["YouTube"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/genevieve-playhouse.jpg","id":90},{"name":"Get Rolling with Otis","description":"Get Rolling with Otis is a 3D CGI Animation with bright and vibrant colors. Color Palette: Bright and cheerful colors with high saturation. show for 3-6 year olds. It features Problem Solving, Teamwork, Emotional Intelligence, Perseverance, Social Development themes.","ageRange":"3-6","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"Moderate","dialogueIntensity":"Moderate","soundEffectsLevel":"Moderate","musicTempo":"Low-Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Low-Moderate","sceneFrequency":"Low-Moderate","animationStyle":"3D CGI Animation with bright and vibrant colors. Color Palette: Bright and cheerful colors with high saturation.","themes":["Problem Solving","Teamwork","Emotional Intelligence","Perseverance","Social Development"],"friendshipRating":3,"problemSolvingRating":3,"relatableSituationsRating":3,"emotionalIntelligenceRating":3,"creativityRating":2,"educationalValueRating":1,"overallRating":3,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/get-rolling-with-otis.jpg","id":91},{"name":"Gigantosaurus","description":"Gigantosaurus is a 3D CGI Animation with detailed and dynamic visuals. show for 3-6 year olds. It features Adventure, Problem Solving, Teamwork, Dinosaurs, Entertainment themes.","ageRange":"3-6","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":4,"interactivityLevel":"Low-Moderate","dialogueIntensity":"Moderate","soundEffectsLevel":"High","musicTempo":"Moderate-High","totalMusicLevel":"High","totalSoundEffectTimeLevel":"High","sceneFrequency":"High","animationStyle":"3D CGI Animation with detailed and dynamic visuals.","themes":["Adventure","Problem Solving","Teamwork","Dinosaurs","Entertainment"],"friendshipRating":1,"problemSolvingRating":4,"relatableSituationsRating":3,"emotionalIntelligenceRating":3,"creativityRating":1,"educationalValueRating":3,"overallRating":2,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/gigantosaurus-may.jpg","id":92},{"name":"GirlsTtoyZZ","description":"GirlsTtoyZZ is a Live-Action with Bright Colors and Simple Settings show for 3-8 year olds. It features Creativity & Imagination, Teaching with Toys, Early Childhood experiences, Sensory Exploration, Entertainment, Toy Review themes.","ageRange":"3-8","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":4,"interactivityLevel":"Low-Moderate","dialogueIntensity":"Moderate-High","soundEffectsLevel":"High","musicTempo":"Moderate-High","totalMusicLevel":"High","totalSoundEffectTimeLevel":"High","sceneFrequency":"High","animationStyle":"Live-Action with Bright Colors and Simple Settings","themes":["Creativity & Imagination","Teaching with Toys","Early Childhood experiences","Sensory Exploration","Entertainment","Toy Review"],"friendshipRating":2,"problemSolvingRating":2,"relatableSituationsRating":1,"emotionalIntelligenceRating":1,"creativityRating":4,"educationalValueRating":3,"overallRating":2,"availableOn":["YouTube"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/girlsttoyzz.jpg","id":93},{"name":"Go Go! Cory Carson","description":"Go Go! Cory Carson is a 3D CGI Animation with stylized and colorful designs. Bright but not overly saturated colors, with a focus on vibrant settings. show for 2-5 year olds. It features Social-Emotional, Friendship, Problem Solving, Relatable Situations, Emotional Intelligence, Vehicle Themes themes.","ageRange":"2-5","episodeLength":5,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"Moderate","dialogueIntensity":"Moderate","soundEffectsLevel":"Moderate","musicTempo":"Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Moderate","sceneFrequency":"Moderate","animationStyle":"3D CGI Animation with stylized and colorful designs. Bright but not overly saturated colors, with a focus on vibrant settings.","themes":["Social-Emotional","Friendship","Problem Solving","Relatable Situations","Emotional Intelligence","Vehicle Themes"],"friendshipRating":4,"problemSolvingRating":3,"relatableSituationsRating":3,"emotionalIntelligenceRating":3,"creativityRating":3,"educationalValueRating":2,"overallRating":3,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/go-go-cory-carson.jpg","id":94},{"name":"Go, Dog. Go!","description":"Go, Dog. Go! is a 3D CGI Animation with stylized character designs based on the original book illustrations. Color Palette: Bright and vivid colors with a focus on primary colors. show for 3-6 year olds. It features Creativity & Imagination, Problem Solving, Friendship, Teamwork, Critical Thinking, Relatable Situations themes.","ageRange":"3-6","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":4,"interactivityLevel":"Moderate","dialogueIntensity":"Moderate","soundEffectsLevel":"Moderate-High","musicTempo":"Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Moderate-High","sceneFrequency":"High","animationStyle":"3D CGI Animation with stylized character designs based on the original book illustrations. Color Palette: Bright and vivid colors with a focus on primary colors.","themes":["Creativity & Imagination","Problem Solving","Friendship","Teamwork","Critical Thinking","Relatable Situations"],"friendshipRating":3,"problemSolvingRating":4,"relatableSituationsRating":4,"emotionalIntelligenceRating":2,"creativityRating":3,"educationalValueRating":3,"overallRating":2,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/go-dog-go!.jpg","id":95},{"name":"Gracie's Corner","description":"Gracie's Corner is a 2D animation with bright, colorful visuals and rhythmic, energetic choreography. show for 3-7 year olds. It features Cultural Appreciation, Cultural & Social, Learning through Songs, Early Childhood experiences, Literacy, Numeracy, Social-Emotional, sing-a-long, Dance, Music, Healthy Eating, Emotional Intelligence themes.","ageRange":"3-7","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":4,"interactivityLevel":"High","dialogueIntensity":"Moderate-High","soundEffectsLevel":"High","musicTempo":"Moderate-High","totalMusicLevel":"High","totalSoundEffectTimeLevel":"High","sceneFrequency":"High","animationStyle":"2D animation with bright, colorful visuals and rhythmic, energetic choreography.","themes":["Cultural Appreciation","Cultural & Social","Learning through Songs","Early Childhood experiences","Literacy","Numeracy","Social-Emotional","sing-a-long","Dance","Music","Healthy Eating","Emotional Intelligence"],"friendshipRating":2,"problemSolvingRating":3,"relatableSituationsRating":3,"emotionalIntelligenceRating":3,"creativityRating":1,"educationalValueRating":3,"overallRating":2,"availableOn":["YouTube"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/gracies-corner.jpg","id":96},{"name":"Grizzy and the Lemmings (2016-present)","description":"Grizzy and the Lemmings (2016-present) is a 3D CGI animation show for 6-10 year olds. It features Communication & Expression, Entertainment, Problem Solving, Humor, Slapstick Comedy, Mild Fantasy Violence themes.","ageRange":"6-10","episodeLength":5,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":5,"interactivityLevel":"Low","dialogueIntensity":"Very Low","soundEffectsLevel":"Very High","musicTempo":"High","totalMusicLevel":"High","totalSoundEffectTimeLevel":"High","sceneFrequency":"High","animationStyle":"3D CGI animation","themes":["Communication & Expression","Entertainment","Problem Solving","Humor","Slapstick Comedy","Mild Fantasy Violence"],"friendshipRating":1,"problemSolvingRating":3,"relatableSituationsRating":1,"emotionalIntelligenceRating":1,"creativityRating":1,"educationalValueRating":2,"overallRating":1,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/grizzy-and-the-lemmings-(2016-present).jpg","id":97},{"name":"Guess How Much I Love You","description":"Guess How Much I Love You is a 2D Digital Animation with a watercolor aesthetic. Color Palette: Soft and natural colors with pastel hues. show for 2-5 year olds. It features Emotional Intelligence, Friendship, Family Values, Social-Emotional themes.","ageRange":"2-5","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":2,"interactivityLevel":"Moderate","dialogueIntensity":"Low-Moderate","soundEffectsLevel":"Low","musicTempo":"Low-Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Low","sceneFrequency":"Moderate","animationStyle":"2D Digital Animation with a watercolor aesthetic. Color Palette: Soft and natural colors with pastel hues.","themes":["Emotional Intelligence","Friendship","Family Values","Social-Emotional"],"friendshipRating":4,"problemSolvingRating":2,"relatableSituationsRating":3,"emotionalIntelligenceRating":4,"creativityRating":3,"educationalValueRating":3,"overallRating":4,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/guess-how-much-i-love-you.jpeg","id":98},{"name":"Gullah, Gullah Island","description":"Gullah, Gullah Island is a Live-Action with musical elements. Color Palette: Bright and vibrant colors reflecting the cultural setting. show for 3-7 year olds. It features Cultural & Social, Life Lessons, Cultures & Traditions, Cultural Appreciation, sing-a-long, Dance, Social-Emotional, Social Development, Music themes.","ageRange":"3-7","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"High","dialogueIntensity":"Moderate-High","soundEffectsLevel":"Moderate","musicTempo":"Moderate-High","totalMusicLevel":"High","totalSoundEffectTimeLevel":"Moderate","sceneFrequency":"Moderate","animationStyle":"Live-Action with musical elements. Color Palette: Bright and vibrant colors reflecting the cultural setting.","themes":["Cultural & Social","Life Lessons","Cultures & Traditions","Cultural Appreciation","sing-a-long","Dance","Social-Emotional","Social Development","Music"],"friendshipRating":3,"problemSolvingRating":3,"relatableSituationsRating":4,"emotionalIntelligenceRating":2,"creativityRating":1,"educationalValueRating":2,"overallRating":3,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/gullah-gullah-island.jpg","id":99},{"name":"Gumby: The Movie","description":"Gumby: The Movie is a Stop-Motion Animation using clay figures (claymation). Color Palette: Varied colors with a mix of bright and muted tones. Unique aesthetic uncommon in the present day. show for 4-8 year olds. It features Creativity & Imagination, Problem Solving, Perseverance themes.","ageRange":"4-8","episodeLength":5,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"Low-Moderate","dialogueIntensity":"Low-Moderate","soundEffectsLevel":"Moderate-High","musicTempo":"Varies","totalMusicLevel":"High","totalSoundEffectTimeLevel":"High","sceneFrequency":"Moderate","animationStyle":"Stop-Motion Animation using clay figures (claymation). Color Palette: Varied colors with a mix of bright and muted tones. Unique aesthetic uncommon in the present day.","themes":["Creativity & Imagination","Problem Solving","Perseverance"],"friendshipRating":2,"problemSolvingRating":3,"relatableSituationsRating":3,"emotionalIntelligenceRating":2,"creativityRating":4,"educationalValueRating":3,"overallRating":3,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/gumby-the-movie.jpg","id":100},{"name":"Handyman Hal","description":"Handyman Hal is a Primarily live-action with occasional animated elements to highlight tools or processes. show for 3-8 year olds. It features Life Lessons, Engineering Concepts, Cultures & Traditions, Cultural Appreciation, Vehicle Themes, STEM, Farm Life, Agriculture, Mechanics, Curiosity, Entertainment, Humor, Safety themes.","ageRange":"3-8","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":4,"interactivityLevel":"Moderate","dialogueIntensity":"High","soundEffectsLevel":"High","musicTempo":"Moderate-High","totalMusicLevel":"High","totalSoundEffectTimeLevel":"High","sceneFrequency":"High","animationStyle":"Primarily live-action with occasional animated elements to highlight tools or processes.","themes":["Life Lessons","Engineering Concepts","Cultures & Traditions","Cultural Appreciation","Vehicle Themes","STEM","Farm Life","Agriculture","Mechanics","Curiosity","Entertainment","Humor","Safety"],"friendshipRating":1,"problemSolvingRating":2,"relatableSituationsRating":4,"emotionalIntelligenceRating":1,"creativityRating":3,"educationalValueRating":4,"overallRating":2,"availableOn":["YouTube"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/handyman-hal.jpg","id":101},{"name":"He-Man and the Masters of the Universe","description":"He-Man and the Masters of the Universe is a Traditional 2D Animation with action-oriented designs. Color Palette: Bright and vivid colors with bold contrasts. show for 8-12 year olds. It features Superhero Themes, Positive Role Models, Entertainment, Responsibility, Morality, Adventure, Fantasy Elements, Mild Violent themes, Mild Fantasy Violence themes.","ageRange":"8-12","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":4,"interactivityLevel":"Low-Moderate","dialogueIntensity":"Moderate-High","soundEffectsLevel":"High","musicTempo":"Moderate-High","totalMusicLevel":"High","totalSoundEffectTimeLevel":"High","sceneFrequency":"Moderate-High","animationStyle":"Traditional 2D Animation with action-oriented designs. Color Palette: Bright and vivid colors with bold contrasts.","themes":["Superhero Themes","Positive Role Models","Entertainment","Responsibility","Morality","Adventure","Fantasy Elements","Mild Violent themes","Mild Fantasy Violence"],"friendshipRating":3,"problemSolvingRating":3,"relatableSituationsRating":2,"emotionalIntelligenceRating":2,"creativityRating":3,"educationalValueRating":1,"overallRating":2,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/he-man-and-the-masters-of-the-universe.jpeg","id":102},{"name":"Helper Cars","description":"Helper Cars is a 3D CGI Animation with Bright Colors and Friendly Vehicle Characters show for 2-5 year olds. It features Vehicle Themes, Teamwork, Colours, Shapes, Problem Solving, Vehicle Recognition, Entertainment, Mechanics themes.","ageRange":"2-5","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"Low","dialogueIntensity":"Low-Moderate","soundEffectsLevel":"High","musicTempo":"Moderate","totalMusicLevel":"High","totalSoundEffectTimeLevel":"High","sceneFrequency":"Moderate-High","animationStyle":"3D CGI Animation with Bright Colors and Friendly Vehicle Characters","themes":["Vehicle Themes","Teamwork","Colours","Shapes","Problem Solving","Vehicle Recognition","Entertainment","Mechanics"],"friendshipRating":1,"problemSolvingRating":4,"relatableSituationsRating":3,"emotionalIntelligenceRating":1,"creativityRating":1,"educationalValueRating":2,"overallRating":3,"availableOn":["YouTube"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/helper-cars.jpg","id":103},{"name":"Hero Elementary","description":"Hero Elementary is a 2D Digital Animation with bright and colorful designs. Color Palette: Bright and vivid colors with emphasis on primary colors. show for 4-8 year olds. It features STEM, Superhero Themes, Problem Solving, Teamwork, Emotional Intelligence, Curiosity, Critical Thinking, Science themes.","ageRange":"4-8","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":4,"interactivityLevel":"High","dialogueIntensity":"High","soundEffectsLevel":"High","musicTempo":"Moderate-High","totalMusicLevel":"High","totalSoundEffectTimeLevel":"High","sceneFrequency":"Moderate","animationStyle":"2D Digital Animation with bright and colorful designs. Color Palette: Bright and vivid colors with emphasis on primary colors.","themes":["STEM","Superhero Themes","Problem Solving","Teamwork","Emotional Intelligence","Curiosity","Critical Thinking","Science"],"friendshipRating":2,"problemSolvingRating":4,"relatableSituationsRating":3,"emotionalIntelligenceRating":4,"creativityRating":1,"educationalValueRating":4,"overallRating":2,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/hero-elementary.jpeg","id":104},{"name":"Hey Bear Sensory","description":"Hey Bear Sensory is a High-Contrast 3D Animation with Bright Colors and Simple Shapes show for 0-3 year olds. It features Early Childhood experiences, Sensory Exploration, Colours, Motor Skills, Music themes.","ageRange":"0-3","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":5,"interactivityLevel":"Low","dialogueIntensity":"None","soundEffectsLevel":"Moderate-High","musicTempo":"High","totalMusicLevel":"Very High","totalSoundEffectTimeLevel":"High","sceneFrequency":"High","animationStyle":"High-Contrast 3D Animation with Bright Colors and Simple Shapes","themes":["Early Childhood experiences","Sensory Exploration","Colours","Motor Skills","Music"],"friendshipRating":3,"problemSolvingRating":2,"relatableSituationsRating":2,"emotionalIntelligenceRating":1,"creativityRating":3,"educationalValueRating":3,"overallRating":1,"availableOn":["YouTube"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/hey-bear-sensory.jpg","id":105},{"name":"Hey Duggee","description":"Hey Duggee is a 2D Digital Animation with simple, geometric shapes and bold outlines. Bright and bold colors with clear contrasts. show for 2-5 year olds. It features Creativity & Imagination, Merit Reward systems, Teamwork, Problem Solving, Perseverance themes.","ageRange":"2-5","episodeLength":5,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":4,"interactivityLevel":"High","dialogueIntensity":"Moderate","soundEffectsLevel":"Moderate-High","musicTempo":"Moderate-High","totalMusicLevel":"High","totalSoundEffectTimeLevel":"High","sceneFrequency":"Moderate","animationStyle":"2D Digital Animation with simple, geometric shapes and bold outlines. Bright and bold colors with clear contrasts.","themes":["Creativity & Imagination","Merit Reward systems","Teamwork","Problem Solving","Perseverance"],"friendshipRating":3,"problemSolvingRating":3,"relatableSituationsRating":1,"emotionalIntelligenceRating":1,"creativityRating":3,"educationalValueRating":4,"overallRating":2,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/hey-duggee.jpg","id":106},{"name":"Horrid Henry","description":"Horrid Henry is a 2D Digital Animation with bold lines and exaggerated expressions. Color Palette: Bright and vivid colors with high contrast show for 6-10 year olds. It features Creativity & Imagination, Cause and Effect, Morality, Humor, Entertainment, Mischievous Behaviour themes.","ageRange":"6-10","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":4,"interactivityLevel":"Low-Moderate","dialogueIntensity":"High","soundEffectsLevel":"High","musicTempo":"Moderate-High","totalMusicLevel":"High","totalSoundEffectTimeLevel":"High","sceneFrequency":"High","animationStyle":"2D Digital Animation with bold lines and exaggerated expressions. Color Palette: Bright and vivid colors with high contrast","themes":["Creativity & Imagination","Cause and Effect","Morality","Humor","Entertainment","Mischievous Behaviour"],"friendshipRating":3,"problemSolvingRating":3,"relatableSituationsRating":3,"emotionalIntelligenceRating":1,"creativityRating":4,"educationalValueRating":2,"overallRating":2,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/horrid-henry.jpg","id":107},{"name":"Hudson’s Playground","description":"Hudson’s Playground is a Live-Action Family Videos show for 3-8 year olds. It features Creativity & Imagination, Cultures & Traditions, Life Lessons, Farm Life, Machinery, Agriculture, Outdoor Exploration, Problem Solving, Family Relationships, Curiosity themes.","ageRange":"3-8","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"Low-Moderate","dialogueIntensity":"Moderate","soundEffectsLevel":"Moderate-High","musicTempo":"Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"High","sceneFrequency":"Moderate-High","animationStyle":"Live-Action Family Videos","themes":["Creativity & Imagination","Cultures & Traditions","Life Lessons","Farm Life","Machinery","Agriculture","Outdoor Exploration","Problem Solving","Family Relationships","Curiosity"],"friendshipRating":4,"problemSolvingRating":3,"relatableSituationsRating":4,"emotionalIntelligenceRating":2,"creativityRating":4,"educationalValueRating":1,"overallRating":3,"availableOn":["YouTube"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/hudsons-playground.jpg","id":108},{"name":"If You Give a Mouse a Cookie(2015-present)","description":"If You Give a Mouse a Cookie(2015-present) is a 2D digital animation show for 3-6 year olds. It features Life Lessons, Cause and Effect, Creativity & Imagination, Problem Solving, Curiosity, Critical Thinking, Cognitive Development themes.","ageRange":"3-6","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"Moderate","dialogueIntensity":"Moderate","soundEffectsLevel":"Moderate","musicTempo":"Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Moderate","sceneFrequency":"Moderate","animationStyle":"2D digital animation","themes":["Life Lessons","Cause and Effect","Creativity & Imagination","Problem Solving","Curiosity","Critical Thinking","Cognitive Development"],"friendshipRating":2,"problemSolvingRating":3,"relatableSituationsRating":4,"emotionalIntelligenceRating":3,"creativityRating":4,"educationalValueRating":1,"overallRating":3,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/if-you-give-a-mouse-a-cookie(2015-present).jpg","id":109},{"name":"In the Night Garden (07-09)","description":"In the Night Garden (07-09) is a Live-action costume performances combined with CGI-enhanced environments show for 1-4 year olds. It features Preschool-Basics, Sensory Exploration, Repetitive Learning, Motor Skills, Cognitive Development themes.","ageRange":"1-4","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":1,"interactivityLevel":"Low","dialogueIntensity":"Low","soundEffectsLevel":"Low","musicTempo":"Low","totalMusicLevel":"Low","totalSoundEffectTimeLevel":"High","sceneFrequency":"Low","animationStyle":"Live-action costume performances combined with CGI-enhanced environments","themes":["Preschool-Basics","Sensory Exploration","Repetitive Learning","Motor Skills","Cognitive Development"],"friendshipRating":1,"problemSolvingRating":3,"relatableSituationsRating":2,"emotionalIntelligenceRating":3,"creativityRating":3,"educationalValueRating":3,"overallRating":5,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/in-the-night-garden-(07-09).jpg","id":110},{"name":"It's a Big Big World","description":"It's a Big Big World is a Live-action puppetry with CGI backgrounds.Color Palette: Soft, natural colors with earthy tones. show for 3-6 year olds. It features Environmental Awareness, Science, Friendship, Nature, Ecosystems, Curiosity themes.","ageRange":"3-6","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":2,"interactivityLevel":"Moderate","dialogueIntensity":"Moderate","soundEffectsLevel":"Low-Moderate","musicTempo":"Low-Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Low","sceneFrequency":"Moderate","animationStyle":"Live-action puppetry with CGI backgrounds.Color Palette: Soft, natural colors with earthy tones.","themes":["Environmental Awareness","Science","Friendship","Nature","Ecosystems","Curiosity"],"friendshipRating":4,"problemSolvingRating":3,"relatableSituationsRating":1,"emotionalIntelligenceRating":3,"creativityRating":3,"educationalValueRating":3,"overallRating":4,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/its-a-big-big-world.jpeg","id":111},{"name":"Johnson & Friends","description":"Johnson & Friends is a Live action with costumed characters show for 3-6 year olds. It features Creativity & Imagination, Friendship, Problem Solving, Teamwork themes.","ageRange":"3-6","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":2,"interactivityLevel":"Moderate","dialogueIntensity":"Low-Moderate","soundEffectsLevel":"Moderate","musicTempo":"Low-Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Low","sceneFrequency":"Moderate","animationStyle":"Live action with costumed characters","themes":["Creativity & Imagination","Friendship","Problem Solving","Teamwork"],"friendshipRating":4,"problemSolvingRating":4,"relatableSituationsRating":1,"emotionalIntelligenceRating":1,"creativityRating":3,"educationalValueRating":1,"overallRating":4,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/johnson-and-friends.jpg","id":112},{"name":"JoJo & Gran Gran","description":"JoJo & Gran Gran is a 2D Digital Animation with a hand-drawn aesthetic. show for 3-6 year olds. It features Cultures & Traditions, Family Relationships, Family Values, Relatable Situations, Emotional Intelligence themes.","ageRange":"3-6","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":2,"interactivityLevel":"Moderate","dialogueIntensity":"Moderate","soundEffectsLevel":"Low-Moderate","musicTempo":"Low-Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Low","sceneFrequency":"Moderate","animationStyle":"2D Digital Animation with a hand-drawn aesthetic.","themes":["Cultures & Traditions","Family Relationships","Family Values","Relatable Situations","Emotional Intelligence"],"friendshipRating":3,"problemSolvingRating":1,"relatableSituationsRating":3,"emotionalIntelligenceRating":4,"creativityRating":2,"educationalValueRating":3,"overallRating":4,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/jojo-and-gran-gran.jpg","id":113},{"name":"Juf Roos","description":"Juf Roos is a Live-Action with Colorful Costumes and Simple Sets show for 2-6 year olds. It features Cultures & Traditions, Cultural Appreciation, Learning through Songs, Dutch Language, Language Learning, sing-a-long, Dance, Literacy, Music themes.","ageRange":"2-6","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"Moderate","dialogueIntensity":"Moderate-High","soundEffectsLevel":"Moderate","musicTempo":"Moderate","totalMusicLevel":"High","totalSoundEffectTimeLevel":"Moderate","sceneFrequency":"Moderate","animationStyle":"Live-Action with Colorful Costumes and Simple Sets","themes":["Cultures & Traditions","Cultural Appreciation","Learning through Songs","Dutch Language","Language Learning","sing-a-long","Dance","Literacy","Music"],"friendshipRating":1,"problemSolvingRating":1,"relatableSituationsRating":1,"emotionalIntelligenceRating":2,"creativityRating":2,"educationalValueRating":4,"overallRating":3,"availableOn":["YouTube"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/juf-roos.jpeg","id":114},{"name":"JunyTony - Songs and Stories","description":"JunyTony - Songs and Stories is a 2D Animation with Vibrant Colors and Cute Characters show for 2-6 year olds. It features Creativity & Imagination, Learning from Mistakes, Learning through Songs, Cultures & Traditions, Cultural Appreciation, Literacy, Numeracy, sing-a-long, Dance, Phonics, Vocabulary, Music, Routine, Social-Emotional themes.","ageRange":"2-6","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":4,"interactivityLevel":"High","dialogueIntensity":"High","soundEffectsLevel":"High","musicTempo":"High","totalMusicLevel":"Very High","totalSoundEffectTimeLevel":"High","sceneFrequency":"High","animationStyle":"2D Animation with Vibrant Colors and Cute Characters","themes":["Creativity & Imagination","Learning from Mistakes","Learning through Songs","Cultures & Traditions","Cultural Appreciation","Literacy","Numeracy","sing-a-long","Dance","Phonics","Vocabulary","Music","Routine","Social-Emotional"],"friendshipRating":1,"problemSolvingRating":1,"relatableSituationsRating":3,"emotionalIntelligenceRating":1,"creativityRating":3,"educationalValueRating":3,"overallRating":2,"availableOn":["YouTube"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/junytony-songs-and-stories.jpg","id":115},{"name":"KarazahChannel","description":"KarazahChannel is a Mix of 3D CGI animations for the characters and settings show for 3-8 year olds. It features Cultures & Traditions, Cultural Appreciation, Cultural & Social, Language Learning, Arabic Language Learning, Literacy, sing-a-long, Reading Comprehension, Music, Repetitive Learning themes.","ageRange":"3-8","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"High","dialogueIntensity":"Moderate","soundEffectsLevel":"Moderate","musicTempo":"Moderate","totalMusicLevel":"Moderate-High","totalSoundEffectTimeLevel":"Moderate","sceneFrequency":"Moderate","animationStyle":"Mix of 3D CGI animations for the characters and settings","themes":["Cultures & Traditions","Cultural Appreciation","Cultural & Social","Language Learning","Arabic Language Learning","Literacy","sing-a-long","Reading Comprehension","Music","Repetitive Learning"],"friendshipRating":1,"problemSolvingRating":3,"relatableSituationsRating":3,"emotionalIntelligenceRating":3,"creativityRating":3,"educationalValueRating":3,"overallRating":3,"availableOn":["YouTube"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/karazahchannel.jpg","id":116},{"name":"Katuri tv","description":"Katuri tv is a 3D CGI animation with bright and vivid colors show for 3-7 year olds. It features Nature, Family Relationships, Animals, Nature Sounds, Problem Solving, Social Development, Entertainment, Humor, Social-Emotional themes.","ageRange":"3-7","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"Low","dialogueIntensity":"Moderate","soundEffectsLevel":"Moderate","musicTempo":"Moderate","totalMusicLevel":"Moderate-High","totalSoundEffectTimeLevel":"Moderate","sceneFrequency":"Low-Moderate","animationStyle":"3D CGI animation with bright and vivid colors","themes":["Nature","Family Relationships","Animals","Nature Sounds","Problem Solving","Social Development","Entertainment","Humor","Social-Emotional"],"friendshipRating":3,"problemSolvingRating":3,"relatableSituationsRating":3,"emotionalIntelligenceRating":1,"creativityRating":2,"educationalValueRating":3,"overallRating":3,"availableOn":["YouTube"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/katuri-tv.jpg","id":117},{"name":"Kazwa and Bilal","description":"Kazwa and Bilal is a 2D Digital Animation with bright and colorful designs. Color Palette: Bright and vivid colors with emphasis on primary colors. show for 3-6 year olds. It features Cultural Appreciation, Cultures & Traditions, Cultural & Social, Curiosity, Social-Emotional, Relatable Situations, Religion, Morality themes.","ageRange":"3-6","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":1,"interactivityLevel":"Moderate","dialogueIntensity":"Low","soundEffectsLevel":"Moderate","musicTempo":"Low-Moderate","totalMusicLevel":"Moderate-High","totalSoundEffectTimeLevel":"Moderate-High","sceneFrequency":"Moderate","animationStyle":"2D Digital Animation with bright and colorful designs. Color Palette: Bright and vivid colors with emphasis on primary colors.","themes":["Cultural Appreciation","Cultures & Traditions","Cultural & Social","Curiosity","Social-Emotional","Relatable Situations","Religion","Morality"],"friendshipRating":3,"problemSolvingRating":3,"relatableSituationsRating":4,"emotionalIntelligenceRating":1,"creativityRating":3,"educationalValueRating":1,"overallRating":5,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/kazwa-and-bilal.jpeg","id":118},{"name":"Kid-E-Cats","description":"Kid-E-Cats is a 2D digital animation with a hand-drawn look. Bright and cheerful colors with simple backgrounds show for 3-6 year olds. It features Creativity & Imagination, Problem Solving, Friendship, Emotional Intelligence, Conflict Resolution, Family Relationships, Family Values, Social-Emotional, Social Development, Relatable Situations themes.","ageRange":"3-6","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"Low-Moderate","dialogueIntensity":"High","soundEffectsLevel":"Moderate","musicTempo":"Moderate-High","totalMusicLevel":"High","totalSoundEffectTimeLevel":"Moderate","sceneFrequency":"Moderate-High","animationStyle":"2D digital animation with a hand-drawn look. Bright and cheerful colors with simple backgrounds","themes":["Creativity & Imagination","Problem Solving","Friendship","Emotional Intelligence","Conflict Resolution","Family Relationships","Family Values","Social-Emotional","Social Development","Relatable Situations"],"friendshipRating":4,"problemSolvingRating":3,"relatableSituationsRating":4,"emotionalIntelligenceRating":4,"creativityRating":4,"educationalValueRating":2,"overallRating":3,"availableOn":["YouTube"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/kid-e-cats.jpeg","id":119},{"name":"Kids 2 kids","description":"Kids 2 kids is a Live-Action Family Videos show for 5-10 year olds. It features Vehicle Themes, Learn Through Play, Creativity & Imagination, Social-Emotional, Humor, Outdoor Exploration, DIY Projects, Curiosity, Silly Comedy themes.","ageRange":"5-10","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":4,"interactivityLevel":"Low","dialogueIntensity":"Moderate-High","soundEffectsLevel":"Low-Moderate","musicTempo":"Low-Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Moderate","sceneFrequency":"High","animationStyle":"Live-Action Family Videos","themes":["Vehicle Themes","Learn Through Play","Creativity & Imagination","Social-Emotional","Humor","Outdoor Exploration","DIY Projects","Curiosity","Silly Comedy"],"friendshipRating":2,"problemSolvingRating":3,"relatableSituationsRating":3,"emotionalIntelligenceRating":1,"creativityRating":4,"educationalValueRating":2,"overallRating":2,"availableOn":["YouTube"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/kids-to-kids.jpg","id":120},{"name":"Kipper(1997-2000)","description":"Kipper(1997-2000) is a Traditional hand-drawn 2D animation show for 2-5 year olds. It features Creativity & Imagination, Social-Emotional, Problem Solving, Friendship themes.","ageRange":"2-5","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":1,"interactivityLevel":"Moderate","dialogueIntensity":"Low-Moderate","soundEffectsLevel":"Low","musicTempo":"Low-Moderate","totalMusicLevel":"Low","totalSoundEffectTimeLevel":"Moderate","sceneFrequency":"Low","animationStyle":"Traditional hand-drawn 2D animation","themes":["Creativity & Imagination","Social-Emotional","Problem Solving","Friendship"],"friendshipRating":4,"problemSolvingRating":3,"relatableSituationsRating":4,"emotionalIntelligenceRating":1,"creativityRating":4,"educationalValueRating":3,"overallRating":5,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/kipper(1997-2000).jpg","id":121},{"name":"Kiri and Lou","description":"Kiri and Lou is a Stop-motion animation using clay and paper cutouts show for 3-6 year olds. It features Social-Emotional, Friendship, Nature, Emotional Intelligence, Mindfulness themes.","ageRange":"3-6","episodeLength":5,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":1,"interactivityLevel":"Moderate","dialogueIntensity":"Low-Moderate","soundEffectsLevel":"Low","musicTempo":"Low","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Low","sceneFrequency":"Low","animationStyle":"Stop-motion animation using clay and paper cutouts","themes":["Social-Emotional","Friendship","Nature","Emotional Intelligence","Mindfulness"],"friendshipRating":3,"problemSolvingRating":1,"relatableSituationsRating":3,"emotionalIntelligenceRating":3,"creativityRating":1,"educationalValueRating":3,"overallRating":5,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/kiri-and-lou.jpg","id":122},{"name":"Laurie Berkner","description":"Laurie Berkner is a Live-Action with Colorful Green Screen Animations show for 2-6 year olds. It features Learning through Songs, Physical Fitness, Early Childhood experiences, Music, sing-a-long, Social-Emotional, Literacy, Entertainment, Dance themes.","ageRange":"2-6","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"Low-Moderate","dialogueIntensity":"Moderate-High","soundEffectsLevel":"Moderate","musicTempo":"Moderate","totalMusicLevel":"Very High","totalSoundEffectTimeLevel":"Moderate","sceneFrequency":"Moderate","animationStyle":"Live-Action with Colorful Green Screen Animations","themes":["Learning through Songs","Physical Fitness","Early Childhood experiences","Music","sing-a-long","Social-Emotional","Literacy","Entertainment","Dance"],"friendshipRating":2,"problemSolvingRating":3,"relatableSituationsRating":4,"emotionalIntelligenceRating":3,"creativityRating":3,"educationalValueRating":4,"overallRating":3,"availableOn":["YouTube"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/laurie-berkner.jpg","id":123},{"name":"Lazytown","description":"Lazytown is a Combination of live-action, puppetry, and CGI elements. Color Palette: Bright and vivid colors with high contrast show for 3-6 year olds. It features Physical Fitness, Positive Role Models, Healthy Eating, Teamwork, Problem Solving, Exercise, Motor Skills, sing-a-long, Dance, Perseverance themes.","ageRange":"3-6","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":5,"interactivityLevel":"High","dialogueIntensity":"High","soundEffectsLevel":"High","musicTempo":"High","totalMusicLevel":"High","totalSoundEffectTimeLevel":"High","sceneFrequency":"High","animationStyle":"Combination of live-action, puppetry, and CGI elements. Color Palette: Bright and vivid colors with high contrast","themes":["Physical Fitness","Positive Role Models","Healthy Eating","Teamwork","Problem Solving","Exercise","Motor Skills","sing-a-long","Dance","Perseverance"],"friendshipRating":1,"problemSolvingRating":4,"relatableSituationsRating":2,"emotionalIntelligenceRating":3,"creativityRating":2,"educationalValueRating":1,"overallRating":1,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/lazytown.jpg","id":124},{"name":"Leo the Truck","description":"Leo the Truck is a 3D CGI Animation with bright and vibrant colors. Color Palette: Bright and cheerful colors with high saturation. show for 2-6 year olds. It features Preschool-Basics, Vehicle Themes, Colours, Shapes, Vehicle Recognition, Mechanics, Curiosity themes.","ageRange":"2-6","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":5,"interactivityLevel":"Low-Moderate","dialogueIntensity":"Low-Moderate","soundEffectsLevel":"Moderate-High","musicTempo":"Moderate","totalMusicLevel":"High","totalSoundEffectTimeLevel":"High","sceneFrequency":"Moderate","animationStyle":"3D CGI Animation with bright and vibrant colors. Color Palette: Bright and cheerful colors with high saturation.","themes":["Preschool-Basics","Vehicle Themes","Colours","Shapes","Vehicle Recognition","Mechanics","Curiosity"],"friendshipRating":2,"problemSolvingRating":2,"relatableSituationsRating":2,"emotionalIntelligenceRating":1,"creativityRating":2,"educationalValueRating":3,"overallRating":1,"availableOn":["YouTube"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/leo-the-truck.jpg","id":125},{"name":"Leo the wildlife ranger","description":"Leo the wildlife ranger is a 3D CGI animation with detailed depictions of animals and environments. show for 3-7 year olds. It features Wildlife Exploration, Wildlife Conservation, Animals, Animal Behaviour, Curiosity, Problem Solving, Nature, Natural World, Responsibility themes.","ageRange":"3-7","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":5,"interactivityLevel":"Low-Moderate","dialogueIntensity":"High","soundEffectsLevel":"Moderate","musicTempo":"Moderate","totalMusicLevel":"Moderate-High","totalSoundEffectTimeLevel":"Moderate","sceneFrequency":"Moderate-High","animationStyle":"3D CGI animation with detailed depictions of animals and environments.","themes":["Wildlife Exploration","Wildlife Conservation","Animals","Animal Behaviour","Curiosity","Problem Solving","Nature","Natural World","Responsibility"],"friendshipRating":1,"problemSolvingRating":3,"relatableSituationsRating":3,"emotionalIntelligenceRating":1,"creativityRating":2,"educationalValueRating":2,"overallRating":1,"availableOn":["YouTube"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/leo-the-wild-live-ranger.jpg","id":126},{"name":"Les' Copaque Production - Upin & Ipin","description":"Les' Copaque Production - Upin & Ipin is a 3D CGI animation with vibrant colors and detailed environments reflecting Malaysian village life. show for 4-10 year olds. It features Cultural & Social, Learning from Mistakes, Cultures & Traditions, Cultural Appreciation, Morality, Responsibility, Relatable Situations, Family Relationships, Family Values, Social-Emotional, Emotional Intelligence themes.","ageRange":"4-10","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"Moderate","dialogueIntensity":"High","soundEffectsLevel":"Moderate","musicTempo":"Moderate","totalMusicLevel":"Moderate-High","totalSoundEffectTimeLevel":"Moderate","sceneFrequency":"Moderate","animationStyle":"3D CGI animation with vibrant colors and detailed environments reflecting Malaysian village life.","themes":["Cultural & Social","Learning from Mistakes","Cultures & Traditions","Cultural Appreciation","Morality","Responsibility","Relatable Situations","Family Relationships","Family Values","Social-Emotional","Emotional Intelligence"],"friendshipRating":4,"problemSolvingRating":3,"relatableSituationsRating":4,"emotionalIntelligenceRating":3,"creativityRating":1,"educationalValueRating":3,"overallRating":3,"availableOn":["YouTube"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/les-copaque-production-upin-and-ipin.jpg","id":127},{"name":"LifeKids (Blinky’s Bible adventures)","description":"LifeKids (Blinky’s Bible adventures) is a Combination of Live-Action and 2D Animation. Color Palette: Bright and primary colors. show for 2+ year olds. It features Religious Teachings, Cultures & Traditions, Cultural & Social, Cause and Effect, Life Lessons, Spiritual Development, Religion, Family Relationships, Relatable Situations, Social-Emotional, Morality, sing-a-long, Repetitive Learning, Dance themes.","ageRange":"2+","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":2,"interactivityLevel":"High","dialogueIntensity":"Moderate","soundEffectsLevel":"Low","musicTempo":"Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Low","sceneFrequency":"Low-Moderate","animationStyle":"Combination of Live-Action and 2D Animation. Color Palette: Bright and primary colors.","themes":["Religious Teachings","Cultures & Traditions","Cultural & Social","Cause and Effect","Life Lessons","Spiritual Development","Religion","Family Relationships","Relatable Situations","Social-Emotional","Morality","sing-a-long","Repetitive Learning","Dance"],"friendshipRating":4,"problemSolvingRating":3,"relatableSituationsRating":3,"emotionalIntelligenceRating":3,"creativityRating":1,"educationalValueRating":4,"overallRating":4,"availableOn":["YouTube"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/lifekids-(blinkys-bible-adventures).jpg","id":128},{"name":"Listener Kids","description":"Listener Kids is a Combination of live-action and animated elements, featuring colorful visuals and friendly characters. show for 2-6 year olds. It features Learning through Songs, Cultures & Traditions, Cultural & Social, Spiritual Development, Faith, Biblical Stories, Religion, Christian Values, Morality, sing-a-long, Social Development, Positive Mindset themes.","ageRange":"2-6","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":2,"interactivityLevel":"High","dialogueIntensity":"High","soundEffectsLevel":"Moderate","musicTempo":"Moderate","totalMusicLevel":"Very High","totalSoundEffectTimeLevel":"Moderate","sceneFrequency":"Moderate","animationStyle":"Combination of live-action and animated elements, featuring colorful visuals and friendly characters.","themes":["Learning through Songs","Cultures & Traditions","Cultural & Social","Spiritual Development","Faith","Biblical Stories","Religion","Christian Values","Morality","sing-a-long","Social Development","Positive Mindset"],"friendshipRating":1,"problemSolvingRating":2,"relatableSituationsRating":4,"emotionalIntelligenceRating":1,"creativityRating":2,"educationalValueRating":3,"overallRating":4,"availableOn":["YouTube"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/listener-kids.jpeg","id":129},{"name":"Little Angel","description":"Little Angel is a 3D CGI animation with bright and vivid colors. show for 1-4 year olds. It features Preschool-Basics, Numeracy, Literacy, Routine, Social-Emotional, sing-a-long, Cognitive Development, Repetitive Learning themes.","ageRange":"1-4","episodeLength":5,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":5,"interactivityLevel":"High","dialogueIntensity":"Moderate-High","soundEffectsLevel":"High","musicTempo":"Moderate-High","totalMusicLevel":"High","totalSoundEffectTimeLevel":"High","sceneFrequency":"Moderate-High","animationStyle":"3D CGI animation with bright and vivid colors.","themes":["Preschool-Basics","Numeracy","Literacy","Routine","Social-Emotional","sing-a-long","Cognitive Development","Repetitive Learning"],"friendshipRating":1,"problemSolvingRating":3,"relatableSituationsRating":4,"emotionalIntelligenceRating":1,"creativityRating":3,"educationalValueRating":3,"overallRating":1,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/little-angel.jpg","id":130},{"name":"Little Bear","description":"Little Bear is a Traditional Hand-Drawn 2D animation show for 3-6 year olds. It features Creativity & Imagination, Family Relationships, Social Development, Emotional Intelligence, Family Values themes.","ageRange":"3-6","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":1,"interactivityLevel":"Low-Moderate","dialogueIntensity":"Moderate","soundEffectsLevel":"Low","musicTempo":"Low","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Low","sceneFrequency":"Low","animationStyle":"Traditional Hand-Drawn 2D animation","themes":["Creativity & Imagination","Family Relationships","Social Development","Emotional Intelligence","Family Values"],"friendshipRating":4,"problemSolvingRating":3,"relatableSituationsRating":3,"emotionalIntelligenceRating":3,"creativityRating":4,"educationalValueRating":2,"overallRating":5,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/little-bear.jpg","id":131},{"name":"Little Einsteins (2005-2009)","description":"Little Einsteins (2005-2009) is a digital 2D animation. CGI for the Rocket ship and certain elements. show for 3-6 year olds. It features Cultural Appreciation, Music, Art, Problem Solving, Cognitive Development, Teamwork, History themes.","ageRange":"3-6","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":5,"interactivityLevel":"High","dialogueIntensity":"High","soundEffectsLevel":"High","musicTempo":"High","totalMusicLevel":"Very High","totalSoundEffectTimeLevel":"High","sceneFrequency":"High","animationStyle":"digital 2D animation. CGI for the Rocket ship and certain elements.","themes":["Cultural Appreciation","Music","Art","Problem Solving","Cognitive Development","Teamwork","History"],"friendshipRating":1,"problemSolvingRating":4,"relatableSituationsRating":3,"emotionalIntelligenceRating":1,"creativityRating":4,"educationalValueRating":3,"overallRating":1,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/little-einsteins-(2005-2009).jpg","id":132},{"name":"Llama Llama (2018-2019)","description":"Llama Llama (2018-2019) is a Digital 2D animation show for 3-6 year olds. It features Social-Emotional, Family Values, Problem Solving, Relatable Situations, Social Development, Emotional Intelligence themes.","ageRange":"3-6","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":2,"interactivityLevel":"Moderate","dialogueIntensity":"Moderate","soundEffectsLevel":"Low","musicTempo":"Low-Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Low","sceneFrequency":"Low-Moderate","animationStyle":"Digital 2D animation","themes":["Social-Emotional","Family Values","Problem Solving","Relatable Situations","Social Development","Emotional Intelligence"],"friendshipRating":2,"problemSolvingRating":4,"relatableSituationsRating":4,"emotionalIntelligenceRating":4,"creativityRating":3,"educationalValueRating":2,"overallRating":4,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/llama-llama-(2018-2019).jpg","id":133},{"name":"Lucas the spider(2021)","description":"Lucas the spider(2021) is a 3D CGI animation show for 3-6 year olds. It features Overcoming Fears, Emotional Intelligence, Relatable Situations, Creativity & Imagination, Recurring Antagonist themes.","ageRange":"3-6","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"Low","dialogueIntensity":"Low","soundEffectsLevel":"Moderate","musicTempo":"Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Moderate","sceneFrequency":"Moderate","animationStyle":"3D CGI animation","themes":["Overcoming Fears","Emotional Intelligence","Relatable Situations","Creativity & Imagination","Recurring Antagonist"],"friendshipRating":1,"problemSolvingRating":1,"relatableSituationsRating":3,"emotionalIntelligenceRating":3,"creativityRating":4,"educationalValueRating":3,"overallRating":3,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/lucas-the-spider(2021).jpg","id":134},{"name":"Lyla in the loop","description":"Lyla in the loop is a 2D digital animation with a hand-drawn look. Bright and cheerful colors with simple backgrounds. show for 5-8 year olds. It features Creativity & Imagination, STEM, Problem Solving, Motor Skills, Curiosity, Critical Thinking, Relatable Situations themes.","ageRange":"5-8","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"High","dialogueIntensity":"Moderate-High","soundEffectsLevel":"Moderate","musicTempo":"Moderate","totalMusicLevel":"Moderate-High","totalSoundEffectTimeLevel":"Moderate","sceneFrequency":"Moderate","animationStyle":"2D digital animation with a hand-drawn look. Bright and cheerful colors with simple backgrounds.","themes":["Creativity & Imagination","STEM","Problem Solving","Motor Skills","Curiosity","Critical Thinking","Relatable Situations"],"friendshipRating":3,"problemSolvingRating":4,"relatableSituationsRating":3,"emotionalIntelligenceRating":1,"creativityRating":4,"educationalValueRating":3,"overallRating":3,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/lyla-in-the-loop.jpg","id":135},{"name":"Maddie's Do You Know?","description":"Maddie's Do You Know? is a Live-action educational series with some animation and CGI. Color Palette: Natural colors with bright visuals during explanations. show for 4-8 year olds. It features STEM, Creativity & Imagination, Curiosity, Science, Technology, Exploration, Engineering Concepts, Critical Thinking, Problem Solving themes.","ageRange":"4-8","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"High","dialogueIntensity":"High","soundEffectsLevel":"Moderate","musicTempo":"Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Moderate","sceneFrequency":"High","animationStyle":"Live-action educational series with some animation and CGI. Color Palette: Natural colors with bright visuals during explanations.","themes":["STEM","Creativity & Imagination","Curiosity","Science","Technology","Exploration","Engineering Concepts","Critical Thinking","Problem Solving"],"friendshipRating":3,"problemSolvingRating":4,"relatableSituationsRating":3,"emotionalIntelligenceRating":3,"creativityRating":4,"educationalValueRating":4,"overallRating":3,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/maddies-do-you-know.jpeg","id":136},{"name":"Maggie and the Ferocious Beast","description":"Maggie and the Ferocious Beast is a 2D Digital Animation with simple, childlike designs. Color Palette: Bright and pastel colors with minimal backgrounds. show for 3-6 year olds. It features Creativity & Imagination, Friendship, Problem Solving, Emotional Intelligence themes.","ageRange":"3-6","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":2,"interactivityLevel":"Moderate","dialogueIntensity":"Moderate","soundEffectsLevel":"Low-Moderate","musicTempo":"Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Low","sceneFrequency":"Moderate","animationStyle":"2D Digital Animation with simple, childlike designs. Color Palette: Bright and pastel colors with minimal backgrounds.","themes":["Creativity & Imagination","Friendship","Problem Solving","Emotional Intelligence"],"friendshipRating":4,"problemSolvingRating":3,"relatableSituationsRating":3,"emotionalIntelligenceRating":3,"creativityRating":3,"educationalValueRating":2,"overallRating":4,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/maggie-and-the-ferocious-beast.jpg","id":137},{"name":"maizenofficial","description":"maizenofficial is a Real In Game Video Footage show for 7-12, 12+ year olds. It features Arts & Crafts, Creativity & Imagination, Building and Design, Entertainment, Humor, Problem Solving, Critical Thinking, MineCraft, Interactive Game Elements themes.","ageRange":"7-12, 12+","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":4,"interactivityLevel":"Low","dialogueIntensity":"High","soundEffectsLevel":"High","musicTempo":"Moderate-High","totalMusicLevel":"High","totalSoundEffectTimeLevel":"High","sceneFrequency":"High","animationStyle":"Real In Game Video Footage","themes":["Arts & Crafts","Creativity & Imagination","Building and Design","Entertainment","Humor","Problem Solving","Critical Thinking","MineCraft","Interactive Game Elements"],"friendshipRating":3,"problemSolvingRating":4,"relatableSituationsRating":2,"emotionalIntelligenceRating":2,"creativityRating":3,"educationalValueRating":3,"overallRating":2,"availableOn":["YouTube"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/maizenofficial.jpg","id":138},{"name":"Marcus Level","description":"Marcus Level is a 2D Digital Animation with a video game aesthetic. Color Palette: Bright, vivid colors with high saturation show for 7-11 year olds. It features Creativity & Imagination, Fantasy Elements, Problem Solving, Perseverance, Adventure, Teamwork, Critical Thinking, Mild Peril, Mild Fantasy Violence themes.","ageRange":"7-11","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":5,"interactivityLevel":"Moderate","dialogueIntensity":"High","soundEffectsLevel":"Very High","musicTempo":"High","totalMusicLevel":"High","totalSoundEffectTimeLevel":"Very High","sceneFrequency":"Very High","animationStyle":"2D Digital Animation with a video game aesthetic. Color Palette: Bright, vivid colors with high saturation","themes":["Creativity & Imagination","Fantasy Elements","Problem Solving","Perseverance","Adventure","Teamwork","Critical Thinking","Mild Peril","Mild Fantasy Violence"],"friendshipRating":3,"problemSolvingRating":4,"relatableSituationsRating":3,"emotionalIntelligenceRating":3,"creativityRating":4,"educationalValueRating":3,"overallRating":1,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/marcus-level.jpeg","id":139},{"name":"Masha and the Bear","description":"Masha and the Bear is a 3D CGI animation with high-quality, detailed visuals show for 3-7 year olds. It features Creativity & Imagination, Friendship, Problem Solving, Patience, Humor, Mischievous Behaviour themes.","ageRange":"3-7","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":5,"interactivityLevel":"Low-Moderate","dialogueIntensity":"Moderate","soundEffectsLevel":"High","musicTempo":"Moderate-High","totalMusicLevel":"High","totalSoundEffectTimeLevel":"High","sceneFrequency":"High","animationStyle":"3D CGI animation with high-quality, detailed visuals","themes":["Creativity & Imagination","Friendship","Problem Solving","Patience","Humor","Mischievous Behaviour"],"friendshipRating":3,"problemSolvingRating":3,"relatableSituationsRating":3,"emotionalIntelligenceRating":1,"creativityRating":3,"educationalValueRating":1,"overallRating":1,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/masha-and-the-bear.jpg","id":140},{"name":"Mickey Mouse Clubhouse","description":"Mickey Mouse Clubhouse is a 3D CGI animation show for 2-5 year olds. It features Early Childhood experiences, Preschool-Basics, Numeracy, Teamwork, Shapes, Cognitive Development themes.","ageRange":"2-5","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":4,"interactivityLevel":"High","dialogueIntensity":"Moderate-High","soundEffectsLevel":"High","musicTempo":"High","totalMusicLevel":"High","totalSoundEffectTimeLevel":"High","sceneFrequency":"Moderate-High","animationStyle":"3D CGI animation","themes":["Early Childhood experiences","Preschool-Basics","Numeracy","Teamwork","Shapes","Cognitive Development"],"friendshipRating":2,"problemSolvingRating":3,"relatableSituationsRating":1,"emotionalIntelligenceRating":3,"creativityRating":1,"educationalValueRating":3,"overallRating":2,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/mickey-mouse-clubhouse.jpeg","id":141},{"name":"Miffy and friends","description":"Miffy and friends is a 2D Stop-Motion Animation with Simple Designs, Emphasizes clear shapes and actions easily understood by young viewers. show for 2-5 year olds. It features Early Childhood experiences, Social-Emotional, Social Development, Teamwork, Emotional Intelligence themes.","ageRange":"2-5","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":1,"interactivityLevel":"Moderate","dialogueIntensity":"Low","soundEffectsLevel":"Low","musicTempo":"Low-Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Low","sceneFrequency":"Low","animationStyle":"2D Stop-Motion Animation with Simple Designs, Emphasizes clear shapes and actions easily understood by young viewers.","themes":["Early Childhood experiences","Social-Emotional","Social Development","Teamwork","Emotional Intelligence"],"friendshipRating":1,"problemSolvingRating":1,"relatableSituationsRating":3,"emotionalIntelligenceRating":4,"creativityRating":2,"educationalValueRating":2,"overallRating":5,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/miffy-and-friends.jpeg","id":142},{"name":"Milo","description":"Milo is a 2D Digital Animation with bright colors. Color Palette: Vibrant but not overwhelming. show for 3-6 year olds. It features Cultural & Social, Career Exploration, Teamwork, Problem Solving, Responsibility, Curiosity themes.","ageRange":"3-6","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"Moderate","dialogueIntensity":"Moderate","soundEffectsLevel":"Moderate-High","musicTempo":"Moderate","totalMusicLevel":"Moderate-High","totalSoundEffectTimeLevel":"High","sceneFrequency":"Moderate","animationStyle":"2D Digital Animation with bright colors. Color Palette: Vibrant but not overwhelming.","themes":["Cultural & Social","Career Exploration","Teamwork","Problem Solving","Responsibility","Curiosity"],"friendshipRating":1,"problemSolvingRating":4,"relatableSituationsRating":4,"emotionalIntelligenceRating":1,"creativityRating":3,"educationalValueRating":2,"overallRating":3,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/milo.jpg","id":143},{"name":"Minno - Bible Stories for Kids","description":"Minno - Bible Stories for Kids is a Varies across series, primarily 2D and 3D animations with colorful visuals and relatable character designs. show for 3-10 year olds. It features Religious Teachings, Positive Role Models, Spiritual Development, Cultures & Traditions, Cultural & Social, Biblical Stories, Faith, Religion, Christian Values, Morality, Positive Mindset themes.","ageRange":"3-10","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"High","dialogueIntensity":"Moderate-High","soundEffectsLevel":"Moderate","musicTempo":"Moderate","totalMusicLevel":"Moderate-High","totalSoundEffectTimeLevel":"Moderate","sceneFrequency":"Moderate","animationStyle":"Varies across series, primarily 2D and 3D animations with colorful visuals and relatable character designs.","themes":["Religious Teachings","Positive Role Models","Spiritual Development","Cultures & Traditions","Cultural & Social","Biblical Stories","Faith","Religion","Christian Values","Morality","Positive Mindset"],"friendshipRating":1,"problemSolvingRating":3,"relatableSituationsRating":4,"emotionalIntelligenceRating":2,"creativityRating":1,"educationalValueRating":1,"overallRating":3,"availableOn":["YouTube"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/minno-bible-stories-for-kids.jpg","id":144},{"name":"Minuscule","description":"Minuscule is a Combination of CGI and Real-Life Backdrops show for 2+ year olds. It features Environmental Awareness, Storytelling without Dialogue, Creativity & Imagination, Insect Behaviour, Nature, Nature Sounds, Entertainment, Humor, Relaxation, Music, Natural World, ASMR, Silly Comedy, Ecosystems, Slice of Life, Light Hearted themes.","ageRange":"2+","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":1,"interactivityLevel":"Low","dialogueIntensity":"None","soundEffectsLevel":"High","musicTempo":"Low-Moderate","totalMusicLevel":"High","totalSoundEffectTimeLevel":"High","sceneFrequency":"Moderate","animationStyle":"Combination of CGI and Real-Life Backdrops","themes":["Environmental Awareness","Storytelling without Dialogue","Creativity & Imagination","Insect Behaviour","Nature","Nature Sounds","Entertainment","Humor","Relaxation","Music","Natural World","ASMR","Silly Comedy","Ecosystems","Slice of Life","Light Hearted"],"friendshipRating":3,"problemSolvingRating":2,"relatableSituationsRating":2,"emotionalIntelligenceRating":2,"creativityRating":4,"educationalValueRating":4,"overallRating":5,"availableOn":["YouTube"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/minuscule.jpg","id":145},{"name":"Mira, Royal Detective","description":"Mira, Royal Detective is a 2D Digital Animation with Vibrant Colors show for 4-8 year olds. It features Positive Role Models, Cultures & Traditions, Cultural Appreciation, Problem Solving, Critical Thinking, Mystery, Adventure, Curiosity themes.","ageRange":"4-8","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":4,"interactivityLevel":"High","dialogueIntensity":"Moderate-High","soundEffectsLevel":"Moderate-High","musicTempo":"Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Moderate-High","sceneFrequency":"Moderate-High","animationStyle":"2D Digital Animation with Vibrant Colors","themes":["Positive Role Models","Cultures & Traditions","Cultural Appreciation","Problem Solving","Critical Thinking","Mystery","Adventure","Curiosity"],"friendshipRating":2,"problemSolvingRating":4,"relatableSituationsRating":3,"emotionalIntelligenceRating":2,"creativityRating":3,"educationalValueRating":1,"overallRating":2,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/mira-royal-detective.jpg","id":146},{"name":"Miss Katie Sings","description":"Miss Katie Sings is a Live-Action Performances with Simple Props and Backgrounds show for 2-6 year olds. It features Communication & Expression, Cultural & Social, Learning through Songs, Music, sing-a-long, Positive Mindset, Social-Emotional, Courage, Mindfulness, Diversity, Political Leanings themes.","ageRange":"2-6","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":1,"interactivityLevel":"Moderate","dialogueIntensity":"Moderate","soundEffectsLevel":"Moderate","musicTempo":"Moderate","totalMusicLevel":"Very High","totalSoundEffectTimeLevel":"Moderate","sceneFrequency":"Low","animationStyle":"Live-Action Performances with Simple Props and Backgrounds","themes":["Communication & Expression","Cultural & Social","Learning through Songs","Music","sing-a-long","Positive Mindset","Social-Emotional","Courage","Mindfulness","Diversity","Political Leanings"],"friendshipRating":2,"problemSolvingRating":1,"relatableSituationsRating":4,"emotionalIntelligenceRating":3,"creativityRating":3,"educationalValueRating":4,"overallRating":5,"availableOn":["YouTube"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/miss-katie-sings.jpg","id":147},{"name":"Miss Moni","description":"Miss Moni is a Live-Action and 2D Animation show for 2-5 year olds. It features Learning through Songs, Preschool-Basics, Early Childhood experiences, Literacy, Numeracy, Vocabulary, Music, Language Learning, Phonics, sing-a-long, Cognitive Development, Auslan (Sign Language) themes.","ageRange":"2-5","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"High","dialogueIntensity":"Moderate-High","soundEffectsLevel":"Moderate","musicTempo":"Varies","totalMusicLevel":"High","totalSoundEffectTimeLevel":"Moderate","sceneFrequency":"Low-Moderate","animationStyle":"Live-Action and 2D Animation","themes":["Learning through Songs","Preschool-Basics","Early Childhood experiences","Literacy","Numeracy","Vocabulary","Music","Language Learning","Phonics","sing-a-long","Cognitive Development","Auslan (Sign Language)"],"friendshipRating":3,"problemSolvingRating":2,"relatableSituationsRating":2,"emotionalIntelligenceRating":1,"creativityRating":1,"educationalValueRating":3,"overallRating":3,"availableOn":["YouTube"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/miss-moni.jpg","id":148},{"name":"Miss Rachel","description":"Miss Rachel is a Primarily live-action with Miss Rachel interacting directly with the audience. Some Puppet and 2D Animation use show for 1-4 year olds. It features Early Childhood experiences, Phonics, Language Learning, Speech Development, sing-a-long, Cognitive Development, Social-Emotional themes.","ageRange":"1-4","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":4,"interactivityLevel":"High","dialogueIntensity":"High","soundEffectsLevel":"Low-Moderate","musicTempo":"Moderate","totalMusicLevel":"High","totalSoundEffectTimeLevel":"Low-Moderate","sceneFrequency":"Low-Moderate","animationStyle":"Primarily live-action with Miss Rachel interacting directly with the audience. Some Puppet and 2D Animation use","themes":["Early Childhood experiences","Phonics","Language Learning","Speech Development","sing-a-long","Cognitive Development","Social-Emotional"],"friendshipRating":3,"problemSolvingRating":2,"relatableSituationsRating":3,"emotionalIntelligenceRating":2,"creativityRating":2,"educationalValueRating":3,"overallRating":2,"availableOn":["YouTube"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/miss-rachel.jpg","id":149},{"name":"Mister Maker","description":"Mister Maker is a Live-Action with colorful crafts and animated segments. Color Palette: Bright and varied colors. show for 3-7 year olds. It features Positive Role Models, Creativity & Imagination, Arts & Crafts, Curiosity, Motor Skills, Art, Colours themes.","ageRange":"3-7","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":2,"interactivityLevel":"High","dialogueIntensity":"Moderate-High","soundEffectsLevel":"High","musicTempo":"Moderate-High","totalMusicLevel":"High","totalSoundEffectTimeLevel":"High","sceneFrequency":"Moderate","animationStyle":"Live-Action with colorful crafts and animated segments. Color Palette: Bright and varied colors.","themes":["Positive Role Models","Creativity & Imagination","Arts & Crafts","Curiosity","Motor Skills","Art","Colours"],"friendshipRating":1,"problemSolvingRating":1,"relatableSituationsRating":3,"emotionalIntelligenceRating":1,"creativityRating":3,"educationalValueRating":1,"overallRating":4,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/mister-maker.jpg","id":150},{"name":"Mister Rogers' Neighbourhood","description":"Mister Rogers' Neighbourhood is a Live-Action with puppet segments. Color Palette: Soft, natural colors. show for 3-7 year olds. It features Cultural & Social, Elementary-Basics, Life Lessons, Social-Emotional, Social Development, Literacy, Emotional Intelligence, Relatable Situations, Relaxation, Community Service, Problem Solving, Critical Thinking, Family Values, sing-a-long, Morality, Friendship, Creativity & Imagination themes.","ageRange":"3-7","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":1,"interactivityLevel":"High","dialogueIntensity":"Moderate","soundEffectsLevel":"Low","musicTempo":"Low-Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Low","sceneFrequency":"Low","animationStyle":"Live-Action with puppet segments. Color Palette: Soft, natural colors.","themes":["Cultural & Social","Elementary-Basics","Life Lessons","Social-Emotional","Social Development","Literacy","Emotional Intelligence","Relatable Situations","Relaxation","Community Service","Problem Solving","Critical Thinking","Family Values","sing-a-long","Morality","Friendship","Creativity & Imagination"],"friendshipRating":3,"problemSolvingRating":4,"relatableSituationsRating":3,"emotionalIntelligenceRating":3,"creativityRating":3,"educationalValueRating":2,"overallRating":5,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/mister-rogers-neighbourhood.jpg","id":151},{"name":"Molly of Denali","description":"Molly of Denali is a 2D Digital Animation with cultural representation. Color Palette: Bright colors reflecting Alaskan landscapes. show for 4-8 year olds. It features STEM, Cultures & Traditions, Cultural & Social, Cultural Appreciation, Problem Solving, Adventure, Exploration, Nature, Natural World, Mystery themes.","ageRange":"4-8","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"High","dialogueIntensity":"Moderate-High","soundEffectsLevel":"Moderate","musicTempo":"Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Moderate-High","sceneFrequency":"Moderate","animationStyle":"2D Digital Animation with cultural representation. Color Palette: Bright colors reflecting Alaskan landscapes.","themes":["STEM","Cultures & Traditions","Cultural & Social","Cultural Appreciation","Problem Solving","Adventure","Exploration","Nature","Natural World","Mystery"],"friendshipRating":2,"problemSolvingRating":3,"relatableSituationsRating":4,"emotionalIntelligenceRating":3,"creativityRating":1,"educationalValueRating":4,"overallRating":3,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/molly-of-denali.jpeg","id":152},{"name":"Moominvalley","description":"Moominvalley is a 3D CGI Animation with a soft aesthetic. Color Palette: Pastel colors and gentle hues. show for 6-10 year olds. It features Creativity & Imagination, Social-Emotional, Friendship, Fantasy Elements, Emotional Intelligence, Relaxation themes.","ageRange":"6-10","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":2,"interactivityLevel":"Moderate","dialogueIntensity":"Moderate","soundEffectsLevel":"Moderate","musicTempo":"Low-Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Low-Moderate","sceneFrequency":"Moderate","animationStyle":"3D CGI Animation with a soft aesthetic. Color Palette: Pastel colors and gentle hues.","themes":["Creativity & Imagination","Social-Emotional","Friendship","Fantasy Elements","Emotional Intelligence","Relaxation"],"friendshipRating":3,"problemSolvingRating":2,"relatableSituationsRating":4,"emotionalIntelligenceRating":3,"creativityRating":3,"educationalValueRating":2,"overallRating":4,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/moominvalley.jpeg","id":153},{"name":"Moon and Me","description":"Moon and Me is a Stop-Motion Animation with soft toys. Color Palette: Soft, soothing colors. show for 1-4 year olds. It features Early Childhood experiences, Preschool-Basics, Creativity & Imagination, Social-Emotional themes.","ageRange":"1-4","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":1,"interactivityLevel":"Moderate","dialogueIntensity":"Low-Moderate","soundEffectsLevel":"Low","musicTempo":"Low","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Low","sceneFrequency":"Low","animationStyle":"Stop-Motion Animation with soft toys. Color Palette: Soft, soothing colors.","themes":["Early Childhood experiences","Preschool-Basics","Creativity & Imagination","Social-Emotional"],"friendshipRating":1,"problemSolvingRating":2,"relatableSituationsRating":4,"emotionalIntelligenceRating":1,"creativityRating":4,"educationalValueRating":4,"overallRating":5,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/moon-and-me.jpg","id":154},{"name":"Mother goose club","description":"Mother goose club is a Live-Action with Colorful Costumes and Simple Sets show for 2-5 year olds. It features Preschool-Basics, Learning through Songs, Creativity & Imagination, Literacy, Numeracy, Language Learning, Speech Development, sing-a-long, Dance, Music, Cognitive Development themes.","ageRange":"2-5","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":4,"interactivityLevel":"High","dialogueIntensity":"High","soundEffectsLevel":"Moderate","musicTempo":"Moderate","totalMusicLevel":"Very High","totalSoundEffectTimeLevel":"Moderate","sceneFrequency":"Moderate","animationStyle":"Live-Action with Colorful Costumes and Simple Sets","themes":["Preschool-Basics","Learning through Songs","Creativity & Imagination","Literacy","Numeracy","Language Learning","Speech Development","sing-a-long","Dance","Music","Cognitive Development"],"friendshipRating":2,"problemSolvingRating":2,"relatableSituationsRating":2,"emotionalIntelligenceRating":3,"creativityRating":3,"educationalValueRating":4,"overallRating":2,"availableOn":["YouTube"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/mother-goose-club.jpg","id":155},{"name":"Mr Bean Cartoon","description":"Mr Bean Cartoon is a 2D Digital Animation with exaggerated expressions. Color Palette: Bright colors with bold contrasts. show for 6-10 year olds. It features Creativity & Imagination, Humor, Entertainment, Problem Solving, Mischievous Behaviour themes.","ageRange":"6-10","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":4,"interactivityLevel":"Low","dialogueIntensity":"Low-Moderate","soundEffectsLevel":"High","musicTempo":"Moderate-High","totalMusicLevel":"High","totalSoundEffectTimeLevel":"High","sceneFrequency":"High","animationStyle":"2D Digital Animation with exaggerated expressions. Color Palette: Bright colors with bold contrasts.","themes":["Creativity & Imagination","Humor","Entertainment","Problem Solving","Mischievous Behaviour"],"friendshipRating":2,"problemSolvingRating":3,"relatableSituationsRating":3,"emotionalIntelligenceRating":1,"creativityRating":4,"educationalValueRating":2,"overallRating":2,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/mr-bean-cartoon.jpeg","id":156},{"name":"Mr. Monkey, Monkey Mechanic","description":"Mr. Monkey, Monkey Mechanic is a 2D Digital Animation with bright colors. Color Palette: Vibrant and engaging. show for 3-6 year olds. It features Creativity & Imagination, STEM, Mechanics, Problem Solving, Engineering Concepts themes.","ageRange":"3-6","episodeLength":5,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"Moderate","dialogueIntensity":"Low-Moderate","soundEffectsLevel":"Moderate-High","musicTempo":"Moderate","totalMusicLevel":"High","totalSoundEffectTimeLevel":"High","sceneFrequency":"Moderate","animationStyle":"2D Digital Animation with bright colors. Color Palette: Vibrant and engaging.","themes":["Creativity & Imagination","STEM","Mechanics","Problem Solving","Engineering Concepts"],"friendshipRating":1,"problemSolvingRating":4,"relatableSituationsRating":1,"emotionalIntelligenceRating":1,"creativityRating":3,"educationalValueRating":4,"overallRating":3,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/mr-monkey-monkey-mechanic.jpg","id":157},{"name":"MyGov Sign Language for Kids-ASL","description":"MyGov Sign Language for Kids-ASL is a Live-action demonstrations combined with animated segments to illustrate signs and concepts effectively. show for 0-5 year olds. It features Memory Exercises, American Sign Language, Communication & Expression, Deaf Community, Visual Demonstrations, Language Learning, Cognitive Development, Motor Skills, Literacy themes.","ageRange":"0-5","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"High","dialogueIntensity":"High","soundEffectsLevel":"Moderate","musicTempo":"Moderate","totalMusicLevel":"High","totalSoundEffectTimeLevel":"Moderate","sceneFrequency":"Moderate","animationStyle":"Live-action demonstrations combined with animated segments to illustrate signs and concepts effectively.","themes":["Memory Exercises","American Sign Language","Communication & Expression","Deaf Community","Visual Demonstrations","Language Learning","Cognitive Development","Motor Skills","Literacy"],"friendshipRating":1,"problemSolvingRating":3,"relatableSituationsRating":2,"emotionalIntelligenceRating":3,"creativityRating":3,"educationalValueRating":3,"overallRating":3,"availableOn":["YouTube"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/mygosignlanguageforkids-asl.jpg","id":158},{"name":"Nanalan","description":"Nanalan is a Puppet-based animation with simple sets and characters, creating a unique and engaging visual experience show for 2-5 year olds. It features Early Childhood experiences, Creativity & Imagination, Preschool-Basics, Communication & Expression, Vocabulary, Social-Emotional, Social Development, Relatable Situations themes.","ageRange":"2-5","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":1,"interactivityLevel":"Moderate","dialogueIntensity":"Moderate","soundEffectsLevel":"Low-Moderate","musicTempo":"Low-Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Low-Moderate","sceneFrequency":"Low","animationStyle":"Puppet-based animation with simple sets and characters, creating a unique and engaging visual experience","themes":["Early Childhood experiences","Creativity & Imagination","Preschool-Basics","Communication & Expression","Vocabulary","Social-Emotional","Social Development","Relatable Situations"],"friendshipRating":3,"problemSolvingRating":3,"relatableSituationsRating":4,"emotionalIntelligenceRating":3,"creativityRating":4,"educationalValueRating":4,"overallRating":5,"availableOn":["YouTube"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/nanalan.jpeg","id":159},{"name":"Nick Cope's Popcast","description":"Nick Cope's Popcast is a Live-action educational series with some animation and CGI. Color Palette: Natural colors with bright visuals during explanations. show for 3-6 year olds. It features Communication & Expression, Creativity & Imagination, Social-Emotional, Emotional Intelligence, sing-a-long, Dance, Music themes.","ageRange":"3-6","episodeLength":5,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"High","dialogueIntensity":"Moderate","soundEffectsLevel":"Moderate","musicTempo":"High","totalMusicLevel":"High","totalSoundEffectTimeLevel":"Moderate","sceneFrequency":"Moderate","animationStyle":"Live-action educational series with some animation and CGI. Color Palette: Natural colors with bright visuals during explanations.","themes":["Communication & Expression","Creativity & Imagination","Social-Emotional","Emotional Intelligence","sing-a-long","Dance","Music"],"friendshipRating":2,"problemSolvingRating":3,"relatableSituationsRating":4,"emotionalIntelligenceRating":4,"creativityRating":4,"educationalValueRating":1,"overallRating":3,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/nick-copes-popcast.jpg","id":160},{"name":"Ninja Kids","description":"Ninja Kids is a Live-action videos with dynamic editing and occasional special effects to enhance the viewing experience. show for 5-12 year olds. It features Superhero Themes, Creativity & Imagination, Positive Role Models, Physical Fitness, Exercise, Adventure, Entertainment, Skit Comedy, Choreographed Action Scenes, Outdoor Exploration, Courage, Confidence Building, Martial Arts, Mild Violent themes, Mischievous Behaviour themes.","ageRange":"5-12","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":5,"interactivityLevel":"Moderate","dialogueIntensity":"High","soundEffectsLevel":"High","musicTempo":"High","totalMusicLevel":"High","totalSoundEffectTimeLevel":"High","sceneFrequency":"High","animationStyle":"Live-action videos with dynamic editing and occasional special effects to enhance the viewing experience.","themes":["Superhero Themes","Creativity & Imagination","Positive Role Models","Physical Fitness","Exercise","Adventure","Entertainment","Skit Comedy","Choreographed Action Scenes","Outdoor Exploration","Courage","Confidence Building","Martial Arts","Mild Violent themes","Mischievous Behaviour"],"friendshipRating":1,"problemSolvingRating":1,"relatableSituationsRating":1,"emotionalIntelligenceRating":1,"creativityRating":4,"educationalValueRating":1,"overallRating":1,"availableOn":["YouTube"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/ninja-kids.jpg","id":161},{"name":"Ninjago","description":"Ninjago is a 3D CGI Animation with Detailed and Dynamic Visuals show for 7-12 year olds. It features Complex & Emotional Themes, Teamwork, Perseverance, Courage, Problem Solving, Morality, Entertainment, Mild Fantasy Violence, Mild Violent themes themes.","ageRange":"7-12","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":5,"interactivityLevel":"Low-Moderate","dialogueIntensity":"High","soundEffectsLevel":"Very High","musicTempo":"High","totalMusicLevel":"High","totalSoundEffectTimeLevel":"Very High","sceneFrequency":"Very High","animationStyle":"3D CGI Animation with Detailed and Dynamic Visuals","themes":["Complex & Emotional Themes","Teamwork","Perseverance","Courage","Problem Solving","Morality","Entertainment","Mild Fantasy Violence","Mild Violent themes"],"friendshipRating":2,"problemSolvingRating":4,"relatableSituationsRating":2,"emotionalIntelligenceRating":2,"creativityRating":2,"educationalValueRating":3,"overallRating":1,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/ninjago.jpg","id":162},{"name":"Noddy Original Series (1998)","description":"Noddy Original Series (1998) is a Stop-Motion with simple models. Color Palette: Bright but soft colors. show for 3-6 year olds. It features Friendship, Problem Solving, Adventure, Social-Emotional, Social Development themes.","ageRange":"3-6","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":2,"interactivityLevel":"Low-Moderate","dialogueIntensity":"Low-Moderate","soundEffectsLevel":"Low-Moderate","musicTempo":"Moderate","totalMusicLevel":"Low-Moderate","totalSoundEffectTimeLevel":"Low-Moderate","sceneFrequency":"Low","animationStyle":"Stop-Motion with simple models. Color Palette: Bright but soft colors.","themes":["Friendship","Problem Solving","Adventure","Social-Emotional","Social Development"],"friendshipRating":4,"problemSolvingRating":3,"relatableSituationsRating":4,"emotionalIntelligenceRating":3,"creativityRating":2,"educationalValueRating":2,"overallRating":4,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/noddy-original-series-(1998).jpeg","id":163},{"name":"Noddy, Toyland Detective (2016)","description":"Noddy, Toyland Detective (2016) is a 3D CGI animation with bright and vivid colors show for 4-7 year olds. It features Friendship, Problem Solving, Adventure, Social-Emotional, Social Development themes.","ageRange":"4-7","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":4,"interactivityLevel":"Low-Moderate","dialogueIntensity":"High","soundEffectsLevel":"Moderate-High","musicTempo":"High","totalMusicLevel":"High","totalSoundEffectTimeLevel":"High","sceneFrequency":"Moderate-High","animationStyle":"3D CGI animation with bright and vivid colors","themes":["Friendship","Problem Solving","Adventure","Social-Emotional","Social Development"],"friendshipRating":3,"problemSolvingRating":4,"relatableSituationsRating":4,"emotionalIntelligenceRating":3,"creativityRating":3,"educationalValueRating":1,"overallRating":2,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/noddy-toyland-detective-(2016).jpeg","id":164},{"name":"Noodle & Pals","description":"Noodle & Pals is a 2D digital animation with a hand-drawn look. Bright and cheerful colors with simple backgrounds show for 2-5 year olds. It features Preschool-Basics, Social-Emotional, Language Learning, Cognitive Development, Music, Literacy, Numeracy themes.","ageRange":"2-5","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"High","dialogueIntensity":"Moderate-High","soundEffectsLevel":"Moderate","musicTempo":"Moderate","totalMusicLevel":"Very High","totalSoundEffectTimeLevel":"Moderate","sceneFrequency":"Moderate","animationStyle":"2D digital animation with a hand-drawn look. Bright and cheerful colors with simple backgrounds","themes":["Preschool-Basics","Social-Emotional","Language Learning","Cognitive Development","Music","Literacy","Numeracy"],"friendshipRating":2,"problemSolvingRating":2,"relatableSituationsRating":4,"emotionalIntelligenceRating":1,"creativityRating":1,"educationalValueRating":3,"overallRating":3,"availableOn":["YouTube"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/noodle-and-pals.jpg","id":165},{"name":"Noodle and Bun","description":"Noodle and Bun is a 3D CGI Animation with Detailed and Dynamic Visuals show for 3-8 year olds. It features Storytelling without Dialogue, Creativity & Imagination, Humor, Silly Comedy, Captivating Visuals, Friendship, Animals themes.","ageRange":"3-8","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":5,"interactivityLevel":"Low","dialogueIntensity":"None","soundEffectsLevel":"Moderate-High","musicTempo":"Moderate","totalMusicLevel":"High","totalSoundEffectTimeLevel":"Moderate-High","sceneFrequency":"Moderate","animationStyle":"3D CGI Animation with Detailed and Dynamic Visuals","themes":["Storytelling without Dialogue","Creativity & Imagination","Humor","Silly Comedy","Captivating Visuals","Friendship","Animals"],"friendshipRating":4,"problemSolvingRating":1,"relatableSituationsRating":1,"emotionalIntelligenceRating":1,"creativityRating":4,"educationalValueRating":2,"overallRating":1,"availableOn":["YouTube"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/noodle-and-bun.jpg","id":166},{"name":"Numberblocks (2017-present)","description":"Numberblocks (2017-present) is a 3D CGI animation show for 3-6 year olds. It features Elementary-Basics, Numeracy, Problem Solving, Math, Repetitive Learning themes.","ageRange":"3-6","episodeLength":5,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"High","dialogueIntensity":"Moderate","soundEffectsLevel":"Moderate","musicTempo":"Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Moderate","sceneFrequency":"Moderate","animationStyle":"3D CGI animation","themes":["Elementary-Basics","Numeracy","Problem Solving","Math","Repetitive Learning"],"friendshipRating":1,"problemSolvingRating":3,"relatableSituationsRating":2,"emotionalIntelligenceRating":3,"creativityRating":1,"educationalValueRating":4,"overallRating":3,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/numberblocks-(2017-present).jpg","id":167},{"name":"Odd Squad","description":"Odd Squad is a Combination of live-action and CGI animation. show for 6-10 year olds. It features STEM, Math, Numeracy, Teamwork, Critical Thinking, Problem Solving themes.","ageRange":"6-10","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":5,"interactivityLevel":"High","dialogueIntensity":"High","soundEffectsLevel":"High","musicTempo":"High","totalMusicLevel":"High","totalSoundEffectTimeLevel":"High","sceneFrequency":"High","animationStyle":"Combination of live-action and CGI animation.","themes":["STEM","Math","Numeracy","Teamwork","Critical Thinking","Problem Solving"],"friendshipRating":1,"problemSolvingRating":4,"relatableSituationsRating":1,"emotionalIntelligenceRating":1,"creativityRating":2,"educationalValueRating":4,"overallRating":1,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/odd-squad.jpg","id":168},{"name":"Oggy and the Cockroaches","description":"Oggy and the Cockroaches is a 2D Digital Animation with exaggerated and dynamic character movements. show for 6-10 year olds. It features Creativity & Imagination, Humor, Problem Solving, Entertainment, Slapstick Comedy, Mischievous Behaviour themes.","ageRange":"6-10","episodeLength":5,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":5,"interactivityLevel":"Low-Moderate","dialogueIntensity":"None","soundEffectsLevel":"Very High","musicTempo":"High","totalMusicLevel":"High","totalSoundEffectTimeLevel":"Very High","sceneFrequency":"Very High","animationStyle":"2D Digital Animation with exaggerated and dynamic character movements.","themes":["Creativity & Imagination","Humor","Problem Solving","Entertainment","Slapstick Comedy","Mischievous Behaviour"],"friendshipRating":2,"problemSolvingRating":3,"relatableSituationsRating":1,"emotionalIntelligenceRating":1,"creativityRating":3,"educationalValueRating":1,"overallRating":1,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/oggy-and-the-cockroaches.jpg","id":169},{"name":"Olivia","description":"Olivia is a 3D CGI Animation with a unique visual style resembling charcoal drawings with splashes of color. show for 3-6 year olds. It features Creativity & Imagination, Social-Emotional, Problem Solving, Teamwork, Perseverance themes.","ageRange":"3-6","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"Moderate","dialogueIntensity":"Moderate","soundEffectsLevel":"Low-Moderate","musicTempo":"Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Low-Moderate","sceneFrequency":"Moderate","animationStyle":"3D CGI Animation with a unique visual style resembling charcoal drawings with splashes of color.","themes":["Creativity & Imagination","Social-Emotional","Problem Solving","Teamwork","Perseverance"],"friendshipRating":2,"problemSolvingRating":3,"relatableSituationsRating":4,"emotionalIntelligenceRating":3,"creativityRating":4,"educationalValueRating":1,"overallRating":3,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/olivia.jpg","id":170},{"name":"Omar and hana","description":"Omar and hana is a 2D Digital Animation with bright colors. Color Palette: Vibrant but not overwhelming. show for 3-7 year olds. It features Cultural & Social, Cultures & Traditions, Religion, Family Values, Morality, Emotional Intelligence, sing-a-long, Relatable Situations, Family Relationships themes.","ageRange":"3-7","episodeLength":5,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"High","dialogueIntensity":"Moderate-High","soundEffectsLevel":"Moderate","musicTempo":"Moderate","totalMusicLevel":"Moderate-High","totalSoundEffectTimeLevel":"Moderate","sceneFrequency":"Moderate","animationStyle":"2D Digital Animation with bright colors. Color Palette: Vibrant but not overwhelming.","themes":["Cultural & Social","Cultures & Traditions","Religion","Family Values","Morality","Emotional Intelligence","sing-a-long","Relatable Situations","Family Relationships"],"friendshipRating":4,"problemSolvingRating":1,"relatableSituationsRating":3,"emotionalIntelligenceRating":4,"creativityRating":3,"educationalValueRating":3,"overallRating":3,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/omar-and-hana.jpg","id":171},{"name":"One Piece","description":"One Piece is a Traditional 2D Animation with a distinctive anime style, featuring exaggerated expressions, dynamic action sequences, and detailed environments. show for 12+ year olds. It features Cultures & Traditions, Creativity & Imagination, Complex & Emotional Themes, Teamwork, Perseverance, Morality, Entertainment, Humor, Slapstick Comedy, Emotional Intelligence, Friendship, Social-Emotional, Adventure, Mild Violent themes, Mild Fantasy Violence, Mild Peril, Mild Mature Themes themes.","ageRange":"12+","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":5,"interactivityLevel":"Moderate","dialogueIntensity":"High","soundEffectsLevel":"High","musicTempo":"Moderate-High","totalMusicLevel":"High","totalSoundEffectTimeLevel":"High","sceneFrequency":"Moderate-High","animationStyle":"Traditional 2D Animation with a distinctive anime style, featuring exaggerated expressions, dynamic action sequences, and detailed environments.","themes":["Cultures & Traditions","Creativity & Imagination","Complex & Emotional Themes","Teamwork","Perseverance","Morality","Entertainment","Humor","Slapstick Comedy","Emotional Intelligence","Friendship","Social-Emotional","Adventure","Mild Violent themes","Mild Fantasy Violence","Mild Peril","Mild Mature Themes"],"friendshipRating":3,"problemSolvingRating":3,"relatableSituationsRating":4,"emotionalIntelligenceRating":4,"creativityRating":3,"educationalValueRating":3,"overallRating":1,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/one-piece.jpg","id":172},{"name":"Oswald","description":"Oswald is a 2D digital animation show for 3-6 year olds. It features Friendship, Problem Solving, Social-Emotional, Social Development, Critical Thinking, Conflict Resolution, Emotional Intelligence, Relatable Situations, Family Relationships themes.","ageRange":"3-6","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":2,"interactivityLevel":"High","dialogueIntensity":"Moderate","soundEffectsLevel":"Low","musicTempo":"Low-Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Low","sceneFrequency":"Low-Moderate","animationStyle":"2D digital animation","themes":["Friendship","Problem Solving","Social-Emotional","Social Development","Critical Thinking","Conflict Resolution","Emotional Intelligence","Relatable Situations","Family Relationships"],"friendshipRating":4,"problemSolvingRating":3,"relatableSituationsRating":3,"emotionalIntelligenceRating":3,"creativityRating":3,"educationalValueRating":2,"overallRating":4,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/oswald.jpg","id":173},{"name":"Out of the Box","description":"Out of the Box is a Live-action with real actors. show for 3-7 year olds. It features Creativity & Imagination, Arts & Crafts, Music, Motor Skills, Social-Emotional, Colours, Shapes, Art themes.","ageRange":"3-7","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"High","dialogueIntensity":"Moderate-High","soundEffectsLevel":"Moderate","musicTempo":"Moderate","totalMusicLevel":"High","totalSoundEffectTimeLevel":"Low-Moderate","sceneFrequency":"Moderate","animationStyle":"Live-action with real actors.","themes":["Creativity & Imagination","Arts & Crafts","Music","Motor Skills","Social-Emotional","Colours","Shapes","Art"],"friendshipRating":2,"problemSolvingRating":3,"relatableSituationsRating":4,"emotionalIntelligenceRating":2,"creativityRating":4,"educationalValueRating":2,"overallRating":3,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/out-of-the-box.jpeg","id":174},{"name":"Pajanimals","description":"Pajanimals is a Live-action puppetry with colorful characters. show for 2-5 year olds. It features Overcoming Fears, Bedtime Routines, Social-Emotional, Relaxation, Family Relationships, Emotional Intelligence themes.","ageRange":"2-5","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":2,"interactivityLevel":"Moderate","dialogueIntensity":"Moderate","soundEffectsLevel":"Low-Moderate","musicTempo":"Low-Moderate","totalMusicLevel":"High","totalSoundEffectTimeLevel":"Low","sceneFrequency":"Low-Moderate","animationStyle":"Live-action puppetry with colorful characters.","themes":["Overcoming Fears","Bedtime Routines","Social-Emotional","Relaxation","Family Relationships","Emotional Intelligence"],"friendshipRating":4,"problemSolvingRating":3,"relatableSituationsRating":4,"emotionalIntelligenceRating":4,"creativityRating":2,"educationalValueRating":3,"overallRating":4,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/Pajanimals.jpg","id":175},{"name":"Paw patrol","description":"Paw patrol is a 3D CGI animation show for 3-6 year olds. It features Community Service, Teamwork, Problem Solving, Courage themes.","ageRange":"3-6","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":5,"interactivityLevel":"Low","dialogueIntensity":"High","soundEffectsLevel":"Very High","musicTempo":"High","totalMusicLevel":"High","totalSoundEffectTimeLevel":"High","sceneFrequency":"High","animationStyle":"3D CGI animation","themes":["Community Service","Teamwork","Problem Solving","Courage"],"friendshipRating":3,"problemSolvingRating":3,"relatableSituationsRating":1,"emotionalIntelligenceRating":1,"creativityRating":1,"educationalValueRating":2,"overallRating":1,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/paw-patrol.jpeg","id":176},{"name":"Peg+Cat","description":"Peg+Cat is a 2D Digital Animation with a hand-drawn, sketch-like aesthetic. show for 4-7 year olds. It features Math, Problem Solving, Critical Thinking, Adventure, Perseverance themes.","ageRange":"4-7","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"High","dialogueIntensity":"High","soundEffectsLevel":"Moderate","musicTempo":"Moderate","totalMusicLevel":"High","totalSoundEffectTimeLevel":"Moderate","sceneFrequency":"Moderate","animationStyle":"2D Digital Animation with a hand-drawn, sketch-like aesthetic.","themes":["Math","Problem Solving","Critical Thinking","Adventure","Perseverance"],"friendshipRating":2,"problemSolvingRating":4,"relatableSituationsRating":1,"emotionalIntelligenceRating":1,"creativityRating":1,"educationalValueRating":1,"overallRating":3,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/peg-cat.jpeg","id":177},{"name":"Peppa pig (2004-present)","description":"Peppa pig (2004-present) is a 2D Digital Animation with simple, flat designs. Bright but pastel-like colors with minimal shading. show for 2-5 year olds. It features Social-Emotional, Family Relationships, Friendship, Routine, Social Development, Relatable Situations, Tantrums, Mischievous Behaviour themes.","ageRange":"2-5","episodeLength":5,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":2,"interactivityLevel":"Moderate","dialogueIntensity":"Moderate","soundEffectsLevel":"Low-Moderate","musicTempo":"Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Low","sceneFrequency":"Moderate","animationStyle":"2D Digital Animation with simple, flat designs. Bright but pastel-like colors with minimal shading.","themes":["Social-Emotional","Family Relationships","Friendship","Routine","Social Development","Relatable Situations","Tantrums","Mischievous Behaviour"],"friendshipRating":3,"problemSolvingRating":2,"relatableSituationsRating":3,"emotionalIntelligenceRating":2,"creativityRating":2,"educationalValueRating":2,"overallRating":4,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/peppa-pig-(2004-present).jpg","id":178},{"name":"Pete The Cat","description":"Pete The Cat is a 2D Digital animation with a hand-drawn look show for 3-7 year olds. It features Creativity & Imagination, Music, Emotional Intelligence, Problem Solving themes.","ageRange":"3-7","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":2,"interactivityLevel":"Moderate","dialogueIntensity":"Moderate","soundEffectsLevel":"Low-Moderate","musicTempo":"Low-Moderate","totalMusicLevel":"High","totalSoundEffectTimeLevel":"Low","sceneFrequency":"Moderate","animationStyle":"2D Digital animation with a hand-drawn look","themes":["Creativity & Imagination","Music","Emotional Intelligence","Problem Solving"],"friendshipRating":2,"problemSolvingRating":3,"relatableSituationsRating":2,"emotionalIntelligenceRating":3,"creativityRating":3,"educationalValueRating":1,"overallRating":4,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/pete-the-cat-3272.jpg","id":179},{"name":"Peter Rabbit(2012-2016)","description":"Peter Rabbit(2012-2016) is a 3D CGI animation show for 4-8 year olds. It features Environmental Awareness, Adventure, Problem Solving, Nature, Teamwork, Courage themes.","ageRange":"4-8","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"Moderate","dialogueIntensity":"Moderate","soundEffectsLevel":"Moderate-High","musicTempo":"Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Moderate","sceneFrequency":"Moderate","animationStyle":"3D CGI animation","themes":["Environmental Awareness","Adventure","Problem Solving","Nature","Teamwork","Courage"],"friendshipRating":2,"problemSolvingRating":3,"relatableSituationsRating":1,"emotionalIntelligenceRating":1,"creativityRating":2,"educationalValueRating":2,"overallRating":3,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/peter-rabbit(2012-2016).jpg","id":180},{"name":"Phineas and Ferb","description":"Phineas and Ferb is a 2D Digital Animation with stylized, geometric designs. Bright and vivid colors with detailed backgrounds. show for 8-12 year olds. It features STEM, Creativity & Imagination, Problem Solving, Curiosity, Adventure, Humor, Family Relationships, Entertainment, Engineering Concepts, Mischievous Behaviour themes.","ageRange":"8-12","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":5,"interactivityLevel":"Low","dialogueIntensity":"High","soundEffectsLevel":"High","musicTempo":"Moderate-High","totalMusicLevel":"High","totalSoundEffectTimeLevel":"High","sceneFrequency":"High","animationStyle":"2D Digital Animation with stylized, geometric designs. Bright and vivid colors with detailed backgrounds.","themes":["STEM","Creativity & Imagination","Problem Solving","Curiosity","Adventure","Humor","Family Relationships","Entertainment","Engineering Concepts","Mischievous Behaviour"],"friendshipRating":4,"problemSolvingRating":4,"relatableSituationsRating":2,"emotionalIntelligenceRating":3,"creativityRating":4,"educationalValueRating":4,"overallRating":1,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/phineas-and-ferb.jpeg","id":181},{"name":"Pingu","description":"Pingu is a Traditional Stop-Motion (claymation) show for 2-5 year olds. It features Social-Emotional, Family Relationships, Emotional Intelligence, Mischievous Behaviour themes.","ageRange":"2-5","episodeLength":5,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":1,"interactivityLevel":"Low","dialogueIntensity":"None","soundEffectsLevel":"Low","musicTempo":"Low-Moderate","totalMusicLevel":"Low-Moderate","totalSoundEffectTimeLevel":"Low-Moderate","sceneFrequency":"Low","animationStyle":"Traditional Stop-Motion (claymation)","themes":["Social-Emotional","Family Relationships","Emotional Intelligence","Mischievous Behaviour"],"friendshipRating":3,"problemSolvingRating":2,"relatableSituationsRating":3,"emotionalIntelligenceRating":4,"creativityRating":1,"educationalValueRating":3,"overallRating":5,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/pingu.jpeg","id":182},{"name":"Pinkalicious & Peterrific","description":"Pinkalicious & Peterrific is a 2D digital animation with bright colors and exaggerated, stylized designs. Bright and vivid colors with high contrast. show for 3-6 year olds. It features Creativity & Imagination, Art, Music, Problem Solving, Teamwork, Motor Skills themes.","ageRange":"3-6","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":4,"interactivityLevel":"High","dialogueIntensity":"High","soundEffectsLevel":"High","musicTempo":"High","totalMusicLevel":"High","totalSoundEffectTimeLevel":"High","sceneFrequency":"High","animationStyle":"2D digital animation with bright colors and exaggerated, stylized designs. Bright and vivid colors with high contrast.","themes":["Creativity & Imagination","Art","Music","Problem Solving","Teamwork","Motor Skills"],"friendshipRating":1,"problemSolvingRating":3,"relatableSituationsRating":1,"emotionalIntelligenceRating":3,"creativityRating":4,"educationalValueRating":1,"overallRating":2,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/pinkalicious-and-peterrific.jpg","id":183},{"name":"Pip and Posy","description":"Pip and Posy is a 3D CGI animation delivered slowly and smoothly show for 2-5 year olds. It features Cause and Effect, Friendship, Social-Emotional, Problem Solving, Emotional Intelligence, Conflict Resolution, Relatable Situations, Social Development themes.","ageRange":"2-5","episodeLength":5,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"Moderate","dialogueIntensity":"Moderate","soundEffectsLevel":"Moderate","musicTempo":"Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Moderate","sceneFrequency":"Moderate","animationStyle":"3D CGI animation delivered slowly and smoothly","themes":["Cause and Effect","Friendship","Social-Emotional","Problem Solving","Emotional Intelligence","Conflict Resolution","Relatable Situations","Social Development"],"friendshipRating":3,"problemSolvingRating":3,"relatableSituationsRating":4,"emotionalIntelligenceRating":4,"creativityRating":1,"educationalValueRating":2,"overallRating":3,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/pip-and-posy.jpeg","id":184},{"name":"Pipi Mā","description":"Pipi Mā is a 2D Animation with Cultural Themes and Soft Colors show for 2-6 year olds. It features Te reo Māori language development, Cultures & Traditions, Cultural Appreciation, Māori immersion preschool, Cultural & Social, Numeracy, Literacy, Traditional Narratives, sing-a-long themes.","ageRange":"2-6","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"High","dialogueIntensity":"Moderate-High","soundEffectsLevel":"Moderate","musicTempo":"Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Moderate","sceneFrequency":"Low-Moderate","animationStyle":"2D Animation with Cultural Themes and Soft Colors","themes":["Te reo Māori language development","Cultures & Traditions","Cultural Appreciation","Māori immersion preschool","Cultural & Social","Numeracy","Literacy","Traditional Narratives","sing-a-long"],"friendshipRating":1,"problemSolvingRating":1,"relatableSituationsRating":3,"emotionalIntelligenceRating":1,"creativityRating":2,"educationalValueRating":3,"overallRating":3,"availableOn":["YouTube"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/pipi-mā.jpg","id":185},{"name":"PJ Masks","description":"PJ Masks is a 3D CGI Animation with bright and vibrant colors. Color Palette: Bright and cheerful colors with high saturation. show for 3-6 year olds. It features Superhero Themes, Creativity & Imagination, Entertainment, Morality, Social Development, Social-Emotional themes.","ageRange":"3-6","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":5,"interactivityLevel":"Low-Moderate","dialogueIntensity":"High","soundEffectsLevel":"Very High","musicTempo":"High","totalMusicLevel":"High","totalSoundEffectTimeLevel":"Very High","sceneFrequency":"Very High","animationStyle":"3D CGI Animation with bright and vibrant colors. Color Palette: Bright and cheerful colors with high saturation.","themes":["Superhero Themes","Creativity & Imagination","Entertainment","Morality","Social Development","Social-Emotional"],"friendshipRating":1,"problemSolvingRating":3,"relatableSituationsRating":3,"emotionalIntelligenceRating":3,"creativityRating":4,"educationalValueRating":2,"overallRating":1,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/pj-masks.jpeg","id":186},{"name":"Planet earth","description":"Planet earth is a Live-action nature documentary with high-definition footage. Natural colors showcasing diverse ecosystems. show for 8+ year olds. It features Environmental Awareness, Natural World, Nature, Natural History, Wildlife Exploration, Science, Realistic Depictions of Nature themes.","ageRange":"8+","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"Low-Moderate","dialogueIntensity":"Low-Moderate","soundEffectsLevel":"Moderate","musicTempo":"Moderate","totalMusicLevel":"High","totalSoundEffectTimeLevel":"Low-Moderate","sceneFrequency":"Moderate","animationStyle":"Live-action nature documentary with high-definition footage. Natural colors showcasing diverse ecosystems.","themes":["Environmental Awareness","Natural World","Nature","Natural History","Wildlife Exploration","Science","Realistic Depictions of Nature"],"friendshipRating":1,"problemSolvingRating":2,"relatableSituationsRating":1,"emotionalIntelligenceRating":2,"creativityRating":1,"educationalValueRating":3,"overallRating":3,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/planet-earth.jpeg","id":187},{"name":"Play School","description":"Play School is a Live-action with real actors. show for 2-5 year olds. It features Creativity & Imagination, Preschool-Basics, Numeracy, Literacy, Shapes, Colours, Social-Emotional, Problem Solving, sing-a-long themes.","ageRange":"2-5","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":2,"interactivityLevel":"High","dialogueIntensity":"Moderate","soundEffectsLevel":"Low-Moderate","musicTempo":"Moderate","totalMusicLevel":"Moderate-High","totalSoundEffectTimeLevel":"Low-Moderate","sceneFrequency":"Moderate","animationStyle":"Live-action with real actors.","themes":["Creativity & Imagination","Preschool-Basics","Numeracy","Literacy","Shapes","Colours","Social-Emotional","Problem Solving","sing-a-long"],"friendshipRating":3,"problemSolvingRating":4,"relatableSituationsRating":3,"emotionalIntelligenceRating":1,"creativityRating":3,"educationalValueRating":3,"overallRating":4,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/play-school.jpeg","id":188},{"name":"Pocoyo","description":"Pocoyo is a 3D CGI animation delivered slowly and smoothly show for 2-4 year olds. It features Creativity & Imagination, Cultural & Social, Language Learning, Social-Emotional, Problem Solving, Teamwork, Emotional Intelligence, Curiosity, Cognitive Development themes.","ageRange":"2-4","episodeLength":5,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"High","dialogueIntensity":"Low","soundEffectsLevel":"Moderate","musicTempo":"Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Moderate","sceneFrequency":"Low-Moderate","animationStyle":"3D CGI animation delivered slowly and smoothly","themes":["Creativity & Imagination","Cultural & Social","Language Learning","Social-Emotional","Problem Solving","Teamwork","Emotional Intelligence","Curiosity","Cognitive Development"],"friendshipRating":2,"problemSolvingRating":4,"relatableSituationsRating":3,"emotionalIntelligenceRating":3,"creativityRating":3,"educationalValueRating":4,"overallRating":3,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/pocoyo.jpeg","id":189},{"name":"Pokemon","description":"Pokemon is a traditional and Digital hand-drawn 2D animation. Anime style show for 7-12 year olds. It features Environmental Awareness, Overcoming Fears, Friendship, Teamwork, Wildlife Exploration, Entertainment, Humor, Exploration, Perseverance, Mild Fantasy Violence themes.","ageRange":"7-12","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":5,"interactivityLevel":"Low","dialogueIntensity":"High","soundEffectsLevel":"High","musicTempo":"High","totalMusicLevel":"High","totalSoundEffectTimeLevel":"High","sceneFrequency":"High","animationStyle":"traditional and Digital hand-drawn 2D animation. Anime style","themes":["Environmental Awareness","Overcoming Fears","Friendship","Teamwork","Wildlife Exploration","Entertainment","Humor","Exploration","Perseverance","Mild Fantasy Violence"],"friendshipRating":3,"problemSolvingRating":1,"relatableSituationsRating":2,"emotionalIntelligenceRating":2,"creativityRating":3,"educationalValueRating":2,"overallRating":1,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/pokemon.jpg","id":190},{"name":"Postman Pat (1981–2008)","description":"Postman Pat (1981–2008) is a Traditional Stop-Motion animation show for 3-6 year olds. It features Community Service, Problem Solving, Responsibility, Teamwork, Entertainment themes.","ageRange":"3-6","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":2,"interactivityLevel":"Low","dialogueIntensity":"Moderate","soundEffectsLevel":"Low-Moderate","musicTempo":"Low-Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Low-Moderate","sceneFrequency":"Low-Moderate","animationStyle":"Traditional Stop-Motion animation","themes":["Community Service","Problem Solving","Responsibility","Teamwork","Entertainment"],"friendshipRating":2,"problemSolvingRating":4,"relatableSituationsRating":1,"emotionalIntelligenceRating":1,"creativityRating":1,"educationalValueRating":3,"overallRating":4,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/postman-pat-(1981–2008).jpg","id":191},{"name":"Postman Pat: Special Delivery Service (2008–2017)","description":"Postman Pat: Special Delivery Service (2008–2017) is a 3D CGI animation show for 3-6 year olds. It features Community Service, Problem Solving, Responsibility, Teamwork, Entertainment themes.","ageRange":"3-6","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":4,"interactivityLevel":"Low","dialogueIntensity":"Moderate-High","soundEffectsLevel":"Moderate-High","musicTempo":"High","totalMusicLevel":"High","totalSoundEffectTimeLevel":"High","sceneFrequency":"High","animationStyle":"3D CGI animation","themes":["Community Service","Problem Solving","Responsibility","Teamwork","Entertainment"],"friendshipRating":2,"problemSolvingRating":3,"relatableSituationsRating":2,"emotionalIntelligenceRating":1,"creativityRating":3,"educationalValueRating":1,"overallRating":2,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/postman-pat-special-delivery-service.jpg","id":192},{"name":"Puffin Rock","description":"Puffin Rock is a Digital 2D animation show for 2-5 year olds. It features Environmental Awareness, Nature, Wildlife Exploration, Family Relationships, Problem Solving themes.","ageRange":"2-5","episodeLength":5,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":1,"interactivityLevel":"Moderate","dialogueIntensity":"Low","soundEffectsLevel":"Low","musicTempo":"Low","totalMusicLevel":"Low-Moderate","totalSoundEffectTimeLevel":"Low","sceneFrequency":"Low","animationStyle":"Digital 2D animation","themes":["Environmental Awareness","Nature","Wildlife Exploration","Family Relationships","Problem Solving"],"friendshipRating":4,"problemSolvingRating":4,"relatableSituationsRating":1,"emotionalIntelligenceRating":2,"creativityRating":2,"educationalValueRating":3,"overallRating":5,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/puffin-rock.jpg","id":193},{"name":"Puppy Dog Pals","description":"Puppy Dog Pals is a 3D CGI animation with bright and vivid colors. show for 3-6 year olds. It features Creativity & Imagination, Adventure, Problem Solving, Teamwork, Social-Emotional themes.","ageRange":"3-6","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":4,"interactivityLevel":"Moderate","dialogueIntensity":"High","soundEffectsLevel":"High","musicTempo":"High","totalMusicLevel":"High","totalSoundEffectTimeLevel":"High","sceneFrequency":"Low","animationStyle":"3D CGI animation with bright and vivid colors.","themes":["Creativity & Imagination","Adventure","Problem Solving","Teamwork","Social-Emotional"],"friendshipRating":3,"problemSolvingRating":4,"relatableSituationsRating":3,"emotionalIntelligenceRating":3,"creativityRating":3,"educationalValueRating":3,"overallRating":2,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/puppy-dog-pals.jpeg","id":194},{"name":"Raa Raa the Noisy Lion","description":"Raa Raa the Noisy Lion is a 3D CGI Animation with a soft aesthetic. Color Palette: Pastel colors and gentle hues. show for 2-5 year olds. It features Communication & Expression, Social-Emotional, Social Development, Friendship, Problem Solving, Emotional Intelligence themes.","ageRange":"2-5","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"Moderate","dialogueIntensity":"Moderate-High","soundEffectsLevel":"Moderate-High","musicTempo":"Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"High","sceneFrequency":"High","animationStyle":"3D CGI Animation with a soft aesthetic. Color Palette: Pastel colors and gentle hues.","themes":["Communication & Expression","Social-Emotional","Social Development","Friendship","Problem Solving","Emotional Intelligence"],"friendshipRating":4,"problemSolvingRating":3,"relatableSituationsRating":4,"emotionalIntelligenceRating":4,"creativityRating":2,"educationalValueRating":3,"overallRating":3,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/raa-raa-the-noisy-lion.jpg","id":195},{"name":"Rainbow Ruby","description":"Rainbow Ruby is a 3D CGI Animation with bright and vibrant colors. Color Palette: Bright and cheerful colors with high saturation. show for 3-7 year olds. It features Creativity & Imagination, Career Exploration, Curiosity, Emotional Intelligence, Fantasy Elements, Problem Solving, Social-Emotional themes.","ageRange":"3-7","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":5,"interactivityLevel":"Low-Moderate","dialogueIntensity":"High","soundEffectsLevel":"High","musicTempo":"Moderate-High","totalMusicLevel":"High","totalSoundEffectTimeLevel":"High","sceneFrequency":"High","animationStyle":"3D CGI Animation with bright and vibrant colors. Color Palette: Bright and cheerful colors with high saturation.","themes":["Creativity & Imagination","Career Exploration","Curiosity","Emotional Intelligence","Fantasy Elements","Problem Solving","Social-Emotional"],"friendshipRating":1,"problemSolvingRating":4,"relatableSituationsRating":3,"emotionalIntelligenceRating":3,"creativityRating":3,"educationalValueRating":2,"overallRating":1,"availableOn":["YouTube"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/rainbow-ruby.jpg","id":196},{"name":"Rapunzel's Tangled Adventure","description":"Rapunzel's Tangled Adventure is a 2D digital animation with bright colors and exaggerated, stylized designs. Bright and vivid colors with high contrast. show for 6-10 year olds. It features Creativity & Imagination, Life Lessons, Overcoming Fears, Adventure, Courage, Friendship, Emotional Intelligence, Problem Solving, Perseverance, Mild Intense Scenes themes.","ageRange":"6-10","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":5,"interactivityLevel":"Moderate","dialogueIntensity":"High","soundEffectsLevel":"Very High","musicTempo":"High","totalMusicLevel":"High","totalSoundEffectTimeLevel":"Very High","sceneFrequency":"Moderate","animationStyle":"2D digital animation with bright colors and exaggerated, stylized designs. Bright and vivid colors with high contrast.","themes":["Creativity & Imagination","Life Lessons","Overcoming Fears","Adventure","Courage","Friendship","Emotional Intelligence","Problem Solving","Perseverance","Mild Intense Scenes"],"friendshipRating":3,"problemSolvingRating":3,"relatableSituationsRating":4,"emotionalIntelligenceRating":4,"creativityRating":3,"educationalValueRating":1,"overallRating":1,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/rapunzels-tangled-adventure.jpg","id":197},{"name":"RC Action Channel","description":"RC Action Channel is a Live-action footage of RC vehicles in operation show for 2+ year olds. It features Engineering Concepts, Vehicle Themes, Vehicle Recognition, Machinery, Relaxation, Entertainment, Hobbies, Mechanics themes.","ageRange":"2+","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":2,"interactivityLevel":"Low","dialogueIntensity":"Low-Moderate","soundEffectsLevel":"High","musicTempo":"Moderate-High","totalMusicLevel":"High","totalSoundEffectTimeLevel":"High","sceneFrequency":"Moderate-High","animationStyle":"Live-action footage of RC vehicles in operation","themes":["Engineering Concepts","Vehicle Themes","Vehicle Recognition","Machinery","Relaxation","Entertainment","Hobbies","Mechanics"],"friendshipRating":1,"problemSolvingRating":1,"relatableSituationsRating":1,"emotionalIntelligenceRating":3,"creativityRating":2,"educationalValueRating":1,"overallRating":4,"availableOn":["YouTube"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/rc-action-channel.jpeg","id":198},{"name":"Reading rainbow","description":"Reading rainbow is a Combination of Live-Action and 2D Animation. Color Palette: Bright and primary colors. show for 5-9 year olds. It features Cultural & Social, Cultural Appreciation, Life Lessons, Positive Role Models, Creativity & Imagination, Social-Emotional, Literacy, Curiosity themes.","ageRange":"5-9","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":2,"interactivityLevel":"High","dialogueIntensity":"Moderate","soundEffectsLevel":"Low-Moderate","musicTempo":"Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Low-Moderate","sceneFrequency":"High","animationStyle":"Combination of Live-Action and 2D Animation. Color Palette: Bright and primary colors.","themes":["Cultural & Social","Cultural Appreciation","Life Lessons","Positive Role Models","Creativity & Imagination","Social-Emotional","Literacy","Curiosity"],"friendshipRating":2,"problemSolvingRating":3,"relatableSituationsRating":4,"emotionalIntelligenceRating":1,"creativityRating":3,"educationalValueRating":2,"overallRating":4,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/reading-rainbow.jpg","id":199},{"name":"Ready, Steady, Wiggle!","description":"Ready, Steady, Wiggle! is a Live-Action with Bright Colors and Simple Settings show for 1-4 year olds. It features Physical Fitness, Elementary-Basics, sing-a-long, Dance, Music, Friendship, Motor Skills, Repetitive Learning, Entertainment, Numeracy, Literacy, Social-Emotional themes.","ageRange":"1-4","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":5,"interactivityLevel":"High","dialogueIntensity":"High","soundEffectsLevel":"High","musicTempo":"High","totalMusicLevel":"Very High","totalSoundEffectTimeLevel":"High","sceneFrequency":"Moderate","animationStyle":"Live-Action with Bright Colors and Simple Settings","themes":["Physical Fitness","Elementary-Basics","sing-a-long","Dance","Music","Friendship","Motor Skills","Repetitive Learning","Entertainment","Numeracy","Literacy","Social-Emotional"],"friendshipRating":3,"problemSolvingRating":1,"relatableSituationsRating":4,"emotionalIntelligenceRating":2,"creativityRating":1,"educationalValueRating":4,"overallRating":1,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/ready-steady-wiggle.jpg","id":200},{"name":"Reef School","description":"Reef School is a 2D Digital Animation with a watercolor aesthetic. Color Palette: Soft and natural colors with pastel hues. show for 3-6 year olds. It features Environmental Awareness, Ecosystems, Marine Biology, Curiosity, Social Development, Emotional Intelligence, Wildlife Conservation, Natural World, Teamwork themes.","ageRange":"3-6","episodeLength":5,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":2,"interactivityLevel":"High","dialogueIntensity":"Moderate","soundEffectsLevel":"Low-Moderate","musicTempo":"Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Low-Moderate","sceneFrequency":"High","animationStyle":"2D Digital Animation with a watercolor aesthetic. Color Palette: Soft and natural colors with pastel hues.","themes":["Environmental Awareness","Ecosystems","Marine Biology","Curiosity","Social Development","Emotional Intelligence","Wildlife Conservation","Natural World","Teamwork"],"friendshipRating":1,"problemSolvingRating":3,"relatableSituationsRating":4,"emotionalIntelligenceRating":4,"creativityRating":1,"educationalValueRating":3,"overallRating":4,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/reef-school.jpg","id":201},{"name":"Rhyme Time Town","description":"Rhyme Time Town is a 3D CGI Animation with extremely bright and vivid colors. show for 3-6 year olds. It features Language Learning, Literacy, sing-a-long, Cognitive Development, Social-Emotional, Repetitive Learning, Music themes.","ageRange":"3-6","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"High","dialogueIntensity":"Moderate-High","soundEffectsLevel":"Moderate","musicTempo":"Moderate-High","totalMusicLevel":"High","totalSoundEffectTimeLevel":"Moderate","sceneFrequency":"Low-Moderate","animationStyle":"3D CGI Animation with extremely bright and vivid colors.","themes":["Language Learning","Literacy","sing-a-long","Cognitive Development","Social-Emotional","Repetitive Learning","Music"],"friendshipRating":3,"problemSolvingRating":2,"relatableSituationsRating":3,"emotionalIntelligenceRating":3,"creativityRating":3,"educationalValueRating":3,"overallRating":3,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/rhyme-time-town.jpg","id":202},{"name":"Robocar Poli","description":"Robocar Poli is a 3D CGI Animation with detailed and dynamic visuals. show for 3-6 year olds. It features Cultural & Social, Safety, Teamwork, Problem Solving, Adventure, Community Service, Social Development, Social-Emotional themes.","ageRange":"3-6","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":5,"interactivityLevel":"Moderate","dialogueIntensity":"High","soundEffectsLevel":"High","musicTempo":"High","totalMusicLevel":"High","totalSoundEffectTimeLevel":"High","sceneFrequency":"Moderate-High","animationStyle":"3D CGI Animation with detailed and dynamic visuals.","themes":["Cultural & Social","Safety","Teamwork","Problem Solving","Adventure","Community Service","Social Development","Social-Emotional"],"friendshipRating":1,"problemSolvingRating":3,"relatableSituationsRating":3,"emotionalIntelligenceRating":3,"creativityRating":3,"educationalValueRating":3,"overallRating":1,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/robocar-poli.jpg","id":203},{"name":"Rolie Polie Olie","description":"Rolie Polie Olie is a 3D CGI Animation show for 3-6 year olds. It features Creativity & Imagination, Friendship, Problem Solving, Adventure, Social-Emotional, Critical Thinking themes.","ageRange":"3-6","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"Moderate","dialogueIntensity":"Moderate","soundEffectsLevel":"Moderate","musicTempo":"Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Moderate-High","sceneFrequency":"High","animationStyle":"3D CGI Animation","themes":["Creativity & Imagination","Friendship","Problem Solving","Adventure","Social-Emotional","Critical Thinking"],"friendshipRating":3,"problemSolvingRating":4,"relatableSituationsRating":4,"emotionalIntelligenceRating":3,"creativityRating":3,"educationalValueRating":3,"overallRating":3,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/rolie-polie-olie.jpg","id":204},{"name":"Rosie & Jim","description":"Rosie & Jim is a Live-action puppetry with colorful characters. show for 3-6 year olds. It features Preschool-Basics, Creativity & Imagination, Repetitive Learning, Language Learning, sing-a-long, Problem Solving, Curiosity themes.","ageRange":"3-6","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":2,"interactivityLevel":"Moderate","dialogueIntensity":"Moderate","soundEffectsLevel":"Low-Moderate","musicTempo":"Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Low-Moderate","sceneFrequency":"Moderate","animationStyle":"Live-action puppetry with colorful characters.","themes":["Preschool-Basics","Creativity & Imagination","Repetitive Learning","Language Learning","sing-a-long","Problem Solving","Curiosity"],"friendshipRating":3,"problemSolvingRating":3,"relatableSituationsRating":2,"emotionalIntelligenceRating":1,"creativityRating":4,"educationalValueRating":3,"overallRating":4,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/rosie-and-jim.jpg","id":205},{"name":"Rosie's Rules","description":"Rosie's Rules is a 2D digital animation with a hand-drawn look. Bright and cheerful colors with simple backgrounds. show for 4-8 year olds. It features Elementary-Basics, Social-Emotional, Problem Solving, Family Relationships, Responsibility, Teamwork, Social Development, Family Values, Emotional Intelligence themes.","ageRange":"4-8","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"High","dialogueIntensity":"Moderate-High","soundEffectsLevel":"Moderate","musicTempo":"Moderate-High","totalMusicLevel":"High","totalSoundEffectTimeLevel":"Moderate","sceneFrequency":"Low-Moderate","animationStyle":"2D digital animation with a hand-drawn look. Bright and cheerful colors with simple backgrounds.","themes":["Elementary-Basics","Social-Emotional","Problem Solving","Family Relationships","Responsibility","Teamwork","Social Development","Family Values","Emotional Intelligence"],"friendshipRating":3,"problemSolvingRating":3,"relatableSituationsRating":4,"emotionalIntelligenceRating":3,"creativityRating":2,"educationalValueRating":1,"overallRating":3,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/rosies-rules.jpg","id":206},{"name":"Rugrats","description":"Rugrats is a Traditional 2D hand-drawn animation with a distinctive, sketchy style. Muted and earthy tones, reflecting a somewhat realistic environment. show for 4-8 year olds. It features Creativity & Imagination, Social Development, Social-Emotional, Relatable Situations, Emotional Intelligence, Problem Solving, Mischievous Behaviour themes.","ageRange":"4-8","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"Low-Moderate","dialogueIntensity":"Moderate-High","soundEffectsLevel":"Moderate","musicTempo":"Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Moderate","sceneFrequency":"Moderate-High","animationStyle":"Traditional 2D hand-drawn animation with a distinctive, sketchy style. Muted and earthy tones, reflecting a somewhat realistic environment.","themes":["Creativity & Imagination","Social Development","Social-Emotional","Relatable Situations","Emotional Intelligence","Problem Solving","Mischievous Behaviour"],"friendshipRating":2,"problemSolvingRating":3,"relatableSituationsRating":3,"emotionalIntelligenceRating":4,"creativityRating":4,"educationalValueRating":3,"overallRating":3,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/rugrats.jpg","id":207},{"name":"Rugrats (2021 Reboot)","description":"Rugrats (2021 Reboot) is a 3D CGI animation show for 4-8 year olds. It features Creativity & Imagination, Social Development, Social-Emotional, Relatable Situations, Emotional Intelligence, Problem Solving, Mischievous Behaviour themes.","ageRange":"4-8","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":4,"interactivityLevel":"Low-Moderate","dialogueIntensity":"High","soundEffectsLevel":"High","musicTempo":"Moderate-High","totalMusicLevel":"Moderate-High","totalSoundEffectTimeLevel":"Moderate-High","sceneFrequency":"Moderate","animationStyle":"3D CGI animation","themes":["Creativity & Imagination","Social Development","Social-Emotional","Relatable Situations","Emotional Intelligence","Problem Solving","Mischievous Behaviour"],"friendshipRating":1,"problemSolvingRating":4,"relatableSituationsRating":3,"emotionalIntelligenceRating":4,"creativityRating":4,"educationalValueRating":2,"overallRating":2,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/rugrats-(2021-reboot).jpg","id":208},{"name":"Ryan's World","description":"Ryan's World is a Live-Action with Bright Colors, High Energy, and Occasional Animations show for 0-5 year olds. It features Science, Creativity & Imagination, Learn Through Play, STEM, Geography, Numeracy, Unboxing Videos, Entertainment, Humor, Silly Comedy, Family Relationships, Family Values, Teamwork, Toy Review themes.","ageRange":"0-5","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":5,"interactivityLevel":"Moderate","dialogueIntensity":"High","soundEffectsLevel":"High","musicTempo":"Moderate-High","totalMusicLevel":"High","totalSoundEffectTimeLevel":"High","sceneFrequency":"High","animationStyle":"Live-Action with Bright Colors, High Energy, and Occasional Animations","themes":["Science","Creativity & Imagination","Learn Through Play","STEM","Geography","Numeracy","Unboxing Videos","Entertainment","Humor","Silly Comedy","Family Relationships","Family Values","Teamwork","Toy Review"],"friendshipRating":4,"problemSolvingRating":1,"relatableSituationsRating":3,"emotionalIntelligenceRating":2,"creativityRating":3,"educationalValueRating":4,"overallRating":1,"availableOn":["YouTube"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/ryans-world.jpeg","id":209},{"name":"Sagwa, the Chinese Siamese Cat","description":"Sagwa, the Chinese Siamese Cat is a Traditional 2D animation with a hand-drawn look. show for 4-8 year olds. It features Cultural Appreciation, Cultures & Traditions, Cultural & Social, Friendship, Problem Solving, Family Values themes.","ageRange":"4-8","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"Moderate","dialogueIntensity":"Moderate","soundEffectsLevel":"Moderate","musicTempo":"Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Moderate","sceneFrequency":"High","animationStyle":"Traditional 2D animation with a hand-drawn look.","themes":["Cultural Appreciation","Cultures & Traditions","Cultural & Social","Friendship","Problem Solving","Family Values"],"friendshipRating":3,"problemSolvingRating":3,"relatableSituationsRating":4,"emotionalIntelligenceRating":1,"creativityRating":3,"educationalValueRating":3,"overallRating":3,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/sagwa-the-chinese-siamese-cat.jpeg","id":210},{"name":"Sarah and Duck","description":"Sarah and Duck is a 2D Digital animation with a hand-drawn look show for 3-6 year olds. It features Creativity & Imagination, Friendship, Problem Solving, Relatable Situations, Social-Emotional themes.","ageRange":"3-6","episodeLength":5,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":1,"interactivityLevel":"Low-Moderate","dialogueIntensity":"Low-Moderate","soundEffectsLevel":"Low","musicTempo":"Low","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Low","sceneFrequency":"Moderate","animationStyle":"2D Digital animation with a hand-drawn look","themes":["Creativity & Imagination","Friendship","Problem Solving","Relatable Situations","Social-Emotional"],"friendshipRating":4,"problemSolvingRating":4,"relatableSituationsRating":3,"emotionalIntelligenceRating":3,"creativityRating":4,"educationalValueRating":2,"overallRating":5,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/sarah-and-duck.jpeg","id":211},{"name":"Scooby-Doo, Where Are You! (1969–1970)","description":"Scooby-Doo, Where Are You! (1969–1970) is a traditional hand-drawn 2D animation show for 7-12 year olds. It features Problem Solving, Teamwork, Mystery, Entertainment, Humor, Critical Thinking, Mild Peril, Mild Fantasy Violence themes.","ageRange":"7-12","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":4,"interactivityLevel":"Low","dialogueIntensity":"Moderate","soundEffectsLevel":"Moderate-High","musicTempo":"Moderate-High","totalMusicLevel":"High","totalSoundEffectTimeLevel":"Moderate-High","sceneFrequency":"Low","animationStyle":"traditional hand-drawn 2D animation","themes":["Problem Solving","Teamwork","Mystery","Entertainment","Humor","Critical Thinking","Mild Peril","Mild Fantasy Violence"],"friendshipRating":1,"problemSolvingRating":4,"relatableSituationsRating":2,"emotionalIntelligenceRating":1,"creativityRating":1,"educationalValueRating":3,"overallRating":2,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/scooby-doo-(1969-1970).jpg","id":212},{"name":"Sea of love","description":"Sea of love is a 3D CGI Animation with stylized and colorful designs. Bright but not overly saturated colors, with a focus on vibrant settings. show for 3-6 year olds. It features Environmental Awareness, Teamwork, Marine Biology, Wildlife Conservation, Friendship, Natural World, Responsibility, Social-Emotional, Problem Solving themes.","ageRange":"3-6","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":2,"interactivityLevel":"Moderate","dialogueIntensity":"Moderate","soundEffectsLevel":"Low-Moderate","musicTempo":"Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Low-Moderate","sceneFrequency":"Moderate","animationStyle":"3D CGI Animation with stylized and colorful designs. Bright but not overly saturated colors, with a focus on vibrant settings.","themes":["Environmental Awareness","Teamwork","Marine Biology","Wildlife Conservation","Friendship","Natural World","Responsibility","Social-Emotional","Problem Solving"],"friendshipRating":4,"problemSolvingRating":3,"relatableSituationsRating":4,"emotionalIntelligenceRating":3,"creativityRating":1,"educationalValueRating":2,"overallRating":4,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/sea-of-love.jpg","id":213},{"name":"Sesame Street (1969-present)","description":"Sesame Street (1969-present) is a Various Art Styles show for 2-5 year olds. It features Preschool-Basics, Cultural & Social, STEM, Elementary-Basics, Cultures & Traditions, Social Development, Routine, Motor Skills, Emotional Intelligence themes.","ageRange":"2-5","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":1,"interactivityLevel":"High","dialogueIntensity":"Moderate","soundEffectsLevel":"Low-Moderate","musicTempo":"Moderate","totalMusicLevel":"High","totalSoundEffectTimeLevel":"Low","sceneFrequency":"Low-Moderate","animationStyle":"Various Art Styles","themes":["Preschool-Basics","Cultural & Social","STEM","Elementary-Basics","Cultures & Traditions","Social Development","Routine","Motor Skills","Emotional Intelligence"],"friendshipRating":1,"problemSolvingRating":2,"relatableSituationsRating":4,"emotionalIntelligenceRating":3,"creativityRating":2,"educationalValueRating":3,"overallRating":5,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/sesame-street-(1969-present).jpeg","id":214},{"name":"Shaun the Sheep","description":"Shaun the Sheep is a Traditional Stop-Motion (claymation) digital enhancements may be used for post-production show for 6-10 year olds. It features Creativity & Imagination, Problem Solving, Teamwork themes.","ageRange":"6-10","episodeLength":5,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"Low","dialogueIntensity":"None","soundEffectsLevel":"Moderate","musicTempo":"Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Moderate","sceneFrequency":"Moderate","animationStyle":"Traditional Stop-Motion (claymation) digital enhancements may be used for post-production","themes":["Creativity & Imagination","Problem Solving","Teamwork"],"friendshipRating":2,"problemSolvingRating":3,"relatableSituationsRating":3,"emotionalIntelligenceRating":1,"creativityRating":3,"educationalValueRating":3,"overallRating":3,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/shaun-the-sheep.jpg","id":215},{"name":"Sid the Science Kid","description":"Sid the Science Kid is a 3D CGI Animation with Motion Capture show for 4-7 year olds. It features STEM, Critical Thinking, Problem Solving, Science, Motor Skills, Relatable Situations, Curiosity themes.","ageRange":"4-7","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"High","dialogueIntensity":"High","soundEffectsLevel":"Moderate-High","musicTempo":"Moderate-High","totalMusicLevel":"High","totalSoundEffectTimeLevel":"Moderate-High","sceneFrequency":"High","animationStyle":"3D CGI Animation with Motion Capture","themes":["STEM","Critical Thinking","Problem Solving","Science","Motor Skills","Relatable Situations","Curiosity"],"friendshipRating":2,"problemSolvingRating":4,"relatableSituationsRating":4,"emotionalIntelligenceRating":3,"creativityRating":2,"educationalValueRating":4,"overallRating":3,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/sid-the-science-kid.jpg","id":216},{"name":"Silly Miss Lily (Paisley's Corner)","description":"Silly Miss Lily (Paisley's Corner) is a Live-Action with Bright Colors and Props show for 2-5 year olds. It features Positive Engaging Screen-Time, Preschool-Basics, Numeracy, Colours, Shapes, Social-Emotional, sing-a-long, Literacy themes.","ageRange":"2-5","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"High","dialogueIntensity":"Moderate-High","soundEffectsLevel":"Moderate","musicTempo":"Moderate","totalMusicLevel":"Moderate-High","totalSoundEffectTimeLevel":"Moderate","sceneFrequency":"Moderate","animationStyle":"Live-Action with Bright Colors and Props","themes":["Positive Engaging Screen-Time","Preschool-Basics","Numeracy","Colours","Shapes","Social-Emotional","sing-a-long","Literacy"],"friendshipRating":2,"problemSolvingRating":1,"relatableSituationsRating":4,"emotionalIntelligenceRating":2,"creativityRating":3,"educationalValueRating":3,"overallRating":3,"availableOn":["YouTube"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/silly-miss-lily(paisleys-corner).jpg","id":217},{"name":"Simon","description":"Simon is a 2D digital animation with a hand-drawn look. Bright and cheerful colors with simple backgrounds. show for 3-6 year olds. It features Friendship, Family Relationships, Emotional Intelligence, Social-Emotional, Problem Solving, Relatable Situations themes.","ageRange":"3-6","episodeLength":5,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":2,"interactivityLevel":"Moderate","dialogueIntensity":"Moderate","soundEffectsLevel":"Low-Moderate","musicTempo":"Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Low","sceneFrequency":"Moderate-High","animationStyle":"2D digital animation with a hand-drawn look. Bright and cheerful colors with simple backgrounds.","themes":["Friendship","Family Relationships","Emotional Intelligence","Social-Emotional","Problem Solving","Relatable Situations"],"friendshipRating":3,"problemSolvingRating":3,"relatableSituationsRating":3,"emotionalIntelligenceRating":4,"creativityRating":1,"educationalValueRating":1,"overallRating":4,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/simon.jpeg","id":218},{"name":"Something Special: Hello Mr Tumble","description":"Something Special: Hello Mr Tumble is a Live-Action with Bright Colors and Simple Settings show for 2-6 year olds. It features Early Childhood experiences, Social-Emotional, Emotional Intelligence, Language Learning, Makaton Sign Language, Learning Disabilities themes.","ageRange":"2-6","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":2,"interactivityLevel":"High","dialogueIntensity":"Moderate","soundEffectsLevel":"Low-Moderate","musicTempo":"Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Low-Moderate","sceneFrequency":"Moderate","animationStyle":"Live-Action with Bright Colors and Simple Settings","themes":["Early Childhood experiences","Social-Emotional","Emotional Intelligence","Language Learning","Makaton Sign Language","Learning Disabilities"],"friendshipRating":2,"problemSolvingRating":1,"relatableSituationsRating":3,"emotionalIntelligenceRating":4,"creativityRating":2,"educationalValueRating":4,"overallRating":4,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/something-special-hello-mr-tumble.jpeg","id":219},{"name":"Sonic the Hedgehog","description":"Sonic the Hedgehog is a 3D CGI Animation with detailed and dynamic visuals. show for 7-12 year olds. It features Friendship, Teamwork, Perseverance, Entertainment, Humor, Courage, Adventure, Mild Fantasy Violence themes.","ageRange":"7-12","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":5,"interactivityLevel":"Low-Moderate","dialogueIntensity":"High","soundEffectsLevel":"Very High","musicTempo":"High","totalMusicLevel":"High","totalSoundEffectTimeLevel":"Very High","sceneFrequency":"Low-Moderate","animationStyle":"3D CGI Animation with detailed and dynamic visuals.","themes":["Friendship","Teamwork","Perseverance","Entertainment","Humor","Courage","Adventure","Mild Fantasy Violence"],"friendshipRating":4,"problemSolvingRating":3,"relatableSituationsRating":2,"emotionalIntelligenceRating":3,"creativityRating":3,"educationalValueRating":2,"overallRating":1,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/sonic-the-hedgehog.jpg","id":220},{"name":"Spanish with liz","description":"Spanish with liz is a Live-Action with Educational Props and Colorful Backgrounds show for 0-5 year olds. It features Cultures & Traditions, Cultural & Social, Learning through Songs, Spanish Language, Language Learning, Music, Vocabulary, Phonics, Emotional Intelligence, Routine, Healthy Eating themes.","ageRange":"0-5","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"High","dialogueIntensity":"High","soundEffectsLevel":"Moderate","musicTempo":"Moderate","totalMusicLevel":"High","totalSoundEffectTimeLevel":"Moderate","sceneFrequency":"Low-Moderate","animationStyle":"Live-Action with Educational Props and Colorful Backgrounds","themes":["Cultures & Traditions","Cultural & Social","Learning through Songs","Spanish Language","Language Learning","Music","Vocabulary","Phonics","Emotional Intelligence","Routine","Healthy Eating"],"friendshipRating":1,"problemSolvingRating":1,"relatableSituationsRating":4,"emotionalIntelligenceRating":3,"creativityRating":3,"educationalValueRating":4,"overallRating":3,"availableOn":["YouTube"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/spanish-with-liz.jpg","id":221},{"name":"Spidey and his amazing friends (2021-present)","description":"Spidey and his amazing friends (2021-present) is a 3D CGI show for 3-7 year olds. It features Superhero Themes, Positive Role Models, Teamwork, Responsibility, Entertainment, Mischievous Behaviour, Mild Peril themes.","ageRange":"3-7","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":5,"interactivityLevel":"Low","dialogueIntensity":"High","soundEffectsLevel":"High","musicTempo":"High","totalMusicLevel":"Very High","totalSoundEffectTimeLevel":"High","sceneFrequency":"Very High","animationStyle":"3D CGI","themes":["Superhero Themes","Positive Role Models","Teamwork","Responsibility","Entertainment","Mischievous Behaviour","Mild Peril"],"friendshipRating":3,"problemSolvingRating":1,"relatableSituationsRating":3,"emotionalIntelligenceRating":3,"creativityRating":3,"educationalValueRating":2,"overallRating":1,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/spidey-and-his-amazing-friends-(2021-present).jpg","id":222},{"name":"Spirit Riding Free","description":"Spirit Riding Free is a 3D CGI Animation show for 6-10 year olds. It features Friendship, Responsibility, Perseverance, Adventure, Horses, Mild Intense Scenes themes.","ageRange":"6-10","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"Low-Moderate","dialogueIntensity":"Moderate-High","soundEffectsLevel":"Moderate","musicTempo":"Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Moderate","sceneFrequency":"High","animationStyle":"3D CGI Animation","themes":["Friendship","Responsibility","Perseverance","Adventure","Horses","Mild Intense Scenes"],"friendshipRating":4,"problemSolvingRating":1,"relatableSituationsRating":3,"emotionalIntelligenceRating":2,"creativityRating":2,"educationalValueRating":3,"overallRating":3,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/spirit-riding-free.jpg","id":223},{"name":"SpongeBob SquarePants","description":"SpongeBob SquarePants is a Traditional 2D animation with expressive and exaggerated character designs. Bright and vivid colors with high contrast. show for 6-12 year olds. It features Creativity & Imagination, Humor, Friendship, Problem Solving, Entertainment, Surreal Imagery, Mild Intense Scenes themes.","ageRange":"6-12","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":5,"interactivityLevel":"Low-Moderate","dialogueIntensity":"High","soundEffectsLevel":"Very High","musicTempo":"Moderate-High","totalMusicLevel":"High","totalSoundEffectTimeLevel":"High","sceneFrequency":"Moderate","animationStyle":"Traditional 2D animation with expressive and exaggerated character designs. Bright and vivid colors with high contrast.","themes":["Creativity & Imagination","Humor","Friendship","Problem Solving","Entertainment","Surreal Imagery","Mild Intense Scenes"],"friendshipRating":3,"problemSolvingRating":3,"relatableSituationsRating":1,"emotionalIntelligenceRating":2,"creativityRating":4,"educationalValueRating":3,"overallRating":1,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/spongebob-squarepants.jpg","id":224},{"name":"Star Wars: Young Jedi Adventures","description":"Star Wars: Young Jedi Adventures is a 3D CGI Animation with detailed and dynamic visuals. show for 4-8 year olds. It features Cause and Effect, Cultures & Traditions, Positive Role Models, Entertainment, Courage, Adventure, Conflict Resolution, Friendship, Teamwork, Responsibility, Fantasy Elements, Morality, Mild Intense Scenes, Mild Fantasy Violence themes.","ageRange":"4-8","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":4,"interactivityLevel":"Moderate","dialogueIntensity":"High","soundEffectsLevel":"High","musicTempo":"Moderate-High","totalMusicLevel":"High","totalSoundEffectTimeLevel":"High","sceneFrequency":"High","animationStyle":"3D CGI Animation with detailed and dynamic visuals.","themes":["Cause and Effect","Cultures & Traditions","Positive Role Models","Entertainment","Courage","Adventure","Conflict Resolution","Friendship","Teamwork","Responsibility","Fantasy Elements","Morality","Mild Intense Scenes","Mild Fantasy Violence"],"friendshipRating":4,"problemSolvingRating":3,"relatableSituationsRating":2,"emotionalIntelligenceRating":1,"creativityRating":2,"educationalValueRating":1,"overallRating":2,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/star-wars-young-jedi-adventures.jpeg","id":225},{"name":"Stella and Sam","description":"Stella and Sam is a 2D Digital Animation with a watercolor aesthetic. Color Palette: Soft and natural colors with pastel hues. show for 3-6 year olds. It features Creativity & Imagination, Problem Solving, Exploration, Emotional Intelligence, Curiosity, Family Relationships, Social-Emotional, Social Development, Natural World themes.","ageRange":"3-6","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":2,"interactivityLevel":"Moderate","dialogueIntensity":"Moderate","soundEffectsLevel":"Low-Moderate","musicTempo":"Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Low-Moderate","sceneFrequency":"High","animationStyle":"2D Digital Animation with a watercolor aesthetic. Color Palette: Soft and natural colors with pastel hues.","themes":["Creativity & Imagination","Problem Solving","Exploration","Emotional Intelligence","Curiosity","Family Relationships","Social-Emotional","Social Development","Natural World"],"friendshipRating":3,"problemSolvingRating":4,"relatableSituationsRating":3,"emotionalIntelligenceRating":3,"creativityRating":4,"educationalValueRating":2,"overallRating":4,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/stella-and-sam.jpg","id":226},{"name":"Steve and Maggie","description":"Steve and Maggie is a Live-Action with Puppet Interaction and Simple Animations show for 2-6 year olds. It features Every Day Concepts, Preschool-Basics, Creativity & Imagination, Language Learning, Vocabulary, Phonics, Repetitive Learning, Literacy, Social Development, Social-Emotional, Cognitive Development themes.","ageRange":"2-6","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"High","dialogueIntensity":"High","soundEffectsLevel":"High","musicTempo":"Moderate","totalMusicLevel":"High","totalSoundEffectTimeLevel":"High","sceneFrequency":"Moderate","animationStyle":"Live-Action with Puppet Interaction and Simple Animations","themes":["Every Day Concepts","Preschool-Basics","Creativity & Imagination","Language Learning","Vocabulary","Phonics","Repetitive Learning","Literacy","Social Development","Social-Emotional","Cognitive Development"],"friendshipRating":3,"problemSolvingRating":3,"relatableSituationsRating":3,"emotionalIntelligenceRating":1,"creativityRating":4,"educationalValueRating":4,"overallRating":3,"availableOn":["YouTube"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/steve-and-maggie.jpg","id":227},{"name":"Stick man","description":"Stick man is a 3D CGI animation delivered slowly and smoothly show for 3-7 year olds. It features Family Values, Perseverance, Family Relationships, Courage, Social-Emotional, Mild Peril themes.","ageRange":"3-7","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"Moderate","dialogueIntensity":"Moderate","soundEffectsLevel":"Moderate","musicTempo":"Moderate","totalMusicLevel":"High","totalSoundEffectTimeLevel":"Moderate","sceneFrequency":"Low-Moderate","animationStyle":"3D CGI animation delivered slowly and smoothly","themes":["Family Values","Perseverance","Family Relationships","Courage","Social-Emotional","Mild Peril"],"friendshipRating":3,"problemSolvingRating":3,"relatableSituationsRating":4,"emotionalIntelligenceRating":2,"creativityRating":1,"educationalValueRating":3,"overallRating":3,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/stick-man.jpg","id":228},{"name":"Stillwater (2020-present)","description":"Stillwater (2020-present) is a Mix of 3D CGI animations for the characters and settings show for 4-8 year olds. It features Life Lessons, Mindfulness, Emotional Intelligence, Problem Solving, Social-Emotional, Conflict Resolution themes.","ageRange":"4-8","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":2,"interactivityLevel":"High","dialogueIntensity":"Low-Moderate","soundEffectsLevel":"Low","musicTempo":"Low","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Low","sceneFrequency":"Moderate-High","animationStyle":"Mix of 3D CGI animations for the characters and settings","themes":["Life Lessons","Mindfulness","Emotional Intelligence","Problem Solving","Social-Emotional","Conflict Resolution"],"friendshipRating":1,"problemSolvingRating":3,"relatableSituationsRating":4,"emotionalIntelligenceRating":3,"creativityRating":2,"educationalValueRating":1,"overallRating":4,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/stillwater-(2020-present).jpg","id":229},{"name":"Story Time Book: Read-Along","description":"Story Time Book: Read-Along is a Illustrations or Minimal Animation show for 3-7 year olds. It features Creativity & Imagination, Literacy, Language Learning, Reading Comprehension, Cognitive Development, Repetitive Learning themes.","ageRange":"3-7","episodeLength":5,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":2,"interactivityLevel":"High","dialogueIntensity":"Moderate","soundEffectsLevel":"Low-Moderate","musicTempo":"Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Low-Moderate","sceneFrequency":"Low","animationStyle":"Illustrations or Minimal Animation","themes":["Creativity & Imagination","Literacy","Language Learning","Reading Comprehension","Cognitive Development","Repetitive Learning"],"friendshipRating":2,"problemSolvingRating":1,"relatableSituationsRating":1,"emotionalIntelligenceRating":1,"creativityRating":3,"educationalValueRating":3,"overallRating":4,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/story-time-book-read-along.jpg","id":230},{"name":"Storybots","description":"Storybots is a Combination of 2D and 3D Animation with Mixed Media show for 3-6 year olds. It features STEM, Literacy, Reading Comprehension, Problem Solving, Curiosity, Social Development, Critical Thinking themes.","ageRange":"3-6","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":4,"interactivityLevel":"High","dialogueIntensity":"High","soundEffectsLevel":"High","musicTempo":"High","totalMusicLevel":"High","totalSoundEffectTimeLevel":"High","sceneFrequency":"Low","animationStyle":"Combination of 2D and 3D Animation with Mixed Media","themes":["STEM","Literacy","Reading Comprehension","Problem Solving","Curiosity","Social Development","Critical Thinking"],"friendshipRating":2,"problemSolvingRating":4,"relatableSituationsRating":3,"emotionalIntelligenceRating":2,"creativityRating":2,"educationalValueRating":3,"overallRating":2,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/storybots.jpg","id":231},{"name":"Super Monsters","description":"Super Monsters is a 3D CGI animation with bright and vivid colors show for 3-6 year olds. It features Cultural & Social, Creativity & Imagination, Social-Emotional, Friendship, Emotional Intelligence, Self Discipline, Problem Solving, Social Development, Entertainment themes.","ageRange":"3-6","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":4,"interactivityLevel":"Moderate","dialogueIntensity":"Moderate-High","soundEffectsLevel":"Moderate","musicTempo":"Moderate","totalMusicLevel":"Moderate-High","totalSoundEffectTimeLevel":"Moderate","sceneFrequency":"High","animationStyle":"3D CGI animation with bright and vivid colors","themes":["Cultural & Social","Creativity & Imagination","Social-Emotional","Friendship","Emotional Intelligence","Self Discipline","Problem Solving","Social Development","Entertainment"],"friendshipRating":3,"problemSolvingRating":3,"relatableSituationsRating":4,"emotionalIntelligenceRating":4,"creativityRating":3,"educationalValueRating":3,"overallRating":2,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/super-monsters.jpeg","id":232},{"name":"SUPER SIMPLE SONG","description":"SUPER SIMPLE SONG is a 2D and 3D Animation with Bright Colors and Simple Characters show for 2-5 year olds. It features Preschool-Basics, Learning through Songs, Storytelling without Dialogue, Literacy, Numeracy, Shapes, Colours, sing-a-long, Social Development, Social-Emotional, Dance, Motor Skills, Language Learning, Cognitive Development, Music, Vocabulary themes.","ageRange":"2-5","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":4,"interactivityLevel":"High","dialogueIntensity":"Moderate-High","soundEffectsLevel":"Moderate","musicTempo":"Moderate","totalMusicLevel":"Very High","totalSoundEffectTimeLevel":"Moderate","sceneFrequency":"Low-Moderate","animationStyle":"2D and 3D Animation with Bright Colors and Simple Characters","themes":["Preschool-Basics","Learning through Songs","Storytelling without Dialogue","Literacy","Numeracy","Shapes","Colours","sing-a-long","Social Development","Social-Emotional","Dance","Motor Skills","Language Learning","Cognitive Development","Music","Vocabulary"],"friendshipRating":3,"problemSolvingRating":2,"relatableSituationsRating":3,"emotionalIntelligenceRating":2,"creativityRating":3,"educationalValueRating":3,"overallRating":2,"availableOn":["YouTube"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/super-simple-song.jpeg","id":233},{"name":"Super Why!","description":"Super Why! is a 3D CGI animation with bright colors and clear designs. Bright and vivid colors focused on storybook settings. show for 3-6 year olds. It features Elementary-Basics, Numeracy, Literacy, Problem Solving themes.","ageRange":"3-6","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"High","dialogueIntensity":"High","soundEffectsLevel":"Moderate","musicTempo":"Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Moderate","sceneFrequency":"Moderate","animationStyle":"3D CGI animation with bright colors and clear designs. Bright and vivid colors focused on storybook settings.","themes":["Elementary-Basics","Numeracy","Literacy","Problem Solving"],"friendshipRating":1,"problemSolvingRating":4,"relatableSituationsRating":2,"emotionalIntelligenceRating":2,"creativityRating":3,"educationalValueRating":3,"overallRating":3,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/super-why.jpeg","id":234},{"name":"Superbook","description":"Superbook is a 3D CGI Animation with Detailed and Dynamic Visuals show for 6-10 year olds. It features Cultures & Traditions, Cultural Appreciation, Cause and Effect, Positive Role Models, Religion, Morality, History, Literacy, Courage, Repetitive Learning themes.","ageRange":"6-10","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":4,"interactivityLevel":"Moderate","dialogueIntensity":"High","soundEffectsLevel":"High","musicTempo":"High","totalMusicLevel":"High","totalSoundEffectTimeLevel":"High","sceneFrequency":"Moderate","animationStyle":"3D CGI Animation with Detailed and Dynamic Visuals","themes":["Cultures & Traditions","Cultural Appreciation","Cause and Effect","Positive Role Models","Religion","Morality","History","Literacy","Courage","Repetitive Learning"],"friendshipRating":2,"problemSolvingRating":1,"relatableSituationsRating":1,"emotionalIntelligenceRating":3,"creativityRating":1,"educationalValueRating":3,"overallRating":2,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/superbook.jpg","id":235},{"name":"Super Kitties","description":"Super Kitties is a 3D CGI Animation show for 3-6 year olds. It features Superhero Themes, Teamwork, Problem Solving, Responsibility, Adventure, Entertainment, Friendship themes.","ageRange":"3-6","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":5,"interactivityLevel":"Low-Moderate","dialogueIntensity":"High","soundEffectsLevel":"High","musicTempo":"High","totalMusicLevel":"High","totalSoundEffectTimeLevel":"High","sceneFrequency":"High","animationStyle":"3D CGI Animation","themes":["Superhero Themes","Teamwork","Problem Solving","Responsibility","Adventure","Entertainment","Friendship"],"friendshipRating":3,"problemSolvingRating":3,"relatableSituationsRating":1,"emotionalIntelligenceRating":1,"creativityRating":2,"educationalValueRating":1,"overallRating":1,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/superkitties.jpg","id":236},{"name":"Superworm","description":"Superworm is a 3D CGI animation with detailed textures and natural settings. Earthy tones with vivid highlights. show for 3-6 year olds. It features Friendship, Teamwork, Nature, Social Development themes.","ageRange":"3-6","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"Moderate","dialogueIntensity":"Moderate","soundEffectsLevel":"Moderate","musicTempo":"Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Moderate","sceneFrequency":"High","animationStyle":"3D CGI animation with detailed textures and natural settings. Earthy tones with vivid highlights.","themes":["Friendship","Teamwork","Nature","Social Development"],"friendshipRating":3,"problemSolvingRating":3,"relatableSituationsRating":4,"emotionalIntelligenceRating":3,"creativityRating":2,"educationalValueRating":2,"overallRating":3,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/superworm.jpg","id":237},{"name":"Takaro Tribe","description":"Takaro Tribe is a 2D Digital Animation with simple, flat designs. Bright but pastel-like colors with minimal shading. show for 3-6 year olds. It features Cultures & Traditions, Cultural & Social, Cultural Appreciation, Religion, Literacy, History, Music, Routine, Repetitive Learning, Social-Emotional, Language Learning themes.","ageRange":"3-6","episodeLength":5,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":2,"interactivityLevel":"High","dialogueIntensity":"Moderate","soundEffectsLevel":"Low-Moderate","musicTempo":"Moderate","totalMusicLevel":"High","totalSoundEffectTimeLevel":"Low-Moderate","sceneFrequency":"Moderate","animationStyle":"2D Digital Animation with simple, flat designs. Bright but pastel-like colors with minimal shading.","themes":["Cultures & Traditions","Cultural & Social","Cultural Appreciation","Religion","Literacy","History","Music","Routine","Repetitive Learning","Social-Emotional","Language Learning"],"friendshipRating":2,"problemSolvingRating":3,"relatableSituationsRating":3,"emotionalIntelligenceRating":1,"creativityRating":3,"educationalValueRating":3,"overallRating":4,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/takaro-tribe.jpg","id":238},{"name":"Tangled: Before Ever After","description":"Tangled: Before Ever After is a 2D digital animation show for 3-6 year olds. It features Overcoming Fears, Adventure, Friendship, Courage, Social Development, Perseverance, Fantasy Elements, Responsibility, Nature, Mild Peril, Mild Intense Scenes themes.","ageRange":"3-6","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":5,"interactivityLevel":"Moderate","dialogueIntensity":"High","soundEffectsLevel":"Very High","musicTempo":"High","totalMusicLevel":"High","totalSoundEffectTimeLevel":"Very High","sceneFrequency":"Low-Moderate","animationStyle":"2D digital animation","themes":["Overcoming Fears","Adventure","Friendship","Courage","Social Development","Perseverance","Fantasy Elements","Responsibility","Nature","Mild Peril","Mild Intense Scenes"],"friendshipRating":4,"problemSolvingRating":2,"relatableSituationsRating":4,"emotionalIntelligenceRating":2,"creativityRating":2,"educationalValueRating":3,"overallRating":1,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/tangled-before-ever-after.jpeg","id":239},{"name":"Tayo the Little Bus","description":"Tayo the Little Bus is a 3D CGI Animation with bright and vibrant colors. Color Palette: Bright and cheerful colors with high saturation. show for 3-6 year olds. It features Vehicle Themes, Vehicle Recognition, Social Development, Teamwork, Problem Solving, Community Service, Responsibility, Entertainment, Social-Emotional themes.","ageRange":"3-6","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":4,"interactivityLevel":"Low-Moderate","dialogueIntensity":"High","soundEffectsLevel":"Moderate","musicTempo":"Moderate","totalMusicLevel":"Moderate-High","totalSoundEffectTimeLevel":"Moderate","sceneFrequency":"Moderate","animationStyle":"3D CGI Animation with bright and vibrant colors. Color Palette: Bright and cheerful colors with high saturation.","themes":["Vehicle Themes","Vehicle Recognition","Social Development","Teamwork","Problem Solving","Community Service","Responsibility","Entertainment","Social-Emotional"],"friendshipRating":2,"problemSolvingRating":3,"relatableSituationsRating":4,"emotionalIntelligenceRating":2,"creativityRating":2,"educationalValueRating":3,"overallRating":2,"availableOn":["YouTube"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/tayo-the-little-bus.jpg","id":240},{"name":"Team Umizoomi","description":"Team Umizoomi is a 3D CGI animation with bright and vivid colors show for 3-6 year olds. It features STEM, Math, Problem Solving, Critical Thinking, Teamwork, Numeracy, Shapes themes.","ageRange":"3-6","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":4,"interactivityLevel":"High","dialogueIntensity":"High","soundEffectsLevel":"High","musicTempo":"High","totalMusicLevel":"High","totalSoundEffectTimeLevel":"High","sceneFrequency":"High","animationStyle":"3D CGI animation with bright and vivid colors","themes":["STEM","Math","Problem Solving","Critical Thinking","Teamwork","Numeracy","Shapes"],"friendshipRating":3,"problemSolvingRating":3,"relatableSituationsRating":1,"emotionalIntelligenceRating":3,"creativityRating":3,"educationalValueRating":4,"overallRating":2,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/team-umizoomi.jpg","id":241},{"name":"Teen Titans Go!","description":"Teen Titans Go! is a 2D digital animation with bright colors and exaggerated, stylized designs. Bright and vivid colors with high contrast. show for 8-12 year olds. It features Superhero Themes, Humor, Teamwork, Friendship, Adventure, Entertainment, Surreal Imagery, Mild Mature Themes themes.","ageRange":"8-12","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":5,"interactivityLevel":"Low","dialogueIntensity":"High","soundEffectsLevel":"Very High","musicTempo":"Moderate-High","totalMusicLevel":"High","totalSoundEffectTimeLevel":"High","sceneFrequency":"High","animationStyle":"2D digital animation with bright colors and exaggerated, stylized designs. Bright and vivid colors with high contrast.","themes":["Superhero Themes","Humor","Teamwork","Friendship","Adventure","Entertainment","Surreal Imagery","Mild Mature Themes"],"friendshipRating":4,"problemSolvingRating":1,"relatableSituationsRating":1,"emotionalIntelligenceRating":2,"creativityRating":3,"educationalValueRating":2,"overallRating":1,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/teen-titans-go.jpeg","id":242},{"name":"Teletubbies (2015-2018)","description":"Teletubbies (2015-2018) is a Live action costumed. some digital elements show for 1-4 year olds. It features Creativity & Imagination, Social-Emotional, Repetitive Learning, Sensory Exploration, Routine, Bedtime Routines themes.","ageRange":"1-4","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"Low","dialogueIntensity":"Low","soundEffectsLevel":"Low-Moderate","musicTempo":"Low","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Low","sceneFrequency":"High","animationStyle":"Live action costumed. some digital elements","themes":["Creativity & Imagination","Social-Emotional","Repetitive Learning","Sensory Exploration","Routine","Bedtime Routines"],"friendshipRating":3,"problemSolvingRating":1,"relatableSituationsRating":3,"emotionalIntelligenceRating":3,"creativityRating":4,"educationalValueRating":4,"overallRating":3,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/teletubbies-(2015-2018).jpg","id":243},{"name":"Teletubbies (1997-2001)","description":"Teletubbies (1997-2001) is a Live action costumed. some digital elements show for 1-4 year olds. It features Creativity & Imagination, Social-Emotional, Repetitive Learning, Sensory Exploration, Routine, Bedtime Routines themes.","ageRange":"1-4","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":2,"interactivityLevel":"Low","dialogueIntensity":"Low","soundEffectsLevel":"Low","musicTempo":"Low","totalMusicLevel":"Low-Moderate","totalSoundEffectTimeLevel":"Low","sceneFrequency":"Low","animationStyle":"Live action costumed. some digital elements","themes":["Creativity & Imagination","Social-Emotional","Repetitive Learning","Sensory Exploration","Routine","Bedtime Routines"],"friendshipRating":1,"problemSolvingRating":3,"relatableSituationsRating":3,"emotionalIntelligenceRating":1,"creativityRating":3,"educationalValueRating":4,"overallRating":4,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/teletubbies-(1997-2001).jpg","id":244},{"name":"The Adventures of Abney & Teal","description":"The Adventures of Abney & Teal is a Stop-motion animation with hand-crafted models. show for 3-6 year olds. It features Creativity & Imagination, Problem Solving, Social-Emotional, Nature themes.","ageRange":"3-6","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":1,"interactivityLevel":"Moderate","dialogueIntensity":"Low-Moderate","soundEffectsLevel":"Low","musicTempo":"Low-Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Low","sceneFrequency":"Low","animationStyle":"Stop-motion animation with hand-crafted models.","themes":["Creativity & Imagination","Problem Solving","Social-Emotional","Nature"],"friendshipRating":1,"problemSolvingRating":3,"relatableSituationsRating":4,"emotionalIntelligenceRating":3,"creativityRating":3,"educationalValueRating":1,"overallRating":5,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/the-adventures-of-abney-and-teal.jpeg","id":245},{"name":"The Adventures of Paddington (2019)","description":"The Adventures of Paddington (2019) is a 3D CGI animation show for 4-8 year olds. It features Cultural & Social, Emotional Intelligence, Problem Solving, Family Values, Social Development, Family Relationships themes.","ageRange":"4-8","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"Moderate","dialogueIntensity":"Moderate","soundEffectsLevel":"Moderate-High","musicTempo":"Moderate","totalMusicLevel":"High","totalSoundEffectTimeLevel":"Moderate","sceneFrequency":"Low-Moderate","animationStyle":"3D CGI animation","themes":["Cultural & Social","Emotional Intelligence","Problem Solving","Family Values","Social Development","Family Relationships"],"friendshipRating":4,"problemSolvingRating":4,"relatableSituationsRating":4,"emotionalIntelligenceRating":4,"creativityRating":3,"educationalValueRating":3,"overallRating":3,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/the-adventures-of-paddington-(2019).jpg","id":246},{"name":"The Adventures of Paddington Bear Original Series (1997–2000)","description":"The Adventures of Paddington Bear Original Series (1997–2000) is a Traditional 2D hand-drawn animation with a unique style combining stop-motion elements. show for 4-8 year olds. It features Cultural Appreciation, Friendship, Emotional Intelligence, Social-Emotional, Problem Solving themes.","ageRange":"4-8","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":2,"interactivityLevel":"Moderate","dialogueIntensity":"Moderate","soundEffectsLevel":"Low-Moderate","musicTempo":"Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Low","sceneFrequency":"Moderate","animationStyle":"Traditional 2D hand-drawn animation with a unique style combining stop-motion elements.","themes":["Cultural Appreciation","Friendship","Emotional Intelligence","Social-Emotional","Problem Solving"],"friendshipRating":3,"problemSolvingRating":3,"relatableSituationsRating":3,"emotionalIntelligenceRating":4,"creativityRating":3,"educationalValueRating":1,"overallRating":4,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/the-adventures-of-paddington-bear-original-series-(1997–2000).jpg","id":247},{"name":"The Adventures of Teddy Ruxpin","description":"The Adventures of Teddy Ruxpin is a Traditional 2D hand-drawn animation with detailed illustrations. Soft, pastel colors with a focus on everyday environments. show for 5-8 year olds. It features Life Lessons, Friendship, Adventure, Problem Solving, Morality, Fantasy Elements, Perseverance, Courage, Social-Emotional, Mild Peril themes.","ageRange":"5-8","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"Moderate","dialogueIntensity":"Moderate","soundEffectsLevel":"Moderate","musicTempo":"Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Moderate","sceneFrequency":"Moderate","animationStyle":"Traditional 2D hand-drawn animation with detailed illustrations. Soft, pastel colors with a focus on everyday environments.","themes":["Life Lessons","Friendship","Adventure","Problem Solving","Morality","Fantasy Elements","Perseverance","Courage","Social-Emotional","Mild Peril"],"friendshipRating":4,"problemSolvingRating":3,"relatableSituationsRating":3,"emotionalIntelligenceRating":1,"creativityRating":3,"educationalValueRating":1,"overallRating":3,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/the-adventures-of-teddy-ruxpin.jpg","id":248},{"name":"The adventures of the gummi bears","description":"The adventures of the gummi bears is a Traditional 2D Anime-style Animation. show for 6-10 year olds. It features Overcoming Fears, Adventure, Friendship, Fantasy Elements, Problem Solving, Courage, Perseverance, Mild Violent themes themes.","ageRange":"6-10","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":4,"interactivityLevel":"Moderate","dialogueIntensity":"High","soundEffectsLevel":"High","musicTempo":"Moderate-High","totalMusicLevel":"High","totalSoundEffectTimeLevel":"High","sceneFrequency":"Moderate","animationStyle":"Traditional 2D Anime-style Animation.","themes":["Overcoming Fears","Adventure","Friendship","Fantasy Elements","Problem Solving","Courage","Perseverance","Mild Violent themes"],"friendshipRating":4,"problemSolvingRating":4,"relatableSituationsRating":1,"emotionalIntelligenceRating":2,"creativityRating":2,"educationalValueRating":3,"overallRating":2,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/the-adventures-of-the-gummi-bears.jpg","id":249},{"name":"The Backyardigans","description":"The Backyardigans is a 3D CGI Animation with bright and vibrant colors. Color Palette: Bright and cheerful colors with high saturation. show for 3-6 year olds. It features Communication & Expression, Creativity & Imagination, Teamwork, Music, Problem Solving, Social-Emotional themes.","ageRange":"3-6","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"High","dialogueIntensity":"Moderate-High","soundEffectsLevel":"Moderate-High","musicTempo":"Moderate-High","totalMusicLevel":"High","totalSoundEffectTimeLevel":"Moderate-High","sceneFrequency":"High","animationStyle":"3D CGI Animation with bright and vibrant colors. Color Palette: Bright and cheerful colors with high saturation.","themes":["Communication & Expression","Creativity & Imagination","Teamwork","Music","Problem Solving","Social-Emotional"],"friendshipRating":3,"problemSolvingRating":3,"relatableSituationsRating":3,"emotionalIntelligenceRating":1,"creativityRating":3,"educationalValueRating":2,"overallRating":3,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/the-backyardigans.jpg","id":250},{"name":"The Bear Construction","description":"The Bear Construction is a 3D CGI animation with detailed depictions of construction sites and machinery show for 3-7 year olds. It features Vehicle Themes, Engineering Concepts, Storytelling without Dialogue, Construction, Teamwork, Problem Solving, Machinery, Vehicle Recognition, Entertainment, Curiosity, ASMR themes.","ageRange":"3-7","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"Low","dialogueIntensity":"None","soundEffectsLevel":"Very High","musicTempo":"Low","totalMusicLevel":"Low","totalSoundEffectTimeLevel":"Very High","sceneFrequency":"Moderate-High","animationStyle":"3D CGI animation with detailed depictions of construction sites and machinery","themes":["Vehicle Themes","Engineering Concepts","Storytelling without Dialogue","Construction","Teamwork","Problem Solving","Machinery","Vehicle Recognition","Entertainment","Curiosity","ASMR"],"friendshipRating":2,"problemSolvingRating":3,"relatableSituationsRating":3,"emotionalIntelligenceRating":1,"creativityRating":3,"educationalValueRating":1,"overallRating":3,"availableOn":["YouTube"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/the-bear-construction.jpg","id":251},{"name":"The Bernstein Bears","description":"The Bernstein Bears is a Traditional 2D animation with a hand-drawn look. show for 4-8 year olds. It features Relatable Situations, Social Development, Social-Emotional, Family Relationships, Family Values, Emotional Intelligence themes.","ageRange":"4-8","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":2,"interactivityLevel":"Moderate","dialogueIntensity":"Moderate","soundEffectsLevel":"Low-Moderate","musicTempo":"Low-Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Low","sceneFrequency":"Moderate-High","animationStyle":"Traditional 2D animation with a hand-drawn look.","themes":["Relatable Situations","Social Development","Social-Emotional","Family Relationships","Family Values","Emotional Intelligence"],"friendshipRating":4,"problemSolvingRating":3,"relatableSituationsRating":4,"emotionalIntelligenceRating":4,"creativityRating":1,"educationalValueRating":1,"overallRating":4,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/the-bernstein-bears.jpg","id":252},{"name":"The Big Comfy Couch","description":"The Big Comfy Couch is a Live-action costumed puppetry with detailed sets. show for 2-6 year olds. It features Preschool-Basics, Overcoming Fears, Social-Emotional, Problem Solving, Motor Skills, Numeracy, Literacy, Exercise themes.","ageRange":"2-6","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":2,"interactivityLevel":"High","dialogueIntensity":"Moderate","soundEffectsLevel":"Low-Moderate","musicTempo":"Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Low-Moderate","sceneFrequency":"Moderate","animationStyle":"Live-action costumed puppetry with detailed sets.","themes":["Preschool-Basics","Overcoming Fears","Social-Emotional","Problem Solving","Motor Skills","Numeracy","Literacy","Exercise"],"friendshipRating":2,"problemSolvingRating":3,"relatableSituationsRating":3,"emotionalIntelligenceRating":1,"creativityRating":3,"educationalValueRating":3,"overallRating":4,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/the-big-comfy-couch.jpg","id":253},{"name":"The Busy World of Richard Scarry","description":"The Busy World of Richard Scarry is a Traditional 2D hand-drawn animation with detailed illustrations. Soft, pastel colors with a focus on everyday environments. show for 3-6 year olds. It features Learning from Mistakes, Cultural & Social, Problem Solving, Social-Emotional, Community Service, Relatable Situations, Curiosity themes.","ageRange":"3-6","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":2,"interactivityLevel":"Moderate","dialogueIntensity":"Moderate","soundEffectsLevel":"Low-Moderate","musicTempo":"Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Low","sceneFrequency":"Low-Moderate","animationStyle":"Traditional 2D hand-drawn animation with detailed illustrations. Soft, pastel colors with a focus on everyday environments.","themes":["Learning from Mistakes","Cultural & Social","Problem Solving","Social-Emotional","Community Service","Relatable Situations","Curiosity"],"friendshipRating":1,"problemSolvingRating":4,"relatableSituationsRating":3,"emotionalIntelligenceRating":2,"creativityRating":1,"educationalValueRating":4,"overallRating":4,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/the-busy-world-of-richard-scarry.jpg","id":254},{"name":"The Care Bears (1985-1988)","description":"The Care Bears (1985-1988) is a Traditional 2D animation with soft character designs. Color Palette: Pastel colors and gentle hues. show for 4-8 year olds. It features Learning from Mistakes, Emotional Intelligence, Social-Emotional, Social Development, Friendship themes.","ageRange":"4-8","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":2,"interactivityLevel":"Moderate","dialogueIntensity":"Moderate","soundEffectsLevel":"Low-Moderate","musicTempo":"Low-Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Low","sceneFrequency":"Moderate","animationStyle":"Traditional 2D animation with soft character designs. Color Palette: Pastel colors and gentle hues.","themes":["Learning from Mistakes","Emotional Intelligence","Social-Emotional","Social Development","Friendship"],"friendshipRating":3,"problemSolvingRating":2,"relatableSituationsRating":4,"emotionalIntelligenceRating":3,"creativityRating":1,"educationalValueRating":3,"overallRating":4,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/the-care-bears-(1985-1988).jpg","id":255},{"name":"The Cat in the Hat","description":"The Cat in the Hat is a 2D Digital Animation with a video game aesthetic. Color Palette: Bright, vivid colors with high saturation show for 3-7 year olds. It features STEM, Science, Nature, Exploration, Problem Solving, Geography, Ecosystems, Curiosity, Critical Thinking themes.","ageRange":"3-7","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"High","dialogueIntensity":"High","soundEffectsLevel":"Moderate-High","musicTempo":"High","totalMusicLevel":"High","totalSoundEffectTimeLevel":"Moderate-High","sceneFrequency":"Moderate","animationStyle":"2D Digital Animation with a video game aesthetic. Color Palette: Bright, vivid colors with high saturation","themes":["STEM","Science","Nature","Exploration","Problem Solving","Geography","Ecosystems","Curiosity","Critical Thinking"],"friendshipRating":1,"problemSolvingRating":4,"relatableSituationsRating":1,"emotionalIntelligenceRating":1,"creativityRating":3,"educationalValueRating":4,"overallRating":3,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/the-cat-in-the-hat.jpg","id":256},{"name":"The Clangers (BBC)","description":"The Clangers (BBC) is a Traditional Stop-Motion animation with live-action model sets show for 3-6 year olds. It features Spacetime and the Cosmos, Creativity & Imagination, Problem Solving, Social-Emotional, Social Development, Exploration, Teamwork themes.","ageRange":"3-6","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":2,"interactivityLevel":"Moderate","dialogueIntensity":"Low","soundEffectsLevel":"Moderate","musicTempo":"Moderate","totalMusicLevel":"Moderate-High","totalSoundEffectTimeLevel":"Moderate","sceneFrequency":"High","animationStyle":"Traditional Stop-Motion animation with live-action model sets","themes":["Spacetime and the Cosmos","Creativity & Imagination","Problem Solving","Social-Emotional","Social Development","Exploration","Teamwork"],"friendshipRating":2,"problemSolvingRating":3,"relatableSituationsRating":4,"emotionalIntelligenceRating":3,"creativityRating":4,"educationalValueRating":1,"overallRating":4,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/the-clangers-(bbc).jpeg","id":257},{"name":"The Crocodile Hunter (1996-2007):","description":"The Crocodile Hunter (1996-2007): is a Live-action documentary featuring wildlife. Color Palette: Natural colors showcasing diverse environments. show for 8+ year olds. It features Environmental Awareness, Overcoming Fears, Positive Role Models, Wildlife Exploration, Wildlife Conservation, Nature, Natural World, Animals, Animal Behaviour, Curiosity, Ecosystems, Intense Animal Interaction themes.","ageRange":"8+","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"High","dialogueIntensity":"High","soundEffectsLevel":"Low","musicTempo":"Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Low","sceneFrequency":"Low-Moderate","animationStyle":"Live-action documentary featuring wildlife. Color Palette: Natural colors showcasing diverse environments.","themes":["Environmental Awareness","Overcoming Fears","Positive Role Models","Wildlife Exploration","Wildlife Conservation","Nature","Natural World","Animals","Animal Behaviour","Curiosity","Ecosystems","Intense Animal Interaction"],"friendshipRating":1,"problemSolvingRating":3,"relatableSituationsRating":2,"emotionalIntelligenceRating":1,"creativityRating":1,"educationalValueRating":3,"overallRating":3,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/the-crocodile-hunter-(1996-2007).jpg","id":258},{"name":"The Enchanted World of Brambly Hedge","description":"The Enchanted World of Brambly Hedge is a Stop-motion animation with hand-crafted models. show for 4-8 year olds. It features Natural World, Social-Emotional, Problem Solving, Teamwork, Curiosity, Mindfulness, Nature themes.","ageRange":"4-8","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":2,"interactivityLevel":"Moderate","dialogueIntensity":"Moderate","soundEffectsLevel":"Low-Moderate","musicTempo":"Moderate","totalMusicLevel":"Moderate-High","totalSoundEffectTimeLevel":"Low-Moderate","sceneFrequency":"Moderate","animationStyle":"Stop-motion animation with hand-crafted models.","themes":["Natural World","Social-Emotional","Problem Solving","Teamwork","Curiosity","Mindfulness","Nature"],"friendshipRating":3,"problemSolvingRating":4,"relatableSituationsRating":3,"emotionalIntelligenceRating":2,"creativityRating":3,"educationalValueRating":1,"overallRating":4,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/the-enchanted-world-of-brambly-hedge.jpg","id":259},{"name":"The Epic Tales of Captain Underpants (2018-present)","description":"The Epic Tales of Captain Underpants (2018-present) is a 2D animation with a comic-book aesthetic show for 6-10 year olds. It features Creativity & Imagination, Humor, Friendship, Problem Solving, Entertainment, Mischievous Behaviour, Toilet Humour themes.","ageRange":"6-10","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":5,"interactivityLevel":"Low","dialogueIntensity":"High","soundEffectsLevel":"High","musicTempo":"Moderate-High","totalMusicLevel":"High","totalSoundEffectTimeLevel":"High","sceneFrequency":"Low-Moderate","animationStyle":"2D animation with a comic-book aesthetic","themes":["Creativity & Imagination","Humor","Friendship","Problem Solving","Entertainment","Mischievous Behaviour","Toilet Humour"],"friendshipRating":3,"problemSolvingRating":3,"relatableSituationsRating":1,"emotionalIntelligenceRating":3,"creativityRating":4,"educationalValueRating":2,"overallRating":1,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/the-epic-tales-of-captain-underpants-(2018-present).jpeg","id":260},{"name":"The fixies","description":"The fixies is a 3D CGI Animation with detailed and dynamic visuals. show for 4-8 year olds. It features STEM, Problem Solving, Curiosity, Teamwork, Science, Motor Skills, Critical Thinking, Technology, Engineering Concepts themes.","ageRange":"4-8","episodeLength":5,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":4,"interactivityLevel":"High","dialogueIntensity":"High","soundEffectsLevel":"High","musicTempo":"Moderate-High","totalMusicLevel":"Moderate-High","totalSoundEffectTimeLevel":"High","sceneFrequency":"High","animationStyle":"3D CGI Animation with detailed and dynamic visuals.","themes":["STEM","Problem Solving","Curiosity","Teamwork","Science","Motor Skills","Critical Thinking","Technology","Engineering Concepts"],"friendshipRating":2,"problemSolvingRating":4,"relatableSituationsRating":3,"emotionalIntelligenceRating":3,"creativityRating":1,"educationalValueRating":4,"overallRating":2,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/the-fixies.jpeg","id":261},{"name":"The Land Before Time (2016)","description":"The Land Before Time (2016) is a 3D CGI Animation show for 4-8 year olds. It features Friendship, Problem Solving, Perseverance, Adventure, Entertainment, Dinosaurs, Mild Peril, Mild Intense Scenes themes.","ageRange":"4-8","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":4,"interactivityLevel":"Low","dialogueIntensity":"Moderate-High","soundEffectsLevel":"Moderate-High","musicTempo":"High","totalMusicLevel":"High","totalSoundEffectTimeLevel":"High","sceneFrequency":"High","animationStyle":"3D CGI Animation","themes":["Friendship","Problem Solving","Perseverance","Adventure","Entertainment","Dinosaurs","Mild Peril","Mild Intense Scenes"],"friendshipRating":4,"problemSolvingRating":3,"relatableSituationsRating":1,"emotionalIntelligenceRating":2,"creativityRating":1,"educationalValueRating":3,"overallRating":2,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/the-land-before-time-(2016).jpg","id":262},{"name":"The Land of Boggs","description":"The Land of Boggs is a 2D animation with simple, colorful designs and expressive characters. show for 12+ year olds. It features Cultural & Social, Life Lessons, Creativity & Imagination, Learning from Mistakes, Complex Emotional Themes, Entertainment, Humor, Silly Comedy, Skit Comedy, Slice of Life, Light Hearted, Social-Emotional, Relatable Situations, Surreal Imagery, Mature Themes themes.","ageRange":"12+","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":5,"interactivityLevel":"Low","dialogueIntensity":"High","soundEffectsLevel":"High","musicTempo":"Moderate-High","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"High","sceneFrequency":"High","animationStyle":"2D animation with simple, colorful designs and expressive characters.","themes":["Cultural & Social","Life Lessons","Creativity & Imagination","Learning from Mistakes","Complex Emotional Themes","Entertainment","Humor","Silly Comedy","Skit Comedy","Slice of Life","Light Hearted","Social-Emotional","Relatable Situations","Surreal Imagery","Mature Themes"],"friendshipRating":2,"problemSolvingRating":2,"relatableSituationsRating":3,"emotionalIntelligenceRating":3,"creativityRating":4,"educationalValueRating":3,"overallRating":1,"availableOn":["YouTube"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/the-land-of-boggs.jpeg","id":263},{"name":"The Lion Guard","description":"The Lion Guard is a 2D Digital Animation with bright and colorful designs. Color Palette: Bright and vivid colors with emphasis on primary colors. show for 4-8 year olds. It features Environmental Awareness, Natural World, Wildlife Conservation, Wildlife Exploration, Courage, Responsibility themes.","ageRange":"4-8","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":4,"interactivityLevel":"Moderate","dialogueIntensity":"High","soundEffectsLevel":"High","musicTempo":"Moderate-High","totalMusicLevel":"High","totalSoundEffectTimeLevel":"High","sceneFrequency":"High","animationStyle":"2D Digital Animation with bright and colorful designs. Color Palette: Bright and vivid colors with emphasis on primary colors.","themes":["Environmental Awareness","Natural World","Wildlife Conservation","Wildlife Exploration","Courage","Responsibility"],"friendshipRating":1,"problemSolvingRating":3,"relatableSituationsRating":2,"emotionalIntelligenceRating":1,"creativityRating":3,"educationalValueRating":1,"overallRating":2,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/the-lion-guard.jpg","id":264},{"name":"The Little Mermaid 1992 series","description":"The Little Mermaid 1992 series is a Traditional 2D Animation with Bold Designs show for 6-10 year olds. It features Environmental Awareness, Adventure, Friendship, Courage, Marine Biology, Entertainment, Teamwork, Mild Peril themes.","ageRange":"6-10","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":4,"interactivityLevel":"Low-Moderate","dialogueIntensity":"High","soundEffectsLevel":"High","musicTempo":"High","totalMusicLevel":"High","totalSoundEffectTimeLevel":"High","sceneFrequency":"High","animationStyle":"Traditional 2D Animation with Bold Designs","themes":["Environmental Awareness","Adventure","Friendship","Courage","Marine Biology","Entertainment","Teamwork","Mild Peril"],"friendshipRating":3,"problemSolvingRating":2,"relatableSituationsRating":1,"emotionalIntelligenceRating":3,"creativityRating":2,"educationalValueRating":2,"overallRating":2,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/the-little-mermaid-1992-series.jpg","id":265},{"name":"The Magic School Bus Rides Again","description":"The Magic School Bus Rides Again is a Traditional hand-drawn 2D animation show for 6-10 year olds. It features Environmental Awareness, STEM, Exploration, Critical Thinking, Discovery, Curiosity, Nature, Science themes.","ageRange":"6-10","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":4,"interactivityLevel":"High","dialogueIntensity":"High","soundEffectsLevel":"Moderate-High","musicTempo":"Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Moderate-High","sceneFrequency":"High","animationStyle":"Traditional hand-drawn 2D animation","themes":["Environmental Awareness","STEM","Exploration","Critical Thinking","Discovery","Curiosity","Nature","Science"],"friendshipRating":3,"problemSolvingRating":3,"relatableSituationsRating":1,"emotionalIntelligenceRating":2,"creativityRating":1,"educationalValueRating":4,"overallRating":2,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/the-magic-school-bus-rides-again.jpg","id":266},{"name":"The Magic School Bus (1994-1997)","description":"The Magic School Bus (1994-1997) is a 2D Traditional hand-drawn show for 6-10 year olds. It features Environmental Awareness, STEM, Nature, Science, Engineering Concepts, Curiosity, Experimentation themes.","ageRange":"6-10","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":4,"interactivityLevel":"High","dialogueIntensity":"High","soundEffectsLevel":"High","musicTempo":"Moderate-High","totalMusicLevel":"Moderate-High","totalSoundEffectTimeLevel":"High","sceneFrequency":"Moderate-High","animationStyle":"2D Traditional hand-drawn","themes":["Environmental Awareness","STEM","Nature","Science","Engineering Concepts","Curiosity","Experimentation"],"friendshipRating":2,"problemSolvingRating":3,"relatableSituationsRating":3,"emotionalIntelligenceRating":1,"creativityRating":2,"educationalValueRating":3,"overallRating":2,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/the-magic-school-bus-(1994-1997).jpg","id":267},{"name":"The Mik Maks","description":"The Mik Maks is a Live-Action Performances with Colorful Costumes and Sets. Some 2D animations show for 2-6 year olds. It features Learning through Songs, Preschool-Basics, Elementary-Basics, sing-a-long, Dance, Instruments, Music, Motor Skills, Exercise, Phonics, Vocabulary, Entertainment, Silly Comedy, Family Values, Family Relationships themes.","ageRange":"2-6","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":5,"interactivityLevel":"High","dialogueIntensity":"Moderate-High","soundEffectsLevel":"Moderate","musicTempo":"Moderate-High","totalMusicLevel":"Very High","totalSoundEffectTimeLevel":"Moderate","sceneFrequency":"Moderate","animationStyle":"Live-Action Performances with Colorful Costumes and Sets. Some 2D animations","themes":["Learning through Songs","Preschool-Basics","Elementary-Basics","sing-a-long","Dance","Instruments","Music","Motor Skills","Exercise","Phonics","Vocabulary","Entertainment","Silly Comedy","Family Values","Family Relationships"],"friendshipRating":4,"problemSolvingRating":2,"relatableSituationsRating":1,"emotionalIntelligenceRating":2,"creativityRating":2,"educationalValueRating":4,"overallRating":1,"availableOn":["YouTube"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/the-mik-maks.jpg","id":268},{"name":"The New Adventures of Winnie the Pooh","description":"The New Adventures of Winnie the Pooh is a Traditional Hand-Drawn 2D animation show for 3-7 year olds. It features Creativity & Imagination, Friendship, Problem Solving, Social Development, Emotional Intelligence, Relatable Situations themes.","ageRange":"3-7","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":2,"interactivityLevel":"Moderate","dialogueIntensity":"Low-Moderate","soundEffectsLevel":"Low","musicTempo":"Low","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Low","sceneFrequency":"Low","animationStyle":"Traditional Hand-Drawn 2D animation","themes":["Creativity & Imagination","Friendship","Problem Solving","Social Development","Emotional Intelligence","Relatable Situations"],"friendshipRating":3,"problemSolvingRating":4,"relatableSituationsRating":4,"emotionalIntelligenceRating":3,"creativityRating":4,"educationalValueRating":1,"overallRating":4,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/the-new-adventures-of-winnie-the-pooh.jpg","id":269},{"name":"The Octonauts","description":"The Octonauts is a 3D CGI animation set in an underwater world. Extremely bright and vivid colors with high saturation. show for 4-8 year olds. It features Environmental Awareness, Problem Solving, Ecosystems, Curiosity, Natural World, Marine Biology, Teamwork themes.","ageRange":"4-8","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":5,"interactivityLevel":"High","dialogueIntensity":"Moderate","soundEffectsLevel":"Moderate-High","musicTempo":"Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Moderate-High","sceneFrequency":"Moderate-High","animationStyle":"3D CGI animation set in an underwater world. Extremely bright and vivid colors with high saturation.","themes":["Environmental Awareness","Problem Solving","Ecosystems","Curiosity","Natural World","Marine Biology","Teamwork"],"friendshipRating":2,"problemSolvingRating":3,"relatableSituationsRating":1,"emotionalIntelligenceRating":1,"creativityRating":3,"educationalValueRating":4,"overallRating":1,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/the-octonauts.jpg","id":270},{"name":"The Oddbods Show","description":"The Oddbods Show is a 3D CGI animation with bright and vivid colors show for 6-10 year olds. It features Creativity & Imagination, Humor, Problem Solving, Friendship, Entertainment, Social-Emotional, Slapstick Comedy, Mischievous Behaviour themes.","ageRange":"6-10","episodeLength":5,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":5,"interactivityLevel":"Moderate","dialogueIntensity":"None","soundEffectsLevel":"Very High","musicTempo":"High","totalMusicLevel":"High","totalSoundEffectTimeLevel":"Very High","sceneFrequency":"High","animationStyle":"3D CGI animation with bright and vivid colors","themes":["Creativity & Imagination","Humor","Problem Solving","Friendship","Entertainment","Social-Emotional","Slapstick Comedy","Mischievous Behaviour"],"friendshipRating":4,"problemSolvingRating":3,"relatableSituationsRating":4,"emotionalIntelligenceRating":3,"creativityRating":3,"educationalValueRating":1,"overallRating":1,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/the-oddbods-show.jpg","id":271},{"name":"The Snoopy Show","description":"The Snoopy Show is a 2D digital animation show for 6-10 year olds. It features Cultural & Social, Creativity & Imagination, Entertainment, Social Development, Friendship themes.","ageRange":"6-10","episodeLength":5,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"Low-Moderate","dialogueIntensity":"Low-Moderate","soundEffectsLevel":"Moderate-High","musicTempo":"Moderate","totalMusicLevel":"High","totalSoundEffectTimeLevel":"High","sceneFrequency":"High","animationStyle":"2D digital animation","themes":["Cultural & Social","Creativity & Imagination","Entertainment","Social Development","Friendship"],"friendshipRating":4,"problemSolvingRating":3,"relatableSituationsRating":3,"emotionalIntelligenceRating":2,"creativityRating":3,"educationalValueRating":2,"overallRating":3,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/the-snoopy-show.jpg","id":272},{"name":"The Stinky & Dirty Show (2016-2019)","description":"The Stinky & Dirty Show (2016-2019) is a 3D CGI animation show for 3-6 year olds. It features Creativity & Imagination, Problem Solving, Teamwork, Perseverance, Engineering Concepts, Critical Thinking themes.","ageRange":"3-6","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"Moderate","dialogueIntensity":"Moderate","soundEffectsLevel":"Moderate-High","musicTempo":"Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Moderate-High","sceneFrequency":"Moderate-High","animationStyle":"3D CGI animation","themes":["Creativity & Imagination","Problem Solving","Teamwork","Perseverance","Engineering Concepts","Critical Thinking"],"friendshipRating":2,"problemSolvingRating":3,"relatableSituationsRating":3,"emotionalIntelligenceRating":3,"creativityRating":3,"educationalValueRating":3,"overallRating":3,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/the-stinky-and-dirty-show-(2016-2019).jpg","id":273},{"name":"The Wiggles","description":"The Wiggles is a Live-Action with Bright Colors and Simple Settings show for 1-4 year olds. It features Physical Fitness, Preschool-Basics, Music, Dance, sing-a-long, Motor Skills, Social-Emotional, Entertainment themes.","ageRange":"1-4","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":4,"interactivityLevel":"High","dialogueIntensity":"High","soundEffectsLevel":"Moderate-High","musicTempo":"High","totalMusicLevel":"High","totalSoundEffectTimeLevel":"Moderate-High","sceneFrequency":"Moderate","animationStyle":"Live-Action with Bright Colors and Simple Settings","themes":["Physical Fitness","Preschool-Basics","Music","Dance","sing-a-long","Motor Skills","Social-Emotional","Entertainment"],"friendshipRating":2,"problemSolvingRating":3,"relatableSituationsRating":4,"emotionalIntelligenceRating":3,"creativityRating":3,"educationalValueRating":4,"overallRating":2,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/the-wiggles.jpg","id":274},{"name":"Theodore Tugboat","description":"Theodore Tugboat is a Combination of live-action, puppetry, and CGI elements. Color Palette: Bright and vivid colors with high contrast show for 3-6 year olds. It features Environmental Awareness, Problem Solving, Friendship, Teamwork, Adventure, Responsibility, Social-Emotional themes.","ageRange":"3-6","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":2,"interactivityLevel":"Moderate","dialogueIntensity":"Moderate","soundEffectsLevel":"Low-Moderate","musicTempo":"Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Low-Moderate","sceneFrequency":"High","animationStyle":"Combination of live-action, puppetry, and CGI elements. Color Palette: Bright and vivid colors with high contrast","themes":["Environmental Awareness","Problem Solving","Friendship","Teamwork","Adventure","Responsibility","Social-Emotional"],"friendshipRating":3,"problemSolvingRating":3,"relatableSituationsRating":3,"emotionalIntelligenceRating":3,"creativityRating":3,"educationalValueRating":1,"overallRating":4,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/theodore-tugboat.jpeg","id":275},{"name":"Thomas & Friends (1984-2008)","description":"Thomas & Friends (1984-2008) is a Traditional Stop-Motion animation with live-action model sets show for 3-6 year olds. It features Friendship, Teamwork, Problem Solving, Responsibility themes.","ageRange":"3-6","episodeLength":5,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":1,"interactivityLevel":"Moderate","dialogueIntensity":"Low","soundEffectsLevel":"Low","musicTempo":"Low","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Low","sceneFrequency":"Low-Moderate","animationStyle":"Traditional Stop-Motion animation with live-action model sets","themes":["Friendship","Teamwork","Problem Solving","Responsibility"],"friendshipRating":4,"problemSolvingRating":4,"relatableSituationsRating":3,"emotionalIntelligenceRating":1,"creativityRating":3,"educationalValueRating":2,"overallRating":5,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/thomas-and-friends-(1984-2008).jpg","id":276},{"name":"Thomas & Friends: All Engines Go (2021)","description":"Thomas & Friends: All Engines Go (2021) is a 3D CGI animation show for 2-5 year olds. It features Friendship, Teamwork, Responsibility, Problem Solving themes.","ageRange":"2-5","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":5,"interactivityLevel":"Low","dialogueIntensity":"High","soundEffectsLevel":"High","musicTempo":"High","totalMusicLevel":"High","totalSoundEffectTimeLevel":"High","sceneFrequency":"Low","animationStyle":"3D CGI animation","themes":["Friendship","Teamwork","Responsibility","Problem Solving"],"friendshipRating":3,"problemSolvingRating":4,"relatableSituationsRating":3,"emotionalIntelligenceRating":1,"creativityRating":2,"educationalValueRating":2,"overallRating":1,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/thomas-and-friends-all-engines-go-(2021).jpg","id":277},{"name":"Time for school","description":"Time for school is a Live-action with real actors. show for 3-6 year olds. It features Arts & Crafts, Preschool-Basics, Elementary-Basics, Relatable Situations, Social Development, Social-Emotional, Routine, Motor Skills themes.","ageRange":"3-6","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":2,"interactivityLevel":"Moderate","dialogueIntensity":"Moderate","soundEffectsLevel":"Low","musicTempo":"Moderate","totalMusicLevel":"Low-Moderate","totalSoundEffectTimeLevel":"Low","sceneFrequency":"High","animationStyle":"Live-action with real actors.","themes":["Arts & Crafts","Preschool-Basics","Elementary-Basics","Relatable Situations","Social Development","Social-Emotional","Routine","Motor Skills"],"friendshipRating":1,"problemSolvingRating":3,"relatableSituationsRating":4,"emotionalIntelligenceRating":3,"creativityRating":4,"educationalValueRating":3,"overallRating":4,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/time-for-school.jpeg","id":278},{"name":"Tinga Tinga Tales","description":"Tinga Tinga Tales is a 2D Animation Inspired by Tinga Tinga African Art show for 4-7 year olds. It features Cultural Appreciation, Cultural & Social, Learning from Mistakes, African folk tales, Cultures & Traditions, Animals, Curiosity, Nature Sounds, Traditional Narratives, Geography, Animal Behaviour, Social-Emotional, Morality, Friendship, Responsibility, Humor, Entertainment, Light Hearted themes.","ageRange":"4-7","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"Moderate","dialogueIntensity":"Moderate-High","soundEffectsLevel":"Moderate","musicTempo":"Moderate","totalMusicLevel":"Moderate-High","totalSoundEffectTimeLevel":"Moderate","sceneFrequency":"Moderate","animationStyle":"2D Animation Inspired by Tinga Tinga African Art","themes":["Cultural Appreciation","Cultural & Social","Learning from Mistakes","African folk tales","Cultures & Traditions","Animals","Curiosity","Nature Sounds","Traditional Narratives","Geography","Animal Behaviour","Social-Emotional","Morality","Friendship","Responsibility","Humor","Entertainment","Light Hearted"],"friendshipRating":4,"problemSolvingRating":1,"relatableSituationsRating":3,"emotionalIntelligenceRating":2,"creativityRating":4,"educationalValueRating":3,"overallRating":3,"availableOn":["YouTube"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/tinga-tinga-tales.jpg","id":279},{"name":"Tom & Jerry","description":"Tom & Jerry is a 2D Digital Animation with exaggerated and dynamic character movements. show for 6-12 year olds. It features Creativity & Imagination, Humor, Problem Solving, Slapstick Comedy, Rivalry, Entertainment, Music, Mild Fantasy Violence themes.","ageRange":"6-12","episodeLength":5,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":4,"interactivityLevel":"Low","dialogueIntensity":"None","soundEffectsLevel":"Very High","musicTempo":"High","totalMusicLevel":"Very High","totalSoundEffectTimeLevel":"Very High","sceneFrequency":"Low-Moderate","animationStyle":"2D Digital Animation with exaggerated and dynamic character movements.","themes":["Creativity & Imagination","Humor","Problem Solving","Slapstick Comedy","Rivalry","Entertainment","Music","Mild Fantasy Violence"],"friendshipRating":3,"problemSolvingRating":4,"relatableSituationsRating":2,"emotionalIntelligenceRating":1,"creativityRating":3,"educationalValueRating":1,"overallRating":2,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/tom-and-jerry.jpeg","id":280},{"name":"Topsy and Tim","description":"Topsy and Tim is a Live-action with real actors. show for 3-6 year olds. It features Social-Emotional, Relatable Situations, Family Relationships, Problem Solving, Emotional Intelligence themes.","ageRange":"3-6","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":2,"interactivityLevel":"Moderate","dialogueIntensity":"Moderate","soundEffectsLevel":"Low","musicTempo":"Low-Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Low","sceneFrequency":"High","animationStyle":"Live-action with real actors.","themes":["Social-Emotional","Relatable Situations","Family Relationships","Problem Solving","Emotional Intelligence"],"friendshipRating":3,"problemSolvingRating":4,"relatableSituationsRating":3,"emotionalIntelligenceRating":4,"creativityRating":2,"educationalValueRating":3,"overallRating":4,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/topsy-and-tim.jpeg","id":281},{"name":"Tots TV","description":"Tots TV is a Live-Action with puppet segments. Color Palette: Soft, natural colors. show for 2-5 year olds. It features Cultures & Traditions, Creativity & Imagination, Social-Emotional, Problem Solving, Literacy, Curiosity, Language Learning themes.","ageRange":"2-5","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":2,"interactivityLevel":"High","dialogueIntensity":"Moderate","soundEffectsLevel":"Low-Moderate","musicTempo":"Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Low-Moderate","sceneFrequency":"Moderate","animationStyle":"Live-Action with puppet segments. Color Palette: Soft, natural colors.","themes":["Cultures & Traditions","Creativity & Imagination","Social-Emotional","Problem Solving","Literacy","Curiosity","Language Learning"],"friendshipRating":2,"problemSolvingRating":4,"relatableSituationsRating":4,"emotionalIntelligenceRating":2,"creativityRating":4,"educationalValueRating":4,"overallRating":4,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/tots-tv.jpg","id":282},{"name":"Tractor Ted","description":"Tractor Ted is a Live-Action and 2D Animation show for 2-5 year olds. It features Agriculture, Machinery, Farm Life, Animals, Nature, Animal Behaviour themes.","ageRange":"2-5","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":2,"interactivityLevel":"High","dialogueIntensity":"Low-Moderate","soundEffectsLevel":"Low","musicTempo":"Low-Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Low","sceneFrequency":"Low-Moderate","animationStyle":"Live-Action and 2D Animation","themes":["Agriculture","Machinery","Farm Life","Animals","Nature","Animal Behaviour"],"friendshipRating":2,"problemSolvingRating":2,"relatableSituationsRating":1,"emotionalIntelligenceRating":2,"creativityRating":3,"educationalValueRating":2,"overallRating":4,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/tractor-ted.jpg","id":283},{"name":"Trash truck","description":"Trash truck is a 3D CGI animation show for 3-6 year olds. It features Creativity & Imagination, Problem Solving, Emotional Intelligence themes.","ageRange":"3-6","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":4,"interactivityLevel":"Low","dialogueIntensity":"Moderate-High","soundEffectsLevel":"High","musicTempo":"Moderate","totalMusicLevel":"Moderate-High","totalSoundEffectTimeLevel":"Moderate-High","sceneFrequency":"Moderate","animationStyle":"3D CGI animation","themes":["Creativity & Imagination","Problem Solving","Emotional Intelligence"],"friendshipRating":2,"problemSolvingRating":4,"relatableSituationsRating":1,"emotionalIntelligenceRating":3,"creativityRating":4,"educationalValueRating":2,"overallRating":2,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/trash-truck.jpeg","id":284},{"name":"Tumble leaf","description":"Tumble leaf is a Digital 3D Stop-Motion show for 3-6 year olds. It features Creativity & Imagination, Nature, Motor Skills, Critical Thinking, Exploration, Natural World, Cognitive Development themes.","ageRange":"3-6","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":2,"interactivityLevel":"High","dialogueIntensity":"Low","soundEffectsLevel":"Low-Moderate","musicTempo":"Moderate","totalMusicLevel":"Moderate-High","totalSoundEffectTimeLevel":"Moderate","sceneFrequency":"High","animationStyle":"Digital 3D Stop-Motion","themes":["Creativity & Imagination","Nature","Motor Skills","Critical Thinking","Exploration","Natural World","Cognitive Development"],"friendshipRating":3,"problemSolvingRating":4,"relatableSituationsRating":1,"emotionalIntelligenceRating":2,"creativityRating":3,"educationalValueRating":3,"overallRating":4,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/tumble-leaf.jpg","id":285},{"name":"Tweedy & Fluff","description":"Tweedy & Fluff is a Traditional stop-frame animation techniques, meticulously capturing each movement of the handcrafted puppets frame by frame to create fluid and engaging motion. show for 2-5 year olds. It features Life-Lessons, Exploring Emotions, Communication and Expression, Stop-Motion, Slice of Life, Friendship, Pet Ownership, Empathy, Gentle Humour, Problem-Solving, Relatable-Situations themes.","ageRange":"2-5","episodeLength":5,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":1,"interactivityLevel":"Low-Moderate","dialogueIntensity":"Low","soundEffectsLevel":"Moderate","musicTempo":"Low-Moderate","totalMusicLevel":"Moderate-High","totalSoundEffectTimeLevel":"Moderate","sceneFrequency":"Low","animationStyle":"Traditional stop-frame animation techniques, meticulously capturing each movement of the handcrafted puppets frame by frame to create fluid and engaging motion.","themes":["Life-Lessons","Exploring Emotions","Communication and Expression","Stop-Motion","Slice of Life","Friendship","Pet Ownership","Empathy","Gentle Humour","Problem-Solving","Relatable-Situations"],"friendshipRating":4,"problemSolvingRating":1,"relatableSituationsRating":4,"emotionalIntelligenceRating":3,"creativityRating":2,"educationalValueRating":3,"overallRating":5,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/tweedy-and-fluff.jpg","id":286},{"name":"Ultimate Spiderman","description":"Ultimate Spiderman is a 2D Digital Animation with bold lines and exaggerated expressions. Color Palette: Bright and vivid colors with high contrast show for 7-12 year olds. It features Superhero Themes, Morality, Responsibility, Courage, Problem Solving, Entertainment, Humor, Mild Violent themes, Mild Fantasy Violence themes.","ageRange":"7-12","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":5,"interactivityLevel":"Low-Moderate","dialogueIntensity":"High","soundEffectsLevel":"Very High","musicTempo":"High","totalMusicLevel":"High","totalSoundEffectTimeLevel":"Very High","sceneFrequency":"Moderate","animationStyle":"2D Digital Animation with bold lines and exaggerated expressions. Color Palette: Bright and vivid colors with high contrast","themes":["Superhero Themes","Morality","Responsibility","Courage","Problem Solving","Entertainment","Humor","Mild Violent themes","Mild Fantasy Violence"],"friendshipRating":3,"problemSolvingRating":4,"relatableSituationsRating":1,"emotionalIntelligenceRating":3,"creativityRating":1,"educationalValueRating":1,"overallRating":1,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/ultimate-spiderman.jpeg","id":287},{"name":"VeggieTales","description":"VeggieTales is a 3D CGI show for 4-8 year olds. It features Cultures & Traditions, Religion, Responsibility, Family Values, History, Literacy, Social Development, Community Service, Biblical Teachings themes.","ageRange":"4-8","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":4,"interactivityLevel":"Moderate","dialogueIntensity":"High","soundEffectsLevel":"Moderate","musicTempo":"Moderate","totalMusicLevel":"High","totalSoundEffectTimeLevel":"Moderate","sceneFrequency":"Very High","animationStyle":"3D CGI","themes":["Cultures & Traditions","Religion","Responsibility","Family Values","History","Literacy","Social Development","Community Service","Biblical Teachings"],"friendshipRating":1,"problemSolvingRating":3,"relatableSituationsRating":4,"emotionalIntelligenceRating":2,"creativityRating":2,"educationalValueRating":3,"overallRating":2,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/veggietales.jpg","id":288},{"name":"VeggieTales in the House (2014-2016)","description":"VeggieTales in the House (2014-2016) is a 3D CGI show for 4-7 year olds. It features Cultures & Traditions, Religion, Responsibility, Family Values, History, Literacy, Social Development, Community Service, Biblical Teachings themes.","ageRange":"4-7","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"Moderate","dialogueIntensity":"High","soundEffectsLevel":"Moderate","musicTempo":"Moderate","totalMusicLevel":"High","totalSoundEffectTimeLevel":"Moderate","sceneFrequency":"Moderate","animationStyle":"3D CGI","themes":["Cultures & Traditions","Religion","Responsibility","Family Values","History","Literacy","Social Development","Community Service","Biblical Teachings"],"friendshipRating":2,"problemSolvingRating":2,"relatableSituationsRating":3,"emotionalIntelligenceRating":3,"creativityRating":2,"educationalValueRating":3,"overallRating":3,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/veggietales-in-the-house.jpg","id":289},{"name":"Vlad and Nikki","description":"Vlad and Nikki is a Live-action videos featuring Vlad and Niki, often enhanced with special effects and animations to create engaging and fantastical elements. show for 3-8 year olds. It features Learn Through Play, Creativity & Imagination, Problem Solving, Adventure, Family Relationships, Multilingual Learning, Humor, Entertainment, Hyper-Activity themes.","ageRange":"3-8","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":5,"interactivityLevel":"Low","dialogueIntensity":"High","soundEffectsLevel":"Very High","musicTempo":"High","totalMusicLevel":"High","totalSoundEffectTimeLevel":"Very High","sceneFrequency":"High","animationStyle":"Live-action videos featuring Vlad and Niki, often enhanced with special effects and animations to create engaging and fantastical elements.","themes":["Learn Through Play","Creativity & Imagination","Problem Solving","Adventure","Family Relationships","Multilingual Learning","Humor","Entertainment","Hyper-Activity"],"friendshipRating":3,"problemSolvingRating":3,"relatableSituationsRating":1,"emotionalIntelligenceRating":3,"creativityRating":4,"educationalValueRating":4,"overallRating":1,"availableOn":["YouTube"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/vlad-and-nikki.jpg","id":290},{"name":"Vooks","description":"Vooks is a Animated adaptations of children's books, featuring subtle animations that complement the original illustrations, accompanied by professional narration and sound effects. show for 2-8 year olds. It features Creativity & Imagination, Literacy, Reading Comprehension, Vocabulary, Language Learning, Phonics, Cognitive Development, Music, Speech Development, Read-Along themes.","ageRange":"2-8","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":2,"interactivityLevel":"High","dialogueIntensity":"Moderate","soundEffectsLevel":"Low-Moderate","musicTempo":"Moderate","totalMusicLevel":"Moderate-High","totalSoundEffectTimeLevel":"Moderate-High","sceneFrequency":"Low-Moderate","animationStyle":"Animated adaptations of children's books, featuring subtle animations that complement the original illustrations, accompanied by professional narration and sound effects.","themes":["Creativity & Imagination","Literacy","Reading Comprehension","Vocabulary","Language Learning","Phonics","Cognitive Development","Music","Speech Development","Read-Along"],"friendshipRating":1,"problemSolvingRating":1,"relatableSituationsRating":2,"emotionalIntelligenceRating":3,"creativityRating":4,"educationalValueRating":3,"overallRating":4,"availableOn":["YouTube"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/Vooks.jpg","id":291},{"name":"Wacky Races","description":"Wacky Races is a Cartoonish 2D animation style show for 6-10 year olds. It features Creativity & Imagination, Adventure, Humor, Entertainment, Perseverance, Slapstick Comedy, Mechanics, Engineering Concepts, Lack of Consequences, Mild Intense Scenes, Mild Violent themes themes.","ageRange":"6-10","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":5,"interactivityLevel":"Low","dialogueIntensity":"Moderate-High","soundEffectsLevel":"Very High","musicTempo":"High","totalMusicLevel":"High","totalSoundEffectTimeLevel":"Very High","sceneFrequency":"Moderate","animationStyle":"Cartoonish 2D animation style","themes":["Creativity & Imagination","Adventure","Humor","Entertainment","Perseverance","Slapstick Comedy","Mechanics","Engineering Concepts","Lack of Consequences","Mild Intense Scenes","Mild Violent themes"],"friendshipRating":3,"problemSolvingRating":3,"relatableSituationsRating":3,"emotionalIntelligenceRating":1,"creativityRating":3,"educationalValueRating":1,"overallRating":1,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/wacky-races.jpeg","id":292},{"name":"Wallykazam","description":"Wallykazam is a 3D CGI Animation with bright and vibrant colors. Color Palette: Bright and cheerful colors with high saturation. show for 3-6 year olds. It features Elementary-Basics, Motor Skills, Problem Solving, Language Learning, Literacy, Fantasy Elements, Reading Comprehension, Phonics themes.","ageRange":"3-6","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"High","dialogueIntensity":"High","soundEffectsLevel":"Moderate","musicTempo":"Moderate","totalMusicLevel":"Moderate-High","totalSoundEffectTimeLevel":"Moderate","sceneFrequency":"Very High","animationStyle":"3D CGI Animation with bright and vibrant colors. Color Palette: Bright and cheerful colors with high saturation.","themes":["Elementary-Basics","Motor Skills","Problem Solving","Language Learning","Literacy","Fantasy Elements","Reading Comprehension","Phonics"],"friendshipRating":3,"problemSolvingRating":3,"relatableSituationsRating":2,"emotionalIntelligenceRating":2,"creativityRating":2,"educationalValueRating":3,"overallRating":3,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/wallykazam.jpg","id":293},{"name":"What's New, Scooby-Doo? (2002–2006)","description":"What's New, Scooby-Doo? (2002–2006) is a Digital 2D animation show for 7-12 year olds. It features Problem Solving, Teamwork, Mystery, Entertainment, Humor, Critical Thinking, Mild Peril, Mild Fantasy Violence themes.","ageRange":"7-12","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":5,"interactivityLevel":"Low","dialogueIntensity":"Moderate-High","soundEffectsLevel":"High","musicTempo":"High","totalMusicLevel":"High","totalSoundEffectTimeLevel":"High","sceneFrequency":"Moderate","animationStyle":"Digital 2D animation","themes":["Problem Solving","Teamwork","Mystery","Entertainment","Humor","Critical Thinking","Mild Peril","Mild Fantasy Violence"],"friendshipRating":3,"problemSolvingRating":3,"relatableSituationsRating":1,"emotionalIntelligenceRating":2,"creativityRating":1,"educationalValueRating":1,"overallRating":1,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/whats-new-scooby-doo.jpeg","id":294},{"name":"Wishenpoof","description":"Wishenpoof is a 3D CGI Animation with stylized and colorful designs. Bright but not overly saturated colors, with a focus on vibrant settings. show for 3-6 year olds. It features Creativity & Imagination, Social-Emotional, Problem Solving, Social Development, Morality, Emotional Intelligence themes.","ageRange":"3-6","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"High","dialogueIntensity":"High","soundEffectsLevel":"Moderate","musicTempo":"Moderate","totalMusicLevel":"Moderate-High","totalSoundEffectTimeLevel":"Moderate","sceneFrequency":"High","animationStyle":"3D CGI Animation with stylized and colorful designs. Bright but not overly saturated colors, with a focus on vibrant settings.","themes":["Creativity & Imagination","Social-Emotional","Problem Solving","Social Development","Morality","Emotional Intelligence"],"friendshipRating":3,"problemSolvingRating":3,"relatableSituationsRating":4,"emotionalIntelligenceRating":4,"creativityRating":4,"educationalValueRating":1,"overallRating":3,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/wishenpoof.jpeg","id":295},{"name":"Woolly and Tig","description":"Woolly and Tig is a Combination of live-action and CGI animation. show for 2-5 year olds. It features Overcoming Fears, Social-Emotional, Relatable Situations, Courage, Emotional Intelligence themes.","ageRange":"2-5","episodeLength":5,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":2,"interactivityLevel":"Moderate","dialogueIntensity":"Moderate","soundEffectsLevel":"Low-Moderate","musicTempo":"Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Low-Moderate","sceneFrequency":"Moderate","animationStyle":"Combination of live-action and CGI animation.","themes":["Overcoming Fears","Social-Emotional","Relatable Situations","Courage","Emotional Intelligence"],"friendshipRating":2,"problemSolvingRating":1,"relatableSituationsRating":3,"emotionalIntelligenceRating":3,"creativityRating":3,"educationalValueRating":1,"overallRating":4,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/wolly-and-tig.jpg","id":296},{"name":"Work It Out Wombats","description":"Work It Out Wombats is a 2D digital animation with a hand-drawn look. Bright and cheerful colors with simple backgrounds show for 4-7 year olds. It features Life Lessons, Problem Solving, Teamwork, Critical Thinking, Social-Emotional, Relatable Situations themes.","ageRange":"4-7","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"High","dialogueIntensity":"Moderate-High","soundEffectsLevel":"Moderate","musicTempo":"Moderate","totalMusicLevel":"Moderate-High","totalSoundEffectTimeLevel":"Moderate","sceneFrequency":"Low-Moderate","animationStyle":"2D digital animation with a hand-drawn look. Bright and cheerful colors with simple backgrounds","themes":["Life Lessons","Problem Solving","Teamwork","Critical Thinking","Social-Emotional","Relatable Situations"],"friendshipRating":2,"problemSolvingRating":4,"relatableSituationsRating":4,"emotionalIntelligenceRating":1,"creativityRating":2,"educationalValueRating":1,"overallRating":3,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/work-it-out-wombats.jpg","id":297},{"name":"Xavier Riddle and the Secret Museum","description":"Xavier Riddle and the Secret Museum is a 2D Digital Animation with a watercolor aesthetic. Color Palette: Soft and natural colors with pastel hues. show for 5-8 year olds. It features Cultures & Traditions, Life Lessons, History, Morality, Problem Solving, Curiosity, Courage, Adventure themes.","ageRange":"5-8","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"High","dialogueIntensity":"Moderate-High","soundEffectsLevel":"Moderate","musicTempo":"Moderate","totalMusicLevel":"Moderate","totalSoundEffectTimeLevel":"Moderate","sceneFrequency":"Moderate","animationStyle":"2D Digital Animation with a watercolor aesthetic. Color Palette: Soft and natural colors with pastel hues.","themes":["Cultures & Traditions","Life Lessons","History","Morality","Problem Solving","Curiosity","Courage","Adventure"],"friendshipRating":1,"problemSolvingRating":4,"relatableSituationsRating":3,"emotionalIntelligenceRating":2,"creativityRating":2,"educationalValueRating":2,"overallRating":3,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/Xavier Riddle and the Secret Museum.jpg","id":298},{"name":"Zaky & friends","description":"Zaky & friends is a 2D Digital Animation with bright colors. Color Palette: Vibrant and engaging. show for 3-8 year olds. It features Life Lessons, Cultures & Traditions, Learning through Songs, Cultural Appreciation, Spiritual Development, Quranic stories, Religion, Literacy, Numeracy, Social Development, Social-Emotional, Emotional Intelligence themes.","ageRange":"3-8","episodeLength":15,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"High","dialogueIntensity":"Moderate-High","soundEffectsLevel":"Moderate","musicTempo":"Moderate","totalMusicLevel":"Moderate-High","totalSoundEffectTimeLevel":"Moderate","sceneFrequency":"Low-Moderate","animationStyle":"2D Digital Animation with bright colors. Color Palette: Vibrant and engaging.","themes":["Life Lessons","Cultures & Traditions","Learning through Songs","Cultural Appreciation","Spiritual Development","Quranic stories","Religion","Literacy","Numeracy","Social Development","Social-Emotional","Emotional Intelligence"],"friendshipRating":3,"problemSolvingRating":2,"relatableSituationsRating":3,"emotionalIntelligenceRating":4,"creativityRating":2,"educationalValueRating":4,"overallRating":3,"availableOn":["YouTube"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/zaky-and-friends.jpg","id":299},{"name":"Zoboomafoo (1999-2001)","description":"Zoboomafoo (1999-2001) is a Live-action, puppetry, and animation show for 4-8 year olds. It features Environmental Awareness, Wildlife Exploration, Animals, Curiosity, Nature, Wildlife Conservation themes.","ageRange":"4-8","episodeLength":30,"creator":null,"releaseYear":null,"endYear":null,"isOngoing":true,"stimulationScore":3,"interactivityLevel":"Moderate","dialogueIntensity":"High","soundEffectsLevel":"Moderate","musicTempo":"Moderate-High","totalMusicLevel":"High","totalSoundEffectTimeLevel":"Moderate","sceneFrequency":"Moderate-High","animationStyle":"Live-action, puppetry, and animation","themes":["Environmental Awareness","Wildlife Exploration","Animals","Curiosity","Nature","Wildlife Conservation"],"friendshipRating":1,"problemSolvingRating":2,"relatableSituationsRating":1,"emotionalIntelligenceRating":2,"creativityRating":1,"educationalValueRating":2,"overallRating":3,"availableOn":["TV"],"imageUrl":"https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/zoboomafoo.jpg","id":300}]
</file>

<file path="tailwind.config.ts">
import type { Config } from "tailwindcss";

export default {
  darkMode: ["class"],
  content: ["./client/index.html", "./client/src/**/*.{js,jsx,ts,tsx}"],
  theme: {
    extend: {
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      colors: {
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        chart: {
          "1": "hsl(var(--chart-1))",
          "2": "hsl(var(--chart-2))",
          "3": "hsl(var(--chart-3))",
          "4": "hsl(var(--chart-4))",
          "5": "hsl(var(--chart-5))",
        },
        sidebar: {
          DEFAULT: "hsl(var(--sidebar-background))",
          foreground: "hsl(var(--sidebar-foreground))",
          primary: "hsl(var(--sidebar-primary))",
          "primary-foreground": "hsl(var(--sidebar-primary-foreground))",
          accent: "hsl(var(--sidebar-accent))",
          "accent-foreground": "hsl(var(--sidebar-accent-foreground))",
          border: "hsl(var(--sidebar-border))",
          ring: "hsl(var(--sidebar-ring))",
        },
      },
      keyframes: {
        "accordion-down": {
          from: {
            height: "0",
          },
          to: {
            height: "var(--radix-accordion-content-height)",
          },
        },
        "accordion-up": {
          from: {
            height: "var(--radix-accordion-content-height)",
          },
          to: {
            height: "0",
          },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
      },
    },
  },
  plugins: [require("tailwindcss-animate"), require("@tailwindcss/typography")],
} satisfies Config;
</file>

<file path="tsconfig.json">
{
  "include": ["client/src/**/*", "shared/**/*", "server/**/*"],
  "exclude": ["node_modules", "build", "dist", "**/*.test.ts"],
  "compilerOptions": {
    "incremental": true,
    "tsBuildInfoFile": "./node_modules/typescript/tsbuildinfo",
    "noEmit": true,
    "module": "ESNext",
    "strict": true,
    "lib": ["esnext", "dom", "dom.iterable"],
    "jsx": "preserve",
    "esModuleInterop": true,
    "skipLibCheck": true,
    "allowImportingTsExtensions": true,
    "moduleResolution": "bundler",
    "baseUrl": ".",
    "types": ["node", "vite/client"],
    "paths": {
      "@/*": ["./client/src/*"],
      "@shared/*": ["./shared/*"]
    }
  }
}
</file>

<file path="tvshow_sensory_data.csv">
Programs,Stimulation Score,TV or YouTube,Target Age Group,Seasons,,Avg. Epsiode,"Themes, Teachings, Guidance",Interactivity Level,Animation Styles,Dialougue Intensity,Sound Effects,Music Tempo,Total Music,Total Sound Effect Time,Scene Frequency
A for Adley,4,YouTube,3-8,,,,"Preschool-Basics, Creativity & Imagination, Family Relationships, Family Values, Conflict Resolution, Problem Solving, Relatable Situations",High,Live-Action Family Videos,Moderate-High,Moderate-High,Moderate,Moderate,Moderate,Moderate-High
"Ada Twist, Scientist",3,TV,4-8,4 Seasons,, 12 minutes,"Positive Role Models, STEM, Critical Thinking, Curiosity, Problem Solving, Teamwork, Perseverance, Science",High,3D CGI animation with bright and vivid colors,Moderate-High,Moderate,Moderate,Moderate,Moderate,Moderate
Adventure Agents,4,YouTube,"6-12, 12+",,,,"Enviromental Awareness, Cause and Effect, Life Lessons, Outdoor Exploration, Nature, Natural World, Exploration, Motor Skills, Animals, Farm Life, Emotional Intelligence, Problem Solving, Critical Thinking, Teamwork, Curiosity, Adventure, Discovery, Safety, Nature Sounds, Healthy Eating, Confidence Building, Mature Themes, Wild Animal Captures and Cooking",High,Live Action Outdoors Survival Adventure,Moderate-High,Mod-High (Nature),Low,Low,Moderate-High,Moderate
Adventure Time (2010-2018),5,TV,10-14,10 Seasons,, 11 minutes,"Creativity & Imagination, Humor, Problem Solving, Friendship, Entertainment, Fantasy Elements, Adventure, Mild Mature Themes",Low to Moderate,Traditional hand-drawn 2D animation,High,High,Moderate-High,High,High,High
Akili and Me,3,YouTube,3-6,,,,"Creativity & Imagination, Early Childhood experiences, Cultures & Traditions, Cultural & Social, Life Lessons, Preschool-Basics, Numeracy, Literacy, Motor Skills, Music, Repetitive Learning, Language Learning, Exercise, Colours, Shapes, sing-a-long, Social-Emotional, Cognitive Development",High,2D digital animation with a hand-drawn look. Bright and cheerful colors with simple backgrounds,High,Moderate,Moderate,High,Moderate,Moderate
Alma's Way,2,TV,4-8,2 Seasons,, 26 minutes,"Cultures & Traditions, Cause and Effect, Social-Emotional, Critical Thinking, Problem Solving",High,2D digital animation with a hand-drawn look. Bright and cheerful colors with simple backgrounds,Moderate,Low-Moderate,Moderate,Moderate-High,Low,Low
Alphablocks,3,TV,3-6,5 Seasons,, 5 minutes,"Preschool-Basics, Literacy, Phonics, Language Learning",High,2D digital animation with colorful and stylized block characters.,Moderate,Moderate,Moderate,Moderate,Moderate,Moderate
Amakandu,1,YouTube,Any,,,,"Engineering Concepts, Creativity & Imagination, Sensory Exploration, Mindfulness, Nature, Relaxation, Captivating Visuals, Nature Sounds, ASMR",Low,Real Props No Animations ,None,High,Low,Low,High,High
Andy's Dinosaur Adventures,3,TV,4-8,1 Season,,14 minutes,"Dinosaurs, Paleontology, Adventure, Science, Natural History, Curiosity",Moderate,Combination of live-action and CGI animation.,Moderate,Moderate,Moderate,Moderate,Moderate,Moderate
Angelina Ballerina (2008-2010),3,TV,3-6,,,12 minutes,"Cultural Appreciation, Creativity & Imagination, Perseverance, Friendship, Problem Solving, Ballet, Motor Skills",Low to Moderate,3D CGI Animation,Moderate,Moderate,Moderate,High,Moderate,Moderate
Art Kids TV,3,YouTube,5-12,,,,"Arts & Crafts, Preschool-Basics, Creativity & Imagination, Origami, Painting, Drawing, Motor Skills, Literacy, Numeracy, Shapes, Colours",High,Live-Action with Bright Colors and Simple Settings,Moderate-High,Moderate,Moderate,Moderate-High,Moderate,Low-Moderate
Arthur,2,TV,6-10,25 Seasons,,26 minutes,"Social-Emotional, Friendship, Problem Solving, Family Values, Relatable Situations, Social Development",Moderate,2D Traditional hand-drawn,Moderate-High,Low-Moderate,Moderate,Moderate,Low-Moderate,Moderate
Avatar: The Last Airbender,5,TV,8-14,3 Seasons,,23 minutes,"Life Lessons, Cultural Appreciation, Cultures & Traditions, Teamwork, Morality, Emotional Intelligence, Entertainment, Fantasy Elements, Martial Arts, Friendship, Responsibility, Perseverance, Mild Peril, Mild Fantasy Violence",Low to Moderate,2D animation inspired by anime styles.,High,High,Moderate,Moderate-High,High,High
Baba blast,4,YouTube,3-6,,,,"Early Childhood experiences, Dinosaurs, Paleontology, Natural History, sing-a-long, Dance, Social-Emotional, Exploration, Entertainment",High,Combination of Live-Action and 2D Animation. Color Palette: Bright and primary colors.,High,Moderate-High,Moderate,Moderate,Moderate-High,Moderate
Babar,2,TV,4-8,6 Seasons,,23 minutes,"Friendship, Responsibility, Problem Solving, Leadership, Emotional Intelligence, Perseverance, Family Values, Teamwork",Moderate,Traditional 2D hand-drawn animation.,Moderate,Low-Moderate,Low-Moderate,Moderate,Low,Moderate
Babblarna,1,TV,1-4,1 Season,,3 minutes,"Creativity & Imagination, Language Learning, Repetitive Learning, Social-Emotional, Phonics",High,3D CGI animation delivered slowly and smoothly,Very Low,Low,Moderate,High,Low,Low
Badanamu,4,TV,1-5,4 Seasons,,5 minutes,"Preschool-Basics, sing-a-long, Numeracy, Literacy, Motor Skills, Cognitive Development, Language Learning, Phonics, Emotional Intelligence",High,3D CGI animation with bright and vivid colors.,Low-Moderate,High,Moderate-High,High,High,High
Bananas in Pyjamas (2011-2013),1,TV,2-5,,,12 minutes,"Friendship, Problem Solving, Social-Emotional, sing-a-long, Repetitive Learning",Moderate,3D CGI animation introduces brighter colors and more dynamic visuals but the animation remains straightforward to prevent overstimulation,Moderate,Low-Moderate,Moderate,Moderate,Moderate,Moderate
Barbapapa (1973-2003),3,TV,3-7,2 Seasons,,5 minutes,"Enviromental Awareness, Creativity & Imagination, Social-Emotional",Moderate,traditional hand-drawn 2D animation,Moderate,Low-Moderate,Moderate,Moderate,Low-Moderate,Moderate
Barney & Friends,2,TV,2-5,13 Seasons,,25 minutes,"Preschool-Basics, Dance, Social-Emotional, Friendship, Numeracy, Literacy, Music, Teamwork, Shapes, Emotional Intelligence, sing-a-long",High,Live action with costumed characters,Moderate,Low,Moderate,High,Low,Moderate
"Be Cool, Scooby-Doo! (2015–2018)",5,TV,7-12,,,26 minutes,"Problem Solving, Teamwork, Mystery, Entertainment, Humor, Critical Thinking, Mild Peril, Mild Fantasy Violence",Low,Cartoonish 2D animation style,High,High,High,High,Very-High,High
Bear in the Big Blue House,2,TV,2-5,5 Seasons,,24 minutes,"Social-Emotional, Friendship, Routine, Problem Solving, Emotional Intelligence, Social Development, Relatable Situations, sing-a-long, Bedtime Routines",High,Live-action costumed puppetry with detailed sets. ,Moderate,Low-Moderate,Low-Moderate,Low-Moderate,Low,Low-Moderate
Beep and Mort,1,TV,3-6,2 Seasons,,22 minutes,"Creativity & Imagination, Friendship, Problem Solving, Emotional Intelligence, Adventure, Teamwork, Perseverance, Curiosity",Moderate,Live-action puppetry with colorful characters.,Moderate,Low,Low-Moderate,Moderate,Low-Moderate,Low
Ben & Holly's Little Kingdom (2009-2013),3,TV,4-8,2 Seasons,,25 minutes,"Creativity & Imagination, Problem Solving, Friendship, Teamwork",Moderate,Digital 2D animation,Moderate,Moderate,Moderate,Moderate,Moderate,Moderate
Between the Lions,3,TV,4-8,11 Seasons,,26 minutes,"Literacy, Phonics, Language Learning, Reading Comprehension, Music, Humor",High,"Combination of live-action puppetry, 2D animation, and CGI effects. Bright but balanced colors, with emphasis on text and literacy elements.",High,Moderate,Moderate,High,Moderate,Moderate-High
Bill Nye the Science Guy,5,TV,8-14,5 Seasons,,23 minutes,"STEM, Cause and Effect, Safety, Discovery, Science, Critical Thinking, Experimentation, Curiosity, Natural World, Problem Solving",High,"Live-action with fast-paced editing, animations, and special effects.",High,High,Moderate-High,High,High,High
Bing,2,TV,2-4,4 Seasons,,7 minutes,"Social Development, Emotional Intelligence, Problem Solving",Low to Moderate,3D CGI animation,Moderate,Low-Moderate,Low-Moderate,Moderate,Low,Low
Blippi,5,YouTube,2-5,,,,"Preschool-Basics, Early Childhood experiences, Creativity & Imagination, Curiosity, Animals, Natural World, Exploration, sing-a-long, Dance, Vocabulary, Adventure, Silly Comedy, Colours, Shapes, Nature, Hyper-Activity",High,Live-Action with Bright Colors and Real-World Settings,High,High,High,High,High,High
Blue's Clues (1996-2007),1,TV,3-6,6 Seasons,,25 minutes,"Preschool-Basics, Emotional Intelligence, Critical Thinking, Problem Solving",High,"Live action, Digital 2D animation",Moderate,Low,Low-Moderate,Moderate,Low,Very Low
Blue's Clues & You! (2019) ,1,TV,3-6,,,22 minutes,"Preschool-Basics, Emotional Intelligence, Problem Solving, Critical Thinking",High,"Live action, 3D CGI animation",Moderate,Low,Low-Moderate,Moderate,Low,Very Low
Bluey 2018-present,3,TV,3-8,4 Seasons,,7 minutes,"Creativity & Imagination, Emotional Intelligence, Conflict Resolution, Family Values, Family Relationships",Moderate,Digital 2D animation,Moderate,Moderate,Moderate,High,Moderate,Moderate
Bob the Builder (1997-2015),3,TV,3-6,21 Seasons,,10 minutes,"Creativity & Imagination, Problem Solving, Friendship, Teamwork, Repetitive Learning",Low to Moderate,Traditional Stop-Motion animation,Moderate,Moderate,Moderate,Moderate,Moderate,Low-Moderate
Bob the Builder (2015-2018) ,4,TV,3-6,,,11 minutes,"Creativity & Imagination, Problem Solving, Friendship, Teamwork, Repetitive Learning",Low to Moderate,3D CGI animation,Moderate,Moderate-High,Moderate,Moderate,Moderate,Moderate-High
Boba the Show (2021-present),4,TV,3-6,5 Seasons,,10 minutes,"Creativity & Imagination, Early Childhood experiences, Social-Emotional, Friendship, Emotional Intelligence, Social Development, sing-a-long, Dance, Humor, Motor Skills",Moderate,3D CGI animation with realistic textures and environments.,Low,High,Moderate-High,High,High,High
Bounce Patrol,5,YouTube,3-6,,,,"Preschool-Basics, Literacy, Numeracy, Colours, Animals, Social-Emotional, sing-a-long, Dance, Phonics, Vocabulary, Exercise",High,Live-Action with Bright Colors and Simple Settings,High,High,High,Very-High,High,High
Brain Candy TV,5,YouTube,Any,,,,"Spacetime and the Cosmos, Preschool-Basics, Elementary-Basics, STEM, Early Childhood experiences, Engineering Concepts, Science, Language Learning, Phonics, Vocabulary, Cognitive Development, Curiosity, Natural History, Colours, Literacy",High,3D CGI Animation with Bright Colors and Realistic Models,Moderate-High,Mod-High (Nature),Moderate,Moderate-High,High,Moderate
Bubble Guppies,5,TV,3-6,6 Seasons,,23 minutes,"Elementary-Basics, Math, Literacy, Science, Social-Emotional, Teamwork, sing-a-long, Problem Solving, Numeracy, Cognitive Development",High,3D CGI animation set in an underwater world. Extremely bright and vivid colors with high saturation.,High,High,Moderate-High,High,High,High
Builder Brothers' Dream Factory,3,TV,4-8,1 Season,,11 minutes,"STEM, Creativity & Imagination, Engineering Concepts, Teamwork, Critical Thinking",High,3D CGI Animation with detailed environments.,Moderate-High,Moderate,Moderate-High,Moderate-High,Moderate-High,Moderate-High
Caillou (1997-2010),2,TV,2-5,8 Seasons,,22 minutes,"Social-Emotional, Family Relationships, Relatable Situations, Patience, Emotional Intelligence, Conflict Resolution, Friendship, Frequent Whining, Tantrums, Lack of Consequences",Low,Traditional hand-drawn 2D animation. DIgital later in the seasons,Moderate,Low-Moderate,Moderate,Moderate,Low-Moderate,Low-Moderate
Caitie's Classroom (SuperSimplePlay),3,YouTube,1-5,,,,"Preschool-Basics, Early Childhood experiences, STEM, Elementary-Basics, Cultural & Social, sing-a-long, Dance, Music, Social-Emotional, Literacy, Numeracy, Social Development, Emotional Intelligence, Motor Skills",High,Live-Action with Puppetry and Props,High,Moderate,Moderate,High,Moderate,Moderate
Canticos (2016-present),3,TV,1-5,3 Seasons,,3 minutes,"Cultures & Traditions, Cultural & Social, Cultural Appreciation, Language Learning, Literacy, sing-a-long, Music",High,"Digital 2D animation with a simple, storybook-inspired art style. The characters are designed with soft, rounded features and bright, pastel colors, reflecting the show's musical and educational focus. The animation often incorporates interactive elements, encouraging audience participation.",Moderate-High,Moderate,Moderate-High,High,Moderate,Moderate-High
Captain Planet and the Planeteers (1990-1996),4,TV,7-12,6 Seasons,,23 minutes,"Super Hero Themes, Enviromental Awareness, Teamwork, Ecosystems, Responsibility, Social Development, Entertainment, Mild Peril",Moderate,Traditional 2D Animation with Bold Designs,High,High,High,High,High,High
Care Bears: Unlock the Magic (2019-present),3,TV,4-8,2 Seasons,,11 minutes,"Learning from Mistakes, Emotional Intelligence, Social-Emotional, Social Development, Friendship",Moderate,"2D Digital Animation with a modern, vibrant design. Color Palette: Bright and pastel colors with high saturation.",Moderate,Moderate,Moderate,Moderate,Moderate,Moderate
Casper Babypants,2,YouTube,1-5,,,,"Preschool-Basics, Music, sing-a-long, Vocabulary, Dance, Relaxation, Repetitive Learning, Language Learning, Literacy, Numeracy, Phonics, Routine, Bedtime Routines, Motor Skills, Sensory Exploration, Cognitive Development",Moderate,Simple Animations or Live-Action with Gentle Imagery,Moderate (Singing),Moderate,Moderate,Very-High,Low-Moderate,Low-Moderate
Charlie's Colorform City,2,TV,2-5,3 Seasons,,13 minutes,"Creativity & Imagination, Preschool-Basics, Shapes, Colours, Critical Thinking, Cognitive Development, Repetitive Learning",High,2D Digital Animation using Colorforms-inspired designs. Color Palette: Bright and bold primary colors with simple shapes.,Moderate,Low-Moderate,Moderate,Moderate,Low,Moderate
Chip and Potato,3,TV,3-6,2 Seasons,,11 minutes,"Overcoming Fears, Social-Emotional, Friendship, Problem Solving, Family Values, Emotional Intelligence, Perseverance",Moderate,"2D Digital Animation with soft, rounded designs. Color Palette: Warm and pastel colors.",Moderate,Moderate,Moderate,Moderate,Moderate,Moderate
City of friends,3,TV,3-6,2 Seasons,,11 minutes,"Community Service, Teamwork, Responsibility, Problem Solving",Moderate,3D CGI Animation with detailed environments.,Moderate,Moderate,Moderate,Moderate,Moderate,Moderate
CITY VEHICLES,5,YouTube,2-5,,,,"Vehicle Themes, Creativity & Imagination, Engineering Concepts, Mechanics, Problem Solving, Teamwork, Music, Entertainment",Low,3D CGI Animation with Bright Colors and Realistic Models,Moderate,High,High,Very-High (Repetative) ,Very-High (Repetative) ,High
Clifford the Big Red Dog (2000),2,TV,4-8,3 Seasons,,26 minutes,"Emotional Intelligence, Social Development, Problem Solving, Friendship, Community",Low to Moderate,Digital 2D animation,Moderate,Moderate,Moderate,Moderate,Moderate,Moderate
Clifford the Big Red Dog (2019),3,TV,3-6,,,22 minutes,"Emotional Intelligence, Friendship, Problem Solving, Social Development, Community",Low to Moderate,3D CGI animation,Moderate,Moderate-High,Moderate,Moderate,Moderate,Moderate
Cloudbabies,2,YouTube,2-5,,,,"Enviromental Awareness, Social-Emotional, Responsibility, Teamwork, Social Development, Routine, Bedtime Routines, Natural World, Natural Science, Relaxation, Nature, sing-a-long",Moderate,3D CGI Animation with a soft aesthetic. Color Palette: Pastel colors and gentle hues.,Moderate,Low-Moderate,Moderate,Moderate-High,Low-Moderate,Low-Moderate
CoasterFan2105,3,YouTube,Any,,,,"Engineering Concepts, Cultural Appreciation, Locomotive History, History, Hobbies, Entertainment, Travel Geography, Curiosity, Machinery, Trains",Low to Moderate,High-Definition Live-Action Footage,Low,High,Low-Moderate,Low,High,Moderate
Cocomelon,5,TV,1-4,10 Seasons,,05-55 minutes Compilation videos,"Preschool-Basics, Numeracy, Literacy, Shapes, Routine, Social-Emotional, Cognitive Development, Language Learning, sing-a-long",High,3D CGI Animation with extremely bright and vivid colors.,Low,High,Moderate-High,Very-High,High,High
Codename: Kids Next Door,4,TV,7-12,6 Seasons,,22 minutes,"Creativity & Imagination, Teamwork, Problem Solving, Courage, Mischievious Behaviour, Mild Fantasy Violence",Low to Moderate,2D Digital Animation with stylized character designs. Color Palette: Bright and varied colors with bold outlines.,High,High,Moderate-High,High,High,High
Colourblocks,3,YouTube,3-6,,,,"Preschool-Basics, Creativity & Imagination, Colours, Shapes, Art, Motor Skills, Colour Combinations",High,2D Digital Animation using Colorforms-inspired designs. Color Palette: Bright and bold primary colors with simple shapes.,Moderate-High,Moderate,Moderate-High,High,Moderate,Moderate-High
Cosmic kids yoga,3,YouTube,3-8,,,,"Life Lessons, Positive Engaging Screen-Time, Mindfulness, Exercise, Yoga, Emotional Intelligence, Routine, Sensory Exploration, Relaxation, sing-a-long, Positve Mindset",High,Live-Action with Colorful Green Screen Animations,High,Moderate,Moderate,Moderate-High,Moderate,Moderate
Courage the Cowardly Dog (1999-2002),5,TV,10-14,4 Seasons,,23 minutes,"Creativity & Imagination, Overcoming Fears, Problem Solving, Entertainment, Humor, Courage, Perseverance, Dark Themes, Surreal Imagery, Mild Intense Scenes",Low to Moderate,Traditional 2D Animation with surreal and sometimes dark visuals. Color Palette: Varied colors with contrasting dark and bright tones.,Moderate,High,Varies,High,High,High
Cowboy Jack,4,YouTube,3-8,,,,"Cultures & Traditions, Cultural & Social, Positive Role Models, Life Lessons, Exploration, Relatable Situations, Vocabulary, Social Development, Social-Emotional, Curiosity, History, Adventure, Discovery, Travel Geography",High,Live-Action with Real-World Exploration,High,Moderate-High,Moderate-High,High,Moderate-High,High
Creature Cases,4,TV,4-8,4 Season,,10 minutes,"Creativity & Imagination, Preschool-Basics, Mystery, Animals, Animal Behaviour, Nature, Problem Solving, Teamwork, Curiosity, Humor, Friendship",Moderate,3D CGI,Moderate-High,Moderate,Moderate,Moderate,Moderate,Moderate-High
Curious George (2006-present),2,TV,3-6,15 Seasons,,23 minutes,"STEM, Motor Skills, Discovery, Science, Curiosity, Exploration",Moderate,Digital hand-drawn 2D artwork animation.,Moderate,Moderate,Moderate,Moderate-High,Moderate-High,Moderate
Cyberchase (2002-present),4,TV,8-12,15 Seasons,,23 minutes,"STEM, Problem Solving, Critical Thinking, Math, Science, Entertainment",High,traditional 2D hand-drawn animation. Digital in later series.,Moderate-High,High,Moderate-High,High,High,Moderate
Daniel Tiger's Neighbourhood,2,TV,2-5,7 Seasons,,26 minutes,"Communiction & Expression, Life Lessons, Social-Emotional, Emotional Intelligence, Problem Solving, Social Development, Relatable Situations, Friendship, Family Relationships",High,Digital 2D animation,Moderate,Low,Low-Moderate,High,Low,Low-Moderate
Danny Go!,5,YouTube,3-7,,,,"Physical Fitness, Cultural Appreciation, Creativity & Imagination, Preschool-Basics, sing-a-long, Phonics, Entertainment, Interactive Game Elements, Dance, Repetitive Learning, Music, Exercise",High,Live-Action with Bright Colors and Interactive Elements,High,High,High,High,High,High
Davey and Goliath,2,TV,4-8,5 Seasons,,15 minutes,"Cause and Effect, Life Lessons, Morality, Family Values, Religion, Responsibility, Emotional Intelligence",Moderate,Stop-Motion Animation using clay figures,Moderate,Low,Low-Moderate,Moderate,Low,Moderate
De Zoete Zusjes,3,YouTube,4-10,,,,"Creativity & Imagination, Family Values, Family Relationships, Relatable Situations, Problem Solving, Vocabulary, Dutch Language",Moderate,Live-Action with Puppetry and Props,Moderate-High,Moderate,Moderate,Moderate,Moderate,Moderate-High
DG Bible Songs,3,YouTube,3-8,,,,"Religious Teachings, Cultural Appreciation, Cultures & Traditions, Spiritual Development, Biblical Stories, Religion, sing-a-long, Family Values, Music, Christian Values, Faith, Social-Emotional",Moderate,high-quality animation and music,Moderate (Singing),Moderate,Moderate,Very-High,Moderate,Moderate
Diego,4,TV,3-6,,,24 minutes,"Cultural & Social, Enviromental Awareness, Animal Behaviour, Wildlife Conservation, Language Learning, Problem Solving, Natural World",High,2D digital animation with a hand-drawn look. Bright and cheerful colors with simple backgrounds,High,High,Moderate-High,Moderate-High,High,High
Digimon: Digital Monsters,5,TV,8-14,4 Seasons,,22 minutes,"Teamwork, Friendship, Perseverance, Entertainment, Adventure, Fantasy Elements, Mild Fantasy Violence",Low,Traditional 2D Anime-style Animation.,High,High,Moderate-High,High,High,High
Dino Dana,3,TV,5-9,4 Seasons,,24 minutes,"Creativity & Imagination, Paleontology, Science, Curiosity, Problem Solving, Critical Thinking, Natural History, Ecosystems",High,Live-Action with CGI Dinosaurs. Color Palette: Natural colors with realistic environments.,Moderate,Moderate,Moderate,Moderate,Moderate,Moderate
Dino Ranch,3,TV,3-6,3 Seasons,,11 minutes,"Teamwork, Responsibility, Problem Solving, Adventure, Dinosaurs",Moderate,3D CGI animation,Moderate,Moderate,Moderate-High,Moderate,Moderate-High,Moderate
Dinosaur train,5,TV,3-6,7 Seasons,,26 minutes,"STEM, Friendship, Paleontology, Natural History, Dinosaurs, Natural World, Exploration, Science",Moderate,3D CGI animation,High,High,Moderate-High,High,High,Moderate-High
Dinotrux,4,TV,4-8,5 Seasons,,23 minutes,"Creativity & Imagination, Teamwork, Entertainment, Problem Solving, Engineering Concepts, Dinosaurs, Perseverance",Moderate,3D CGI Animation with detailed characters and environments. Color Palette: Bright and vivid colors with metallic textures.,Moderate,High,Moderate-High,High,High,High
Doc McStuffins,3,TV,3-6,5 Seasons,,24 minutes,"Health & Well-being, Social-Emotional, Problem Solving, Emotional Intelligence, Medical Care, Curiosity",High,"3D CGI Animation with soft, rounded designs. Color Palette: Bright and cheerful colors.",Moderate-High,Moderate,Moderate,Moderate,Moderate,Moderate
Doggyland,4,YouTube,2-6,,,,"Preschool-Basics, Learning through Songs, Dance, sing-a-long, Cognitive Development, Literacy, Numeracy, Colours, Shapes, Animals, Social-Emotional, Repetitive Learning, Music",High,3D Animation with Bright Colors and Anthropomorphic Dogs,High,High,High,Very-High,High,High
Dora the Explorer (2000-2014),5,TV,2-6,8 Seasons,,23 minutes,"Elementary-Basics, Language Learning, Problem Solving, Geography, Teamwork, Cognitive Development, Adventure",High,Digital 2D animation,High,High,High,High,High,High
Dragon Ball,5,TV,10-16,1 Season,,24 minutes,"Super Hero Themes, Positive Role Models, Entertainment, Adventure, Martial Arts, Fantasy Elements, Morality, Mild Violent themes, Mild Fantasy Violence, Mild Peril",Low,2D Hand-drawn animation (Anime style).,High,Very-High,Moderate-High,High,High,High
Dragon Tales,2,TV,3-7,3 Seasons,,26 minutes,"Creativity & Imagination, Emotional Intelligence, Teamwork, Social Development, Social-Emotional, Problem Solving, Perseverance",Low to Moderate,Traditional 2D Animation with soft designs. Color Palette: Pastel colors with whimsical settings.,Moderate,Low-Moderate,Moderate,Moderate,Low,Moderate
Duck & Goose,2,TV,2-5,2 Seasons,,07 minutes,"Problem Solving, Friendship, Social-Emotional, Teamwork, Emotional Intelligence, Social Development",Moderate,2D Digital Animation with a watercolor aesthetic. Color Palette: Soft and natural colors with pastel hues.,Moderate,Low-Moderate,Moderate,Moderate,Low-Moderate,Low-Moderate
Ed Edd n Eddy,5,TV,8-12,6 Seasons,,22 minutes,"Cause and Effect, Creativity & Imagination, Friendship, Problem Solving, Humor, Mischievious Behaviour",Low,Traditional 2D Animation with exaggerated designs. Color Palette: Bright colors with bold outlines.,High,High,Moderate-High,High,High,High
Elena of Avalor,4,TV,5-9,3 Seasons,,22 minutes,"Cultural Appreciation, Cultures & Traditions, Positive Role Models, Leadership, Responsibility, Emotional Intelligence, Morality",Moderate,3D CGI Animation with detailed designs. Color Palette: Bright and vibrant colors with cultural motifs.,High,High,Moderate-High,High,High,High
Elmo's World,2,TV,1-4,14 Seasons,,15 minutes,"Preschool-Basics, Motor Skills, sing-a-long, Dance, Social-Emotional, Numeracy, Literacy, Colours, Shapes",High,Combination of Live-Action and 2D Animation. Color Palette: Bright and primary colors.,Moderate,Moderate,Moderate-High,Moderate,Low-Moderate,Low-Moderate
English Tree,3,YouTube,2-6,,,,"Learning through Songs, Repetitive Learning, Literacy, Phonics, Vocabulary, Music, Numeracy, Colours, Shapes, Cognitive Development, Language Learning, sing-a-long",High,2D and 3D Animation with Bright Colors and Simple Characters,Moderate-High,Moderate,Moderate,High,Moderate,Moderate
"Ernst, Bobbie en de rest",3,TV,4-8,7 Seasons,,25 minutes,"Problem Solving, Teamwork, Humor, Social Development, Perseverance",Moderate,"Dutch children's show, Live-Action with comedic elements. ",High,Moderate,Moderate,Moderate,Moderate,Moderate
Fireman Sam (1987),2,TV,4-8,15 Seasons,,10 minutes,"Positive Role Models, Community Service, Safety, Teamwork, Problem Solving, Responsibility",Low to Moderate,Traditional Stop-Motion animation,Moderate,Low-Moderate,Moderate,Moderate,Low-Moderate,Low
Fireman Sam (2008) ,4,TV,3-6,,,10 minutes,"Positive Role Models, Community Service, Safety, Teamwork, Problem Solving, Responsibility",Low to Moderate,3D CGI animation,Moderate,Moderate-High,Moderate,Moderate,Moderate,Moderate-High
Franklin (1997-2004),1,TV,4-8,6 Seasons,,22 minutes,"Social-Emotional, Friendship, Problem Solving, Relatable Situations",Low to Moderate,Traditional Hand-drawn 2D animation,Moderate,Low,Low,Low-Moderate,Low,Low
Franklin and Friends (2011),3,TV,3-6,,,23 minutes,"Social-Emotional, Friendship, Teamwork, Relatable Situations, Problem Solving",Low to Moderate,3D CGI animation,Moderate,Low-Moderate,Low-Moderate,Low-Moderate,Low,Low-Moderate
Frog and Toad,1,TV,3-7,2 Seasons,,13 minutes,"Friendship, Problem Solving, Emotional Intelligence, Nature, Relatable Situations, Patience",Moderate,2D Digital Animation with a hand-drawn aesthetic.,Moderate,Low,Low-Moderate,Moderate,Low,Low
Gabby's Dollhouse,4,TV,3-7,10 Seasons,,24 minutes,"Creativity & Imagination, Problem Solving, Emotional Intelligence",Moderate,Live-action and 3D CGI animation,Moderate,High,Moderate-High,High,Moderate-High,High
Gecko’s Garage,3,YouTube,2-5,,,,"Vehicle Themes, Engineering Concepts, Mechanics, Teamwork, Shapes, Colours",Moderate,3D CGI Animation with bright and vibrant colors. Color Palette: Bright and cheerful colors with high saturation.,Moderate-High,High,Moderate,Moderate-High,High,Moderate
Genevieve playhouse,3,YouTube,2-5,,,,"Teaching with Toys, Preschool-Basics, Colours, Numeracy, Literacy, Multi-Lingual Learning, Entertainment, Humor, Vocabulary",High,Live-Action Toy Demonstrations with Bright Colors,Moderate,Moderate-High,Moderate,High,High,Moderate-High
Get Rolling with Otis,3,TV,3-6,2 Seasons,,22 minutes,"Problem Solving, Teamwork, Emotional Intelligence, Perseverance, Social Development",Moderate,3D CGI Animation with bright and vibrant colors. Color Palette: Bright and cheerful colors with high saturation.,Moderate,Moderate,Low-Moderate,Moderate,Low-Moderate,Low-Moderate
Gigantosaurus,4,TV,3-6,3 Seasons,,22 minutes,"Adventure, Problem Solving, Teamwork, Dinosaurs, Entertainment",Low to Moderate,3D CGI Animation with detailed and dynamic visuals.,Moderate,High,Moderate-High,High,High,High
GirlsTtoyZZ,4,YouTube,3-8,,,,"Creativity & Imagination, Teaching with Toys, Early Childhood experiences, Sensory Exploration, Entertainment, Toy Review",Low to Moderate,Live-Action with Bright Colors and Simple Settings,Moderate-High,High,Moderate-High,High,High,High
Go Go! Cory Carson,3,TV,2-5,7 Seasons,,7 minutes,"Social-Emotional, Friendship, Problem Solving, Relatable Situations, Emotional Intelligence, Vehicle Themes",Moderate,"3D CGI Animation with stylized and colorful designs. Bright but not overly saturated colors, with a focus on vibrant settings.",Moderate,Moderate,Moderate,Moderate,Moderate,Moderate
"Go, Dog. Go!",4,TV,3-6,4 Seasons,,24 minutes,"Creativity & Imagination, Problem Solving, Friendship, Teamwork, Critical Thinking, Relatable Situations",Moderate,3D CGI Animation with stylized character designs based on the original book illustrations. Color Palette: Bright and vivid colors with a focus on primary colors.,Moderate,Moderate-High,Moderate,Moderate,Moderate-High,High
Gracie's Corner,4,YouTube,3-7,,,,"Cultural Appreciation, Cultural & Social, Learning through Songs, Early Childhood experiences, Literacy, Numeracy, Social-Emotional, sing-a-long, Dance, Music, Healthy Eating, Emotional Intelligence",High,"2D animation with bright, colorful visuals and rhythmic, energetic choreography.",Moderate-High,High,Moderate-High,High,High,High
Grizzy and the Lemmings (2016-present),5,TV,6-10,4 Seasons,,7 minutes,"Communiction & Expression, Entertainment, Problem Solving, Humor, Slapstic Comedy, Mild Fantasy Violence",Low,3D CGI animation,Very Low,Very-High,High,High,High,High
Guess How Much I Love You,2,TV,2-5,3 Seasons,,11 minutes,"Emotional Intelligence, Friendship, Family Values, Social-Emotional",Moderate,2D Digital Animation with a watercolor aesthetic. Color Palette: Soft and natural colors with pastel hues.,Low-Moderate,Low,Low-Moderate,Moderate,Low,Moderate
"Gullah, Gullah Island",3,TV,3-7,4 Seasons,,24 minutes,"Cultural & Social, Life Lessons, Cultures & Traditions, Cultural Appreciation, sing-a-long, Dance, Social-Emotional, Social Development, Music",High,Live-Action with musical elements. Color Palette: Bright and vibrant colors reflecting the cultural setting.,Moderate-High,Moderate,Moderate-High,High,Moderate,Moderate
Gumby: The Movie,3,TV,4-8,3 Seasons,,7 minutes,"Creativity & Imagination, Problem Solving, Perseverance",Low to Moderate,Stop-Motion Animation using clay figures (claymation). Color Palette: Varied colors with a mix of bright and muted tones. Unique asthetic uncommon in the present day.,Low-Moderate,Moderate-High,Varies,High,High,Moderate
Handyman Hal,4,YouTube,3-8,,,,"Life Lessons, Engineering Concepts, Cultures & Traditions, Cultural Appreciation, Vehicle Themes, STEM, Farm Life, Agriculture, Mechanics, Curiosity, Entertainment, Humor, Safety",Moderate,Primarily live-action with occasional animated elements to highlight tools or processes.,High,High,Moderate-High,High,High,High
He-Man and the Masters of the Universe,4,TV,8-12,2 Seasons,,22 minutes,"Super Hero Themes, Positive Role Models, Entertainment, Responsibility, Morality, Adventure, Fantasy Elements, Mild Violent themes, Mild Fantasy Violence",Low to Moderate,Traditional 2D Animation with action-oriented designs. Color Palette: Bright and vivid colors with bold contrasts.,Moderate-High,High,Moderate-High,High,High,Moderate-High
Helper Cars,3,YouTube,2-5,,,,"Vehicle Themes, Teamwork, Colours, Shapes, Problem Solving, Vehicle Recognition, Entertainment, Mechanics",Low,3D CGI Animation with Bright Colors and Friendly Vehicle Characters,Low-Moderate,High,Moderate,High,High,Moderate-High
Hero Elementary,4,TV,4-8,2 Seasons,,26 minutes,"STEM, Super Hero Themes, Problem Solving, Teamwork, Emotional Intelligence, Curiosity, Critical Thinking, Science",High,2D Digital Animation with bright and colorful designs. Color Palette: Bright and vivid colors with emphasis on primary colors.,High,High,Moderate-High,High,High,Moderate
Hey Bear Sensory,5,YouTube,0-3,,,,"Early Childhood experiences, Sensory Exploration, Colours, Motor Skills, Music",Low,High-Contrast 3D Animation with Bright Colors and Simple Shapes,None,Moderate-High,High,Very-High (Repetative) ,High,High
Hey Duggee,4,TV,2-5,4 Seasons,,07 minutes (average),"Creativity & Imagination, Merit Reward systems, Teamwork, Problem Solving, Perseverance",High,"2D Digital Animation with simple, geometric shapes and bold outlines. Bright and bold colors with clear contrasts.",Moderate,Moderate-High,Moderate-High,High,High,Moderate
Horrid Henry,4,TV,6-10,6 Seasons,,11 minutes,"Creativity & Imagination, Cause and Effect, Morality, Humor, Entertainment, Mischievious Behaviour",Low to Moderate,2D Digital Animation with bold lines and exaggerated expressions. Color Palette: Bright and vivid colors with high contrast,High,High,Moderate-High,High,High,High
Hudson’s Playground,3,YouTube,3-8,,,,"Creativity & Imagination, Cultures & Traditions, Life Lessons, Farm Life, Machinery, Agriculture, Outdoor Exploration, Problem Solving, Family Relationships, Curiosity",Low to Moderate,Live-Action Family Videos,Moderate,Moderate-High,Moderate,Moderate,High,Moderate-High
If You Give a Mouse a Cookie(2015-present),3,TV,3-6,2 Seasons,,24 minutes,"Life Lessons, Cause and Effect, Creativity & Imagination, Problem Solving, Curiosity, Critical Thinking, Cognitive Development",Moderate,2D digital animation,Moderate,Moderate,Moderate,Moderate,Moderate,Moderate
In the Night Garden (07-09),1,TV,1-4,3 Seasons,,27 minutes,"Preschool-Basics, Sensory Exploration, Repetitive Learning, Motor Skills, Cognitive Development",Low,Live-action costume performances combined with CGI-enhanced environments,Low,Low,Low,Low,High,Low
It's a Big Big World,2,TV,3-6,2 Seasons,,27 minutes,"Enviromental Awareness, Science, Friendship, Nature, Ecosystems, Curiosity",Moderate,"Live-action puppetry with CGI backgrounds.Color Palette: Soft, natural colors with earthy tones.",Moderate,Low-Moderate,Low-Moderate,Moderate,Low,Moderate
Johnson & Friends,2,TV,3-6,4 Seasons,,10 minutes,"Creativity & Imagination, Friendship, Problem Solving, Teamwork",Moderate,Live action with costumed characters,Low-Moderate,Moderate,Low-Moderate,Moderate,Low,Moderate
JoJo & Gran Gran,2,TV,3-6,3 Seasons,,11 minutes,"Cultures & Traditions, Family Relationships, Family Values, Relatable Situations, Emotional Intelligence",Moderate,2D Digital Animation with a hand-drawn aesthetic.,Moderate,Low-Moderate,Low-Moderate,Moderate,Low,Moderate
Juf Roos,3,YouTube,2-6,,,,"Cultures & Traditions, Cultural Appreciation, Learning through Songs, Dutch Language, Language Learning, sing-a-long, Dance, Literacy, Music",Moderate,Live-Action with Colorful Costumes and Simple Sets,Moderate-High,Moderate,Moderate,High,Moderate,Moderate
JunyTony - Songs and Stories,4,YouTube,2-6,,,,"Creativity & Imagination, Learning from Mistakes, Learning through Songs, Cultures & Traditions, Cultural Appreciation, Literacy, Numeracy, sing-a-long, Dance, Phonics, Vocabulary, Music, Routine, Social-Emotional",High,2D Animation with Vibrant Colors and Cute Characters,High,High,High,Very-High,High,High
KarazahChannel,3,YouTube,3-8,,,,"Cultures & Traditions, Cultural Appreciation, Cultural & Social, Language Learning, Arabic Language Learning, Literacy, sing-a-long, Reading Comprehension, Music, Repetitive Learning",High,Mix of 3D CGI animations for the characters and settings,Moderate,Moderate,Moderate,Moderate-High,Moderate,Moderate
Katuri tv,3,YouTube,3-7,,,,"Nature, Family Relationships, Animals, Nature Sounds, Problem Solving, Social Development, Entertainment, Humor, Social-Emotional",Low,3D CGI animation with bright and vivid colors,Moderate,Moderate,Moderate,Moderate-High,Moderate,Low-Moderate
Kazwa and Bilal,1,TV,3-6,3 Seasons,,11 minutes,"Cultural Appreciation, Cultures & Traditions, Cultural & Social, Curiosity, Social-Emotional, Relatable Situations, Religion, Morality",Moderate,2D Digital Animation with bright and colorful designs. Color Palette: Bright and vivid colors with emphasis on primary colors.,Low,Moderate,Low-Moderate,Moderate-High,Moderate-High,Moderate
Kid-E-Cats,3,YouTube,3-6,,,,"Creativity & Imagination, Problem Solving, Friendship,  Emotional Intelligence, Conflict Resolution, Family Relationships, Family Values, Social-Emotional, Social Development, Relatable Situations",Low to Moderate,2D digital animation with a hand-drawn look. Bright and cheerful colors with simple backgrounds,High,Moderate,Moderate-High,High,Moderate,Moderate-High
Kids 2 kids,4,YouTube,5-10,,,,"Vehicle Themes, Learn Through Play, Creativity & Imagination, Social-Emotional, Humor, Outdoor Exploration, DIY Projects, Curiosity, Silly Comedy",Low,Live-Action Family Videos,Moderate-High,Low-Moderate,Low-Moderate,Moderate,Moderate,High
Kipper(1997-2000),1,TV,2-5,6 Seasons,,10 minutes,"Creativity & Imagination, Social-Emotional, Problem Solving, Friendship",Moderate,Traditional hand-drawn 2D animation,Low-Moderate,Low,Low-Moderate,Low,Moderate,Low
Kiri and Lou,1,TV,3-6,4 Seasons,,5 minutes,"Social-Emotional, Friendship, Nature, Emotional Intelligence, Mindfulness",Moderate,Stop-motion animation using clay and paper cutouts,Low-Moderate,Low,Low,Moderate,Low,Low
Laurie Berkner,3,YouTube,2-6,,,,"Learning through Songs, Physical Fitness, Early Childhood experiences, Music, sing-a-long, Social-Emotional, Literacy, Entertainment, Dance",Low to Moderate,Live-Action with Colorful Green Screen Animations,Mod-High (Singing),Moderate,Moderate,Very-High,Moderate,Moderate
Lazytown,5,TV,3-6,,,24 minutes,"Physical Fitness, Positive Role Models, Healthy Eating, Teamwork, Problem Solving, Exercise, Motor Skills, sing-a-long, Dance, Perseverance",High,"Combination of live-action, puppetry, and CGI elements. Color Palette: Bright and vivid colors with high contrast",High,High,High,High,High,High
Leo the Truck,5,YouTube,2-6,,,,"Preschool-Basics, Vehicle Themes, Colours, Shapes, Vehicle Recognition, Mechanics, Curiosity",Low to Moderate,3D CGI Animation with bright and vibrant colors. Color Palette: Bright and cheerful colors with high saturation.,Low-Moderate,Moderate-High,Moderate,High,High,Moderate
Leo the wild live ranger,5,YouTube,3-7,,,,"Wildlife Exploration, Wildlife Conservation, Animals, Animal Behaviour, Curiosity, Problem Solving, Nature, Natural World, Responsibility",Low to Moderate,3D CGI animation with detailed depictions of animals and environments.,High,Moderate,Moderate,Moderate-High,Moderate,Moderate-High
Les' Copaque Production - Upin & Ipin,3,YouTube,4-10,,,,"Cultural & Social, Learning from Mistakes, Cultures & Traditions, Cultural Appreciation, Morality, Responsibility, Relatable Situations, Family Relationships, Family Values, Social-Emotional, Emotional Intelligence",Moderate,3D CGI animation with vibrant colors and detailed environments reflecting Malaysian village life.,High,Moderate,Moderate,Moderate-High,Moderate,Moderate
LifeKids (Blinky’s Bible adventures),2,YouTube,Any,,,,"Religious Teachings, Cultures & Traditions, Cultural & Social, Cause and Effect, Life Lessons, Spiritual Development, Religion, Family Relationships, Relatable Situations, Social-Emotional, Morality, sing-a-long, Repetitive Learning, Dance",High,Combination of Live-Action and 2D Animation. Color Palette: Bright and primary colors.,Moderate,Low,Moderate,Moderate,Low,Low-Moderate
Listener Kids,2,YouTube,2-6,,,,"Learning through Songs, Cultures & Traditions, Cultural & Social, Spiritual Development, Faith, Biblical Stories, Religion, Christian Values, Morality, sing-a-long, Social Development, Positve Mindset",High,"Combination of live-action and animated elements, featuring colorful visuals and friendly characters.",High (Singing),Moderate,Moderate,Very-High,Moderate,Moderate
Little Angel,5,TV,1-4,1 Seasons,,03 minutes,"Preschool-Basics, Numeracy, Literacy, Routine, Social-Emotional, sing-a-long, Cognitive Development, Repetitive Learning",High,3D CGI animation with bright and vivid colors.,Moderate-High,High,Moderate-High,High,High,Moderate-High
Little Bear,1,TV,3-6,5 Seasons,,24 minutes,"Creativity & Imagination, Family Relationships, Social Development, Emotional Intelligence, Family Values",Low to Moderate,Traditional Hand-Drawn 2D animation,Moderate,Low,Low,Moderate,Low,Low
Little Einsteins (2005-2009),5,TV,3-6,2 Seasons,,24 minutes,"Cultural Appreciation, Music, Art, Problem Solving, Cognitive Development, Teamwork, History",High,digital 2D animation. CGI for the Rocket ship and certain elements.,High,High,High,Very-High,High,High
Llama Llama (2018-2019),2,TV,3-6,2 Seasons,,24 minutes,"Social-Emotional, Family Values, Problem Solving, Relatable Situations, Social Development, Emotional Intelligence",Moderate,Digital 2D animation,Moderate,Low,Low-Moderate,Moderate,Low,Low-Moderate
Lucas the spider(2021),3,TV,3-6,6 Seasons,,03-59+ minutes (compilation),"Overcoming Fears, Emotional Intelligence, Relatable Situations, Creativity & Imagination, Recurring Antagonist",Low,3D CGI animation,Low,Moderate,Moderate,Moderate,Moderate,Moderate
Lyla in the loop,3,TV,5-8,2 Seasons,,26 minutes,"Creativity & Imagination, STEM, Problem Solving, Motor Skills, Curiosity, Critical Thinking, Relatable Situations",High,2D digital animation with a hand-drawn look. Bright and cheerful colors with simple backgrounds.,Moderate-High,Moderate,Moderate,Moderate-High,Moderate,Moderate
Maddie's Do You Know?,3,TV,4-8,5 Seasons,,14 minutes,"STEM, Creativity & Imagination, Curiosity, Science, Technology, Exploration, Engineering Concepts, Critical Thinking, Problem Solving",High,Live-action educational series with some animation and CGI. Color Palette: Natural colors with bright visuals during explanations.,High,Moderate,Moderate,Moderate,Moderate,High
Maggie and the Ferocious Beast,2,TV,3-6,3 Seasons,,23 minutes,"Creativity & Imagination, Friendship, Problem Solving, Emotional Intelligence",Moderate,"2D Digital Animation with simple, childlike designs. Color Palette: Bright and pastel colors with minimal backgrounds.",Moderate,Low-Moderate,Moderate,Moderate,Low,Moderate
maizenofficial,4,YouTube,"7-12, 12+",,,,"Arts & Crafts, Creativity & Imagination, Building and Design, Entertainment, Humor, Problem Solving, Critical Thinking, MineCraft, Interactive Game Elements",Low,Real In Game Video Footage,High,High,Moderate-High,High,High,High
Marcus Level,5,TV,7-11,1 Season,,11 minutes,"Creativity & Imagination, Fantasy Elements, Problem Solving, Perseverance, Adventure, Teamwork, Critical Thinking, Mild Peril, Mild Fantasy Violence",Moderate,"2D Digital Animation with a video game aesthetic. Color Palette: Bright, vivid colors with high saturation",High,Very-High,High,High,Very-High,Very-High
Masha and the Bear,5,TV,3-7,5 Seasons,,07-59+ minutes,"Creativity & Imagination, Friendship, Problem Solving, Patience, Humor, Mischievious Behaviour",Low to Moderate,"3D CGI animation with high-quality, detailed visuals",Moderate,High,Moderate-High,High,High,High
Mickey Mouse Clubhouse,4,TV,2-5,4 Seasons,,24 minutes,"Early Childhood experiences, Preschool-Basics, Numeracy, Teamwork, Shapes, Cognitive Development",High,3D CGI animation,Moderate-High,High,High,High,High,Moderate-High
Miffy and friends,1,TV,2-5,3 Seasons,,05-55+ minutes,"Early Childhood experiences, Social-Emotional, Social Development, Teamwork, Emotional Intelligence",Moderate,"2D Stop-Motion Animation with Simple Designs, Emphasizes clear shapes and actions easily understood by young viewers.",Low,Low,Low-Moderate,Moderate,Low,Low
Milo,3,TV,3-6,2 Seasons,,11 minutes,"Cultural & Social, Career Exploration, Teamwork, Problem Solving, Responsibility, Curiosity",Moderate,2D Digital Animation with bright colors. Color Palette: Vibrant but not overwhelming.,Moderate,Moderate-High,Moderate,Moderate-High,High,Moderate
Minno - Bible Stories for Kids,3,YouTube,3-10,,,,"Religious Teachings, Positive Role Models, Spiritual Development, Cultures & Traditions, Cultural & Social, Biblical Stories, Faith, Religion, Christian Values, Morality, Positve Mindset",High,"Varies across series, primarily 2D and 3D animations with colorful visuals and relatable character designs.",Moderate-High,Moderate,Moderate,Moderate-High,Moderate,Moderate
Minuscule,1,YouTube,"2+, Any",,,,"Enviromental Awareness, Story Telling without Dialogue, Creativity & Imagination, Insect Behaviour, Nature, Nature Sounds, Entertainment, Humor, Relaxation, Music, Natural World, ASMR, Silly Comedy, Ecosystems, Slice of Life, Light Hearted",Low,Combination of CGI and Real-Life Backdrops,None,High,Low-Moderate,High,High,Moderate
"Mira, Royal Detective",4,TV,4-8,2 Seasons,,24 minutes,"Positive Role Models, Cultures & Traditions, Cultural Appreciation, Problem Solving, Critical Thinking, Mystery, Adventure, Curiosity",High,2D Digital Animation with Vibrant Colors,Moderate-High,Moderate-High,Moderate,Moderate,Moderate-High,Moderate-High
Miss Katie Sings,1,YouTube,2-6,,,,"Communiction & Expression, Cultural & Social, Learning through Songs, Music, sing-a-long, Positve Mindset, Social-Emotional, Courage, Mindfulness, Diversity, Politcal Leanings",Moderate,Live-Action Performances with Simple Props and Backgrounds,Moderate (Singing),Moderate,Moderate,Very-High,Moderate,Low
Miss Moni,3,YouTube,2-5,,,,"Learning through Songs, Preschool-Basics, Early Childhood experiences, Literacy, Numeracy, Vocabulary, Music, Language Learning, Phonics, sing-a-long, Cognitive Development, Auslan (Sign Language)",High,Live-Action and 2D Animation,Moderate-High,Moderate,Varies,High,Moderate,Low-Moderate
Miss Rachel,4,YouTube,1-4,,,,"Early Childhood experiences, Phonics, Language Learning, Speech Development, sing-a-long, Cognitive Development, Social-Emotional",High,Primarily live-action with Miss Rachel interacting directly with the audience. Some Puppet and 2D Animation use,High,Low-Moderate,Moderate,High,Low-Moderate,Low-Moderate
Mister Maker,2,TV,3-7,3 Seasons,,19 minutes,"Positive Role Models, Creativity & Imagination, Arts & Crafts, Curiosity, Motor Skills, Art, Colours",High,Live-Action with colorful crafts and animated segments. Color Palette: Bright and varied colors.,Moderate-High,High,Moderate-High,High,High,Moderate
Mister Rogers' Neighbourhood,1,TV,3-7,31 Seasons,,28 minutes,"Cultural & Social, Elementary-Basics, Life Lessons, Social-Emotional, Social Development, Literacy, Emotional Intelligence, Relatable Situations, Relaxation, Community Service, Problem Solving, Critical Thinking, Family Values, sing-a-long, Morality, Friendship, Creativity & Imagination",High,"Live-Action with puppet segments. Color Palette: Soft, natural colors.",Moderate,Low,Low-Moderate,Moderate,Low,Low
Molly of Denali,3,TV,4-8,4 Seasons,,26 minutes,"STEM, Cultures & Traditions, Cultural & Social, Cultural Appreciation, Problem Solving, Adventure, Exploration, Nature, Natural World, Mystery",High,2D Digital Animation with cultural representation. Color Palette: Bright colors reflecting Alaskan landscapes.,Moderate-High,Moderate,Moderate,Moderate,Moderate-High,Moderate
Moominvalley,2,TV,6-10,3 Seasons,,22 minutes,"Creativity & Imagination, Social-Emotional, Friendship, Fantasy Elements, Emotional Intelligence, Relaxation",Moderate,3D CGI Animation with a soft aesthetic. Color Palette: Pastel colors and gentle hues.,Moderate,Moderate,Low-Moderate,Moderate,Low-Moderate,Moderate
Moon and Me,1,TV,1-4,1 Season,,22 minutes,"Early Childhood experiences, Preschool-Basics, Creativity & Imagination, Social-Emotional",Moderate,"Stop-Motion Animation with soft toys. Color Palette: Soft, soothing colors.",Low-Moderate,Low,Low,Moderate,Low,Low
Mother goose club,4,YouTube,2-5,,,,"Preschool-Basics, Learning through Songs, Creativity & Imagination, Literacy, Numeracy, Language Learning, Speech Development, sing-a-long, Dance, Music, Cognitive Development",High,Live-Action with Colorful Costumes and Simple Sets,High,Moderate,Moderate,Very-High,Moderate,Moderate
Mr Bean Cartoon,4,TV,6-10,5 Seasons,,11 minutes,"Creativity & Imagination, Humor, Entertainment, Problem Solving, Mischievious Behaviour",Low,2D Digital Animation with exaggerated expressions. Color Palette: Bright colors with bold contrasts.,Low-Moderate,High,Moderate-High,High,High,High
"Mr. Monkey, Monkey Mechanic",3,TV,3-6,2 Seasons,,5 minutes (average),"Creativity & Imagination, STEM, Mechanics, Problem Solving, Engineering Concepts",Moderate,2D Digital Animation with bright colors. Color Palette: Vibrant and engaging.,Low-Moderate,Moderate-High,Moderate,High,High,Moderate
MyGoSignLanguageforKids-ASL,3,YouTube,0-5,,,,"Memory Exercises, American Sign Language, Communiction & Expression, Deaf Community, Visual Demonstrations, Language Learning, Cognitive Development, Motor Skills, Literacy",High,Live-action demonstrations combined with animated segments to illustrate signs and concepts effectively.,High,Moderate,Moderate,High,Moderate,Moderate
Nanalan,1,YouTube,2-5,,,,"Early Childhood experiences, Creativity & Imagination, Preschool-Basics, Communiction & Expression, Vocabulary, Social-Emotional, Social Development, Relatable Situations",Moderate,"Puppet-based animation with simple sets and characters, creating a unique and engaging visual experience",Moderate,Low-Moderate,Low-Moderate,Moderate,Low-Moderate,Low
Nick Cope's Popcast,3,TV,3-6,3 Seasons,,02-07 minutes,"Communiction & Expression, Creativity & Imagination, Social-Emotional, Emotional Intelligence, sing-a-long, Dance, Music",High,Live-action educational series with some animation and CGI. Color Palette: Natural colors with bright visuals during explanations.,Moderate,Moderate,High,High,Moderate,Moderate
Ninja Kids,5,YouTube,5-12,,,,"Super Hero Themes, Creativity & Imagination, Positive Role Models, Physical Fitness, Exercise, Adventure, Entertainment, Skit Comedy, Choreographed Action Scenes, Outdoor Exploration, Courage, Confidence Building, Martial Arts, Mild Violent themes, Mischievious Behaviour",Moderate,Live-action videos with dynamic editing and occasional special effects to enhance the viewing experience.,High,High,High,High,High,High
Ninjago,5,TV,7-12,4 Seasons,,22 minutes,"Complex & Emotional Themes, Teamwork, Perseverance, Courage, Problem Solving, Morality, Entertainment, Mild Fantasy Violence, Mild Violent themes",Low to Moderate,3D CGI Animation with Detailed and Dynamic Visuals,High,Very-High,High,High,Very-High,Very-High
Noddy Original Series (1998),2,TV,3-6,2 Seasons,,10 minutes,"Friendship, Problem Solving, Adventure, Social-Emotional, Social Development",Low to Moderate,Stop-Motion with simple models. Color Palette: Bright but soft colors.,Low-Moderate,Low-Moderate,Moderate,Low-Moderate,Low-Moderate,Low
"Noddy, Toyland Detective (2016)",4,TV,4-7,,,11 minutes,"Friendship, Problem Solving, Adventure, Social-Emotional, Social Development",Low to Moderate,3D CGI animation with bright and vivid colors,High,Moderate-High,High,High,High,Moderate-High
Noodle & Pals,3,YouTube,2-5,,,,"Preschool-Basics, Social-Emotional, Language Learning, Cognitive Development, Music, Literacy, Numeracy",High,2D digital animation with a hand-drawn look. Bright and cheerful colors with simple backgrounds,Moderate-High,Moderate,Moderate,Very-High,Moderate,Moderate
Noodle and Bun,5,YouTube,3-8,,,,"Story Telling without Dialogue, Creativity & Imagination, Humor, Silly Comedy, Captivating Visuals, Friendship, Animals",Low,3D CGI Animation with Detailed and Dynamic Visuals,None,Moderate-High,Moderate,High,Moderate-High,Moderate
Numberblocks (2017-present),3,TV,3-6,7 Seasons,,5 minutes,"Elementary-Basics, Numeracy, Problem Solving, Math, Repetitive Learning",High,3D CGI animation,Moderate,Moderate,Moderate,Moderate,Moderate,Moderate
Odd Squad,5,TV,6-10,3 Seasons,,27 minutes,"STEM, Math, Numeracy, Teamwork, Critical Thinking, Problem Solving",High,Combination of live-action and CGI animation.,High,High,High,High,High,High
Oggy and the Cockroaches,5,TV,6-10,7 Seasons,,7 minutes,"Creativity & Imagination, Humor, Problem Solving, Entertainment, Slapstic Comedy, Mischievious Behaviour",Low to Moderate,2D Digital Animation with exaggerated and dynamic character movements.,None,Very-High,High,High,Very-High,Very-High
Olivia,3,TV,3-6,2 Seasons,,22 minutes,"Creativity & Imagination, Social-Emotional, Problem Solving, Teamwork, Perseverance",Moderate,3D CGI Animation with a unique visual style resembling charcoal drawings with splashes of color.,Moderate,Low-Moderate,Moderate,Moderate,Low-Moderate,Moderate
Omar and hana,3,TV,3-7,5 Seasons,,5 minutes,"Cultural & Social, Cultures & Traditions, Religion, Family Values, Morality, Emotional Intelligence, sing-a-long, Relatable Situations, Family Relationships",High,2D Digital Animation with bright colors. Color Palette: Vibrant but not overwhelming.,Moderate-High,Moderate,Moderate,Moderate-High,Moderate,Moderate
One Piece,5,TV,12+,1500+ Episodes,,24 minutes,"Cultures & Traditions, Creativity & Imagination, Complex & Emotional Themes, Teamwork, Perseverance, Morality, Entertainment, Humor, Slapstic Comedy, Emotional Intelligence, Friendship, Social-Emotional, Adventure, Mild Violent themes, Mild Fantasy Violence, Mild Peril, Mild Mature Themes",Moderate,"Traditional 2D Animation with a distinctive anime style, featuring exaggerated expressions, dynamic action sequences, and detailed environments.",High,High,Moderate-High,High,High,Moderate-High
Oswald,2,TV,3-6,1 Season,,24 minutes,"Friendship, Problem Solving, Social-Emotional, Social Development, Critical Thinking, Conflict Resolution, Emotional Intelligence, Relatable Situations, Family Relationships",High,2D digital animation,Moderate,Low,Low-Moderate,Moderate,Low,Low-Moderate
Out of the Box,3,TV,3-7,3 Seasons,,25 minutes,"Creativity & Imagination, Arts & Crafts, Music, Motor Skills, Social-Emotional, Colours, Shapes, Art",High,Live-action with real actors.,Moderate-High,Moderate,Moderate,High,Low-Moderate,Moderate
Pajanimals,2,TV,2-5,2 Seasons,,11 minutes,"Overcoming Fears, Bedtime Routines, Social-Emotional, Relaxation, Family Relationships, Emotional Intelligence",Moderate,Live-action puppetry with colorful characters.,Moderate,Low-Moderate,Low-Moderate,High,Low,Low-Moderate
Paw patrol,5,TV,3-6,11 Seasons,,22 minutes,"Community Service, Teamwork, Problem Solving, Courage",Low,3D CGI animation,High,Very-High,High,High,High,High
Peg+Cat,3,TV,4-7,3 Seasons,,11 minutes,"Math, Problem Solving, Critical Thinking, Adventure, Perseverance",High,"2D Digital Animation with a hand-drawn, sketch-like aesthetic.",High,Moderate,Moderate,High,Moderate,Moderate
Peppa pig (2004-present),2,TV,2-5,8 Seasons,,5 minutes,"Social-Emotional, Family Relationships, Friendship, Routine, Social Development, Relatable Situations, Tantrums, Mischievious Behaviour",Moderate,"2D Digital Animation with simple, flat designs. Bright but pastel-like colors with minimal shading.",Moderate,Low-Moderate,Moderate,Moderate,Low,Moderate
Pete The Cat,2,TV,3-7,2 Seasons,,14 minutes,"Creativity & Imagination, Music, Emotional Intelligence, Problem Solving",Moderate,2D Digital animation with a hand-drawn look,Moderate,Low-Moderate,Low-Moderate,High,Low,Moderate
Peter Rabbit(2012-2016),3,TV,4-8,2 Seasons,,12 minutes,"Enviromental Awareness, Adventure, Problem Solving, Nature, Teamwork, Courage",Moderate,3D CGI animation,Moderate,Moderate-High,Moderate,Moderate,Moderate,Moderate
Phineas and Ferb,5,TV,8-12,6 Seasons,,22 minutes,"STEM, Creativity & Imagination, Problem Solving, Curiosity, Adventure, Humor, Family Relationships, Entertainment, Engineering Concepts, Mischievious Behaviour",Low,"2D Digital Animation with stylized, geometric designs. Bright and vivid colors with detailed backgrounds.",High,High,Moderate-High,High,High,High
Pingu,1,TV,2-5,6 Seasons,,5 minutes,"Social-Emotional, Family Relationships, Emotional Intelligence, Mischievious Behaviour",Low,Traditional Stop-Motion (claymation),None,Low,Low-Moderate,Low-Moderate,Low-Moderate,Low
Pinkalicious & Peterrific,4,TV,3-6,6 Seasons,,26 minutes,"Creativity & Imagination, Art, Music, Problem Solving, Teamwork, Motor Skills",High,"2D digital animation with bright colors and exaggerated, stylized designs. Bright and vivid colors with high contrast.",High,High,High,High,High,High
Pip and Posy,3,TV,2-5,2 Seasons,,7 minutes,"Cause and Effect, Friendship, Social-Emotional, Problem Solving, Emotional Intelligence, Conflict Resolution, Relatable Situations, Social Development",Moderate,3D CGI animation delivered slowly and smoothly,Moderate,Moderate,Moderate,Moderate,Moderate,Moderate
Pipi Mā,3,YouTube,2-6,,,,"Te reo Māori language development, Cultures & Traditions, Cultural Appreciation, Māori immersion preschool, Cultural & Social, Numeracy, Literacy, Traditional Narratives, sing-a-long",High,2D Animation with Cultural Themes and Soft Colors,Moderate-High,Moderate,Moderate,Moderate,Moderate,Low-Moderate
PJ Masks,5,TV,3-6,6 Seasons,,11 minutes,"Super Hero Themes, Creativity & Imagination, Entertainment, Morality, Social Development, Social-Emotional",Low to Moderate,3D CGI Animation with bright and vibrant colors. Color Palette: Bright and cheerful colors with high saturation.,High,Very-High,High,High,Very-High,Very-High
Planet earth,3,TV,8+,1 Season,,50 minutes,"Enviromental Awareness, Natural World, Nature, Natural History, Wildlife Exploration, Science, Realistic Depictions of Nature",Low to Moderate,Live-action nature documentary with high-definition footage. Natural colors showcasing diverse ecosystems.,Low-Moderate,Moderate,Moderate,High,Low-Moderate,Moderate
Play School,2,TV,2-5,59 Seasons,,25 minutes,"Creativity & Imagination, Preschool-Basics, Numeracy, Literacy, Shapes, Colours, Social-Emotional, Problem Solving, sing-a-long",High,Live-action with real actors.,Moderate,Low-Moderate,Moderate,Moderate-High,Low-Moderate,Moderate
Pocoyo,3,TV,2-4,5 Seasons,,7 minutes,"Creativity & Imagination, Cultural & Social, Language Learning, Social-Emotional, Problem Solving, Teamwork, Emotional Intelligence, Curiosity, Cognitive Development",High,3D CGI animation delivered slowly and smoothly,Low,Moderate,Moderate,Moderate,Moderate,Low-Moderate
Pokemon,5,TV,7-12,25 Seasons,,22 minutes,"Enviromental Awareness, Overcoming Fears, Friendship, Teamwork, Wildlife Exploration, Entertainment, Humor, Exploration, Perseverance, Mild Fantasy Violence",Low,traditional and Digital hand-drawn 2D animation. Anime style,High,High,High,High,High,High
Postman Pat (1981–2008),2,TV,3-6,9 Seasons,,15 minutes,"Community Service, Problem Solving, Responsibility, Teamwork, Entertainment",Low,Traditional Stop-Motion animation,Moderate,Low-Moderate,Low-Moderate,Moderate,Low-Moderate,Low-Moderate
Postman Pat: Special Delivery Service (2008–2017),4,TV,3-6,,,15 minutes,"Community Service, Problem Solving, Responsibility, Teamwork, Entertainment",Low,3D CGI animation,Moderate-High,Moderate-High,High,High,High,High
Puffin Rock,1,TV,2-5,2 Seasons,,7 minutes,"Enviromental Awareness, Nature, Wildlife Exploration, Family Relationships, Problem Solving",Moderate,Digital 2D animation,Low,Low,Low,Low-Moderate,Low,Scene Frequency
Puppy Dog Pals,4,TV,3-6,5 Seasons,,11 minutes,"Creativity & Imagination, Adventure, Problem Solving, Teamwork, Social-Emotional",Moderate,3D CGI animation with bright and vivid colors.,High,High,High,High,High,Low
Raa Raa the Noisy Lion,3,TV,2-5,3 Seasons,,10 minutes,"Communiction & Expression, Social-Emotional, Social Development, Friendship, Problem Solving, Emotional Intelligence",Moderate,3D CGI Animation with a soft aesthetic. Color Palette: Pastel colors and gentle hues.,Moderate-High,Moderate-High,Moderate,Moderate,High,High
Rainbow Ruby,5,YouTube,3-7,,,,"Creativity & Imagination, Career Exploration, Curiosity, Emotional Intelligence, Fantasy Elements, Problem Solving, Social-Emotional",Low to Moderate,3D CGI Animation with bright and vibrant colors. Color Palette: Bright and cheerful colors with high saturation.,High,High,Moderate-High,High,High,High
Rapunzel's Tangled Adventure,5,TV,6-10,3 Seasons,,22 minutes,"Creativity & Imagination, Life Lessons, Overcoming Fears, Adventure, Courage, Friendship, Emotional Intelligence, Problem Solving, Perseverance, Mild Intense Scenes",Moderate,"2D digital animation with bright colors and exaggerated, stylized designs. Bright and vivid colors with high contrast.",High,Very-High,High,High,Very-High,Moderate
RC Action Channel,2,YouTube,"2+, Any",,,,"Engineering Concepts, Vehicle Themes, Vehicle Recognition, Machinery, Relaxation, Entertainment, Hobbies, Mechanics",Low,Live-action footage of RC vehicles in operation,Low-Moderate,High,Moderate-High,High,High,Moderate-High
Reading rainbow,2,TV,5-9,16 Seasons,,28 minutes,"Cultural & Social, Cultural Appreciation, Life Lessons, Positive Role Models, Creativity & Imagination, Social-Emotional, Literacy, Curiosity",High,Combination of Live-Action and 2D Animation. Color Palette: Bright and primary colors.,Moderate,Low-Moderate,Moderate,Moderate,Low-Moderate,High
"Ready, Steady, Wiggle!",5,TV,1-4,6 Seasons,,11 minutes,"Physical Fitness, Elementary-Basics, sing-a-long, Dance, Music, Friendship, Motor Skills, Repetitive Learning, Entertainment, Numeracy, Literacy, Social-Emotional",High,Live-Action with Bright Colors and Simple Settings,High,High,High,Very-High,High,Moderate
Reef School,2,TV,3-6,2 Seasons,,7 minutes,"Enviromental Awareness, Ecosystems, Marine Bioligy, Curiosity, Social Development, Emotional Intelligence, Wildlife Conservation, Natural World, Teamwork",High,2D Digital Animation with a watercolor aesthetic. Color Palette: Soft and natural colors with pastel hues.,Moderate,Low-Moderate,Moderate,Moderate,Low-Moderate,High
Rhyme Time Town,3,TV,3-6,2 Seasons,,24 minutes,"Language Learning, Literacy, sing-a-long, Cognitive Development, Social-Emotional, Repetitive Learning, Music",High,3D CGI Animation with extremely bright and vivid colors.,Moderate-High,Moderate,Moderate-High,High,Moderate,Low-Moderate
Robocar Poli,5,TV,3-6,4 Seasons,,11 minutes,"Cultural & Social, Safety, Teamwork, Problem Solving, Adventure, Community Service, Social Development, Social-Emotional",Moderate,3D CGI Animation with detailed and dynamic visuals.,High,High,High,High,High,Moderate-High
Rolie Polie Olie,3,TV,3-6,6 Seasons,,22 minutes,"Creativity & Imagination, Friendship, Problem Solving, Adventure, Social-Emotional, Critical Thinking",Moderate,3D CGI Animation,Moderate,Moderate,Moderate,Moderate,Moderate-High,High
Rosie & Jim,2,TV,3-6,8 Seasons,,10 minutes,"Preschool-Basics, Creativity & Imagination, Repetitive Learning, Language Learning, sing-a-long, Problem Solving, Curiosity",Moderate,Live-action puppetry with colorful characters.,Moderate,Low-Moderate,Moderate,Moderate,Low-Moderate,Moderate
Rosie's Rules,3,TV,4-8,1 Season,,26 minutes,"Elementary-Basics, Social-Emotional, Problem Solving, Family Relationships, Responsibility, Teamwork, Social Development, Family Values, Emotional Intelligence",High,2D digital animation with a hand-drawn look. Bright and cheerful colors with simple backgrounds.,Moderate-High,Moderate,Moderate-High,High,Moderate,Low-Moderate
Rugrats,3,TV,4-8,9 Seasons,,22 minutes,"Creativity & Imagination, Social Development, Social-Emotional, Relatable Situations, Emotional Intelligence, Problem Solving, Mischievious Behaviour",Low to Moderate,"Traditional 2D hand-drawn animation with a distinctive, sketchy style. Muted and earthy tones, reflecting a somewhat realistic environment.",Moderate-High,Moderate,Moderate,Moderate,Moderate,Moderate-High
Rugrats (2021 Reboot),4,TV,4-8,,,23 minutes,"Creativity & Imagination, Social Development, Social-Emotional, Relatable Situations, Emotional Intelligence, Problem Solving, Mischievious Behaviour",Low to Moderate,3D CGI animation,High,High,Moderate-High,Moderate-High,Moderate-High,Moderate
Ryan's World,5,YouTube,0-5,,,,"Science, Creativity & Imagination, Learn Through Play, STEM, Geography, Numeracy, Unboxing Videos, Entertainment, Humor, Silly Comedy, Family Relationships, Family Values, Teamwork, Toy Review",Moderate,"Live-Action with Bright Colors, High Energy, and Occasional Animations",High,High,Moderate-High,High,High,High
"Sagwa, the Chinese Siamese Cat",3,TV,4-8,1 Season,,24 minutes,"Cultural Appreciation, Cultures & Traditions, Cultural & Social, Friendship, Problem Solving, Family Values",Moderate,Traditional 2D animation with a hand-drawn look.,Moderate,Moderate,Moderate,Moderate,Moderate,High
Sarah and Duck,1,TV,3-6,3 Seasons,,7 minutes,"Creativity & Imagination, Friendship, Problem Solving, Relatable Situations, Social-Emotional",Low to Moderate,2D Digital animation with a hand-drawn look,Low-Moderate,Low,Low,Moderate,Low,Moderate
"Scooby-Doo, Where Are You! (1969–1970)",4,TV,7-12,3 Seasons,,22 minutes,"Problem Solving, Teamwork, Mystery, Entertainment, Humor, Critical Thinking, Mild Peril, Mild Fantasy Violence",Low,traditional hand-drawn 2D animation,Moderate,Moderate-High,Moderate-High,High,Moderate-High,Low
Sea of love,2,TV,3-6,1 Season,,13 minutes,"Enviromental Awareness, Teamwork, Marine Bioligy, Wildlife Conservation, Friendship, Natural World, Responsibility, Social-Emotional, Problem Solving",Moderate,"3D CGI Animation with stylized and colorful designs. Bright but not overly saturated colors, with a focus on vibrant settings.",Moderate,Low-Moderate,Moderate,Moderate,Low-Moderate,Moderate
Sesame Street (1969-present),1,TV,2-5,54 Seasons,,30 minutes,"Preschool-Basics, Cultural & Social, STEM, Elementary-Basics,  Cultures & Traditions, Social Development, Routine, Motor Skills, Emotional Intelligence",High,Various Art Styles,Moderate,Low-Moderate,Moderate,High,Low,Low-Moderate
Shaun the Sheep,3,TV,6-10,6 Seasons,,7 minutes,"Creativity & Imagination, Problem Solving, Teamwork",Low,Traditional Stop-Motion (claymation) digital enhancements may be used for post-production,None,Moderate,Moderate,Moderate,Moderate,Moderate
Sid the Science Kid,3,TV,4-7,4 Seasons,,26 minutes,"STEM, Critical Thinking, Problem Solving, Science, Motor Skills, Relatable Situations, Curiosity",High,3D CGI Animation with Motion Capture,High,Moderate-High,Moderate-High,High,Moderate-High,High
Silly Miss Lily (Paisley's Corner),3,YouTube,2-5,N/A,,N/A,"Positive Engaging Screen-Time, Preschool-Basics, Numeracy, Colours, Shapes, Social-Emotional, sing-a-long, Literacy",High,Live-Action with Bright Colors and Props,Moderate-High,Moderate,Moderate,Moderate-High,Moderate,Moderate
Simon,2,TV,3-6,8 Seasons,,5 minutes,"Friendship, Family Relationships, Emotional Intelligence, Social-Emotional, Problem Solving, Relatable Situations",Moderate,2D digital animation with a hand-drawn look. Bright and cheerful colors with simple backgrounds.,Moderate,Low-Moderate,Moderate,Moderate,Low,Moderate-High
Something Special: Hello Mr Tumble,2,TV,2-6,1 Season,,20 minutes,"Early Childhood experiences, Social-Emotional, Emotional Intelligence, Language Learning, Makaton Sign Language, Learning Disabilities",High,Live-Action with Bright Colors and Simple Settings,Moderate,Low-Moderate,Moderate,Moderate,Low-Moderate,Moderate
Sonic the Hedgehog,5,TV,7-12,2 Seasons,,22 minutes,"Friendship, Teamwork, Perseverance, Entertainment, Humor, Courage, Adventure, Mild Fantasy Violence",Low to Moderate,3D CGI Animation with detailed and dynamic visuals.,High,Very-High,High,High,Very-High,Low-Moderate
Spanish with liz,3,YouTube,0-5,,,,"Cultures & Traditions, Cultural & Social, Learning through Songs, Spanish Language, Language Learning, Music, Vocabulary, Phonics, Emotional Intelligence, Routine, Healthy Eating",High,Live-Action with Educational Props and Colorful Backgrounds,High,Moderate,Moderate,High,Moderate,Low-Moderate
Spidey and his amazing friends (2021-present),5,TV,3-7,3 Seasons,,24 minutes,"Super Hero Themes, Positive Role Models, Teamwork, Responsibility, Entertainment, Mischievious Behaviour, Mild Peril",Low,3D CGI,High,High,High,Very-High,High,Very-High
Spirit Riding Free,3,TV,6-10,8 Seasons,,23 minutes,"Friendship, Responsibility, Perseverance, Adventure, Horses, Mild Intense Scenes",Low to Moderate,3D CGI Animation,Moderate-High,Moderate,Moderate,Moderate,Moderate,High
SpongeBob SquarePants,5,TV,6-12,15 Seasons,,11 minutes,"Creativity & Imagination, Humor, Friendship, Problem Solving, Entertainment, Surreal Imagery, Mild Intense Scenes",Low to Moderate,Traditional 2D animation with expressive and exaggerated character designs. Bright and vivid colors with high contrast.,High,Very-High,Moderate-High,High,High,Moderate
Star Wars: Young Jedi Adventures,4,TV,4-8,2 Seasons,,24 minutes,"Cause and Effect, Cultures & Traditions, Positive Role Models, Entertainment, Courage, Adventure, Conflict Resolution, Friendship, Teamwork, Responsibility, Fantasy Elements, Morality, Mild Intense Scenes, Mild Fantasy Violence",Moderate,3D CGI Animation with detailed and dynamic visuals.,High,High,Moderate-High,High,High,High
Stella and Sam,2,TV,3-6,2 Seasons,,22 minutes,"Creativity & Imagination, Problem Solving, Exploration, Emotional Intelligence, Curiosity, Family Relationships, Social-Emotional, Social Development, Natural World",Moderate,2D Digital Animation with a watercolor aesthetic. Color Palette: Soft and natural colors with pastel hues.,Moderate,Low-Moderate,Moderate,Moderate,Low-Moderate,High
Steve and Maggie,3,YouTube,2-6,,,,"Every Day Concepts, Preschool-Basics, Creativity & Imagination, Language Learning, Vocabulary, Phonics, Repetitive Learning, Literacy, Social Development, Social-Emotional, Cognitive Development",High,Live-Action with Puppet Interaction and Simple Animations,High,High,Moderate,High,High,Moderate
Stick man,3,TV,3-7,3 Seasons,,27 minutes,"Family Values, Perseverance, Family Relationships, Courage, Social-Emotional, Mild Peril",Moderate,3D CGI animation delivered slowly and smoothly,Moderate,Moderate,Moderate,High,Moderate,Low-Moderate
Stillwater (2020-present),2,TV,4-8,3 Seasons,,23 minutes,"Life Lessons, Mindfulness, Emotional Intelligence, Problem Solving, Social-Emotional, Conflict Resolution",High,Mix of 3D CGI animations for the characters and settings,Low-Moderate,Low,Low,Moderate,Low,Moderate-High
Story Time Book: Read-Along,2,TV,3-7,1 Season,,5 minutes,"Creativity & Imagination, Literacy, Language Learning, Reading Comprehension, Cognitive Development, Repetitive Learning",High,Illustrations or Minimal Animation,Moderate,Low-Moderate,Moderate,Moderate,Low-Moderate,Low
Storybots,4,TV,3-6,3 Seasons,,25 minutes,"STEM, Literacy, Reading Comprehension, Problem Solving, Curiosity, Social Development, Critical Thinking",High,Combination of 2D and 3D Animation with Mixed Media,High,High,High,High,High,Low
Super Monsters,4,TV,3-6,3 Seasons,,23 minutes,"Cultural & Social, Creativity & Imagination, Social-Emotional, Friendship, Emotional Intelligence, Self Discipline, Problem Solving, Social Development, Entertainment",Moderate,3D CGI animation with bright and vivid colors,Moderate-High,Moderate,Moderate,Moderate-High,Moderate,High
SUPER SIMPLE SONG,4,YouTube,2-5,,,,"Preschool-Basics, Learning through Songs, Story Telling without Dialogue, Literacy, Numeracy, Shapes, Colours, sing-a-long, Social Development, Social-Emotional, Dance, Motor Skills, Language Learning, Cognitive Development, Music, Vocabulary",High,2D and 3D Animation with Bright Colors and Simple Characters,Mod-High (Singing),Moderate,Moderate,Very-High,Moderate,Low-Moderate
Super Why!,3,TV,3-6,3 Seasons,,26 minutes,"Elementary-Basics, Numeracy, Literacy, Problem Solving",High,3D CGI animation with bright colors and clear designs. Bright and vivid colors focused on storybook settings.,High,Moderate,Moderate,Moderate,Moderate,Moderate
Superbook,4,TV,6-10,5 Seasons,,25 minutes,"Cultures & Traditions, Cultural Appreciation, Cause and Effect, Positive Role Models, Religion, Morality, History, Literacy, Courage, Repetitive Learning",Moderate,3D CGI Animation with Detailed and Dynamic Visuals,High,High,High,High,High,Moderate
Superkitties,5,TV,3-6,2 Seasons,,11 minutes,"Super Hero Themes, Teamwork, Problem Solving, Responsibility, Adventure, Entertainment, Friendship",Low to Moderate,3D CGI Animation,High,High,High,High,High,High
Superworm,3,TV,3-6,,,25 minutes,"Friendship, Teamwork, Nature, Social Development",Moderate,3D CGI animation with detailed textures and natural settings. Earthy tones with vivid highlights.,Moderate,Moderate,Moderate,Moderate,Moderate,High
Takaro Tribe,2,TV,3-6,3 Seasons,,5 minutes,"Cultures & Traditions, Cultural & Social, Cultural Appreciation, Religion, Literacy, History, Music, Routine, Repetitive Learning, Social-Emotional, Language Learning",High,"2D Digital Animation with simple, flat designs. Bright but pastel-like colors with minimal shading.",Moderate,Low-Moderate,Moderate,High,Low-Moderate,Moderate
Tangled: Before Ever After,5,TV,3-6,3 Seasons,,55 minutes,"Overcoming Fears, Adventure, Friendship, Courage, Social Development, Perseverance, Fantasy Elements, Responsibility, Nature, Mild Peril, Mild Intense Scenes",Moderate,2D digital animation,High,Very-High,High,High,Very-High,Low-Moderate
Tayo the Little Bus,4,YouTube,3-6,,,,"Vehicle Themes, Vehicle Recognition, Social Development, Teamwork, Problem Solving, Community Service, Responsibility, Entertainment, Social-Emotional",Low to Moderate,3D CGI Animation with bright and vibrant colors. Color Palette: Bright and cheerful colors with high saturation.,High,Moderate,Moderate,Moderate-High,Moderate,Moderate
Team Umizoomi,4,TV,3-6,5 Seasons,,23 minutes,"STEM, Math, Problem Solving, Critical Thinking, Teamwork, Numeracy, Shapes",High,3D CGI animation with bright and vivid colors,High,High,High,High,High,High
Teen Titans Go!,5,TV,8-12,9 Seasons,,11 minutes,"Super Hero Themes, Humor, Teamwork, Friendship, Adventure, Entertainment, Surreal Imagery, Mild Mature Themes",Low,"2D digital animation with bright colors and exaggerated, stylized designs. Bright and vivid colors with high contrast.",High,Very-High,Moderate-High,High,High,High
Teletubbies (2015-2018),3,TV,1-4,,,12 minutes,"Creativity & Imagination, Social-Emotional, Repetitive Learning, Sensory Exploration, Routine, Bedtime Routines",Low,Live action costumed. some digital elements ,Low,Low-Moderate,Low,Moderate,Low,High
Teletubbies (1997-2001),2,TV,1-4,2 Seasons,,24 minutes,"Creativity & Imagination, Social-Emotional, Repetitive Learning, Sensory Exploration, Routine, Bedtime Routines",Low,Live action costumed. some digital elements ,Low,Low,Low,Low-Moderate,Low,Low
The Adventures of Abney & Teal,1,TV,3-6,2 Seasons,,11 minutes,"Creativity & Imagination, Problem Solving, Social-Emotional, Nature",Moderate,Stop-motion animation with hand-crafted models.,Low-Moderate,Low,Low-Moderate,Moderate,Low,Low
The Adventures of Paddington (2019),3,TV,4-8,3 Seasons,,11 minutes,"Cultural & Social, Emotional Intelligence, Problem Solving, Family Values, Social Development, Family Relationships",Moderate,3D CGI animation,Moderate,Moderate-High,Moderate,High,Moderate,Low-Moderate
The Adventures of Paddington Bear Original Series (1997–2000),2,TV,4-8,3 Seasons,, 23 minutes,"Cultural Appreciation, Friendship, Emotional Intelligence, Social-Emotional, Problem Solving",Moderate,Traditional 2D hand-drawn animation with a unique style combining stop-motion elements.,Moderate,Low-Moderate,Moderate,Moderate,Low,Moderate
The Adventures of Teddy Ruxpin,3,TV,5-8,1 Season,,22 minutes,"Life Lessons, Friendship, Adventure, Problem Solving, Morality, Fantasy Elements, Perseverance, Courage, Social-Emotional, Mild Peril",Moderate,"Traditional 2D hand-drawn animation with detailed illustrations. Soft, pastel colors with a focus on everyday environments.",Moderate,Moderate,Moderate,Moderate,Moderate,Moderate
The adventures of the gummi bears,4,TV,6-10,6 Seasons,,22 minutes,"Overcoming Fears, Adventure, Friendship, Fantasy Elements, Problem Solving, Courage, Perseverance, Mild Violent themes",Moderate,Traditional 2D Anime-style Animation.,High,High,Moderate-High,High,High,Moderate
The Backyardigans,3,TV,3-6,4 Seasons,,24 minutes,"Communiction & Expression, Creativity & Imagination, Teamwork, Music, Problem Solving, Social-Emotional",High,3D CGI Animation with bright and vibrant colors. Color Palette: Bright and cheerful colors with high saturation.,Moderate-High,Moderate-High,Moderate-High,High,Moderate-High,High
The Bear Construction,3,YouTube,3-7,,,,"Vehicle Themes, Engineering Concepts, Story Telling without Dialogue, Construction, Teamwork, Problem Solving, Machinery, Vehicle Recognition, Entertainment, Curiosity, ASMR",Low,3D CGI animation with detailed depictions of construction sites and machinery,None,Very-High,Low,Low,Very-High,Moderate-High
The Bernstein Bears,2,TV,4-8,5 Seasons,,13 minutes,"Relatable Situations, Social Development, Social-Emotional, Family Relationships, Family Values, Emotional Intelligence",Moderate,Traditional 2D animation with a hand-drawn look.,Moderate,Low-Moderate,Low-Moderate,Moderate,Low,Moderate-High
The Big Comfy Couch,2,TV,2-6,7 Seasons,,22 minutes,"Preschool-Basics, Overcoming Fears, Social-Emotional, Problem Solving, Motor Skills, Numeracy, Literacy, Exercise",High,Live-action costumed puppetry with detailed sets. ,Moderate,Low-Moderate,Moderate,Moderate,Low-Moderate,Moderate
The Busy World of Richard Scarry,2,TV,3-6,5 Seasons,,23 minutes,"Learning from Mistakes, Cultural & Social, Problem Solving, Social-Emotional, Community Service, Relatable Situations, Curiosity",Moderate,"Traditional 2D hand-drawn animation with detailed illustrations. Soft, pastel colors with a focus on everyday environments.",Moderate,Low-Moderate,Moderate,Moderate,Low,Low-Moderate
The Care Bears (1985-1988),2,TV,4-8,3 Seasons,,11 minutes,"Learning from Mistakes, Emotional Intelligence, Social-Emotional, Social Development, Friendship",Moderate,Traditional 2D animation with soft character designs. Color Palette: Pastel colors and gentle hues.,Moderate,Low-Moderate,Low-Moderate,Moderate,Low,Moderate
The Cat in the Hat,3,TV,3-7,3 Seasons,,26 minutes,"STEM, Science, Nature, Exploration, Problem Solving, Geography, Ecosystems, Curiosity, Critical Thinking",High,"2D Digital Animation with a video game aesthetic. Color Palette: Bright, vivid colors with high saturation",High,Moderate-High,High,High,Moderate-High,Moderate
The Clangers (BBC),2,TV,3-6,2 Seasons,,10 minutes,"Spacetime and the Cosmos, Creativity & Imagination, Problem Solving, Social-Emotional, Social Development, Exploration, Teamwork",Moderate,Traditional Stop-Motion animation with live-action model sets,Low,Moderate,Moderate,Moderate-High,Moderate,High
The Crocodile Hunter (1996-2007):,3,TV,8+,8 Seasons,,48 minutes,"Enviromental Awareness, Overcoming Fears, Positive Role Models, Wildlife Exploration, Wildlife Conservation, Nature, Natural World, Animals, Animal Behaviour, Curiosity, Ecosystems, Intense Animal Interaction",High,Live-action documentary featuring wildlife. Color Palette: Natural colors showcasing diverse environments.,High,Low,Moderate,Moderate,Low,Low-Moderate
The Enchanted World of Brambly Hedge,2,TV,4-8,1 Season,,25 minutes,"Natural World, Social-Emotional, Problem Solving, Teamwork, Curiosity, Mindfulness, Nature",Moderate,Stop-motion animation with hand-crafted models.,Moderate,Low-Moderate,Moderate,Moderate-High,Low-Moderate,Moderate
The Epic Tales of Captain Underpants (2018-present),5,TV,6-10,,,24 minutes,"Creativity & Imagination, Humor, Friendship, Problem Solving, Entertainment, Mischievious Behaviour, Toilet Humour",Low,2D animation with a comic-book aesthetic,High,High,Moderate-High,High,High,Low-Moderate
The fixies,4,TV,4-8,5 Seasons,,6 minutes,"STEM, Problem Solving, Curiosity, Teamwork, Science, Motor Skills, Critical Thinking, Technology, Engineering Concepts",High,3D CGI Animation with detailed and dynamic visuals.,High,High,Moderate-High,Moderate-High,High,High
The Land Before Time (2016),4,TV,4-8,2 Seasons,,23 minutes,"Friendship, Problem Solving, Perseverance, Adventure, Entertainment, Dinosaurs, Mild Peril, Mild Intense Scenes",Low,3D CGI Animation,Moderate-High,Moderate-High,High,High,High,High
The Land of Boggs,5,YouTube,12+,,,,"Cultural & Social, Life Lessons, Creativity & Imagination, Learning from Mistakes, Complex Emotional Themes, Entertainment, Humor, Silly Comedy, Skit Comedy, Slice of Life, Light Hearted, Social-Emotional, Relatable Situations, Surreal Imagery, Mature Themes",Low,"2D animation with simple, colorful designs and expressive characters.",High,High,Moderate-High,Moderate,High,High
The Lion Guard,4,TV,4-8,3 Seasons,,22 minutes,"Enviromental Awareness, Natural World, Wildlife Conservation, Wildlife Exploration, Courage, Responsibility",Moderate,2D Digital Animation with bright and colorful designs. Color Palette: Bright and vivid colors with emphasis on primary colors.,High,High,Moderate-High,High,High,High
The Little Mermaid 1992 series,4,TV,6-10,3 Seasons,,22 minutes,"Enviromental Awareness, Adventure, Friendship, Courage, Marine Bioligy, Entertainment, Teamwork, Mild Peril",Low to Moderate,Traditional 2D Animation with Bold Designs,High,High,High,High,High,High
The Magic School Bus Rides Again,4,TV,6-10,4 Seasons,,26 minutes,"Enviromental Awareness, STEM, Exploration, Critical Thinking, Discovery, Curiosity, Nature, Science",High,Traditional hand-drawn 2D animation,High,Moderate-High,Moderate,Moderate,Moderate-High,High
The Magic School Bus (1994-1997),4,TV,6-10,4 Seasons,,26 minutes,"Enviromental Awareness, STEM, Nature, Science, Engineering Concepts, Curiosity, Experimentation",High,2D Traditional hand-drawn,High,High,Moderate-High,Moderate-High,High,Moderate-High
The Mik Maks,5,YouTube,2-6,,,,"Learning through Songs, Preschool-Basics, Elementary-Basics, sing-a-long, Dance, Instruments, Music, Motor Skills, Exercise, Phonics, Vocabulary, Entertainment, Silly Comedy, Family Values, Family Relationships",High,Live-Action Performances with Colorful Costumes and Sets. Some 2D animations,Moderate-High,Moderate,Moderate-High,Very-High,Moderate,Moderate
The New Adventures of Winnie the Pooh,2,TV,3-7,4 Seasons,,22 minutes,"Creativity & Imagination, Friendship, Problem Solving, Social Development, Emotional Intelligence, Relatable Situations",Moderate,Traditional Hand-Drawn 2D animation,Low-Moderate,Low,Low,Moderate,Low,Low
The Octonauts,5,TV,4-8,4 Seasons,,11 minutes,"Enviromental Awareness, Problem Solving, Ecosystems, Curiosity, Natural World, Marine Bioligy, Teamwork",High,3D CGI animation set in an underwater world. Extremely bright and vivid colors with high saturation.,Moderate,Moderate-High,Moderate,Moderate,Moderate-High,Moderate-High
The Oddbods Show,5,TV,6-10,4 Seasons,,7 minutes,"Creativity & Imagination, Humor, Problem Solving, Friendship, Entertainment, Social-Emotional, Slapstic Comedy, Mischievious Behaviour",Moderate,3D CGI animation with bright and vivid colors,None,Very-High,High,High,Very-High,High
The Snoopy Show,3,TV,6-10,3 Seasons,,7 minutes,"Cultural & Social, Creativity & Imagination, Entertainment, Social Development, Friendship",Low to Moderate,2D digital animation,Low-Moderate,Moderate-High,Moderate,High,High,High
The Stinky & Dirty Show (2016-2019),3,TV,3-6,2 Seasons,,11 minutes,"Creativity & Imagination, Problem Solving, Teamwork, Perseverance, Engineering Concepts, Critical Thinking",Moderate,3D CGI animation,Moderate,Moderate-High,Moderate,Moderate,Moderate-High,Moderate-High
The Wiggles,4,TV,1-4,6 Seasons,,22 minutes,"Physical Fitness, Preschool-Basics, Music, Dance, sing-a-long, Motor Skills, Social-Emotional, Entertainment",High,Live-Action with Bright Colors and Simple Settings,High,Moderate-High,High,High,Moderate-High,Moderate
Theodore Tugboat,2,TV,3-6,5 Seasons,,15 minutes,"Enviromental Awareness, Problem Solving, Friendship, Teamwork, Adventure, Responsibility, Social-Emotional",Moderate,"Combination of live-action, puppetry, and CGI elements. Color Palette: Bright and vivid colors with high contrast",Moderate,Low-Moderate,Moderate,Moderate,Low-Moderate,High
Thomas & Friends (1984-2008),1,TV,3-6,25 Seasons,,5 minutes,"Friendship, Teamwork, Problem Solving, Responsibility",Moderate,Traditional Stop-Motion animation with live-action model sets,Low,Low,Low,Moderate,Low,Low-Moderate
Thomas & Friends: All Engines Go (2021),5,TV,2-5,,,11 minutes,"Friendship, Teamwork, Responsibility, Problem Solving",Low,3D CGI animation,High,High,High,High,High,Low
Time for school,2,TV,3-6,1 Season,,10 minutes,"Arts & Crafts, Preschool-Basics, Elementary-Basics, Relatable Situations, Social Development, Social-Emotional, Routine, Motor Skills",Moderate,Live-action with real actors.,Moderate,Low,Moderate,Low-Moderate,Low,High
Tinga Tinga Tales,3,YouTube,4-7,,,,"Cultural Appreciation, Cultural & Social, Learning from Mistakes, African folk tales, Cultures & Traditions, Animals, Curiosity, Nature Sounds, Traditional Narratives, Geography, Animal Behaviour, Social-Emotional, Morality, Friendship, Responsibility, Humor, Entertainment, Light Hearted",Moderate,2D Animation Inspired by Tinga Tinga African Art,Moderate-High,Moderate,Moderate,Moderate-High,Moderate,Moderate
Tom & Jerry,4,TV,6-12,1 Season,,7 minutes,"Creativity & Imagination, Humor, Problem Solving, Slapstic Comedy, Rivalry, Entertainment, Music, Mild Fantasy Violence",Low,2D Digital Animation with exaggerated and dynamic character movements.,None,Very-High,High,Very-High,Very-High,Low-Moderate
Topsy and Tim,2,TV,3-6,3 Seasons,,11 minutes,"Social-Emotional, Relatable Situations, Family Relationships, Problem Solving, Emotional Intelligence",Moderate,Live-action with real actors.,Moderate,Low,Low-Moderate,Moderate,Low,High
Tots TV,2,TV,2-5,5 Seasons,,10 minutes,"Cultures & Traditions, Creativity & Imagination, Social-Emotional, Problem Solving, Literacy, Curiosity, Language Learning",High,"Live-Action with puppet segments. Color Palette: Soft, natural colors.",Moderate,Low-Moderate,Moderate,Moderate,Low-Moderate,Moderate
Tractor Ted,2,TV,2-5,3 Seasons,,10 minutes,"Agriculture, Machinery, Farm Life, Animals, Nature, Animal Behaviour",High,Live-Action and 2D Animation,Low-Moderate,Low,Low-Moderate,Moderate,Low,Low-Moderate
Trash truck,4,TV,3-6,2 Seasons,,12 minutes,"Creativity & Imagination, Problem Solving, Emotional Intelligence",Low,3D CGI animation,Moderate-High,High,Moderate,Moderate-High,Moderate-High,Moderate
"Tumble leaf",2,TV,3-6,4 Seasons,,11 minutes,"Creativity & Imagination, Nature, Motor Skills, Critical Thinking, Exploration, Natural World, Cognitive Development",High,Digital 3D Stop-Motion,Low,Low-Moderate,Moderate,Moderate-High,Moderate,High
Tweedy & Fluff,1,TV,2-5,,,5 minutes,"Life-Lessons, Exploring Emotions, Communication and Expression, Stop-Motion, Slice of Life, Friendship, Pet Ownership, Empathy, Gentle Humour, Problem-Solving, Relatable-Situations",Low to Moderate,"Traditional stop-frame animation techniques, meticulously capturing each movement of the handcrafted puppets frame by frame to create fluid and engaging motion.",Low,Moderate,"Low-Moderate, Gentle Melodies, Moderate tempos",Moderate-High,Moderate,Low
Ultimate Spiderman,5,TV,7-12,4 Seasons,,22 minutes,"Super Hero Themes, Morality, Responsibility, Courage, Problem Solving, Entertainment, Humor, Mild Violent themes, Mild Fantasy Violence",Low to Moderate,2D Digital Animation with bold lines and exaggerated expressions. Color Palette: Bright and vivid colors with high contrast,High,Very-High,High,High,Very-High,Moderate
VeggieTales,4,TV,4-8,2 Seasons,,30 minutes,"Cultures & Traditions, Religion, Responsibility, Family Values, History, Literacy, Social Development, Community Service, Biblical Teachings",Moderate,3D CGI,High,Moderate,Moderate,High,Moderate,Very-High
VeggieTales in the House (2014-2016),3,TV,4-7,,,22 minutes,"Cultures & Traditions,Religion, Responsibility, Family Values, History, Literacy, Social Development, Community Service, Biblical Teachings",Moderate,3D CGI,High,Moderate,Moderate,High,Moderate,Moderate
Vlad and Nikki,5,YouTube,3-8,,,,"Learn Through Play, Creativity & Imagination, Problem Solving, Adventure, Family Relationships, Multi-Lingual Learning, Humor, Entertainment, Hyper-Activity",Low,"Live-action videos featuring Vlad and Niki, often enhanced with special effects and animations to create engaging and fantastical elements.",High,Very-High,High,High,Very-High (Repetative) ,High
Vooks,2,YouTube,2-8,,,,"Creativity & Imagination, Literacy, Reading Comprehension, Vocabulary, Language Learning, Phonics, Cognitive Development, Music, Speech Development, Read-Along",High,"Animated adaptations of children's books, featuring subtle animations that complement the original illustrations, accompanied by professional narration and sound effects.",Moderate,Low-Moderate,Moderate,Moderate-High,Moderate-High,Low-Moderate
Wacky Races,5,TV,6-10,1 Season,,11 minutes,"Creativity & Imagination, Adventure, Humor, Entertainment, Perseverance, Slapstic Comedy, Mechanics, Engineering Concepts, Lack of Consequences, Mild Intense Scenes, Mild Violent themes",Low,Cartoonish 2D animation style,Moderate-High,Very-High,High,High,Very-High,Moderate
Wallykazam,3,TV,3-6,2 Seasons,,26 minutes,"Elementary-Basics, Motor Skills, Problem Solving, Language Learning, Literacy, Fantasy Elements, Reading Comprehension, Phonics",High,3D CGI Animation with bright and vibrant colors. Color Palette: Bright and cheerful colors with high saturation.,High,Moderate,Moderate,Moderate-High,Moderate,Very-High
"What's New, Scooby-Doo? (2002–2006)",5,TV,7-12,,,22 minutes,"Problem Solving, Teamwork, Mystery, Entertainment, Humor, Critical Thinking, Mild Peril, Mild Fantasy Violence",Low,Digital 2D animation,Moderate-High,High,High,High,High,Moderate
Wishenpoof,3,TV,3-6,2 Seasons,,24 minutes,"Creativity & Imagination, Social-Emotional, Problem Solving, Social Development, Morality, Emotional Intelligence",High,"3D CGI Animation with stylized and colorful designs. Bright but not overly saturated colors, with a focus on vibrant settings.",High,Moderate,Moderate,Moderate-High,Moderate,High
Woolly and Tig,2,TV,2-5,2 Seasons,,5 minutes,"Overcoming Fears, Social-Emotional, Relatable Situations, Courage, Emotional Intelligence",Moderate,Combination of live-action and CGI animation.,Moderate,Low-Moderate,Moderate,Moderate,Low-Moderate,Moderate
Work It Out Wombats,3,TV,4-7,1 Season,,26 minutes,"Life Lessons, Problem Solving, Teamwork, Critical Thinking, Social-Emotional, Relatable Situations",High,2D digital animation with a hand-drawn look. Bright and cheerful colors with simple backgrounds,Moderate-High,Moderate,Moderate,Moderate-High,Moderate,Low-Moderate
Xavier Riddle and the Secret Museum,3,TV,5-8,2 Seasons,,26 minutes,"Cultures & Traditions, Life Lessons, History, Morality, Problem Solving, Curiosity, Courage, Adventure",High,2D Digital Animation with a watercolor aesthetic. Color Palette: Soft and natural colors with pastel hues.,Moderate-High,Moderate,Moderate,Moderate,Moderate,Moderate
Zaky & friends,3,YouTube,3-8,,,,"Life Lessons, Cultures & Traditions, Learning through Songs, Cultural Appreciation, Spiritual Development, Quranic stories, Religion, Literacy, Numeracy, Social Development, Social-Emotional, Emotional Intelligence",High,2D Digital Animation with bright colors. Color Palette: Vibrant and engaging.,Moderate-High,Moderate,Moderate,Moderate-High,Moderate,Low-Moderate
Zoboomafoo (1999-2001),3,TV,4-8,2 Seasons,,26 minutes,"Enviromental Awareness, Wildlife Exploration, Animals,Curiosity, Nature, Wildlife Conservation",Moderate,"Live-action, puppetry, and animation",High,Moderate,Moderate-High,High,Moderate,Moderate-High
dino ranch,3,TV,3-6,3 Seasons,,11 minutes,"Teamwork, Responsibility, Problem Solving, Adventure, Dinosaurs",Moderate,3D CGI animation,Moderate,Moderate,Moderate-High,Moderate,Moderate-High,Moderate
</file>

<file path="vite.config.ts">
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";
import path from "path";
import runtimeErrorOverlay from "@replit/vite-plugin-runtime-error-modal";

export default defineConfig({
  plugins: [
    react(),
    runtimeErrorOverlay(),
    ...(process.env.NODE_ENV !== "production" && process.env.REPL_ID !== undefined
      ? [
          await import("@replit/vite-plugin-cartographer").then((m) =>
            m.cartographer(),
          ),
        ]
      : []),
  ],

  resolve: {
    alias: {
      "@": path.resolve(import.meta.dirname, "client", "src"),
      "@shared": path.resolve(import.meta.dirname, "shared"),
      "@assets": path.resolve(import.meta.dirname, "attached_assets"),
    },
    // 👇 ensures only a single copy of React is bundled
    dedupe: ["react", "react-dom"],
  },

  root: path.resolve(import.meta.dirname, "client"),

  build: {
    outDir: path.resolve(import.meta.dirname, "dist/public"),
    emptyOutDir: true,
  },
});
</file>

<file path="client/src/components/Footer.tsx">
import { Link } from "wouter";
import { useAuth } from "@/hooks/use-auth";

export default function Footer() {
  const { user, isApproved } = useAuth();
  
  // Determine the about page URL based on login and approval status
  const aboutPageUrl = user && isApproved ? "/app-about" : "/about";
  
  return (
    <footer className="bg-primary text-white py-8 mt-12">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="md:flex md:justify-between">
          <div className="mb-8 md:mb-0">
            <h2 className="text-xl font-heading font-bold mb-4">TV Tantrum</h2>
            <p className="text-white/80 max-w-md">
              Helping parents make informed decisions about the children's TV shows their kids watch. 
              Compare, review, and discover new content.
            </p>
          </div>
          
          <div className="grid grid-cols-2 md:grid-cols-3 gap-8">
            <div>
              <h3 className="text-sm font-semibold text-white/90 uppercase tracking-wider mb-4">Explore</h3>
              <ul className="space-y-2">
                <li><Link href="/" className="text-white/80 hover:text-white">Home</Link></li>
                <li><Link href="/browse" className="text-white/80 hover:text-white">Browse Shows</Link></li>
                <li><Link href="/compare" className="text-white/80 hover:text-white">Compare Shows</Link></li>
                <li><Link href="/browse?sortBy=popular" className="text-white/80 hover:text-white">Popular Shows</Link></li>
              </ul>
            </div>
            
            <div>
              <h3 className="text-sm font-semibold text-white/90 uppercase tracking-wider mb-4">Resources</h3>
              <ul className="space-y-2">
                <li><Link href={aboutPageUrl} className="text-white/80 hover:text-white">About Us</Link></li>
              </ul>
            </div>
            
            <div>
              <h3 className="text-sm font-semibold text-white/90 uppercase tracking-wider mb-4">Connect</h3>
              <ul className="space-y-2">
                <li><Link href={aboutPageUrl} className="text-white/80 hover:text-white">Contact Us</Link></li>
              </ul>
            </div>
          </div>
        </div>
        
        <div className="mt-8 pt-8 border-t border-white/20 md:flex md:items-center md:justify-between">
          <div className="flex space-x-6 md:order-2">
            <a 
              href="#" 
              className="text-white/70 hover:text-white"
            >
              <i className="fas fa-envelope"></i>
            </a>
          </div>
          <p className="mt-8 md:mt-0 md:order-1 text-white/70">
            &copy; {new Date().getFullYear()} TV Tantrum. All rights reserved.
          </p>
        </div>
      </div>
    </footer>
  );
}
</file>

<file path="client/src/components/image-upload.tsx">
import { useState, useRef } from 'react';
import { Button } from '@/components/ui/button';
import { Label } from '@/components/ui/label';
import { Upload, Image as ImageIcon, Loader2 } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

interface ImageUploadProps {
  imageUrl: string | null;
  onImageChange: (imageUrl: string) => void;
  className?: string;
}

export function ImageUpload({ imageUrl, onImageChange, className = '' }: ImageUploadProps) {
  const [isUploading, setIsUploading] = useState(false);
  const [uploadPreview, setUploadPreview] = useState<string | null>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);
  const { toast } = useToast();

  const handleFileSelect = () => {
    fileInputRef.current?.click();
  };

  const handleFileChange = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file) return;

    // Check file type
    if (!file.type.startsWith('image/')) {
      toast({
        title: 'Invalid file type',
        description: 'Please select an image file (JPEG, PNG, etc.)',
        variant: 'destructive',
      });
      return;
    }

    // Check file size (max 5MB)
    if (file.size > 5 * 1024 * 1024) {
      toast({
        title: 'File too large',
        description: 'Image must be less than 5MB',
        variant: 'destructive',
      });
      return;
    }

    // Show preview immediately
    const objectUrl = URL.createObjectURL(file);
    setUploadPreview(objectUrl);

    // Upload to server
    setIsUploading(true);
    try {
      const formData = new FormData();
      formData.append('image', file);

      const response = await fetch('/api/shows/upload-image', {
        method: 'POST',
        body: formData,
        credentials: 'include'
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(errorText || 'Failed to upload image');
      }

      const data = await response.json();
      
      // Use the optimized image path
      onImageChange(data.optimizedPath);
      
      toast({
        title: 'Image uploaded',
        description: 'Image has been uploaded and optimized successfully',
      });
    } catch (error) {
      console.error('Error uploading image:', error);
      // Revert preview on error
      setUploadPreview(null);
      toast({
        title: 'Upload failed',
        description: error instanceof Error ? error.message : 'Failed to upload image',
        variant: 'destructive',
      });
    } finally {
      setIsUploading(false);
      // Reset the input so the same file can be selected again if needed
      if (fileInputRef.current) {
        fileInputRef.current.value = '';
      }
    }
  };

  // Determine which image to display (preview, existing, or placeholder)
  const displayImage = uploadPreview || imageUrl;

  return (
    <div className={`space-y-4 ${className}`}>
      <div>
        <Label htmlFor="show-image" className="block mb-2">
          Show Image
        </Label>
        <div className="border rounded-md p-4 flex flex-col items-center justify-center bg-muted/20">
          <div className="relative w-full h-48 mb-4 flex items-center justify-center overflow-hidden bg-gray-50 rounded-md">
            {isUploading ? (
              <div className="flex flex-col items-center justify-center text-muted-foreground">
                <Loader2 className="h-10 w-10 animate-spin mb-2" />
                <p>Uploading and optimizing...</p>
              </div>
            ) : displayImage ? (
              <img
                src={displayImage}
                alt="Show preview"
                className="max-h-full object-contain"
                onError={() => {
                  setUploadPreview(null);
                  toast({
                    title: 'Image error',
                    description: 'Could not load the image',
                    variant: 'destructive',
                  });
                }}
              />
            ) : (
              <div className="flex flex-col items-center justify-center text-muted-foreground">
                <ImageIcon className="h-16 w-16 mb-2" />
                <p>No image selected</p>
              </div>
            )}
          </div>
          
          <input
            ref={fileInputRef}
            type="file"
            id="show-image"
            accept="image/*"
            className="hidden"
            onChange={handleFileChange}
          />
          
          <Button
            type="button"
            variant="outline"
            onClick={handleFileSelect}
            disabled={isUploading}
            className="flex items-center gap-2"
          >
            <Upload className="h-4 w-4" />
            {isUploading ? 'Uploading...' : 'Upload Image'}
          </Button>
          
          <p className="text-xs mt-2 text-muted-foreground text-center max-w-md">
            Upload a portrait-style image for the show (recommended ratio 3:4).
            The image will be automatically optimized for web display.
          </p>
        </div>
      </div>
    </div>
  );
}
</file>

<file path="client/src/components/RegistrationForm.tsx">
import { useState, useEffect } from "react";
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import { z } from "zod";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
  FormDescription,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { useAuth } from "@/hooks/use-auth";
import { Loader2, CheckCircle, XCircle } from "lucide-react";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { apiRequest } from "@/lib/queryClient";

const countries = [
  { name: "Afghanistan", code: "AF" },
  { name: "Åland Islands", code: "AX" },
  { name: "Albania", code: "AL" },
  { name: "Algeria", code: "DZ" },
  { name: "American Samoa", code: "AS" },
  { name: "Andorra", code: "AD" },
  { name: "Angola", code: "AO" },
  { name: "Anguilla", code: "AI" },
  { name: "Antarctica", code: "AQ" },
  { name: "Antigua and Barbuda", code: "AG" },
  { name: "Argentina", code: "AR" },
  { name: "Armenia", code: "AM" },
  { name: "Aruba", code: "AW" },
  { name: "Australia", code: "AU" },
  { name: "Austria", code: "AT" },
  { name: "Azerbaijan", code: "AZ" },
  { name: "Bahamas", code: "BS" },
  { name: "Bahrain", code: "BH" },
  { name: "Bangladesh", code: "BD" },
  { name: "Barbados", code: "BB" },
  { name: "Belarus", code: "BY" },
  { name: "Belgium", code: "BE" },
  { name: "Belize", code: "BZ" },
  { name: "Benin", code: "BJ" },
  { name: "Bermuda", code: "BM" },
  { name: "Bhutan", code: "BT" },
  { name: "Bolivia", code: "BO" },
  { name: "Bosnia and Herzegovina", code: "BA" },
  { name: "Botswana", code: "BW" },
  { name: "Bouvet Island", code: "BV" },
  { name: "Brazil", code: "BR" },
  { name: "British Indian Ocean Territory", code: "IO" },
  { name: "Brunei Darussalam", code: "BN" },
  { name: "Bulgaria", code: "BG" },
  { name: "Burkina Faso", code: "BF" },
  { name: "Burundi", code: "BI" },
  { name: "Cambodia", code: "KH" },
  { name: "Cameroon", code: "CM" },
  { name: "Canada", code: "CA" },
  { name: "Cape Verde", code: "CV" },
  { name: "Cayman Islands", code: "KY" },
  { name: "Central African Republic", code: "CF" },
  { name: "Chad", code: "TD" },
  { name: "Chile", code: "CL" },
  { name: "China", code: "CN" },
  { name: "Christmas Island", code: "CX" },
  { name: "Cocos (Keeling) Islands", code: "CC" },
  { name: "Colombia", code: "CO" },
  { name: "Comoros", code: "KM" },
  { name: "Congo", code: "CG" },
  { name: "Congo, The Democratic Republic of the", code: "CD" },
  { name: "Cook Islands", code: "CK" },
  { name: "Costa Rica", code: "CR" },
  { name: "Cote D'Ivoire", code: "CI" },
  { name: "Croatia", code: "HR" },
  { name: "Cuba", code: "CU" },
  { name: "Cyprus", code: "CY" },
  { name: "Czech Republic", code: "CZ" },
  { name: "Denmark", code: "DK" },
  { name: "Djibouti", code: "DJ" },
  { name: "Dominica", code: "DM" },
  { name: "Dominican Republic", code: "DO" },
  { name: "Ecuador", code: "EC" },
  { name: "Egypt", code: "EG" },
  { name: "El Salvador", code: "SV" },
  { name: "Equatorial Guinea", code: "GQ" },
  { name: "Eritrea", code: "ER" },
  { name: "Estonia", code: "EE" },
  { name: "Ethiopia", code: "ET" },
  { name: "Falkland Islands (Malvinas)", code: "FK" },
  { name: "Faroe Islands", code: "FO" },
  { name: "Fiji", code: "FJ" },
  { name: "Finland", code: "FI" },
  { name: "France", code: "FR" },
  { name: "French Guiana", code: "GF" },
  { name: "French Polynesia", code: "PF" },
  { name: "French Southern Territories", code: "TF" },
  { name: "Gabon", code: "GA" },
  { name: "Gambia", code: "GM" },
  { name: "Georgia", code: "GE" },
  { name: "Germany", code: "DE" },
  { name: "Ghana", code: "GH" },
  { name: "Gibraltar", code: "GI" },
  { name: "Greece", code: "GR" },
  { name: "Greenland", code: "GL" },
  { name: "Grenada", code: "GD" },
  { name: "Guadeloupe", code: "GP" },
  { name: "Guam", code: "GU" },
  { name: "Guatemala", code: "GT" },
  { name: "Guernsey", code: "GG" },
  { name: "Guinea", code: "GN" },
  { name: "Guinea-Bissau", code: "GW" },
  { name: "Guyana", code: "GY" },
  { name: "Haiti", code: "HT" },
  { name: "Heard Island and Mcdonald Islands", code: "HM" },
  { name: "Holy See (Vatican City State)", code: "VA" },
  { name: "Honduras", code: "HN" },
  { name: "Hong Kong", code: "HK" },
  { name: "Hungary", code: "HU" },
  { name: "Iceland", code: "IS" },
  { name: "India", code: "IN" },
  { name: "Indonesia", code: "ID" },
  { name: "Iran, Islamic Republic Of", code: "IR" },
  { name: "Iraq", code: "IQ" },
  { name: "Ireland", code: "IE" },
  { name: "Isle of Man", code: "IM" },
  { name: "Israel", code: "IL" },
  { name: "Italy", code: "IT" },
  { name: "Jamaica", code: "JM" },
  { name: "Japan", code: "JP" },
  { name: "Jersey", code: "JE" },
  { name: "Jordan", code: "JO" },
  { name: "Kazakhstan", code: "KZ" },
  { name: "Kenya", code: "KE" },
  { name: "Kiribati", code: "KI" },
  { name: "Korea, Democratic People'S Republic of", code: "KP" },
  { name: "Korea, Republic of", code: "KR" },
  { name: "Kuwait", code: "KW" },
  { name: "Kyrgyzstan", code: "KG" },
  { name: "Lao People'S Democratic Republic", code: "LA" },
  { name: "Latvia", code: "LV" },
  { name: "Lebanon", code: "LB" },
  { name: "Lesotho", code: "LS" },
  { name: "Liberia", code: "LR" },
  { name: "Libyan Arab Jamahiriya", code: "LY" },
  { name: "Liechtenstein", code: "LI" },
  { name: "Lithuania", code: "LT" },
  { name: "Luxembourg", code: "LU" },
  { name: "Macao", code: "MO" },
  { name: "Macedonia, The Former Yugoslav Republic of", code: "MK" },
  { name: "Madagascar", code: "MG" },
  { name: "Malawi", code: "MW" },
  { name: "Malaysia", code: "MY" },
  { name: "Maldives", code: "MV" },
  { name: "Mali", code: "ML" },
  { name: "Malta", code: "MT" },
  { name: "Marshall Islands", code: "MH" },
  { name: "Martinique", code: "MQ" },
  { name: "Mauritania", code: "MR" },
  { name: "Mauritius", code: "MU" },
  { name: "Mayotte", code: "YT" },
  { name: "Mexico", code: "MX" },
  { name: "Micronesia, Federated States of", code: "FM" },
  { name: "Moldova, Republic of", code: "MD" },
  { name: "Monaco", code: "MC" },
  { name: "Mongolia", code: "MN" },
  { name: "Montserrat", code: "MS" },
  { name: "Morocco", code: "MA" },
  { name: "Mozambique", code: "MZ" },
  { name: "Myanmar", code: "MM" },
  { name: "Namibia", code: "NA" },
  { name: "Nauru", code: "NR" },
  { name: "Nepal", code: "NP" },
  { name: "Netherlands", code: "NL" },
  { name: "Netherlands Antilles", code: "AN" },
  { name: "New Caledonia", code: "NC" },
  { name: "New Zealand", code: "NZ" },
  { name: "Nicaragua", code: "NI" },
  { name: "Niger", code: "NE" },
  { name: "Nigeria", code: "NG" },
  { name: "Niue", code: "NU" },
  { name: "Norfolk Island", code: "NF" },
  { name: "Northern Mariana Islands", code: "MP" },
  { name: "Norway", code: "NO" },
  { name: "Oman", code: "OM" },
  { name: "Pakistan", code: "PK" },
  { name: "Palau", code: "PW" },
  { name: "Palestinian Territory, Occupied", code: "PS" },
  { name: "Panama", code: "PA" },
  { name: "Papua New Guinea", code: "PG" },
  { name: "Paraguay", code: "PY" },
  { name: "Peru", code: "PE" },
  { name: "Philippines", code: "PH" },
  { name: "Pitcairn", code: "PN" },
  { name: "Poland", code: "PL" },
  { name: "Portugal", code: "PT" },
  { name: "Puerto Rico", code: "PR" },
  { name: "Qatar", code: "QA" },
  { name: "Reunion", code: "RE" },
  { name: "Romania", code: "RO" },
  { name: "Russian Federation", code: "RU" },
  { name: "Rwanda", code: "RW" },
  { name: "Saint Helena", code: "SH" },
  { name: "Saint Kitts and Nevis", code: "KN" },
  { name: "Saint Lucia", code: "LC" },
  { name: "Saint Pierre and Miquelon", code: "PM" },
  { name: "Saint Vincent and the Grenadines", code: "VC" },
  { name: "Samoa", code: "WS" },
  { name: "San Marino", code: "SM" },
  { name: "Sao Tome and Principe", code: "ST" },
  { name: "Saudi Arabia", code: "SA" },
  { name: "Senegal", code: "SN" },
  { name: "Serbia and Montenegro", code: "CS" },
  { name: "Seychelles", code: "SC" },
  { name: "Sierra Leone", code: "SL" },
  { name: "Singapore", code: "SG" },
  { name: "Slovakia", code: "SK" },
  { name: "Slovenia", code: "SI" },
  { name: "Solomon Islands", code: "SB" },
  { name: "Somalia", code: "SO" },
  { name: "South Africa", code: "ZA" },
  { name: "South Georgia and the South Sandwich Islands", code: "GS" },
  { name: "Spain", code: "ES" },
  { name: "Sri Lanka", code: "LK" },
  { name: "Sudan", code: "SD" },
  { name: "Suriname", code: "SR" },
  { name: "Svalbard and Jan Mayen", code: "SJ" },
  { name: "Swaziland", code: "SZ" },
  { name: "Sweden", code: "SE" },
  { name: "Switzerland", code: "CH" },
  { name: "Syrian Arab Republic", code: "SY" },
  { name: "Taiwan, Province of China", code: "TW" },
  { name: "Tajikistan", code: "TJ" },
  { name: "Tanzania, United Republic of", code: "TZ" },
  { name: "Thailand", code: "TH" },
  { name: "Timor-Leste", code: "TL" },
  { name: "Togo", code: "TG" },
  { name: "Tokelau", code: "TK" },
  { name: "Tonga", code: "TO" },
  { name: "Trinidad and Tobago", code: "TT" },
  { name: "Tunisia", code: "TN" },
  { name: "Turkey", code: "TR" },
  { name: "Turkmenistan", code: "TM" },
  { name: "Turks and Caicos Islands", code: "TC" },
  { name: "Tuvalu", code: "TV" },
  { name: "Uganda", code: "UG" },
  { name: "Ukraine", code: "UA" },
  { name: "United Arab Emirates", code: "AE" },
  { name: "United Kingdom", code: "GB" },
  { name: "United States", code: "US" },
  { name: "United States Minor Outlying Islands", code: "UM" },
  { name: "Uruguay", code: "UY" },
  { name: "Uzbekistan", code: "UZ" },
  { name: "Vanuatu", code: "VU" },
  { name: "Venezuela", code: "VE" },
  { name: "Vietnam", code: "VN" },
  { name: "Virgin Islands, British", code: "VG" },
  { name: "Virgin Islands, U.S.", code: "VI" },
  { name: "Wallis and Futuna", code: "WF" },
  { name: "Western Sahara", code: "EH" },
  { name: "Yemen", code: "YE" },
  { name: "Zambia", code: "ZM" },
  { name: "Zimbabwe", code: "ZW" }
];

// Create the registration form schema
const formSchema = z.object({
  email: z.string().email({
    message: "Please enter a valid email address.",
  }),
  username: z.string().min(2, {
    message: "Username must be at least 2 characters.",
  }),
  password: z.string().min(6, {
    message: "Password must be at least 6 characters.",
  }),
  country: z.string().min(1, {
    message: "Please select your country.",
  }),
});

export function RegistrationForm({ onSuccess }: { onSuccess: () => void }) {
  const { registerMutation } = useAuth();
  const [authError, setAuthError] = useState<string | null>(null);
  const [usernameAvailable, setUsernameAvailable] = useState<boolean | null>(null);
  const [checkingUsername, setCheckingUsername] = useState(false);
  const [emailAvailable, setEmailAvailable] = useState<boolean | null>(null);
  const [checkingEmail, setCheckingEmail] = useState(false);

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      email: "",
      username: "",
      password: "",
      country: "",
    },
  });

  // Username availability check
  useEffect(() => {
    // Debounce username check
    const username = form.watch('username');
    
    if (username && username.length >= 2) {
      const timeoutId = setTimeout(() => {
        checkUsernameAvailability(username);
      }, 500);
      
      return () => clearTimeout(timeoutId);
    } else {
      setUsernameAvailable(null);
    }
  }, [form.watch('username')]);
  
  // Email availability check
  useEffect(() => {
    // Debounce email check
    const email = form.watch('email');
    
    if (email && email.includes('@') && email.includes('.')) {
      const timeoutId = setTimeout(() => {
        checkEmailAvailability(email);
      }, 500);
      
      return () => clearTimeout(timeoutId);
    } else {
      setEmailAvailable(null);
    }
  }, [form.watch('email')]);

  async function checkUsernameAvailability(username: string) {
    if (username.length < 2) return;
    
    setCheckingUsername(true);
    try {
      const response = await fetch(
        `/api/check-username?username=${encodeURIComponent(username)}`
      );
      const data = await response.json();
      setUsernameAvailable(data.available);
    } catch (error) {
      console.error('Error checking username:', error);
      setUsernameAvailable(null);
    } finally {
      setCheckingUsername(false);
    }
  }

  async function checkEmailAvailability(email: string) {
    if (!email.includes('@') || !email.includes('.')) return;
    
    setCheckingEmail(true);
    try {
      const response = await fetch(
        `/api/check-email?email=${encodeURIComponent(email)}`
      );
      const data = await response.json();
      setEmailAvailable(data.available);
    } catch (error) {
      console.error('Error checking email:', error);
      setEmailAvailable(null);
    } finally {
      setCheckingEmail(false);
    }
  }

  function onSubmit(values: z.infer<typeof formSchema>) {
    setAuthError(null);
    
    if (usernameAvailable === false) {
      setAuthError("Username is already taken. Please choose another.");
      return;
    }
    
    if (emailAvailable === false) {
      setAuthError("Email is already registered. Please use another email or login.");
      return;
    }
    
    registerMutation.mutate(values, {
      onSuccess: () => {
        if (onSuccess) {
          onSuccess();
        }
      },
      onError: (error) => {
        setAuthError(error.message || "Registration failed. Please check your information.");
      }
    });
  }

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
        {authError && (
          <div className="p-3 my-2 text-sm text-white bg-destructive rounded-md">
            {authError}
          </div>
        )}
        
        <FormField
          control={form.control}
          name="email"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Email</FormLabel>
              <div className="relative">
                <FormControl>
                  <Input placeholder="Enter your email" {...field} />
                </FormControl>
                {checkingEmail && (
                  <div className="absolute right-2 top-2">
                    <Loader2 className="h-4 w-4 animate-spin text-muted-foreground" />
                  </div>
                )}
                {emailAvailable === true && !checkingEmail && (
                  <div className="absolute right-2 top-2">
                    <CheckCircle className="h-4 w-4 text-green-500" />
                  </div>
                )}
                {emailAvailable === false && !checkingEmail && (
                  <div className="absolute right-2 top-2">
                    <XCircle className="h-4 w-4 text-red-500" />
                  </div>
                )}
              </div>
              <FormMessage />
              {emailAvailable === false && (
                <FormDescription className="text-red-500">
                  This email is already registered.
                </FormDescription>
              )}
            </FormItem>
          )}
        />
        
        <FormField
          control={form.control}
          name="username"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Username</FormLabel>
              <div className="relative">
                <FormControl>
                  <Input placeholder="Choose a username" {...field} />
                </FormControl>
                {checkingUsername && (
                  <div className="absolute right-2 top-2">
                    <Loader2 className="h-4 w-4 animate-spin text-muted-foreground" />
                  </div>
                )}
                {usernameAvailable === true && !checkingUsername && (
                  <div className="absolute right-2 top-2">
                    <CheckCircle className="h-4 w-4 text-green-500" />
                  </div>
                )}
                {usernameAvailable === false && !checkingUsername && (
                  <div className="absolute right-2 top-2">
                    <XCircle className="h-4 w-4 text-red-500" />
                  </div>
                )}
              </div>
              <FormMessage />
              {usernameAvailable === false && (
                <FormDescription className="text-red-500">
                  This username is already taken.
                </FormDescription>
              )}
            </FormItem>
          )}
        />
        
        <FormField
          control={form.control}
          name="password"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Password</FormLabel>
              <FormControl>
                <Input type="password" placeholder="Create a password" {...field} />
              </FormControl>
              <FormMessage />
              <FormDescription>
                Must be at least 6 characters.
              </FormDescription>
            </FormItem>
          )}
        />
        
        <FormField
          control={form.control}
          name="country"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Country</FormLabel>
              <Select 
                onValueChange={field.onChange} 
                defaultValue={field.value}
              >
                <FormControl>
                  <SelectTrigger>
                    <SelectValue placeholder="Select your country" />
                  </SelectTrigger>
                </FormControl>
                <SelectContent className="max-h-60">
                  {countries.map((country) => (
                    <SelectItem key={country.code} value={country.name}>
                      {country.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
              <FormMessage />
            </FormItem>
          )}
        />
        
        <Button 
          type="submit" 
          className="w-full" 
          disabled={
            registerMutation.isPending || 
            usernameAvailable === false || 
            emailAvailable === false
          }
        >
          {registerMutation.isPending ? (
            <>
              <Loader2 className="mr-2 h-4 w-4 animate-spin" />
              Registering...
            </>
          ) : (
            "Register"
          )}
        </Button>
      </form>
    </Form>
  );
}
</file>

<file path="client/src/lib/protected-route-admin.tsx">
import { useAuth } from "@/hooks/use-auth";
import { Loader2 } from "lucide-react";
import { Redirect, Route } from "wouter";
import { useToast } from "@/hooks/use-toast";
import { useEffect } from "react";

export function AdminRoute({
  path,
  component: Component,
}: {
  path: string;
  component: () => React.JSX.Element;
}) {
  const { user, isLoading, isAdmin } = useAuth();
  const { toast } = useToast();

  useEffect(() => {
    // If user is logged in but not an admin, show toast
    if (user && !isAdmin) {
      toast({
        title: "Access Denied",
        description: "You do not have admin privileges to access this page.",
        variant: "destructive",
      });
    } else if (user && !user.isApproved) {
      toast({
        title: "Access Denied",
        description: "Your account is pending approval by an administrator.",
        variant: "destructive",
      });
    }
  }, [user, isAdmin, toast]);

  if (isLoading) {
    return (
      <Route path={path}>
        <div className="flex items-center justify-center min-h-screen">
          <Loader2 className="h-8 w-8 animate-spin text-border" />
        </div>
      </Route>
    );
  }

  // If not logged in, redirect to auth page
  if (!user) {
    return (
      <Route path={path}>
        <Redirect to="/auth" />
      </Route>
    );
  }

  // If logged in but not approved, redirect to pending page
  if (user.isApproved === false) {
    return (
      <Route path={path}>
        <Redirect to="/registration-pending" />
      </Route>
    );
  }

  // If logged in and approved but not an admin, redirect to home
  if (!isAdmin) {
    return (
      <Route path={path}>
        <Redirect to="/home" />
      </Route>
    );
  }

  // If logged in, approved, and an admin, show the component
  return <Route path={path}><Component /></Route>;
}
</file>

<file path="client/src/lib/protected-route-approved.tsx">
import { useAuth } from "@/hooks/use-auth";
import { Loader2 } from "lucide-react";
import { Redirect, Route } from "wouter";
import { useToast } from "@/hooks/use-toast";
import { useEffect } from "react";

export function ApprovedRoute({
  path,
  component: Component,
}: {
  path: string;
  component: () => React.JSX.Element;
}) {
  const { user, isLoading } = useAuth();
  const { toast } = useToast();

  useEffect(() => {
    // If user is logged in but not approved, show toast and redirect
    if (user && user.isApproved === false) {
      toast({
        title: "Access Denied",
        description: "Your account is pending approval by an administrator.",
        variant: "destructive",
      });
    }
  }, [user, toast]);

  if (isLoading) {
    return (
      <Route path={path}>
        <div className="flex items-center justify-center min-h-screen">
          <Loader2 className="h-8 w-8 animate-spin text-border" />
        </div>
      </Route>
    );
  }

  // If not logged in, redirect to auth page
  if (!user) {
    return (
      <Route path={path}>
        <Redirect to="/auth" />
      </Route>
    );
  }

  // If logged in but not approved, redirect to pending page
  if (user.isApproved === false) {
    return (
      <Route path={path}>
        <Redirect to="/registration-pending" />
      </Route>
    );
  }

  // If logged in and approved, show the component
  return <Route path={path}><Component /></Route>;
}
</file>

<file path="client/src/lib/queryClient.ts">
import { QueryClient, QueryFunction } from "@tanstack/react-query";

async function throwIfResNotOk(res: Response) {
  if (!res.ok) {
    let errorMessage = res.statusText || 'Request failed';
    try {
      // Clone the response to avoid consuming the body
      const clonedRes = res.clone();
      const text = await clonedRes.text();
      if (text) {
        errorMessage = text;
      }
    } catch (e) {
      console.error('Error reading response text:', e);
    }
    throw new Error(`${res.status}: ${errorMessage}`);
  }
}

export async function apiRequest<T = any>(
  method: string,
  url: string,
  data?: unknown | undefined,
): Promise<Response> {
  // Return the actual Response object instead of parsing JSON
  // This allows the caller to handle the response as needed
  return fetch(url, {
    method,
    headers: data ? { "Content-Type": "application/json" } : {},
    body: data ? JSON.stringify(data) : undefined,
    credentials: "include",
  });
}

export async function apiGet<T = any>(url: string): Promise<T> {
  const response = await apiRequest('GET', url);
  await throwIfResNotOk(response);
  return await response.json();
}

type UnauthorizedBehavior = "returnNull" | "throw";
export const getQueryFn: <T>(options: {
  on401: UnauthorizedBehavior;
}) => QueryFunction<T> =
  ({ on401: unauthorizedBehavior }) =>
  async ({ queryKey }) => {
    // Handle basic URL vs. URL with filters
    let url = queryKey[0] as string;
    
    // If there are filters in the second element of the queryKey
    if (queryKey.length > 1 && typeof queryKey[1] === 'object' && queryKey[1] !== null) {
      const filters = queryKey[1] as Record<string, any>;
      
      // Build query parameters 
      if (Object.keys(filters).length > 0) {
        const searchParams = new URLSearchParams();
        
        Object.entries(filters).forEach(([key, value]) => {
          if (value !== undefined && value !== null) {
            if (Array.isArray(value)) {
              searchParams.append(key, value.join(','));
            } else if (typeof value === 'object') {
              // For objects like stimulationScoreRange
              searchParams.append(key, JSON.stringify(value));
            } else {
              searchParams.append(key, String(value));
            }
          }
        });
        
        // Append query string to URL
        const queryString = searchParams.toString();
        if (queryString) {
          url = `${url}?${queryString}`;
          console.log('Debug - URL with filters:', url);
        }
      }
    }
    
    const res = await fetch(url, {
      credentials: "include",
    });

    if (unauthorizedBehavior === "returnNull" && res.status === 401) {
      return null;
    }

    await throwIfResNotOk(res);
    return await res.json();
  };

export const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      queryFn: getQueryFn({ on401: "throw" }),
      refetchInterval: false,
      refetchOnWindowFocus: false,
      staleTime: Infinity,
      retry: false,
    },
    mutations: {
      retry: false,
    },
  },
});
</file>

<file path="server/details-preservator.ts">
import fs from 'fs';
import path from 'path';

// Define the structure for storing custom show details
interface CustomShowDetails {
  // Stimulation metrics
  stimulationScore?: number;
  musicTempo?: string;
  totalMusicLevel?: string;
  totalSoundEffectTimeLevel?: string;
  sceneFrequency?: string;
  interactivityLevel?: string;
  dialogueIntensity?: string;
  soundEffectsLevel?: string;
  animationStyle?: string;
  
  // Other important fields
  ageRange?: string;
  themes?: string[];
  description?: string;
  
  // Fields to be preserved during updates
  [key: string]: any;
}

// Custom show details mapping type
interface CustomShowDetailsMap {
  [showId: string]: CustomShowDetails;
}

/**
 * Load custom show details mapping from the JSON file
 */
export function loadCustomShowDetailsMap(): CustomShowDetailsMap {
  try {
    const filePath = path.join(process.cwd(), 'customShowDetailsMap.json');
    if (fs.existsSync(filePath)) {
      const data = fs.readFileSync(filePath, 'utf-8');
      return JSON.parse(data);
    }
  } catch (error) {
    console.error('Error loading custom show details map:', error);
  }
  return {};
}

/**
 * Save custom show details mapping to the JSON file
 */
export function saveCustomShowDetailsMap(customDetailsMap: CustomShowDetailsMap): void {
  try {
    const filePath = path.join(process.cwd(), 'customShowDetailsMap.json');
    fs.writeFileSync(filePath, JSON.stringify(customDetailsMap, null, 2));
  } catch (error) {
    console.error('Error saving custom show details map:', error);
  }
}

/**
 * Update custom show details in the mapping
 */
export function updateCustomShowDetails(showId: number, updatedFields: Partial<CustomShowDetails>): void {
  const customDetailsMap = loadCustomShowDetailsMap();
  const showIdStr = showId.toString();
  
  // Merge with existing details or create new entry
  customDetailsMap[showIdStr] = {
    ...(customDetailsMap[showIdStr] || {}),
    ...updatedFields
  };
  
  saveCustomShowDetailsMap(customDetailsMap);
}

/**
 * Get custom show details for a specific show
 */
export function getCustomShowDetails(showId: number): CustomShowDetails | undefined {
  const customDetailsMap = loadCustomShowDetailsMap();
  return customDetailsMap[showId.toString()];
}

/**
 * Preserve custom show details when updating shows from external sources
 * This merges custom fields with new data, prioritizing custom fields
 */
export function preserveCustomShowDetails<T>(showId: number, currentDetails: T, newData: Partial<T>): T {
  const customDetails = getCustomShowDetails(showId);
  
  if (!customDetails) {
    return { ...currentDetails, ...newData };
  }
  
  // Start with current details
  const mergedData = { ...currentDetails };
  
  // Add new data fields that aren't in custom details
  for (const [key, value] of Object.entries(newData)) {
    if (!(key in customDetails)) {
      (mergedData as any)[key] = value;
    }
  }
  
  // Override with custom details (highest priority)
  for (const [key, value] of Object.entries(customDetails)) {
    (mergedData as any)[key] = value;
  }
  
  return mergedData;
}

/**
 * Apply custom show details to all shows in storage at server startup
 * Uses batch processing for improved performance
 */
export async function applyCustomShowDetails(getShowById: (id: number) => Promise<any>, updateShow: (id: number, data: any) => Promise<any>): Promise<void> {
  try {
    const customDetailsMap = loadCustomShowDetailsMap();
    console.log(`Applying custom details for ${Object.keys(customDetailsMap).length} shows from customShowDetailsMap.json`);
    
    // Skip custom details application if in performance mode
    if (process.env.SKIP_CUSTOM_DETAILS === 'true') {
      console.log('Skipping custom details application (SKIP_CUSTOM_DETAILS=true)');
      return;
    }
    
    // Process in batches of 20 shows
    const BATCH_SIZE = 20;
    const showIds = Object.keys(customDetailsMap).map(id => parseInt(id)).filter(id => !isNaN(id));
    const totalBatches = Math.ceil(showIds.length / BATCH_SIZE);
    
    console.log(`Processing ${showIds.length} shows in ${totalBatches} batches of ${BATCH_SIZE}`);
    
    for (let batchIndex = 0; batchIndex < totalBatches; batchIndex++) {
      const batchStart = batchIndex * BATCH_SIZE;
      const batchEnd = Math.min(batchStart + BATCH_SIZE, showIds.length);
      const currentBatch = showIds.slice(batchStart, batchEnd);
      
      console.log(`Processing batch ${batchIndex + 1}/${totalBatches} (shows ${batchStart+1}-${batchEnd})`);
      
      // Process each batch in parallel
      const batchPromises = currentBatch.map(async (showId) => {
        try {
          const show = await getShowById(showId);
          if (show) {
            // Don't log every show to reduce console output
            // console.log(`Applying custom details to show ID ${showId}: ${show.name}`);
            return updateShow(showId, customDetailsMap[showId.toString()]);
          }
        } catch (err) {
          console.error(`Error updating show ${showId}:`, err);
        }
      });
      
      // Wait for current batch to complete before processing next batch
      await Promise.all(batchPromises);
    }
    
    console.log('Custom details application completed');
  } catch (error) {
    console.error('Error applying custom show details:', error);
  }
}
</file>

<file path="server/image-preservator.ts">
import fs from 'fs';
import path from 'path';

// Custom image mapping type
interface CustomImageMap {
  [showId: string]: string;
}

/**
 * Load custom image mapping from the JSON file
 */
export function loadCustomImageMap(): CustomImageMap {
  try {
    const filePath = path.join(process.cwd(), 'customImageMap.json');
    if (fs.existsSync(filePath)) {
      const data = fs.readFileSync(filePath, 'utf-8');
      return JSON.parse(data);
    }
  } catch (error) {
    console.error('Error loading custom image map:', error);
  }
  return {};
}

/**
 * Save custom image mapping to the JSON file
 */
export function saveCustomImageMap(customImageMap: CustomImageMap): void {
  try {
    const filePath = path.join(process.cwd(), 'customImageMap.json');
    fs.writeFileSync(filePath, JSON.stringify(customImageMap, null, 2));
  } catch (error) {
    console.error('Error saving custom image map:', error);
  }
}

/**
 * Add or update a custom image mapping
 */
export function updateCustomImageMap(showId: number, imageUrl: string): void {
  const customImageMap = loadCustomImageMap();
  customImageMap[showId.toString()] = imageUrl;
  saveCustomImageMap(customImageMap);
}

/**
 * Get custom image URL for a show if it exists
 */
export function getCustomImageUrl(showId: number): string | undefined {
  const customImageMap = loadCustomImageMap();
  return customImageMap[showId.toString()];
}

/**
 * Preserve custom image URLs when updating shows from external sources
 */
export function preserveCustomImageUrl(showId: number, currentImageUrl: string | null): string | null {
  const customImageUrl = getCustomImageUrl(showId);
  return customImageUrl || currentImageUrl;
}

/**
 * Apply custom images to all shows in storage at server startup
 * Uses batch processing for improved performance
 */
export async function applyCustomImages(getShowById: (id: number) => Promise<any>, updateShow: (id: number, data: any) => Promise<any>): Promise<void> {
  try {
    const customImageMap = loadCustomImageMap();
    console.log(`Applying ${Object.keys(customImageMap).length} custom images from customImageMap.json`);
    
    // Skip custom images application if in performance mode
    if (process.env.SKIP_CUSTOM_IMAGES === 'true') {
      console.log('Skipping custom images application (SKIP_CUSTOM_IMAGES=true)');
      return;
    }
    
    // Process in batches of 20 shows
    const BATCH_SIZE = 20;
    const showIds = Object.keys(customImageMap).map(id => parseInt(id)).filter(id => !isNaN(id));
    const totalBatches = Math.ceil(showIds.length / BATCH_SIZE);
    
    console.log(`Processing ${showIds.length} images in ${totalBatches} batches of ${BATCH_SIZE}`);
    
    for (let batchIndex = 0; batchIndex < totalBatches; batchIndex++) {
      const batchStart = batchIndex * BATCH_SIZE;
      const batchEnd = Math.min(batchStart + BATCH_SIZE, showIds.length);
      const currentBatch = showIds.slice(batchStart, batchEnd);
      
      console.log(`Processing image batch ${batchIndex + 1}/${totalBatches} (shows ${batchStart+1}-${batchEnd})`);
      
      // Process each batch in parallel
      const batchPromises = currentBatch.map(async (showId) => {
        try {
          const show = await getShowById(showId);
          if (show) {
            // Don't log every show to reduce console output
            // console.log(`Applying custom image to show ID ${showId}: ${show.name}`);
            return updateShow(showId, { imageUrl: customImageMap[showId.toString()] });
          }
        } catch (err) {
          console.error(`Error updating image for show ${showId}:`, err);
        }
      });
      
      // Wait for current batch to complete before processing next batch
      await Promise.all(batchPromises);
    }
    
    console.log('Custom images application completed');
  } catch (error) {
    console.error('Error applying custom images:', error);
  }
}
</file>

<file path="server/image-upload.ts">
import multer from 'multer';
import path from 'path';
import fs from 'fs';
import sharp from 'sharp';
import { Request, Response, NextFunction } from 'express';

// Create upload directories if they don't exist
const imageDir = './public/uploads';
const optimizedImageDir = './public/uploads/optimized';

if (!fs.existsSync(imageDir)) {
  fs.mkdirSync(imageDir, { recursive: true });
}

if (!fs.existsSync(optimizedImageDir)) {
  fs.mkdirSync(optimizedImageDir, { recursive: true });
}

// Configure storage for multer
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    cb(null, imageDir);
  },
  filename: function (req, file, cb) {
    // Generate a unique filename with timestamp
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
    const ext = path.extname(file.originalname);
    cb(null, `show-image-${uniqueSuffix}${ext}`);
  }
});

// File filter to ensure only images are uploaded
const fileFilter = (req: Request, file: Express.Multer.File, cb: multer.FileFilterCallback) => {
  // Accept only image files
  if (file.mimetype.startsWith('image/')) {
    cb(null, true);
  } else {
    cb(new Error('Only image files are allowed!'));
  }
};

// Initialize multer upload
export const upload = multer({ 
  storage: storage,
  fileFilter: fileFilter,
  limits: {
    fileSize: 5 * 1024 * 1024 // 5MB file size limit
  }
});

/**
 * Optimize an uploaded image for web use
 * @param filePath Path to the original uploaded file
 * @returns Path to the optimized image
 */
export async function optimizeImage(filePath: string): Promise<string> {
  const ext = path.extname(filePath);
  const filename = path.basename(filePath, ext);
  const optimizedPath = path.join(optimizedImageDir, `${filename}-optimized.jpg`);
  
  try {
    // Get image dimensions first to determine appropriate sizing
    const metadata = await sharp(filePath).metadata();
    
    // Standardize to portrait format - target a 3:4 aspect ratio (portrait)
    // Width: If width > 600px, resize to 600px width
    // Height: Automatically calculated to maintain aspect ratio, but aim for portrait orientation
    
    // Default values if metadata isn't available
    const originalWidth = metadata.width || 800;
    const originalHeight = metadata.height || 600;
    
    // Target portrait sizes
    let targetWidth: number;
    let targetHeight: number;

    // If the original is already portrait or square, maintain aspect ratio but limit max dimensions
    if (originalHeight >= originalWidth) {
      // It's already portrait or square, so we'll just resize keeping the aspect ratio
      targetWidth = Math.min(originalWidth, 600); // Max width of 600px
      targetHeight = Math.round((targetWidth / originalWidth) * originalHeight);

      // Ensure height doesn't exceed 900px (for very tall images)
      if (targetHeight > 900) {
        targetHeight = 900;
        targetWidth = Math.round((targetHeight / originalHeight) * originalWidth);
      }
    } else {
      // It's landscape, so we need to constrain height more aggressively
      // Target a 3:4 aspect ratio (width:height) for portrait orientation
      targetHeight = Math.min(originalHeight, 800); // Max height of 800px
      targetWidth = Math.min(originalWidth, Math.round(targetHeight * 0.75)); // Ensure width is about 75% of height
    }

    // Process the image with sharp
    await sharp(filePath)
      .resize(targetWidth, targetHeight, {
        fit: 'contain',
        background: { r: 255, g: 255, b: 255, alpha: 1 } // White background
      })
      .jpeg({ quality: 85, progressive: true }) // Good balance of quality and file size
      .toFile(optimizedPath);
    
    console.log(`Image optimized: ${optimizedPath} (${targetWidth}x${targetHeight})`);
    
    return `/uploads/optimized/${path.basename(optimizedPath)}`;
  } catch (error) {
    console.error('Error optimizing image:', error);
    throw error;
  }
}

// Error handler middleware for multer
export const uploadErrorHandler = (err: any, req: Request, res: Response, next: NextFunction) => {
  if (err instanceof multer.MulterError) {
    if (err.code === 'LIMIT_FILE_SIZE') {
      return res.status(400).json({ 
        error: 'File too large',
        message: 'File size should not exceed 5MB' 
      });
    }
    return res.status(400).json({ 
      error: err.code,
      message: err.message 
    });
  }
  
  if (err) {
    return res.status(400).json({ 
      error: 'Invalid upload',
      message: err.message 
    });
  }
  
  next();
};
</file>

<file path="shared/schema.ts">
import { pgTable, text, serial, integer, boolean, jsonb } from "drizzle-orm/pg-core";
import { createInsertSchema } from "drizzle-zod";
import { z } from "zod";

export const users = pgTable("users", {
  id: serial("id").primaryKey(),
  email: text("email").notNull().unique(),
  password: text("password").notNull(),
  isAdmin: boolean("is_admin").default(false),
  username: text("username").notNull(),
  country: text("country"),
  createdAt: text("created_at").notNull().default(new Date().toISOString()),
  isApproved: boolean("is_approved").default(false),
});

export const insertUserSchema = createInsertSchema(users).pick({
  email: true,
  password: true,
  username: true,
  country: true,
  isAdmin: true,
  isApproved: true,
});

// User favorites table to track shows a user has favorited
export const favorites = pgTable("favorites", {
  id: serial("id").primaryKey(),
  userId: integer("user_id").notNull(),
  tvShowId: integer("tv_show_id").notNull(),
  createdAt: text("created_at").notNull().default(new Date().toISOString()),
});

export const insertFavoriteSchema = createInsertSchema(favorites).omit({
  id: true,
  createdAt: true,
});

export type InsertUser = z.infer<typeof insertUserSchema>;
export type User = typeof users.$inferSelect;
export type InsertFavorite = z.infer<typeof insertFavoriteSchema>;
export type Favorite = typeof favorites.$inferSelect;

// TV Shows Schema - Updated to match the GitHub data structure
export const tvShows = pgTable("tv_shows", {
  id: serial("id").primaryKey(),
  name: text("name").notNull(),
  description: text("description").notNull(),
  ageRange: text("age_range").notNull(),
  episodeLength: integer("episode_length").notNull(), // in minutes
  creator: text("creator"),
  releaseYear: integer("release_year"),
  endYear: integer("end_year"),
  isOngoing: boolean("is_ongoing").default(true),
  
  // Number of seasons
  seasons: integer("seasons"),
  
  // Core metrics from GitHub data
  stimulationScore: integer("stimulation_score").notNull(), // Direct from GitHub data
  interactivityLevel: text("interactivity_level"),
  dialogueIntensity: text("dialogue_intensity"), 
  soundEffectsLevel: text("sound_effects_level"),
  musicTempo: text("music_tempo"),
  totalMusicLevel: text("total_music_level"),
  totalSoundEffectTimeLevel: text("total_sound_effect_time_level"),
  sceneFrequency: text("scene_frequency"),
  
  // Additional categorized ratings for specific aspects (1-5 scale)
  friendshipRating: integer("friendship_rating"),
  problemSolvingRating: integer("problem_solving_rating"),
  relatableSituationsRating: integer("relatable_situations_rating"),
  emotionalIntelligenceRating: integer("emotional_intelligence_rating"),
  creativityRating: integer("creativity_rating"),
  educationalValueRating: integer("educational_value_rating"),
  
  // Overall rating is still in the database and marked as NOT NULL
  overallRating: integer("overall_rating").notNull().default(3),
  
  // Platform and themes
  availableOn: text("available_on").array(),
  themes: text("themes").array(),
  
  // Other fields
  animationStyle: text("animation_style"),
  imageUrl: text("image_url"),
});

export const tvShowReviews = pgTable("tv_show_reviews", {
  id: serial("id").primaryKey(),
  tvShowId: integer("tv_show_id").notNull(),
  userName: text("user_name").notNull(),
  rating: integer("rating").notNull(), // 1-5 scale
  review: text("review").notNull(),
  createdAt: text("created_at").notNull().default(new Date().toISOString()),
});

// Track show search popularity
export const tvShowSearches = pgTable("tv_show_searches", {
  id: serial("id").primaryKey(),
  tvShowId: integer("tv_show_id").notNull(),
  searchCount: integer("search_count").notNull().default(1),
  viewCount: integer("view_count").notNull().default(0),
  lastSearched: text("last_searched").notNull().default(new Date().toISOString()),
  lastViewed: text("last_viewed"),
});

export const insertTvShowSchema = createInsertSchema(tvShows).omit({
  id: true,
});

export const insertTvShowReviewSchema = createInsertSchema(tvShowReviews).omit({
  id: true,
});

export const insertTvShowSearchSchema = createInsertSchema(tvShowSearches).omit({
  id: true,
  lastSearched: true,
  lastViewed: true,
});

export type InsertTvShow = z.infer<typeof insertTvShowSchema>;
export type TvShow = typeof tvShows.$inferSelect;
export type InsertTvShowReview = z.infer<typeof insertTvShowReviewSchema>;
export type TvShowReview = typeof tvShowReviews.$inferSelect;
export type InsertTvShowSearch = z.infer<typeof insertTvShowSearchSchema>;
export type TvShowSearch = typeof tvShowSearches.$inferSelect;

// GitHub show format based on actual data structure
export const tvShowGitHubSchema = z.object({
  title: z.string(),
  stimulation_score: z.number(),
  platform: z.string(),
  target_age_group: z.string(),
  seasons: z.string().nullable(),
  avg_episode_length: z.string().nullable(),
  themes: z.array(z.string()),
  interactivity_level: z.string(),
  animation_style: z.string(),
  dialogue_intensity: z.string(),
  sound_effects_level: z.string(),
  music_tempo: z.string(),
  total_music_level: z.string(),
  total_sound_effect_time_level: z.string(),
  scene_frequency: z.string(),
  image_filename: z.string(),
  release_year: z.number().optional(),
  end_year: z.number().optional(),
  // We'll add these derived fields for our application
  id: z.number().optional().default(() => Math.floor(Math.random() * 10000)),
  imageUrl: z.string().optional(),
});

export type TvShowGitHub = z.infer<typeof tvShowGitHubSchema>;
</file>

<file path="apply-custom-data.js">
// Script to apply custom show details and images to the database
// This script directly updates the database instead of applying changes during server startup
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import { Pool } from '@neondatabase/serverless';
import ws from 'ws';

// Get the current file directory (equivalent to __dirname in CommonJS)
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Configure Neon database connection
if (!process.env.DATABASE_URL) {
  console.error('DATABASE_URL environment variable is not set. Please set it before running this script.');
  process.exit(1);
}

// Set up database pool
const pool = new Pool({ connectionString: process.env.DATABASE_URL });

/**
 * Load custom show details mapping from the JSON file
 */
function loadCustomShowDetailsMap() {
  try {
    const filePath = path.join(process.cwd(), 'customShowDetailsMap.json');
    if (fs.existsSync(filePath)) {
      const data = fs.readFileSync(filePath, 'utf-8');
      return JSON.parse(data);
    }
  } catch (error) {
    console.error('Error loading custom show details map:', error);
  }
  return {};
}

/**
 * Load custom image mapping from the JSON file
 */
function loadCustomImageMap() {
  try {
    const filePath = path.join(process.cwd(), 'customImageMap.json');
    if (fs.existsSync(filePath)) {
      const data = fs.readFileSync(filePath, 'utf-8');
      return JSON.parse(data);
    }
  } catch (error) {
    console.error('Error loading custom image map:', error);
  }
  return {};
}

/**
 * Get a specific TV show from the database
 */
async function getTvShowById(id) {
  try {
    const result = await pool.query('SELECT * FROM tv_shows WHERE id = $1', [id]);
    if (result.rows.length > 0) {
      return result.rows[0];
    }
    return null;
  } catch (error) {
    console.error(`Error getting TV show with ID ${id}:`, error);
    return null;
  }
}

/**
 * Update a TV show's details in the database
 */
async function updateTvShow(id, details) {
  try {
    // Create SET clause for the SQL update query
    const keys = Object.keys(details);
    if (keys.length === 0) return null;
    
    // Create parameterized query
    const setClauses = keys.map((key, index) => `"${key}" = $${index + 2}`);
    const values = keys.map(key => {
      // Handle arrays (like themes) by converting to JSONB
      if (Array.isArray(details[key])) {
        return JSON.stringify(details[key]);
      }
      return details[key];
    });
    
    const query = `
      UPDATE tv_shows 
      SET ${setClauses.join(', ')} 
      WHERE id = $1 
      RETURNING *
    `;
    
    const result = await pool.query(query, [id, ...values]);
    if (result.rows.length > 0) {
      return result.rows[0];
    }
    return null;
  } catch (error) {
    console.error(`Error updating TV show with ID ${id}:`, error);
    return null;
  }
}

/**
 * Process all custom details in batches
 */
async function processCustomDetails() {
  try {
    const customDetailsMap = loadCustomShowDetailsMap();
    console.log(`Processing ${Object.keys(customDetailsMap).length} custom show details...`);
    
    // Process in batches of 20 shows
    const BATCH_SIZE = 20;
    const showIds = Object.keys(customDetailsMap).map(id => parseInt(id)).filter(id => !isNaN(id));
    const totalBatches = Math.ceil(showIds.length / BATCH_SIZE);
    
    console.log(`Processing ${showIds.length} shows in ${totalBatches} batches of ${BATCH_SIZE}`);
    
    let successCount = 0;
    let errorCount = 0;
    
    for (let batchIndex = 0; batchIndex < totalBatches; batchIndex++) {
      const batchStart = batchIndex * BATCH_SIZE;
      const batchEnd = Math.min(batchStart + BATCH_SIZE, showIds.length);
      const currentBatch = showIds.slice(batchStart, batchEnd);
      
      console.log(`Processing batch ${batchIndex + 1}/${totalBatches} (shows ${batchStart+1}-${batchEnd})`);
      
      // Process each show in the batch
      for (const showId of currentBatch) {
        try {
          const show = await getTvShowById(showId);
          if (show) {
            const details = customDetailsMap[showId.toString()];
            const updatedShow = await updateTvShow(showId, details);
            if (updatedShow) {
              successCount++;
              process.stdout.write('.');
            } else {
              errorCount++;
              process.stdout.write('E');
            }
          } else {
            console.log(`\nShow ID ${showId} not found in database`);
            errorCount++;
          }
        } catch (err) {
          console.error(`\nError processing show ${showId}:`, err);
          errorCount++;
        }
      }
      process.stdout.write('\n');
    }
    
    console.log(`\nCustom details processing completed: ${successCount} successful, ${errorCount} errors`);
    return { successCount, errorCount };
  } catch (error) {
    console.error('Error processing custom show details:', error);
    return { successCount: 0, errorCount: 0 };
  }
}

/**
 * Process all custom images in batches
 */
async function processCustomImages() {
  try {
    const customImageMap = loadCustomImageMap();
    console.log(`Processing ${Object.keys(customImageMap).length} custom images...`);
    
    // Process in batches of 20 shows
    const BATCH_SIZE = 20;
    const showIds = Object.keys(customImageMap).map(id => parseInt(id)).filter(id => !isNaN(id));
    const totalBatches = Math.ceil(showIds.length / BATCH_SIZE);
    
    console.log(`Processing ${showIds.length} images in ${totalBatches} batches of ${BATCH_SIZE}`);
    
    let successCount = 0;
    let errorCount = 0;
    
    for (let batchIndex = 0; batchIndex < totalBatches; batchIndex++) {
      const batchStart = batchIndex * BATCH_SIZE;
      const batchEnd = Math.min(batchStart + BATCH_SIZE, showIds.length);
      const currentBatch = showIds.slice(batchStart, batchEnd);
      
      console.log(`Processing image batch ${batchIndex + 1}/${totalBatches} (shows ${batchStart+1}-${batchEnd})`);
      
      // Process each show in the batch
      for (const showId of currentBatch) {
        try {
          const show = await getTvShowById(showId);
          if (show) {
            const imageUrl = customImageMap[showId.toString()];
            const updatedShow = await updateTvShow(showId, { imageUrl });
            if (updatedShow) {
              successCount++;
              process.stdout.write('.');
            } else {
              errorCount++;
              process.stdout.write('E');
            }
          } else {
            console.log(`\nShow ID ${showId} not found in database`);
            errorCount++;
          }
        } catch (err) {
          console.error(`\nError processing image for show ${showId}:`, err);
          errorCount++;
        }
      }
      process.stdout.write('\n');
    }
    
    console.log(`\nCustom images processing completed: ${successCount} successful, ${errorCount} errors`);
    return { successCount, errorCount };
  } catch (error) {
    console.error('Error processing custom images:', error);
    return { successCount: 0, errorCount: 0 };
  }
}

/**
 * Main function to process everything
 */
async function main() {
  try {
    console.log('Starting custom data processing...');
    console.log('This script will update the database directly with custom show details and images');
    
    // Process custom details
    const detailsResult = await processCustomDetails();
    
    // Process custom images
    const imagesResult = await processCustomImages();
    
    console.log('\nProcessing summary:');
    console.log(`Custom details: ${detailsResult.successCount} successful, ${detailsResult.errorCount} errors`);
    console.log(`Custom images: ${imagesResult.successCount} successful, ${imagesResult.errorCount} errors`);
    console.log('All done!');
    
  } catch (error) {
    console.error('Error in main process:', error);
  } finally {
    // Close the database pool
    await pool.end();
  }
}

// Run the main function
main().catch(console.error);
</file>

<file path="client/src/hooks/use-auth.tsx">
import React, { createContext, ReactNode, useContext, useEffect } from "react";
import {
  useQuery,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { User, InsertUser } from "@shared/schema";
import { getQueryFn, queryClient } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";

type AuthContextType = {
  user: User | null;
  isLoading: boolean;
  error: Error | null;
  loginMutation: UseMutationResult<User, Error, LoginData>;
  logoutMutation: UseMutationResult<void, Error, void>;
  registerMutation: UseMutationResult<User, Error, InsertUser>;
  isFavorite: (showId: number) => Promise<boolean>;
  toggleFavorite: (showId: number) => Promise<void>;
  isAdmin: boolean;
  isApproved: boolean;
};

interface LoginData {
  identifier: string; // Can be either email or username
  password: string;
}

export const AuthContext = createContext<AuthContextType | null>(null);

export function AuthProvider({ children }: { children: ReactNode }) {
  const { toast } = useToast();

  // Check if we have stored authentication state
  const hasStoredAuth = () => {
    try {
      const storedAuth = localStorage.getItem('tvtantrum_auth');
      if (!storedAuth) return false;
      
      const authData = JSON.parse(storedAuth);
      
      // Check if the stored auth is valid (less than 24 hours old)
      if (authData.isLoggedIn && authData.timestamp) {
        const storedTime = new Date(authData.timestamp);
        const now = new Date();
        const hoursDiff = (now.getTime() - storedTime.getTime()) / (1000 * 60 * 60);
        
        return hoursDiff < 24; // Valid if less than 24 hours old
      }
      return false;
    } catch (e) {
      console.error('Error reading stored auth:', e);
      return false;
    }
  };
  
  // Fetch current user data
  const {
    data: user,
    error,
    isLoading,
    refetch
  } = useQuery<User | null, Error>({
    queryKey: ["/api/user"],
    queryFn: getQueryFn({ on401: "returnNull" }),
    // This ensures we never have undefined, only null for unauthenticated users
    select: (data) => data ?? null,
    // Initialize with null (not authenticated)
    initialData: null,
    // Always fetch if we have stored auth
    enabled: hasStoredAuth(),
    // If auth token is invalid, retry a few times before giving up
    retry: hasStoredAuth() ? 3 : 0,
    // Refresh user data every 30 minutes
    refetchInterval: 30 * 60 * 1000
  });
  
  // Effect to manage authentication state
  useEffect(() => {
    // If there's an auth error, clear localStorage
    if (error && (error.message === "Not authenticated" || error.message?.includes("401"))) {
      localStorage.removeItem('tvtantrum_auth');
    }
    
    // If we have stored auth but no user, try to refetch user data
    const checkAndRefetchAuth = async () => {
      try {
        if (hasStoredAuth() && !user && !isLoading) {
          console.log("Detected stored auth but no user, trying to refetch...");
          await refetch();
        }
      } catch (err) {
        console.error("Error refetching user data:", err);
      }
    };
    
    checkAndRefetchAuth();
  }, [error, user, isLoading, refetch]);

  // Login mutation
  const loginMutation = useMutation({
    mutationFn: async (credentials: LoginData) => {
      try {
        const res = await fetch("/api/login", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(credentials),
          credentials: "include"
        });
        
        if (!res.ok) {
          const errorData = await res.json();
          console.log('Login error response:', errorData);
          
          // Create a custom error object with properties for approval status
          const error = new Error(errorData.message || "Login failed");
          // @ts-ignore - Adding custom property
          error.isPendingApproval = errorData.isPendingApproval || errorData.message?.includes("pending approval") || false;
          throw error;
        }
        
        return await res.json();
      } catch (err) {
        console.log('Login mutation caught error:', err);
        throw err;
      }
    },
    onSuccess: (user: User) => {
      // Store authentication state in localStorage to maintain login across page refreshes
      localStorage.setItem('tvtantrum_auth', JSON.stringify({
        isLoggedIn: true,
        timestamp: new Date().toISOString()
      }));
      
      // Update React Query cache with user data
      queryClient.setQueryData(["/api/user"], user);
    },
    onError: (error: Error) => {
      // Clear any stale auth data
      localStorage.removeItem('tvtantrum_auth');
      
      toast({
        title: "Login failed",
        description: error.message,
        variant: "destructive",
      });
    },
  });

  // Register mutation
  const registerMutation = useMutation({
    mutationFn: async (credentials: InsertUser) => {
      const res = await fetch("/api/register", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(credentials),
        credentials: "include"
      });
      
      if (!res.ok) {
        const errorData = await res.json().catch(() => null);
        if (errorData && errorData.message) {
          throw new Error(errorData.message);
        }
        throw new Error("Registration failed");
      }
      
      return await res.json();
    },
    onSuccess: (user: User) => {
      // Store authentication state in localStorage
      localStorage.setItem('tvtantrum_auth', JSON.stringify({
        isLoggedIn: true,
        timestamp: new Date().toISOString()
      }));
      
      // Update React Query cache with user data
      queryClient.setQueryData(["/api/user"], user);
      
      // Trigger a refetch to ensure we have the latest user data
      refetch();
    },
    onError: (error: Error) => {
      // Clear any stale auth data
      localStorage.removeItem('tvtantrum_auth');
      
      toast({
        title: "Registration failed",
        description: error.message,
        variant: "destructive",
      });
    },
  });

  // Logout mutation
  const logoutMutation = useMutation({
    mutationFn: async () => {
      const res = await fetch("/api/logout", {
        method: "POST",
        credentials: "include"
      });
      
      if (!res.ok) {
        const errorText = await res.text();
        throw new Error(errorText || "Logout failed");
      }
    },
    onSuccess: () => {
      // Clear authentication data from localStorage
      localStorage.removeItem('tvtantrum_auth');
      
      // Update React Query cache
      queryClient.setQueryData(["/api/user"], null);
      
      // Invalidate any query keys that depend on user authentication
      queryClient.invalidateQueries({ queryKey: ["/api/favorites"] });
    },
    onError: (error: Error) => {
      toast({
        title: "Logout failed",
        description: error.message,
        variant: "destructive",
      });
    },
  });

  // Check if a show is in user's favorites
  const isFavorite = async (showId: number): Promise<boolean> => {
    if (!user) return false;
    
    try {
      const res = await fetch(`/api/favorites/${showId}`, {
        credentials: "include"
      });
      
      if (!res.ok) {
        return false;
      }
      
      const data = await res.json();
      return data.isFavorite;
    } catch (error) {
      console.error("Error checking favorite status:", error);
      return false;
    }
  };

  // Toggle favorite status for a show
  const toggleFavorite = async (showId: number): Promise<void> => {
    if (!user) {
      throw new Error("User must be logged in to manage favorites");
    }
    
    // Check current favorite status
    const isFav = await isFavorite(showId);
    
    if (isFav) {
      // If already favorited, remove from favorites
      const res = await fetch(`/api/favorites/${showId}`, {
        method: "DELETE",
        credentials: "include"
      });
      
      if (!res.ok) {
        const errorText = await res.text();
        throw new Error(errorText || "Failed to remove from favorites");
      }
    } else {
      // If not favorited, add to favorites
      const res = await fetch("/api/favorites", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ tvShowId: showId }),
        credentials: "include"
      });
      
      if (!res.ok) {
        const errorText = await res.text();
        throw new Error(errorText || "Failed to add to favorites");
      }
    }
    
    // Invalidate relevant queries
    queryClient.invalidateQueries({ queryKey: ["/api/favorites"] });
  };

  // Check if the user has admin privileges
  const isAdmin = user?.isAdmin === true;
  
  // Check if the user is approved
  const isApproved = user?.isApproved === true;

  return (
    <AuthContext.Provider
      value={{
        user,
        isLoading,
        error,
        loginMutation,
        logoutMutation,
        registerMutation,
        isFavorite,
        toggleFavorite,
        isAdmin,
        isApproved,
      }}
    >
      {children}
    </AuthContext.Provider>
  );
}

export function useAuth() {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error("useAuth must be used within an AuthProvider");
  }
  return context;
}
</file>

<file path="client/src/main.tsx">
import { createRoot } from "react-dom/client";
import App from "./App";
import "./index.css";

// Load Google Fonts for matching design reference
const googleFontsLink = document.createElement('link');
googleFontsLink.href = 'https://fonts.googleapis.com/css2?family=Nunito:wght@400;600;700;800&family=Open+Sans:wght@400;600&display=swap';
googleFontsLink.rel = 'stylesheet';
document.head.appendChild(googleFontsLink);

// Load Font Awesome for icons
const fontAwesomeLink = document.createElement('link');
fontAwesomeLink.href = 'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css';
fontAwesomeLink.rel = 'stylesheet';
document.head.appendChild(fontAwesomeLink);

// Add title
const titleElement = document.createElement('title');
titleElement.textContent = 'TV Tantrum - Children\'s TV Show Comparison';
document.head.appendChild(titleElement);

createRoot(document.getElementById("root")!).render(<App />);
</file>

<file path="client/index.html">
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1" />
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
    <!-- This is a replit script which adds a banner on the top of the page when opened in development mode outside the replit environment -->
    <script type="text/javascript" src="https://replit.com/public/js/replit-dev-banner.js"></script>
  </body>
</html>
</file>

<file path="CUSTOM_DATA.md">
# Custom Data Handling Documentation

## Overview

This document explains the system for handling custom show details and images in TV Tantrum. The custom data handling system is designed to solve the following challenges:

1. **Performance Bottlenecks**: Loading and applying custom data during server startup caused significant delays
2. **Database Load**: Processing 300+ shows on every restart placed unnecessary load on the database
3. **Scaling Issues**: As the catalog grows, startup performance would continue to degrade

## Solution: Pre-processing Script

The new approach separates custom data application from server startup by using a pre-processing script:

- **File**: `apply-custom-data.mjs`
- **Purpose**: Directly updates the database with custom details and images outside the server startup process
- **Benefits**: 
  - Server starts much faster
  - Database connection is more stable
  - Better separation of concerns
  - Improved maintainability

## How It Works

### 1. Custom Data Files

Two JSON files store custom data:

- `customShowDetailsMap.json`: Maps show IDs to their custom details (stimulation metrics, etc.)
- `customImageMap.json`: Maps show IDs to their custom image URLs

### 2. Pre-processing Script

The `apply-custom-data.mjs` script:

- Connects to the database using the same configuration as the server
- Loads custom details and images from their respective JSON files
- Processes updates in batches to reduce database load
- Maps data keys from camelCase to snake_case to match database schema
- Converts JavaScript arrays to PostgreSQL array format
- Properly rounds stimulation scores to whole numbers
- Handles errors gracefully and provides detailed logs

### 3. Server Integration

Server startup is modified to:

- Skip custom data loading by default (configurable with environment variables)
- Display a message indicating how to apply custom data manually
- Process faster with fewer database operations

## Usage

### Running the Script

```
node apply-custom-data.mjs
```

This directly updates the database with all custom data and can be run:
- After initial database setup
- After any changes to the custom data files
- When you want to refresh the database with custom details

### Environment Variables

Two optional environment variables can control the behavior:

- `SKIP_CUSTOM_DETAILS`: Set to "true" to skip loading custom details during server startup
- `SKIP_CUSTOM_IMAGES`: Set to "true" to skip loading custom images during server startup

By default, both are now set to "true" for optimal performance.

## Data Preservation System

The custom data handling approach preserves these important details:

1. **Stimulation Scores**: Always stored as whole numbers, never decimals
2. **Image URLs**: Proper portrait-style images are preserved 
3. **Show Names**: Official branding names are maintained
4. **Themes**: Array of themes with proper encoding
5. **Rating Metrics**: All sensory/stimulation metrics from the original source

## Maintenance

When adding new shows or updating existing ones:

1. Update the appropriate JSON file with the custom details/images
2. Run the pre-processing script to apply changes to the database
3. The server will use the updated database values on the next startup

## Troubleshooting

If you encounter issues:

1. Check the console output of the pre-processing script for specific errors
2. Verify database connection settings match between script and server
3. Ensure the JSON files have valid formats
4. For schema changes, update the field mapping in the script
</file>

<file path="client/src/components/LoginForm.tsx">
import { useState } from "react";
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import { z } from "zod";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { useAuth } from "@/hooks/use-auth";
import { Loader2 } from "lucide-react";

const formSchema = z.object({
  username: z.string().min(2, {
    message: "Username must be at least 2 characters.",
  }),
  password: z.string().min(6, {
    message: "Password must be at least 6 characters.",
  }),
});

export function LoginForm({ onSuccess }: { onSuccess: () => void }) {
  const { loginMutation } = useAuth();
  const [authError, setAuthError] = useState<string | null>(null);

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      username: "",
      password: "",
    },
  });

  function onSubmit(values: z.infer<typeof formSchema>) {
    setAuthError(null);
    
    loginMutation.mutate({ 
      identifier: values.username, // Using identifier which works for both username or email
      password: values.password 
    }, {
      onSuccess: () => {
        if (onSuccess) {
          onSuccess();
        }
      },
      onError: (error) => {
        setAuthError(error.message || "Login failed. Please check your credentials.");
      }
    });
  }

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
        {authError && (
          <div className="p-3 my-2 text-sm text-white bg-destructive rounded-md">
            {authError}
          </div>
        )}
        
        <FormField
          control={form.control}
          name="username"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Username or Email</FormLabel>
              <FormControl>
                <Input placeholder="Enter your username or email" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        
        <FormField
          control={form.control}
          name="password"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Password</FormLabel>
              <FormControl>
                <Input type="password" placeholder="Enter your password" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        
        <Button 
          type="submit" 
          className="w-full" 
          disabled={loginMutation.isPending}
        >
          {loginMutation.isPending ? (
            <>
              <Loader2 className="mr-2 h-4 w-4 animate-spin" />
              Logging in...
            </>
          ) : (
            "Log in"
          )}
        </Button>
      </form>
    </Form>
  );
}
</file>

<file path="client/src/pages/auth-page-new.tsx">
import { useState, useEffect, useCallback } from "react";
import { useLocation } from "wouter";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { useAuth } from "@/hooks/use-auth";
import { useToast } from "@/hooks/use-toast";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { CheckCircle2, XCircle } from "lucide-react";

// Schema for login form
const loginSchema = z.object({
  identifier: z.string().min(3, "Please enter a valid email or username"),
  password: z.string().min(6, "Password must be at least 6 characters"),
});

// Schema for registration form with additional fields
const registerSchema = z.object({
  email: z.string().email("Please enter a valid email address"),
  username: z.string().min(3, "Username must be at least 3 characters"),
  password: z.string().min(6, "Password must be at least 6 characters"),
  confirmPassword: z.string().min(6, "Confirm password must be at least 6 characters"),
}).refine(data => data.password === data.confirmPassword, {
  message: "Passwords do not match",
  path: ["confirmPassword"],
});

type LoginFormValues = z.infer<typeof loginSchema>;
type RegisterFormValues = z.infer<typeof registerSchema>;

// Login form component
function LoginForm({ onSuccess }: { onSuccess: () => void }) {
  const { loginMutation } = useAuth();
  const { toast } = useToast();
  const [, navigate] = useLocation();

  const form = useForm<LoginFormValues>({
    resolver: zodResolver(loginSchema),
    defaultValues: {
      identifier: "",
      password: "",
    },
  });

  const onSubmit = (data: LoginFormValues) => {
    loginMutation.mutate(data, {
      onSuccess: () => {
        toast({
          title: "Login successful!",
          description: "Welcome back to TV Tantrum",
        });
        onSuccess();
      },
    });
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle>Login to your account</CardTitle>
        <CardDescription>
          Enter your credentials to access your account
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-4">
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
            <FormField
              control={form.control}
              name="identifier"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Email or Username</FormLabel>
                  <FormControl>
                    <Input 
                      type="text"
                      placeholder="Enter your email or username"
                      {...field}
                      disabled={loginMutation.isPending}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            
            <FormField
              control={form.control}
              name="password"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Password</FormLabel>
                  <FormControl>
                    <Input 
                      type="password" 
                      placeholder="Enter your password"
                      {...field}
                      disabled={loginMutation.isPending}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            
            <Button 
              type="submit" 
              className="w-full"
              disabled={loginMutation.isPending}
            >
              {loginMutation.isPending ? "Logging in..." : "Login"}
            </Button>
          </form>
        </Form>
      </CardContent>
    </Card>
  );
}

// Registration form component
function RegisterForm({ 
  onSuccess,
  earlyAccessToken
}: { 
  onSuccess: () => void; 
  earlyAccessToken: string | null;
}) {
  const { registerMutation } = useAuth();
  const { toast } = useToast();
  const [, navigate] = useLocation();
  const [usernameStatus, setUsernameStatus] = useState<'checking' | 'available' | 'taken' | null>(null);
  const [usernameValue, setUsernameValue] = useState("");

  const form = useForm<RegisterFormValues>({
    resolver: zodResolver(registerSchema),
    defaultValues: {
      username: "",
      email: "",
      password: "",
      confirmPassword: "",
    },
  });

  // Username availability check
  useEffect(() => {
    // Don't check if username is less than 3 characters
    if (!usernameValue || usernameValue.length < 3) {
      setUsernameStatus(null);
      return;
    }
    
    // Set status to checking before API call
    setUsernameStatus('checking');
    
    // Debounce the API call - only make it after user stops typing
    const timeoutId = setTimeout(async () => {
      try {
        const response = await fetch(`/api/check-username?username=${encodeURIComponent(usernameValue)}`);
        const data = await response.json();
        setUsernameStatus(data.available ? 'available' : 'taken');
      } catch (error) {
        console.error('Failed to check username availability:', error);
        setUsernameStatus(null);
      }
    }, 500);
    
    return () => clearTimeout(timeoutId);
  }, [usernameValue]);

  const onSubmit = (data: RegisterFormValues) => {
    // Check username availability before submitting
    if (usernameStatus === 'taken') {
      toast({
        title: "Username already taken",
        description: "Please choose a different username.",
        variant: "destructive",
      });
      return;
    }
    
    // If username is still being checked, wait for the check to complete
    if (usernameStatus === 'checking') {
      toast({
        title: "Please wait",
        description: "We're still checking if your username is available.",
      });
      return;
    }
    
    // Make sure we have a valid early access token
    if (!earlyAccessToken || earlyAccessToken !== "2025") {
      toast({
        title: "Early access token missing",
        description: "You need a valid early access token to register.",
        variant: "destructive",
      });
      return;
    }
    
    // Remove confirmPassword as it's not needed for the API
    const { confirmPassword, ...registerData } = data;
    
    registerMutation.mutate(registerData, {
      onSuccess: () => {
        toast({
          title: "Registration successful!",
          description: "Your account is pending approval.",
        });
        navigate("/registration-pending");
      }
    });
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle>Create an account</CardTitle>
        <CardDescription>
          Register to save your favorite shows and more
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-4">
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
            <FormField
              control={form.control}
              name="username"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Username</FormLabel>
                  <div className="relative">
                    <FormControl>
                      <Input 
                        type="text"
                        placeholder="Choose a username"
                        {...field}
                        disabled={registerMutation.isPending}
                        onChange={(e) => {
                          field.onChange(e);
                          setUsernameValue(e.target.value);
                        }}
                      />
                    </FormControl>
                    {usernameStatus && (
                      <div className="absolute right-3 top-1/2 -translate-y-1/2">
                        {usernameStatus === 'checking' && (
                          <div className="animate-spin h-5 w-5 border-2 border-primary rounded-full border-r-transparent" />
                        )}
                        {usernameStatus === 'available' && (
                          <CheckCircle2 className="h-5 w-5 text-green-500" />
                        )}
                        {usernameStatus === 'taken' && (
                          <XCircle className="h-5 w-5 text-red-500" />
                        )}
                      </div>
                    )}
                  </div>
                  <FormMessage />
                </FormItem>
              )}
            />
            
            <FormField
              control={form.control}
              name="email"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Email</FormLabel>
                  <FormControl>
                    <Input 
                      type="email" 
                      placeholder="Enter your email address"
                      {...field}
                      disabled={registerMutation.isPending}
                    />
                  </FormControl>
                  <FormDescription>
                    We'll never share your email with anyone else
                  </FormDescription>
                  <FormMessage />
                </FormItem>
              )}
            />
            
            <FormField
              control={form.control}
              name="password"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Password</FormLabel>
                  <FormControl>
                    <Input 
                      type="password" 
                      placeholder="Create a password"
                      {...field}
                      disabled={registerMutation.isPending}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            
            <FormField
              control={form.control}
              name="confirmPassword"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Confirm Password</FormLabel>
                  <FormControl>
                    <Input 
                      type="password" 
                      placeholder="Confirm your password"
                      {...field}
                      disabled={registerMutation.isPending}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            
            <Button 
              type="submit" 
              className="w-full"
              disabled={registerMutation.isPending}
            >
              {registerMutation.isPending ? "Registering..." : "Register"}
            </Button>
          </form>
        </Form>
      </CardContent>
    </Card>
  );
}

export default function AuthPage() {
  const [activeTab, setActiveTab] = useState<string>("login");
  const [, navigate] = useLocation();
  const { user } = useAuth();
  const [isCheckingStoredAuth, setIsCheckingStoredAuth] = useState(true);
  const [earlyAccessToken, setEarlyAccessToken] = useState<string | null>(null);
  
  // Handle successful authentication
  const handleAuthSuccess = useCallback(() => {
    if (user) {
      const redirectPath = user.isAdmin ? "/admin" : user.isApproved ? "/home" : "/registration-pending";
      navigate(redirectPath);
    }
  }, [navigate, user]);

  // Check if there's stored authentication on page load
  useEffect(() => {
    const checkStoredAuth = () => {
      try {
        const storedAuth = localStorage.getItem('tvtantrum_auth');
        if (storedAuth) {
          const authData = JSON.parse(storedAuth);
          
          // Check if the stored auth is valid (less than 24 hours old)
          if (authData.isLoggedIn && authData.timestamp) {
            const storedTime = new Date(authData.timestamp);
            const now = new Date();
            const hoursDiff = (now.getTime() - storedTime.getTime()) / (1000 * 60 * 60);
            
            if (hoursDiff < 24) {
              console.log("Found valid stored auth, waiting for user data...");
              return true;
            }
          }
        }
        return false;
      } catch (error) {
        console.error('Error checking stored auth:', error);
        return false;
      }
    };
    
    const hasStoredAuth = checkStoredAuth();
    setIsCheckingStoredAuth(hasStoredAuth);
    
    // Auto-redirect if not checking stored auth
    if (!hasStoredAuth) {
      setIsCheckingStoredAuth(false);
    }
    
    // Check for early access token from URL
    const params = new URLSearchParams(window.location.search);
    const urlToken = params.get('token');
    if (urlToken) {
      setEarlyAccessToken(urlToken);
      localStorage.setItem("earlyAccessToken", urlToken);
      
      // Switch to register tab when token is present
      if (urlToken === "2025") {
        setActiveTab("register");
      }
    } else {
      // Read token from localStorage if not in URL
      const storedToken = localStorage.getItem("earlyAccessToken");
      if (storedToken) {
        setEarlyAccessToken(storedToken);
        
        // Switch to register tab when token is present and valid
        if (storedToken === "2025") {
          setActiveTab("register");
        }
      }
    }
  }, []);
  
  // Check if user is already logged in
  useEffect(() => {
    // If we're done checking auth and have a user, redirect
    if (!isCheckingStoredAuth && user) {
      handleAuthSuccess();
    }
  }, [user, isCheckingStoredAuth, handleAuthSuccess]);
  
  // If still checking stored auth, show loading
  if (isCheckingStoredAuth) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto"></div>
          <p className="mt-4 text-lg">Checking authentication...</p>
        </div>
      </div>
    );
  }
  
  // If we have user data, redirect (handled by useEffect)
  if (user) {
    const redirectPath = user.isAdmin ? "/admin" : user.isApproved ? "/home" : "/registration-pending";
    navigate(redirectPath);
    return null;
  }

  return (
    <div className="flex items-center justify-center min-h-screen bg-background">
      <div className="w-full max-w-5xl p-4 md:p-8 flex flex-col md:flex-row gap-8">
        {/* Auth forms column */}
        <div className="w-full md:w-1/2">
          <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
            <TabsList className="grid w-full grid-cols-2">
              <TabsTrigger value="login">Login</TabsTrigger>
              <TabsTrigger value="register">Register</TabsTrigger>
            </TabsList>
            <TabsContent value="login">
              <LoginForm onSuccess={handleAuthSuccess} />
              <div className="text-sm text-muted-foreground mt-4 text-center">
                Don't have an account?{" "}
                <Button 
                  variant="link" 
                  className="p-0 h-auto" 
                  onClick={() => setActiveTab("register")}
                >
                  Register
                </Button>
              </div>
            </TabsContent>
            <TabsContent value="register">
              <RegisterForm 
                onSuccess={handleAuthSuccess} 
                earlyAccessToken={earlyAccessToken} 
              />
              <div className="text-sm text-muted-foreground mt-4 text-center">
                Already have an account?{" "}
                <Button 
                  variant="link" 
                  className="p-0 h-auto" 
                  onClick={() => setActiveTab("login")}
                >
                  Login
                </Button>
              </div>
            </TabsContent>
          </Tabs>
        </div>
        
        {/* Hero content column */}
        <div className="w-full md:w-1/2 flex flex-col justify-center space-y-4">
          <h1 className="text-3xl md:text-4xl font-bold text-primary">
            TV Tantrum
          </h1>
          <p className="text-xl text-muted-foreground">
            The ultimate guide for parents to understand the stimulation level of children's TV shows
          </p>
          <div className="space-y-2">
            <div className="flex items-start space-x-2">
              <CheckCircle2 className="h-5 w-5 text-primary mt-1" />
              <p>Compare shows by stimulation scores</p>
            </div>
            <div className="flex items-start space-x-2">
              <CheckCircle2 className="h-5 w-5 text-primary mt-1" />
              <p>Filter by age range and interests</p>
            </div>
            <div className="flex items-start space-x-2">
              <CheckCircle2 className="h-5 w-5 text-primary mt-1" />
              <p>Save favorites and get personalized recommendations</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
</file>

<file path="client/src/pages/detail.tsx">
import { useQuery, useMutation } from "@tanstack/react-query";
import { useParams, useLocation } from "wouter";
import { Button } from "@/components/ui/button";
import { Skeleton } from "@/components/ui/skeleton";
import { Badge } from "@/components/ui/badge";
import RatingBar from "@/components/RatingBar";
import { TvShow, TvShowReview } from "@shared/schema";
import { useAuth } from "@/hooks/use-auth";
import { useToast } from "@/hooks/use-toast";
import { apiRequest, queryClient } from "@/lib/queryClient";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Textarea } from "@/components/ui/textarea";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { useState, useEffect } from "react";
import { 
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselNext,
  CarouselPrevious,
} from "@/components/ui/carousel";
import ShowCard from "@/components/ShowCard";
import { Link } from "wouter";

// Define OMDb data type
interface OmdbData {
  runtime: string;
  rated: string;
  totalSeasons: string;
  language: string;
  country: string;
  director: string;
  writer: string;
  imdbRating: string;
  awards: string;
  poster: string;
  imdbId: string;
}

type ShowDetailResponse = TvShow & { 
  reviews: TvShowReview[];
  omdb?: OmdbData | null; 
};

type DetailProps = {
  id: number;
}

// Review form schema
const reviewSchema = z.object({
  rating: z.number().min(1).max(5),
  review: z.string().min(5, "Review must be at least 5 characters").max(1000, "Review must be less than 1000 characters"),
});

type ReviewFormValues = z.infer<typeof reviewSchema>;

export default function Detail({ id }: DetailProps) {
  const [_, setLocation] = useLocation();
  const { user } = useAuth();
  const { toast } = useToast();
  const [isMobile, setIsMobile] = useState(false);
  
  // Check if device is mobile
  useEffect(() => {
    const checkIfMobile = () => {
      const mobileWidth = 768;
      const width = window.innerWidth;
      setIsMobile(width < mobileWidth);
      console.log("Detail page - Window width:", width, "isMobile:", width < mobileWidth);
    };
    
    // Check on mount
    checkIfMobile();
    
    // Add resize listener
    window.addEventListener('resize', checkIfMobile);
    
    // Clean up
    return () => window.removeEventListener('resize', checkIfMobile);
  }, []);
  
  const { data: showDetail, isLoading, error } = useQuery<ShowDetailResponse>({
    queryKey: [`/api/shows/${id}`],
  });
  
  // Review form
  const reviewForm = useForm<ReviewFormValues>({
    resolver: zodResolver(reviewSchema),
    defaultValues: {
      rating: 5,
      review: "",
    },
  });
  
  // Stars selection
  const [selectedRating, setSelectedRating] = useState(5);
  
  // Add review mutation
  const addReviewMutation = useMutation({
    mutationFn: async (data: ReviewFormValues) => {
      return await apiRequest("POST", `/api/shows/${id}/reviews`, {
        ...data,
        userName: user?.username || "Anonymous",
        tvShowId: id,
      });
    },
    onSuccess: () => {
      toast({
        title: "Review added",
        description: "Your review has been added successfully!",
      });
      reviewForm.reset();
      setSelectedRating(5);
      queryClient.invalidateQueries({ queryKey: [`/api/shows/${id}`] });
    },
    onError: (error) => {
      toast({
        title: "Error",
        description: "Failed to add review. Please try again.",
        variant: "destructive",
      });
    },
  });

  const handleBackClick = () => {
    setLocation("/");
  };

  const handleCompareClick = () => {
    // Add to comparison and redirect to compare page
    // For now, just navigate to the compare page
    setLocation("/compare");
  };

  if (isLoading) {
    return (
      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="mb-6 flex items-center">
          <Button variant="ghost" className="mr-4 text-primary" onClick={handleBackClick}>
            <i className="fas fa-arrow-left mr-2"></i> Back to Shows
          </Button>
          <Skeleton className="h-8 w-56" />
        </div>
        
        <div className="bg-white rounded-xl shadow-md overflow-hidden">
          <div className="md:flex">
            <div className="md:flex-shrink-0 md:w-1/3">
              <Skeleton className="h-64 w-full md:h-full" />
            </div>
            
            <div className="p-6 md:w-2/3">
              <div className="flex justify-between items-start">
                <div>
                  <Skeleton className="h-8 w-40 mb-2" />
                  <Skeleton className="h-4 w-60" />
                </div>
              </div>
              
              <div className="mt-6">
                <Skeleton className="h-4 w-full mb-2" />
                <Skeleton className="h-4 w-full mb-2" />
                <Skeleton className="h-4 w-4/5" />
              </div>
            </div>
          </div>
        </div>
      </main>
    );
  }

  if (error || !showDetail) {
    return (
      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="mb-6 flex items-center">
          <Button variant="ghost" className="mr-4 text-primary" onClick={handleBackClick}>
            <i className="fas fa-arrow-left mr-2"></i> Back to Shows
          </Button>
          <h2 className="text-2xl font-heading font-bold">Error</h2>
        </div>
        
        <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded">
          <p>Failed to load show details. Please try again later.</p>
          <Button variant="outline" onClick={handleBackClick} className="mt-2">
            Return to Browse
          </Button>
        </div>
      </main>
    );
  }

  return (
    <main className="max-w-5xl mx-auto px-4 sm:px-6 lg:px-8 py-8 bg-gray-50">
      <div className="mb-4 flex items-center">
        <Button variant="ghost" className="text-primary hover:text-primary-700" onClick={handleBackClick}>
          <i className="fas fa-arrow-left mr-2"></i> Back to Catalog
        </Button>
      </div>
      
      <div className="bg-white rounded-md shadow overflow-hidden mb-8">
        <div className="md:flex p-6">
          {/* Left column - Show image and key info */}
          <div className="md:w-1/4 flex-shrink-0 mb-4 md:mb-0 md:mr-6">
            {/* Use OMDb poster if available, otherwise use our image or placeholder */}
            {showDetail.omdb?.poster && showDetail.omdb.poster !== 'N/A' ? (
              <div className="mb-4 rounded border border-gray-200 overflow-hidden" style={{ maxHeight: '400px' }}>
                <img 
                  className="w-full h-full object-contain" 
                  src={showDetail.omdb.poster} 
                  alt={showDetail.name}
                />
              </div>
            ) : showDetail.imageUrl ? (
              <div className="mb-4 rounded border border-gray-200 overflow-hidden" style={{ maxHeight: '400px' }}>
                <img 
                  className="w-full h-full object-contain" 
                  src={showDetail.imageUrl} 
                  alt={showDetail.name}
                />
              </div>
            ) : (
              <div className="w-full h-auto aspect-square mb-4 bg-gray-200 flex items-center justify-center rounded border border-gray-200">
                <i className="fas fa-tv text-gray-400 text-4xl"></i>
              </div>
            )}
            
            <div className="space-y-4">
              <div>
                <h3 className="text-sm font-semibold text-gray-700">Key Information</h3>
                <div className="mt-2 space-y-2">
                  <div>
                    <div className="text-sm font-medium text-gray-600">Target Age Range:</div>
                    <div className="text-sm">{showDetail.ageRange || '10-14'}</div>
                  </div>
                  
                  <div>
                    <div className="text-sm font-medium text-gray-600">Platform(s):</div>
                    <div className="text-sm">{showDetail.availableOn?.join(", ") || 'TV'}</div>
                  </div>
                  
                  <div>
                    <div className="text-sm font-medium text-gray-600">Avg. Episode Length:</div>
                    <div className="text-sm">{showDetail.episodeLength ? `${showDetail.episodeLength} min` : 'Long (20-30m)'}</div>
                  </div>
                  
                  <div>
                    <div className="text-sm font-medium text-gray-600">Seasons:</div>
                    <div className="text-sm">{showDetail.seasons || '4 seasons'}</div>
                  </div>
                </div>
              </div>
              
              {/* IMDb Data Section */}
              {showDetail.omdb && (
                <div className="mt-4">
                  <h3 className="text-sm font-semibold text-gray-700 flex items-center">
                    <img src="https://m.media-amazon.com/images/G/01/imdb/images/desktop-favicon-2165806970._CB485933742_.ico" 
                         alt="IMDb" 
                         className="w-4 h-4 mr-1" />
                    IMDb Information
                  </h3>
                  <div className="mt-2 space-y-2">
                    {showDetail.omdb.imdbRating !== 'N/A' && (
                      <div>
                        <div className="text-sm font-medium text-gray-600">IMDb Rating:</div>
                        <div className="text-sm flex items-center">
                          <span className="text-yellow-500 mr-1">★</span>
                          {showDetail.omdb.imdbRating}/10
                        </div>
                      </div>
                    )}
                    
                    {showDetail.omdb.rated !== 'N/A' && (
                      <div>
                        <div className="text-sm font-medium text-gray-600">Rated:</div>
                        <div className="text-sm">{showDetail.omdb.rated}</div>
                      </div>
                    )}
                    
                    {showDetail.omdb.runtime !== 'N/A' && (
                      <div>
                        <div className="text-sm font-medium text-gray-600">Runtime:</div>
                        <div className="text-sm">{showDetail.omdb.runtime}</div>
                      </div>
                    )}
                    
                    {showDetail.omdb.totalSeasons !== 'N/A' && (
                      <div>
                        <div className="text-sm font-medium text-gray-600">Seasons:</div>
                        <div className="text-sm">{showDetail.omdb.totalSeasons}</div>
                      </div>
                    )}
                    
                    {showDetail.omdb.language !== 'N/A' && (
                      <div>
                        <div className="text-sm font-medium text-gray-600">Language:</div>
                        <div className="text-sm">{showDetail.omdb.language}</div>
                      </div>
                    )}
                    
                    {showDetail.omdb.country !== 'N/A' && (
                      <div>
                        <div className="text-sm font-medium text-gray-600">Country:</div>
                        <div className="text-sm">{showDetail.omdb.country}</div>
                      </div>
                    )}
                    
                    {showDetail.omdb.director !== 'N/A' && (
                      <div>
                        <div className="text-sm font-medium text-gray-600">Director:</div>
                        <div className="text-sm">{showDetail.omdb.director}</div>
                      </div>
                    )}
                    
                    {showDetail.omdb.writer !== 'N/A' && (
                      <div>
                        <div className="text-sm font-medium text-gray-600">Writer:</div>
                        <div className="text-sm">{showDetail.omdb.writer}</div>
                      </div>
                    )}
                    
                    {showDetail.omdb.awards !== 'N/A' && (
                      <div>
                        <div className="text-sm font-medium text-gray-600">Awards:</div>
                        <div className="text-sm">{showDetail.omdb.awards}</div>
                      </div>
                    )}
                    
                    {showDetail.omdb.imdbId && (
                      <div className="mt-2">
                        <a 
                          href={`https://www.imdb.com/title/${showDetail.omdb.imdbId}`} 
                          target="_blank" 
                          rel="noopener noreferrer"
                          className="text-xs text-blue-600 hover:text-blue-800 flex items-center"
                        >
                          View on IMDb 
                          <i className="fas fa-external-link-alt ml-1"></i>
                        </a>
                      </div>
                    )}
                  </div>
                </div>
              )}
              
              <div>
                <h3 className="text-sm font-semibold text-gray-700">Overall Stimulation Score:</h3>
                <div className="flex items-center space-x-2 mt-1">
                  {Array.from({ length: 5 }).map((_, i) => {
                    const score = i + 1; // 1-5 score range
                    const bgColor = 
                      score === 1 ? 'bg-green-500' : // green for 1
                      score === 2 ? 'bg-yellow-500' : // yellow for 2
                      score === 3 ? 'bg-orange-500' : // orange for 3
                      score === 4 ? 'bg-orange-600' : // redish orange for 4
                      'bg-red-500'; // red for 5
                    
                    const borderColor = 
                      score === 1 ? 'border-green-500' : // green for 1
                      score === 2 ? 'border-yellow-500' : // yellow for 2
                      score === 3 ? 'border-orange-500' : // orange for 3
                      score === 4 ? 'border-orange-600' : // redish orange for 4
                      'border-red-500'; // red for 5
                    
                    return (
                      <div 
                        key={i} 
                        className={`w-4 h-4 rounded-full ${
                          // Active dots show their own color
                          i < showDetail.stimulationScore 
                            ? bgColor 
                            // Inactive dots are outlined with their corresponding color
                            : `border-2 ${borderColor} bg-white`
                        }`} 
                      />
                    );
                  })}
                  <span className="text-sm font-medium">{showDetail.stimulationScore}/5</span>
                </div>
              </div>
              
              <div>
                <h3 className="text-sm font-semibold text-gray-700">Themes:</h3>
                <div className="flex flex-wrap gap-1 mt-1">
                  {showDetail.themes && showDetail.themes.length > 0 ? (
                    showDetail.themes.map((theme, index) => (
                      <Badge 
                        key={index} 
                        className="px-2 py-1 text-xs bg-gray-100 text-gray-800 hover:bg-gray-200 rounded-md"
                      >
                        {theme}
                      </Badge>
                    ))
                  ) : (
                    <>
                      <Badge className="px-2 py-1 text-xs bg-blue-100 text-blue-800 hover:bg-blue-200 rounded-md">Courage</Badge>
                      <Badge className="px-2 py-1 text-xs bg-purple-100 text-purple-800 hover:bg-purple-200 rounded-md">Creativity & Imagination</Badge>
                      <Badge className="px-2 py-1 text-xs bg-gray-100 text-gray-800 hover:bg-gray-200 rounded-md">Dark Themes</Badge>
                      <Badge className="px-2 py-1 text-xs bg-green-100 text-green-800 hover:bg-green-200 rounded-md">Entertainment</Badge>
                      <Badge className="px-2 py-1 text-xs bg-yellow-100 text-yellow-800 hover:bg-yellow-200 rounded-md">Humor</Badge>
                    </>
                  )}
                </div>
              </div>
            </div>
          </div>
          
          {/* Right column - Title and content */}
          <div className="md:w-3/4">
            <div>
              <h1 className="text-3xl font-bold text-teal-700 mb-1">
                {showDetail.name}
                {(showDetail.releaseYear || showDetail.endYear) && 
                  <span className="text-gray-600 font-normal text-xl ml-2">
                    ({showDetail.releaseYear || "Unknown"}-{showDetail.isOngoing ? "present" : (showDetail.endYear || "Unknown")})
                  </span>
                }
              </h1>
              
              {/* Sensory Details Section */}
              <div className="mt-8">
                <h2 className="text-xl font-bold text-gray-800 border-b border-gray-200 pb-2 mb-4">Sensory Details</h2>
                
                <div className="space-y-5">
                  {/* Dialogue Intensity Bar */}
                  <div>
                    <div className="flex justify-between mb-1">
                      <div className="text-gray-600">Dialogue Intensity:</div>
                      <div className="font-medium">{showDetail.dialogueIntensity || 'Moderate'}</div>
                    </div>
                    <div className="h-4 w-full bg-gray-200 rounded-full overflow-hidden flex">
                      {[1, 2, 3, 4, 5].map((segment) => {
                        let level = 3; // Default level
                        
                        // Handle all possible rating values from the spreadsheet
                        if (showDetail.dialogueIntensity) {
                          if (showDetail.dialogueIntensity.includes('Low-Moderate') || 
                              showDetail.dialogueIntensity.includes('Low to Moderate')) {
                            level = 2;
                          } else if (showDetail.dialogueIntensity.includes('Moderate-Low')) {
                            level = 2;
                          } else if (showDetail.dialogueIntensity.includes('Moderate-High') || 
                                    showDetail.dialogueIntensity.includes('Moderate to High')) {
                            level = 4;
                          } else if (showDetail.dialogueIntensity.includes('Mod-High')) {
                            level = 4;
                          } else if (showDetail.dialogueIntensity === 'Low') {
                            level = 1;
                          } else if (showDetail.dialogueIntensity === 'Moderate') {
                            level = 3;
                          } else if (showDetail.dialogueIntensity === 'High') {
                            level = 5;
                          }
                        }
                          
                        const color = 
                          segment === 1 ? 'bg-green-500' : 
                          segment === 2 ? 'bg-yellow-500' : 
                          segment === 3 ? 'bg-orange-500' : 
                          segment === 4 ? 'bg-orange-600' : 
                          'bg-red-500';
                        
                        return (
                          <div
                            key={segment}
                            className={`h-full w-1/5 ${segment <= level ? color : 'bg-gray-200'}`}
                          />
                        );
                      })}
                    </div>
                  </div>
                  
                  {/* Scene Frequency Bar */}
                  <div>
                    <div className="flex justify-between mb-1">
                      <div className="text-gray-600">Scene Frequency:</div>
                      <div className="font-medium">{showDetail.sceneFrequency || 'High'}</div>
                    </div>
                    <div className="h-4 w-full bg-gray-200 rounded-full overflow-hidden flex">
                      {[1, 2, 3, 4, 5].map((segment) => {
                        let level = 3; // Default to moderate
                        
                        // Handle all possible rating values from the spreadsheet
                        if (showDetail.sceneFrequency) {
                          if (showDetail.sceneFrequency.includes('Low-Moderate') || 
                              showDetail.sceneFrequency.includes('Low to Moderate')) {
                            level = 2;
                          } else if (showDetail.sceneFrequency.includes('Moderate-Low')) {
                            level = 2;
                          } else if (showDetail.sceneFrequency.includes('Moderate-High') || 
                                     showDetail.sceneFrequency.includes('Moderate to High')) {
                            level = 4;
                          } else if (showDetail.sceneFrequency.includes('Mod-High')) {
                            level = 4;
                          } else if (showDetail.sceneFrequency === 'Low') {
                            level = 1;
                          } else if (showDetail.sceneFrequency === 'Moderate') {
                            level = 3;
                          } else if (showDetail.sceneFrequency === 'High') {
                            level = 5;
                          }
                        }
                          
                        const color = 
                          segment === 1 ? 'bg-green-500' : 
                          segment === 2 ? 'bg-yellow-500' : 
                          segment === 3 ? 'bg-orange-500' : 
                          segment === 4 ? 'bg-orange-600' : 
                          'bg-red-500';
                        
                        return (
                          <div
                            key={segment}
                            className={`h-full w-1/5 ${segment <= level ? color : 'bg-gray-200'}`}
                          />
                        );
                      })}
                    </div>
                  </div>
                  
                  {/* Sound Effects Level Bar */}
                  <div>
                    <div className="flex justify-between mb-1">
                      <div className="text-gray-600">Sound Effects Level:</div>
                      <div className="font-medium">{showDetail.soundEffectsLevel || 'High'}</div>
                    </div>
                    <div className="h-4 w-full bg-gray-200 rounded-full overflow-hidden flex">
                      {[1, 2, 3, 4, 5].map((segment) => {
                        let level = 3; // Default to moderate
                        
                        // Handle all possible rating values from the spreadsheet
                        if (showDetail.soundEffectsLevel) {
                          if (showDetail.soundEffectsLevel.includes('Low-Moderate') || 
                              showDetail.soundEffectsLevel.includes('Low to Moderate')) {
                            level = 2;
                          } else if (showDetail.soundEffectsLevel.includes('Moderate-Low')) {
                            level = 2;
                          } else if (showDetail.soundEffectsLevel.includes('Moderate-High') || 
                                     showDetail.soundEffectsLevel.includes('Moderate to High')) {
                            level = 4;
                          } else if (showDetail.soundEffectsLevel.includes('Mod-High')) {
                            level = 4;
                          } else if (showDetail.soundEffectsLevel === 'Low') {
                            level = 1;
                          } else if (showDetail.soundEffectsLevel === 'Moderate') {
                            level = 3;
                          } else if (showDetail.soundEffectsLevel === 'High') {
                            level = 5;
                          }
                        }
                          
                        const color = 
                          segment === 1 ? 'bg-green-500' : 
                          segment === 2 ? 'bg-yellow-500' : 
                          segment === 3 ? 'bg-orange-500' : 
                          segment === 4 ? 'bg-orange-600' : 
                          'bg-red-500';
                        
                        return (
                          <div
                            key={segment}
                            className={`h-full w-1/5 ${segment <= level ? color : 'bg-gray-200'}`}
                          />
                        );
                      })}
                    </div>
                  </div>
                  
                  {/* Music Tempo Bar */}
                  <div>
                    <div className="flex justify-between mb-1">
                      <div className="text-gray-600">Music Tempo:</div>
                      <div className="font-medium">{showDetail.musicTempo || 'Varies'}</div>
                    </div>
                    {showDetail.musicTempo === 'Varies' ? (
                      <div className="h-4 w-full bg-gray-200 rounded-full overflow-hidden">
                        <div 
                          className="h-full bg-gradient-to-r from-green-500 via-yellow-500 to-red-500"
                          style={{ width: '100%' }}
                        ></div>
                      </div>
                    ) : (
                      <div className="h-4 w-full bg-gray-200 rounded-full overflow-hidden flex">
                        {[1, 2, 3, 4, 5].map((segment) => {
                          let level = 3; // Default to moderate
                        
                          // Handle all possible rating values from the spreadsheet
                          if (showDetail.musicTempo) {
                            if (showDetail.musicTempo.includes('Low-Moderate') || 
                                showDetail.musicTempo.includes('Low to Moderate')) {
                              level = 2;
                            } else if (showDetail.musicTempo.includes('Moderate-Low')) {
                              level = 2;
                            } else if (showDetail.musicTempo.includes('Moderate-High') || 
                                       showDetail.musicTempo.includes('Moderate to High')) {
                              level = 4;
                            } else if (showDetail.musicTempo.includes('Mod-High')) {
                              level = 4;
                            } else if (showDetail.musicTempo === 'Low') {
                              level = 1;
                            } else if (showDetail.musicTempo === 'Moderate') {
                              level = 3;
                            } else if (showDetail.musicTempo === 'High') {
                              level = 5;
                            }
                          }
                            
                          const color = 
                            segment === 1 ? 'bg-green-500' : 
                            segment === 2 ? 'bg-yellow-500' : 
                            segment === 3 ? 'bg-orange-500' : 
                            segment === 4 ? 'bg-orange-600' : 
                            'bg-red-500';
                          
                          return (
                            <div
                              key={segment}
                              className={`h-full w-1/5 ${segment <= level ? color : 'bg-gray-200'}`}
                            />
                          );
                        })}
                      </div>
                    )}
                  </div>
                  
                  {/* Total Music Level Bar */}
                  <div>
                    <div className="flex justify-between mb-1">
                      <div className="text-gray-600">Total Music Level:</div>
                      <div className="font-medium">{showDetail.totalMusicLevel || 'High'}</div>
                    </div>
                    <div className="h-4 w-full bg-gray-200 rounded-full overflow-hidden flex">
                      {[1, 2, 3, 4, 5].map((segment) => {
                        let level = 3; // Default to moderate
                        
                        // Handle all possible rating values from the spreadsheet
                        if (showDetail.totalMusicLevel) {
                          if (showDetail.totalMusicLevel.includes('Low-Moderate') || 
                              showDetail.totalMusicLevel.includes('Low to Moderate')) {
                            level = 2;
                          } else if (showDetail.totalMusicLevel.includes('Moderate-Low')) {
                            level = 2;
                          } else if (showDetail.totalMusicLevel.includes('Moderate-High') || 
                                     showDetail.totalMusicLevel.includes('Moderate to High')) {
                            level = 4;
                          } else if (showDetail.totalMusicLevel.includes('Mod-High')) {
                            level = 4;
                          } else if (showDetail.totalMusicLevel === 'Low') {
                            level = 1;
                          } else if (showDetail.totalMusicLevel === 'Moderate') {
                            level = 3;
                          } else if (showDetail.totalMusicLevel === 'High') {
                            level = 5;
                          }
                        }
                          
                        const color = 
                          segment === 1 ? 'bg-green-500' : 
                          segment === 2 ? 'bg-yellow-500' : 
                          segment === 3 ? 'bg-orange-500' : 
                          segment === 4 ? 'bg-orange-600' : 
                          'bg-red-500';
                        
                        return (
                          <div
                            key={segment}
                            className={`h-full w-1/5 ${segment <= level ? color : 'bg-gray-200'}`}
                          />
                        );
                      })}
                    </div>
                  </div>
                  
                  {/* Interaction Level Bar */}
                  <div>
                    <div className="flex justify-between mb-1">
                      <div className="text-gray-600">Interaction Level:</div>
                      <div className="font-medium">{showDetail.interactivityLevel || 'Limited'}</div>
                    </div>
                    <div className="h-4 w-full bg-gray-200 rounded-full overflow-hidden flex">
                      {[1, 2, 3, 4, 5].map((segment) => {
                        let level = 3; // Default to moderate
                        
                        // Handle all possible rating values from the spreadsheet
                        if (showDetail.interactivityLevel) {
                          if (showDetail.interactivityLevel.includes('Low-Moderate') || 
                              showDetail.interactivityLevel.includes('Low to Moderate')) {
                            level = 2;
                          } else if (showDetail.interactivityLevel.includes('Moderate-Low')) {
                            level = 2;
                          } else if (showDetail.interactivityLevel.includes('Moderate-High') || 
                                    showDetail.interactivityLevel.includes('Moderate to High')) {
                            level = 4;
                          } else if (showDetail.interactivityLevel.includes('Mod-High')) {
                            level = 4;
                          } else if (showDetail.interactivityLevel === 'Low') {
                            level = 1;
                          } else if (showDetail.interactivityLevel === 'Moderate') {
                            level = 3;
                          } else if (showDetail.interactivityLevel === 'High') {
                            level = 5;
                          } else if (showDetail.interactivityLevel === 'Limited') {
                            level = 1;
                          }
                        }
                          
                        const color = 
                          segment === 1 ? 'bg-green-500' : 
                          segment === 2 ? 'bg-yellow-500' : 
                          segment === 3 ? 'bg-orange-500' : 
                          segment === 4 ? 'bg-orange-600' : 
                          'bg-red-500';
                        
                        return (
                          <div
                            key={segment}
                            className={`h-full w-1/5 ${segment <= level ? color : 'bg-gray-200'}`}
                          />
                        );
                      })}
                    </div>
                  </div>
                  
                  {/* Animation Style */}
                  <div className="grid grid-cols-1">
                    <div className="text-gray-600 mb-1">Animation Style:</div>
                    <div className="font-medium">
                      {showDetail.animationStyle || 'Traditional 2D Animation with surreal and sometimes dark visuals. Color Palette: Varied colors with contrasting dark and bright tones.'}
                    </div>
                  </div>
                </div>
              </div>
              

            </div>
          </div>
        </div>
        
        <div className="border-t border-gray-200 p-6">
          <h3 className="font-heading font-bold text-gray-900 mb-4">Parent Reviews</h3>
          
          {/* Add review form - only shown to logged-in users */}
          {user ? (
            <div className="bg-gray-50 p-4 rounded-lg mb-6">
              <h4 className="font-medium text-gray-800 mb-4">Share Your Experience</h4>
              <Form {...reviewForm}>
                <form onSubmit={reviewForm.handleSubmit((data) => addReviewMutation.mutate(data))} className="space-y-4">
                  {/* Rating stars */}
                  <div>
                    <FormLabel>Rating</FormLabel>
                    <div className="flex items-center gap-1 mt-2">
                      {[1, 2, 3, 4, 5].map((value) => (
                        <button
                          key={value}
                          type="button"
                          onClick={() => {
                            setSelectedRating(value);
                            reviewForm.setValue('rating', value);
                          }}
                          className="text-2xl focus:outline-none"
                        >
                          {value <= selectedRating ? (
                            <i className="fas fa-star text-yellow-500"></i>
                          ) : (
                            <i className="far fa-star text-gray-400"></i>
                          )}
                        </button>
                      ))}
                      <span className="ml-2 text-sm text-gray-500">
                        {selectedRating} out of 5 stars
                      </span>
                    </div>
                    {reviewForm.formState.errors.rating && (
                      <p className="text-red-500 text-sm mt-1">{reviewForm.formState.errors.rating.message}</p>
                    )}
                  </div>
                  
                  {/* Review text */}
                  <FormField
                    control={reviewForm.control}
                    name="review"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Your Review</FormLabel>
                        <FormControl>
                          <Textarea 
                            placeholder="Share your thoughts about this show..." 
                            {...field} 
                            className="h-24"
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  
                  <Button 
                    type="submit" 
                    disabled={addReviewMutation.isPending}
                    className="bg-primary text-white hover:bg-primary-600"
                  >
                    {addReviewMutation.isPending ? 'Submitting...' : 'Submit Review'}
                  </Button>
                </form>
              </Form>
            </div>
          ) : (
            <div className="bg-blue-50 p-4 rounded-lg mb-6 border border-blue-100">
              <p className="text-blue-800">
                <Link href={`/auth?redirect=/detail/${id}`} className="font-medium underline">
                  Sign in or register
                </Link> to leave a review and help other parents choose appropriate shows for their children.
              </p>
            </div>
          )}
          
          {/* Existing reviews section */}
          {showDetail.reviews && showDetail.reviews.length > 0 ? (
            <div className="space-y-4">
              {showDetail.reviews.map((review, index) => (
                <div key={index} className="flex p-4 bg-white rounded-lg border border-gray-100 shadow-sm">
                  <div className="flex-shrink-0 mr-4">
                    <div className="w-10 h-10 rounded-full bg-primary-100 flex items-center justify-center">
                      <span className="font-medium text-primary-600">
                        {review.userName.split(' ').map(name => name[0]).join('')}
                      </span>
                    </div>
                  </div>
                  <div className="flex-1">
                    <div className="flex items-center mb-1">
                      <h4 className="font-medium">{review.userName}</h4>
                      <div className="ml-2 flex">
                        {[...Array(5)].map((_, i) => (
                          <i key={i} className={`${i < review.rating ? 'fas' : 'far'} fa-star text-yellow-500`}></i>
                        ))}
                      </div>
                    </div>
                    <p className="text-gray-700">{review.review}</p>
                  </div>
                </div>
              ))}
            </div>
          ) : (
            <div className="text-center py-8 bg-gray-50 rounded-lg">
              <p className="text-gray-500 italic">No reviews yet. Be the first to share your thoughts!</p>
            </div>
          )}
          
          {showDetail.reviews && showDetail.reviews.length > 3 && (
            <Button variant="link" className="mt-4 text-primary-600 hover:text-primary-800">
              Show more reviews
            </Button>
          )}
        </div>
      </div>
      
      {/* Similar Shows Section */}
      <SimilarShows showId={id} />
      
      <div className="text-center text-xs text-gray-500 mt-8">
        © 2025 Sensory Screen Time Guide. All rights reserved.
      </div>
    </main>
  );
}

// Similar Shows Component
function SimilarShows({ showId }: { showId: number }) {
  const { data: similarShows, isLoading, error } = useQuery<TvShow[]>({
    queryKey: [`/api/shows/${showId}/similar`],
    enabled: !!showId,
    refetchOnWindowFocus: false
  });
  
  const [isMobile, setIsMobile] = useState(false);
  
  // Check if device is mobile
  useEffect(() => {
    const checkIfMobile = () => {
      const mobileWidth = 768;
      const width = window.innerWidth;
      setIsMobile(width < mobileWidth);
      console.log("SimilarShows component - Window width:", width, "isMobile:", width < mobileWidth);
    };
    
    // Check on mount
    checkIfMobile();
    
    // Add resize listener
    window.addEventListener('resize', checkIfMobile);
    
    // Clean up
    return () => window.removeEventListener('resize', checkIfMobile);
  }, []);
  
  const [_, setLocation] = useLocation();
  
  if (isLoading) {
    return (
      <div className="mt-8 bg-white rounded-md shadow p-6">
        <h2 className="text-xl font-bold text-gray-800 mb-4">You might also like...</h2>
        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-4">
          {[1, 2, 3, 4].map((i) => (
            <div key={i} className="rounded-md border border-gray-200 overflow-hidden">
              <Skeleton className="w-full h-40" />
              <div className="p-3">
                <Skeleton className="h-5 w-3/4 mb-2" />
                <Skeleton className="h-4 w-1/2" />
              </div>
            </div>
          ))}
        </div>
      </div>
    );
  }
  
  if (error) {
    console.error("Error loading similar shows:", error);
    return null;
  }
  
  if (!similarShows || similarShows.length === 0) {
    console.log("No similar shows found or data empty");
    // Show empty state instead of hiding completely
    return (
      <div className="mt-8 bg-white rounded-md shadow p-6">
        <h2 className="text-xl font-bold text-gray-800 mb-4">You might also like...</h2>
        <p className="text-center py-4 text-gray-500">No similar shows found for this title.</p>
      </div>
    );
  }
  
  return (
    <div className="mt-8 bg-white rounded-md shadow p-6">
      <h2 className="text-xl font-bold text-gray-800 mb-4">You might also like...</h2>
      
      {isMobile ? (
        // Mobile carousel with portrait cards
        <div className="relative">
          <Carousel
            opts={{
              align: "start",
              loop: true,
              dragFree: true,
              containScroll: "trimSnaps"
            }}
            className="w-full"
          >
            <CarouselContent className="-ml-2 md:-ml-4">
              {similarShows.map((show) => (
                <CarouselItem key={show.id} className="pl-2 md:pl-4 basis-1/3">
                  <div 
                    className="cursor-pointer relative pb-[150%] overflow-hidden rounded-lg border border-gray-200"
                    onClick={() => {
                      // Scroll to top first, then navigate
                      window.scrollTo(0, 0);
                      setLocation(`/shows/${show.id}`);
                    }}
                  >
                    {show.imageUrl ? (
                      <img 
                        src={show.imageUrl} 
                        alt={show.name} 
                        className="absolute top-0 left-0 w-full h-full object-contain bg-gray-100"
                      />
                    ) : (
                      <div className="absolute top-0 left-0 w-full h-full bg-gray-200 flex items-center justify-center">
                        <i className="fas fa-tv text-gray-400 text-2xl"></i>
                      </div>
                    )}
                    <div className="absolute bottom-0 left-0 right-0 bg-black bg-opacity-70 p-2 text-white">
                      <h3 className="text-sm font-medium truncate">{show.name}</h3>
                      <div className="flex items-center mt-1">
                        <span className={`inline-block w-2 h-2 rounded-full mr-1 ${
                          show.stimulationScore <= 2 ? 'bg-green-500' : 
                          show.stimulationScore === 3 ? 'bg-yellow-500' : 
                          'bg-orange-500'
                        }`}></span>
                        <span className="text-xs">
                          {show.stimulationScore <= 2 ? 'Low' : 
                           show.stimulationScore === 3 ? 'Moderate' : 
                           'High'} Stimulation
                        </span>
                      </div>
                    </div>
                  </div>
                </CarouselItem>
              ))}
            </CarouselContent>
            <div className="flex justify-center gap-2 mt-4">
              <CarouselPrevious className="static translate-y-0 mr-0" />
              <CarouselNext className="static translate-y-0" />
            </div>
          </Carousel>
        </div>
      ) : (
        // Desktop grid layout
        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-4">
          {similarShows.map((show) => (
            <div 
              key={show.id} 
              className="rounded-md border border-gray-200 overflow-hidden cursor-pointer hover:shadow-md transition-shadow duration-200"
              onClick={() => {
                // Scroll to top first, then navigate
                window.scrollTo(0, 0);
                setLocation(`/shows/${show.id}`);
              }}
            >
              {show.imageUrl ? (
                <div className="w-full h-40 bg-gray-100 overflow-hidden">
                  <img 
                    src={show.imageUrl} 
                    alt={show.name} 
                    className="w-full h-full object-contain"
                  />
                </div>
              ) : (
                <div className="w-full h-40 bg-gray-200 flex items-center justify-center">
                  <i className="fas fa-tv text-gray-400 text-2xl"></i>
                </div>
              )}
              <div className="p-3">
                <h3 className="font-medium text-teal-700">{show.name}</h3>
                <p className="text-sm text-gray-600 flex items-center mt-1">
                  <span className={`inline-block w-2 h-2 rounded-full mr-1 ${
                    show.stimulationScore <= 2 ? 'bg-green-500' : 
                    show.stimulationScore === 3 ? 'bg-yellow-500' : 
                    'bg-orange-500'
                  }`}></span>
                  Stimulation: {show.stimulationScore}/5
                </p>
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  );
}
</file>

<file path="client/src/pages/pre-launch-faq.tsx">
import { Button } from "@/components/ui/button";
import { Link } from "wouter";
import { useEffect } from "react";
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/components/ui/accordion";

export default function PreLaunchFAQ() {
  // Clear authentication data whenever FAQ page loads
  useEffect(() => {
    // This will ensure no authentication check happens
    localStorage.removeItem("tvtantrum_auth");
    
    // Keep early access token for future use (but not auth data)
    if (!localStorage.getItem("earlyAccessToken")) {
      localStorage.removeItem("earlyAccessShown");
    }
    
    console.log("Pre-launch FAQ page loaded, cleared authentication data from localStorage");
  }, []);
  return (
    <div className="min-h-screen bg-gradient-to-b from-background to-muted">
      {/* Header */}
      <header className="container mx-auto py-6 px-4 sm:px-6 flex justify-between items-center">
        <Link href="/">
          <div className="text-3xl font-bold text-primary cursor-pointer">TV Tantrum</div>
        </Link>
        <div className="flex space-x-2 sm:space-x-4">
          <Button variant="ghost" asChild>
            <Link href="/">Home</Link>
          </Button>
          <Button variant="ghost" asChild>
            <Link href="/about">About</Link>
          </Button>
          <Button variant="outline" className="text-primary border-primary hover:bg-primary/10" asChild>
            <Link href="/token-entry">Early Access</Link>
          </Button>
        </div>
      </header>

      {/* Main Content */}
      <div className="container mx-auto py-12 px-4 max-w-3xl">
        <h1 className="text-4xl font-bold mb-8 text-center">Frequently Asked Questions</h1>
        
        <Accordion type="single" collapsible className="w-full">
          <AccordionItem value="item-1">
            <AccordionTrigger className="text-xl font-medium">
              What is TV Tantrum?
            </AccordionTrigger>
            <AccordionContent className="text-lg">
              TV Tantrum is a platform that analyzes children's TV shows based on their sensory impact. 
              We provide detailed information about elements like animation style, scene frequency, music tempo, 
              dialogue intensity, and overall stimulation level to help parents make informed decisions about 
              what their children watch.
            </AccordionContent>
          </AccordionItem>
          
          <AccordionItem value="item-2">
            <AccordionTrigger className="text-xl font-medium">
              When will TV Tantrum launch?
            </AccordionTrigger>
            <AccordionContent className="text-lg">
              We're currently in the final stages of development and plan to launch in the coming weeks. 
              Join our waitlist now to qualify for early access to the platform before the public launch. 
              Only users who pre-register will be able to access TV Tantrum during the early access period.
            </AccordionContent>
          </AccordionItem>

          <AccordionItem value="item-3">
            <AccordionTrigger className="text-xl font-medium">
              What is a "stimulation score"?
            </AccordionTrigger>
            <AccordionContent className="text-lg">
              A stimulation score is our proprietary rating that measures how stimulating a show is for a child's 
              developing brain. Shows with higher scores contain more fast-paced scenes, louder sound effects, 
              and more intense visual elements. This score helps parents find content that matches their child's 
              sensory preferences and needs.
            </AccordionContent>
          </AccordionItem>
          
          <AccordionItem value="item-4">
            <AccordionTrigger className="text-xl font-medium">
              How many shows does TV Tantrum analyze?
            </AccordionTrigger>
            <AccordionContent className="text-lg">
              At launch, we'll have detailed analyses of over 300 popular children's shows, with new shows 
              being added regularly. We prioritize shows based on popularity and user requests.
            </AccordionContent>
          </AccordionItem>
          
          <AccordionItem value="item-5">
            <AccordionTrigger className="text-xl font-medium">
              Will TV Tantrum be free to use?
            </AccordionTrigger>
            <AccordionContent className="text-lg">
              Yes! TV Tantrum will be completely free to use. All features, including detailed show analyses, 
              filtering tools, and personalized recommendations will be available to everyone at no cost. 
              We believe that all parents should have access to this important information regardless of 
              their financial situation.
            </AccordionContent>
          </AccordionItem>
          
          <AccordionItem value="item-6">
            <AccordionTrigger className="text-xl font-medium">
              How do I suggest a show to be analyzed?
            </AccordionTrigger>
            <AccordionContent className="text-lg">
              Once we launch, registered users will be able to suggest shows for analysis by using a simple 
              request form directly on our website. Our content team reviews all suggestions and prioritizes 
              new additions based on popularity and educational value.
            </AccordionContent>
          </AccordionItem>
          
          <AccordionItem value="item-7">
            <AccordionTrigger className="text-xl font-medium">
              What age ranges does TV Tantrum cover?
            </AccordionTrigger>
            <AccordionContent className="text-lg">
              We analyze shows suitable for children from ages 0-13+, with particular focus on the crucial 
              developmental stages from toddlerhood through elementary school years.
            </AccordionContent>
          </AccordionItem>
        </Accordion>

        <div className="mt-12 text-center">
          <Button size="lg" className="px-8 py-6 text-lg" asChild>
            <Link href="/#register">Join the Waitlist</Link>
          </Button>
        </div>
      </div>

      {/* Footer */}
      <footer className="bg-muted py-12 mt-20">
        <div className="container mx-auto px-4">
          <div className="text-center text-muted-foreground">
            <p>© {new Date().getFullYear()} TV Tantrum. All rights reserved.</p>
            <p className="mt-2">Have another question? Email us at support@tvtantrum.com</p>
          </div>
        </div>
      </footer>
    </div>
  );
}
</file>

<file path="apply-custom-data.mjs">
// Script to apply custom show details and images to the database
// This script directly updates the database instead of applying changes during server startup
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import { Pool } from '@neondatabase/serverless';
import ws from 'ws';

// Get the current file directory (equivalent to __dirname in CommonJS)
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Configure Neon database connection
if (!process.env.DATABASE_URL) {
  console.error('DATABASE_URL environment variable is not set. Please set it before running this script.');
  process.exit(1);
}

// Configure WebSocket for Neon
import { neonConfig } from '@neondatabase/serverless';
neonConfig.webSocketConstructor = ws;

// Set up database pool with the same configuration as server/db.ts
const poolConfig = {
  connectionString: process.env.DATABASE_URL,
  max: 20, // Maximum number of clients in the pool
  idleTimeoutMillis: 30000, // How long a client is allowed to remain idle before being closed
  connectionTimeoutMillis: 5000, // Maximum time to wait for a connection
};

const pool = new Pool(poolConfig);

// Add error handling for the pool
pool.on('error', (err) => {
  console.error('Unexpected error on idle client', err);
});

// Verify database connection before proceeding
async function verifyDatabaseConnection() {
  try {
    console.log('Verifying database connection...');
    const result = await pool.query('SELECT NOW()');
    console.log(`Database connected successfully at: ${result.rows[0].now}`);
    
    // Check if we can access the tv_shows table
    const showCount = await pool.query('SELECT COUNT(*) FROM tv_shows');
    console.log(`Found ${showCount.rows[0].count} TV shows in database`);
    
    return true;
  } catch (error) {
    console.error('Database connection verification failed:', error);
    return false;
  }
}

/**
 * Load custom show details mapping from the JSON file
 */
function loadCustomShowDetailsMap() {
  try {
    const filePath = path.join(process.cwd(), 'customShowDetailsMap.json');
    if (fs.existsSync(filePath)) {
      const data = fs.readFileSync(filePath, 'utf-8');
      return JSON.parse(data);
    }
  } catch (error) {
    console.error('Error loading custom show details map:', error);
  }
  return {};
}

/**
 * Load custom image mapping from the JSON file
 */
function loadCustomImageMap() {
  try {
    const filePath = path.join(process.cwd(), 'customImageMap.json');
    if (fs.existsSync(filePath)) {
      const data = fs.readFileSync(filePath, 'utf-8');
      return JSON.parse(data);
    }
  } catch (error) {
    console.error('Error loading custom image map:', error);
  }
  return {};
}

/**
 * Get a specific TV show from the database
 */
async function getTvShowById(id) {
  try {
    const result = await pool.query('SELECT * FROM tv_shows WHERE id = $1', [id]);
    if (result.rows.length > 0) {
      return result.rows[0];
    }
    return null;
  } catch (error) {
    console.error(`Error getting TV show with ID ${id}:`, error);
    return null;
  }
}

/**
 * Convert camelCase to snake_case
 */
function camelToSnakeCase(str) {
  return str.replace(/[A-Z]/g, letter => `_${letter.toLowerCase()}`);
}

/**
 * Map custom field names to database column names
 * Returns null for fields that don't exist in the database
 */
function mapFieldToColumnName(key) {
  // Custom mapping for specific fields that exist in the database
  const fieldMap = {
    'stimulationScore': 'stimulation_score',
    'musicTempo': 'music_tempo',
    'totalMusicLevel': 'total_music_level',
    'totalSoundEffectTimeLevel': 'total_sound_effect_time_level',
    'sceneFrequency': 'scene_frequency',
    'interactivityLevel': 'interactivity_level',
    'dialogueIntensity': 'dialogue_intensity',
    'soundEffectsLevel': 'sound_effects_level',
    'animationStyle': 'animation_style',
    'ageRange': 'age_range',
    'themes': 'themes',
    'name': 'name',
    'description': 'description'
  };
  
  // Fields that should be ignored (not in database schema)
  const ignoredFields = [
    'TV or YouTube',
    'Seasons',
    'Avg. Epsiode',
    'TV',
    'Avg. Episode'
  ];
  
  // Return null for ignored fields
  if (ignoredFields.includes(key)) {
    return null;
  }
  
  // Return mapped field name or convert to snake_case
  return fieldMap[key] || null; // Return null for unknown fields instead of attempting conversion
}

/**
 * Update a TV show's details in the database
 */
async function updateTvShow(id, details) {
  try {
    // Create SET clause for the SQL update query
    const keys = Object.keys(details);
    if (keys.length === 0) return null;
    
    // Filter out keys that don't exist in the database
    const validEntries = keys
      .map(key => {
        const mappedKey = mapFieldToColumnName(key);
        return { originalKey: key, mappedKey };
      })
      .filter(entry => entry.mappedKey !== null);
    
    if (validEntries.length === 0) {
      console.log(`No valid fields to update for show ${id}`);
      return null;
    }
    
    // Create parameterized query with only valid fields
    const setClauses = validEntries.map((entry, index) => `"${entry.mappedKey}" = $${index + 2}`);
    
    const values = validEntries.map(entry => {
      const key = entry.originalKey;
      // Handle arrays (like themes) - format for PostgreSQL text[] type
      if (Array.isArray(details[key])) {
        // Format as PostgreSQL array literal: '{item1,item2,item3}'
        return '{' + details[key].map(item => {
          // Escape single quotes and backslashes in array items
          return item.toString().replace(/'/g, "''").replace(/\\/g, '\\\\');
        }).join(',') + '}';
      }
      // Handle stimulation score specifically
      if (key === 'stimulationScore') {
        // Ensure it's a whole number (integer)
        return Math.round(details[key]);
      }
      return details[key];
    });
    
    const query = `
      UPDATE tv_shows 
      SET ${setClauses.join(', ')} 
      WHERE id = $1 
      RETURNING *
    `;
    
    const result = await pool.query(query, [id, ...values]);
    if (result.rows.length > 0) {
      return result.rows[0];
    }
    return null;
  } catch (error) {
    console.error(`Error updating TV show with ID ${id}:`, error);
    return null;
  }
}

/**
 * Process all custom details in batches
 */
async function processCustomDetails() {
  try {
    const customDetailsMap = loadCustomShowDetailsMap();
    console.log(`Processing ${Object.keys(customDetailsMap).length} custom show details...`);
    
    // Process in batches of 20 shows
    const BATCH_SIZE = 20;
    const showIds = Object.keys(customDetailsMap).map(id => parseInt(id)).filter(id => !isNaN(id));
    const totalBatches = Math.ceil(showIds.length / BATCH_SIZE);
    
    console.log(`Processing ${showIds.length} shows in ${totalBatches} batches of ${BATCH_SIZE}`);
    
    let successCount = 0;
    let errorCount = 0;
    
    for (let batchIndex = 0; batchIndex < totalBatches; batchIndex++) {
      const batchStart = batchIndex * BATCH_SIZE;
      const batchEnd = Math.min(batchStart + BATCH_SIZE, showIds.length);
      const currentBatch = showIds.slice(batchStart, batchEnd);
      
      console.log(`Processing batch ${batchIndex + 1}/${totalBatches} (shows ${batchStart+1}-${batchEnd})`);
      
      // Process each show in the batch
      for (const showId of currentBatch) {
        try {
          const show = await getTvShowById(showId);
          if (show) {
            const details = customDetailsMap[showId.toString()];
            const updatedShow = await updateTvShow(showId, details);
            if (updatedShow) {
              successCount++;
              process.stdout.write('.');
            } else {
              errorCount++;
              process.stdout.write('E');
            }
          } else {
            console.log(`\nShow ID ${showId} not found in database`);
            errorCount++;
          }
        } catch (err) {
          console.error(`\nError processing show ${showId}:`, err);
          errorCount++;
        }
      }
      process.stdout.write('\n');
    }
    
    console.log(`\nCustom details processing completed: ${successCount} successful, ${errorCount} errors`);
    return { successCount, errorCount };
  } catch (error) {
    console.error('Error processing custom show details:', error);
    return { successCount: 0, errorCount: 0 };
  }
}

/**
 * Process all custom images in batches
 */
async function processCustomImages() {
  try {
    const customImageMap = loadCustomImageMap();
    console.log(`Processing ${Object.keys(customImageMap).length} custom images...`);
    
    // Process in batches of 20 shows
    const BATCH_SIZE = 20;
    const showIds = Object.keys(customImageMap).map(id => parseInt(id)).filter(id => !isNaN(id));
    const totalBatches = Math.ceil(showIds.length / BATCH_SIZE);
    
    console.log(`Processing ${showIds.length} images in ${totalBatches} batches of ${BATCH_SIZE}`);
    
    let successCount = 0;
    let errorCount = 0;
    
    for (let batchIndex = 0; batchIndex < totalBatches; batchIndex++) {
      const batchStart = batchIndex * BATCH_SIZE;
      const batchEnd = Math.min(batchStart + BATCH_SIZE, showIds.length);
      const currentBatch = showIds.slice(batchStart, batchEnd);
      
      console.log(`Processing image batch ${batchIndex + 1}/${totalBatches} (shows ${batchStart+1}-${batchEnd})`);
      
      // Process each show in the batch
      for (const showId of currentBatch) {
        try {
          const show = await getTvShowById(showId);
          if (show) {
            const imageUrl = customImageMap[showId.toString()];
            const updatedShow = await updateTvShow(showId, { imageUrl });
            if (updatedShow) {
              successCount++;
              process.stdout.write('.');
            } else {
              errorCount++;
              process.stdout.write('E');
            }
          } else {
            console.log(`\nShow ID ${showId} not found in database`);
            errorCount++;
          }
        } catch (err) {
          console.error(`\nError processing image for show ${showId}:`, err);
          errorCount++;
        }
      }
      process.stdout.write('\n');
    }
    
    console.log(`\nCustom images processing completed: ${successCount} successful, ${errorCount} errors`);
    return { successCount, errorCount };
  } catch (error) {
    console.error('Error processing custom images:', error);
    return { successCount: 0, errorCount: 0 };
  }
}

/**
 * Main function to process everything
 */
async function main() {
  try {
    console.log('Starting custom data processing...');
    console.log('This script will update the database directly with custom show details and images');
    
    // Verify database connection before proceeding
    const isConnected = await verifyDatabaseConnection();
    if (!isConnected) {
      console.error('Could not establish database connection. Exiting...');
      return;
    }
    
    // Process custom details
    const detailsResult = await processCustomDetails();
    
    // Process custom images
    const imagesResult = await processCustomImages();
    
    console.log('\nProcessing summary:');
    console.log(`Custom details: ${detailsResult.successCount} successful, ${detailsResult.errorCount} errors`);
    console.log(`Custom images: ${imagesResult.successCount} successful, ${imagesResult.errorCount} errors`);
    console.log('All done!');
    
  } catch (error) {
    console.error('Error in main process:', error);
  } finally {
    // Close the database pool
    await pool.end();
  }
}

// Run the main function
main().catch(console.error);
</file>

<file path="optimize-all-images.ts">
/**
 * Script to optimize all custom images in the database for better SEO
 * This resizes images to optimal dimensions and compresses them for faster loading
 */

import { db, pool } from './server/db';
import { eq, not, like } from 'drizzle-orm';
import sharp from 'sharp';
import fs from 'fs';
import path from 'path';
import fetch from 'node-fetch';
import { tvShows } from './shared/schema';
import { updateCustomImageMap, loadCustomImageMap, saveCustomImageMap } from './server/image-preservator';

// Create upload directories if they don't exist
const imageDir = './public/uploads';
const optimizedImageDir = './public/uploads/optimized';

if (!fs.existsSync(imageDir)) {
  fs.mkdirSync(imageDir, { recursive: true });
}

if (!fs.existsSync(optimizedImageDir)) {
  fs.mkdirSync(optimizedImageDir, { recursive: true });
}

/**
 * Download an image from a URL or copy from local path
 */
async function downloadImage(imageUrl: string, showId: number): Promise<string | null> {
  try {
    // Skip if URL is null, OMDB image, or already optimized
    if (!imageUrl || 
        imageUrl.includes('m.media-amazon.com') || 
        imageUrl.includes('omdbapi.com') ||
        imageUrl.includes('/uploads/optimized/')) {
      console.log(`Skipping image for show ${showId}: OMDB image or already optimized`);
      return null;
    }
    
    // For local images with relative paths
    if (imageUrl.startsWith('/')) {
      // Try different possible locations for local images
      const possiblePaths = [
        path.join('.', 'public', imageUrl),
        path.join('.', 'public', 'custom-images', path.basename(imageUrl)),
        path.join('.', 'public', 'images', path.basename(imageUrl)),
        path.join('.', 'attached_assets', path.basename(imageUrl)),
        path.join('.', imageUrl) // Try direct path
      ];
      
      for (const localPath of possiblePaths) {
        if (fs.existsSync(localPath)) {
          console.log(`Found local image at ${localPath} for show ${showId}`);
          
          // Create a copy in the upload directory
          const timestamp = Date.now();
          const uniqueFilename = `show-${showId}-${timestamp}${path.extname(localPath) || '.jpg'}`;
          const tempFilePath = path.join(imageDir, uniqueFilename);
          
          fs.copyFileSync(localPath, tempFilePath);
          console.log(`Copied local image to: ${tempFilePath}`);
          return tempFilePath;
        }
      }
      
      console.log(`Could not find local image at any expected location: ${imageUrl}`);
      return null;
    }
    
    // For external URLs
    if (imageUrl.startsWith('http')) {
      console.log(`Downloading image for show ${showId} from: ${imageUrl}`);
      const response = await fetch(imageUrl);
      
      if (!response.ok) {
        console.error(`Failed to download image for show ${showId}: ${response.status} ${response.statusText}`);
        return null;
      }
      
      const buffer = await response.buffer();
      const timestamp = Date.now();
      const uniqueFilename = `show-${showId}-${timestamp}.jpg`;
      const tempFilePath = path.join(imageDir, uniqueFilename);
      
      fs.writeFileSync(tempFilePath, buffer);
      console.log(`Downloaded image to: ${tempFilePath}`);
      return tempFilePath;
    }
    
    console.log(`Unsupported image URL format: ${imageUrl}`);
    return null;
    
  } catch (error) {
    console.error(`Error downloading image for show ${showId}:`, error);
    return null;
  }
}

/**
 * Optimize an image for web use
 */
async function optimizeImage(filePath: string, showId: number): Promise<string | null> {
  try {
    if (!filePath) return null;
    
    const filename = path.basename(filePath, path.extname(filePath));
    const optimizedFilename = `${filename}-optimized.jpg`;
    const optimizedPath = path.join(optimizedImageDir, optimizedFilename);
    
    // Get image metadata
    const metadata = await sharp(filePath).metadata();
    const originalWidth = metadata.width || 800;
    const originalHeight = metadata.height || 600;
    
    // Target portrait format sizes
    let targetWidth: number;
    let targetHeight: number;
    
    if (originalHeight >= originalWidth) {
      // Already portrait or square
      targetWidth = Math.min(originalWidth, 600);
      targetHeight = Math.round((targetWidth / originalWidth) * originalHeight);
      
      // Limit very tall images
      if (targetHeight > 900) {
        targetHeight = 900;
        targetWidth = Math.round((targetHeight / originalHeight) * originalWidth);
      }
    } else {
      // Landscape - convert to portrait-friendly dimensions
      targetHeight = Math.min(originalHeight, 800);
      targetWidth = Math.min(originalWidth, Math.round(targetHeight * 0.75));
    }
    
    // Process with sharp
    await sharp(filePath)
      .resize(targetWidth, targetHeight, {
        fit: 'contain',
        background: { r: 255, g: 255, b: 255, alpha: 1 }
      })
      .jpeg({ quality: 85, progressive: true })
      .toFile(optimizedPath);
    
    console.log(`Image optimized: ${optimizedPath} (${targetWidth}x${targetHeight})`);
    
    // Return web path to optimized image
    return `/uploads/optimized/${optimizedFilename}`;
    
  } catch (error) {
    console.error(`Error optimizing image for show ${showId}:`, error);
    return null;
  }
}

/**
 * Main function to optimize all custom images
 */
async function optimizeAllCustomImages() {
  console.log('Starting image optimization process...');
  
  // Load custom image map
  const customImageMap = loadCustomImageMap();
  let optimizedCount = 0;
  let errorCount = 0;
  let skippedCount = 0;
  
  try {
    // Get all shows with non-OMDB, non-optimized images
    const shows = await db.select().from(tvShows).where(
      not(like(tvShows.imageUrl, '%/uploads/optimized/%'))
    );
    
    const showsToProcess = shows.filter(show => 
      show.imageUrl && 
      !show.imageUrl.includes('m.media-amazon.com') && 
      !show.imageUrl.includes('omdbapi.com') &&
      !show.imageUrl.includes('/uploads/optimized/')
    );
    
    console.log(`Found ${showsToProcess.length} custom images to optimize out of ${shows.length} total shows`);
    
    // Process each show's image
    for (const show of showsToProcess) {
      try {
        console.log(`\nProcessing show: ${show.name} (ID: ${show.id})`);
        console.log(`Current image URL: ${show.imageUrl}`);
        
        // Download image
        const localPath = await downloadImage(show.imageUrl, show.id);
        if (!localPath) {
          console.log(`Skipping image optimization for show ID ${show.id}`);
          skippedCount++;
          continue;
        }
        
        // Optimize image
        const optimizedUrl = await optimizeImage(localPath || '', show.id);
        if (!optimizedUrl) {
          console.error(`Failed to optimize image for show ID ${show.id}`);
          errorCount++;
          continue;
        }
        
        // Make optimizedUrl non-null for TypeScript
        const safeOptimizedUrl = optimizedUrl;
        
        // Update database with safe non-null URL
        await db
          .update(tvShows)
          .set({ imageUrl: safeOptimizedUrl })
          .where(eq(tvShows.id, show.id));
        
        // Update custom image map
        updateCustomImageMap(show.id, safeOptimizedUrl);
        optimizedCount++;
        
        console.log(`Updated image for ${show.name}: ${optimizedUrl}`);
        
        // Clean up temporary file
        if (localPath.startsWith(imageDir)) {
          try {
            fs.unlinkSync(localPath);
          } catch (e) {
            // Ignore cleanup errors
          }
        }
        
      } catch (error) {
        console.error(`Error processing show ID ${show.id}:`, error);
        errorCount++;
      }
    }
    
    // Save updated custom image map
    saveCustomImageMap(customImageMap);
    
    console.log('\nOptimization complete:');
    console.log(`- Optimized: ${optimizedCount}`);
    console.log(`- Skipped: ${skippedCount}`);
    console.log(`- Errors: ${errorCount}`);
    console.log(`- Total processed: ${showsToProcess.length}`);
    
  } catch (error) {
    console.error('Error during optimization process:', error);
  } finally {
    // Close the pool
    await pool.end();
  }
}

// Run the optimization process
optimizeAllCustomImages().catch(console.error);
</file>

<file path="optimize-custom-images.js">
/**
 * A script to optimize all custom images in the database for SEO
 * This improves page load times and overall performance
 */
import { db } from './server/db.js';
import sharp from 'sharp';
import fetch from 'node-fetch';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import { loadCustomImageMap, saveCustomImageMap, updateCustomImageMap } from './server/image-preservator.js';

// Get current file directory (ES modules don't have __dirname)
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Create directories if they don't exist
const imageDir = './public/uploads';
const optimizedImageDir = './public/uploads/optimized';

if (!fs.existsSync(imageDir)) {
  fs.mkdirSync(imageDir, { recursive: true });
}

if (!fs.existsSync(optimizedImageDir)) {
  fs.mkdirSync(optimizedImageDir, { recursive: true });
}

/**
 * Downloads an image from URL and returns the local file path
 */
async function downloadImage(url, showId) {
  try {
    // Skip if URL is null or already an optimized path
    if (!url || url.includes('/uploads/optimized/')) {
      return null;
    }

    // For local images that are already in our uploads directory
    if (url.startsWith('/uploads/')) {
      const localPath = path.join('.', url); // e.g. ./uploads/some-image.jpg
      if (fs.existsSync(localPath)) {
        return localPath;
      }
    }

    // For external URLs, download the image
    const response = await fetch(url);
    if (!response.ok) {
      console.error(`Failed to download image for show ID ${showId}: ${url}`);
      return null;
    }

    const buffer = await response.buffer();
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
    const ext = path.extname(url) || '.jpg'; // Default to .jpg if no extension
    const tempFilePath = path.join(imageDir, `show-${showId}-${uniqueSuffix}${ext}`);
    
    fs.writeFileSync(tempFilePath, buffer);
    console.log(`Downloaded image for show ID ${showId} to ${tempFilePath}`);
    return tempFilePath;
  } catch (error) {
    console.error(`Error downloading image for show ID ${showId}:`, error);
    return null;
  }
}

/**
 * Optimizes an image for web use - similar to server/image-upload.ts
 */
async function optimizeImage(filePath, showId) {
  const ext = path.extname(filePath);
  const filename = path.basename(filePath, ext);
  const optimizedPath = path.join(optimizedImageDir, `${filename}-optimized.jpg`);
  
  try {
    // Get image dimensions
    const metadata = await sharp(filePath).metadata();
    
    // Default values if metadata isn't available
    const originalWidth = metadata.width || 800;
    const originalHeight = metadata.height || 600;
    
    // Target sizes for portrait format
    let targetWidth;
    let targetHeight;

    // If the original is already portrait or square, maintain aspect ratio but limit max dimensions
    if (originalHeight >= originalWidth) {
      // It's already portrait or square
      targetWidth = Math.min(originalWidth, 600); // Max width of 600px
      targetHeight = Math.round((targetWidth / originalWidth) * originalHeight);

      // Ensure height doesn't exceed 900px (for very tall images)
      if (targetHeight > 900) {
        targetHeight = 900;
        targetWidth = Math.round((targetHeight / originalHeight) * originalWidth);
      }
    } else {
      // It's landscape, convert to portrait-friendly dimensions
      targetHeight = Math.min(originalHeight, 800); // Max height of 800px
      targetWidth = Math.min(originalWidth, Math.round(targetHeight * 0.75)); // Width about 75% of height for 3:4 ratio
    }

    // Process the image with sharp
    await sharp(filePath)
      .resize(targetWidth, targetHeight, {
        fit: 'contain',
        background: { r: 255, g: 255, b: 255, alpha: 1 } // White background
      })
      .jpeg({ quality: 85, progressive: true }) // Good balance of quality and file size
      .toFile(optimizedPath);
    
    console.log(`Image optimized: ${optimizedPath} (${targetWidth}x${targetHeight})`);
    
    return `/uploads/optimized/${path.basename(optimizedPath)}`;
  } catch (error) {
    console.error(`Error optimizing image for show ID ${showId}:`, error);
    return null;
  }
}

/**
 * Updates a show's image URL in the database
 */
async function updateShowImageUrl(showId, imageUrl) {
  try {
    // Update the database with the new image URL
    const result = await db.query(
      'UPDATE tv_shows SET image_url = $1 WHERE id = $2 RETURNING id, name',
      [imageUrl, showId]
    );
    
    if (result.rowCount === 1) {
      console.log(`Updated image URL for show ID ${showId}: ${result.rows[0].name}`);
      return true;
    } else {
      console.error(`Failed to update image URL for show ID ${showId}`);
      return false;
    }
  } catch (error) {
    console.error(`Error updating image URL for show ID ${showId}:`, error);
    return false;
  }
}

/**
 * Main function to process and optimize all custom images in the database
 */
async function optimizeAllCustomImages() {
  try {
    // Get custom image mapping
    const customImageMap = loadCustomImageMap();
    let optimizedCount = 0;
    let errorCount = 0;
    let skippedCount = 0;
    
    // Get all shows with custom images
    const result = await db.query(
      'SELECT id, name, image_url FROM tv_shows WHERE image_url IS NOT NULL'
    );
    
    console.log(`Found ${result.rowCount} shows with images to process`);
    
    // Process each show's image
    for (const show of result.rows) {
      try {
        // Skip OMDB images
        if (show.image_url?.includes('m.media-amazon.com') || show.image_url?.includes('omdbapi.com')) {
          console.log(`Skipping OMDB image for show ID ${show.id}: ${show.name}`);
          skippedCount++;
          continue;
        }
        
        // Skip already optimized images
        if (show.image_url?.includes('/uploads/optimized/')) {
          console.log(`Skipping already optimized image for show ID ${show.id}: ${show.name}`);
          skippedCount++;
          continue;
        }
        
        console.log(`\nProcessing image for show ID ${show.id}: ${show.name}`);
        console.log(`Current image URL: ${show.image_url}`);
        
        // Download the image
        const localImagePath = await downloadImage(show.image_url, show.id);
        if (!localImagePath) {
          console.warn(`Couldn't download image for show ID ${show.id}: ${show.name}`);
          errorCount++;
          continue;
        }
        
        // Optimize the image
        const optimizedImageUrl = await optimizeImage(localImagePath, show.id);
        if (!optimizedImageUrl) {
          console.warn(`Couldn't optimize image for show ID ${show.id}: ${show.name}`);
          errorCount++;
          continue;
        }
        
        // Update the database and custom image map
        const updated = await updateShowImageUrl(show.id, optimizedImageUrl);
        if (updated) {
          // Update custom image map to preserve this optimization
          updateCustomImageMap(show.id, optimizedImageUrl);
          optimizedCount++;
        } else {
          errorCount++;
        }
        
        // Clean up original downloaded file if it's in our temporary directory
        if (localImagePath.startsWith(imageDir)) {
          try {
            fs.unlinkSync(localImagePath);
          } catch (e) {
            // Ignore cleanup errors
          }
        }
      } catch (error) {
        console.error(`Error processing image for show ID ${show.id}:`, error);
        errorCount++;
      }
    }
    
    // Save updated custom image map
    saveCustomImageMap(customImageMap);
    
    console.log('\nImage optimization complete:');
    console.log(`- Optimized: ${optimizedCount}`);
    console.log(`- Skipped: ${skippedCount}`);
    console.log(`- Errors: ${errorCount}`);
    console.log(`- Total processed: ${result.rowCount}`);
    
  } catch (error) {
    console.error('Error in optimizeAllCustomImages:', error);
  } finally {
    // Close database connection
    await db.end();
  }
}

// Run the optimization
console.log('Starting SEO optimization of all custom images...');
optimizeAllCustomImages().then(() => {
  console.log('Image optimization process complete.');
}).catch(err => {
  console.error('Fatal error in image optimization process:', err);
});

// Convert this file to an ES module
export {};
</file>

<file path="optimize-images.mjs">
/**
 * Optimize custom images in the database for better SEO and page load times
 */
import { pool } from './server/db.js';
import sharp from 'sharp';
import fetch from 'node-fetch';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import { loadCustomImageMap, updateCustomImageMap, saveCustomImageMap } from './server/image-preservator.js';

// Get current file directory
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Create upload directories if they don't exist
const imageDir = path.join(__dirname, 'public/uploads');
const optimizedImageDir = path.join(__dirname, 'public/uploads/optimized');

if (!fs.existsSync(imageDir)) {
  fs.mkdirSync(imageDir, { recursive: true });
}

if (!fs.existsSync(optimizedImageDir)) {
  fs.mkdirSync(optimizedImageDir, { recursive: true });
}

/**
 * Download image from URL
 */
async function downloadImage(imageUrl, showId) {
  try {
    // Skip if URL is null or already an optimized path
    if (!imageUrl || imageUrl.includes('/uploads/optimized/')) {
      console.log(`Skipping already optimized or null image for show ID ${showId}`);
      return null;
    }
    
    // Skip OMDB images
    if (imageUrl.includes('m.media-amazon.com') || imageUrl.includes('omdbapi.com')) {
      console.log(`Skipping OMDB image for show ID ${showId}`);
      return null;
    }
    
    // For local images that are already in our uploads directory
    if (imageUrl.startsWith('/uploads/')) {
      const localPath = path.join(__dirname, 'public', imageUrl);
      if (fs.existsSync(localPath)) {
        console.log(`Using existing local image at ${localPath}`);
        return localPath;
      }
    }
    
    // Handle external URLs
    console.log(`Downloading image from URL: ${imageUrl}`);
    const response = await fetch(imageUrl);
    
    if (!response.ok) {
      console.error(`Failed to download image: ${response.status} ${response.statusText}`);
      return null;
    }
    
    const buffer = await response.buffer();
    const timestamp = Date.now();
    const uniqueFilename = `show-${showId}-${timestamp}.jpg`;
    const tempFilePath = path.join(imageDir, uniqueFilename);
    
    fs.writeFileSync(tempFilePath, buffer);
    console.log(`Downloaded image to: ${tempFilePath}`);
    return tempFilePath;
    
  } catch (error) {
    console.error(`Error downloading image:`, error.message);
    return null;
  }
}

/**
 * Optimize image for web use
 */
async function optimizeImage(filePath, showId) {
  try {
    if (!filePath) return null;
    
    const filename = path.basename(filePath, path.extname(filePath));
    const optimizedFilename = `${filename}-optimized.jpg`;
    const optimizedPath = path.join(optimizedImageDir, optimizedFilename);
    
    // Get image dimensions
    const metadata = await sharp(filePath).metadata();
    const originalWidth = metadata.width || 800;
    const originalHeight = metadata.height || 600;
    
    // Target portrait format sizes
    let targetWidth, targetHeight;
    
    if (originalHeight >= originalWidth) {
      // Already portrait or square
      targetWidth = Math.min(originalWidth, 600);
      targetHeight = Math.round((targetWidth / originalWidth) * originalHeight);
      
      // Limit very tall images
      if (targetHeight > 900) {
        targetHeight = 900;
        targetWidth = Math.round((targetHeight / originalHeight) * originalWidth);
      }
    } else {
      // Landscape - convert to portrait-friendly dimensions
      targetHeight = Math.min(originalHeight, 800);
      targetWidth = Math.min(originalWidth, Math.round(targetHeight * 0.75));
    }
    
    // Process with sharp
    await sharp(filePath)
      .resize(targetWidth, targetHeight, {
        fit: 'contain',
        background: { r: 255, g: 255, b: 255, alpha: 1 }
      })
      .jpeg({ quality: 85, progressive: true })
      .toFile(optimizedPath);
    
    console.log(`Image optimized: ${optimizedPath} (${targetWidth}x${targetHeight})`);
    
    // Return web path to optimized image
    return `/uploads/optimized/${optimizedFilename}`;
    
  } catch (error) {
    console.error(`Error optimizing image:`, error.message);
    return null;
  }
}

/**
 * Main function to optimize all custom images
 */
async function optimizeAllCustomImages() {
  console.log('Starting image optimization process...');
  
  // Load custom image map
  const customImageMap = loadCustomImageMap();
  let optimizedCount = 0;
  let errorCount = 0;
  let skippedCount = 0;
  
  try {
    // Get all shows with images that aren't already optimized
    const query = `
      SELECT id, name, image_url 
      FROM tv_shows 
      WHERE image_url IS NOT NULL 
        AND image_url NOT LIKE '%/uploads/optimized/%'
        AND image_url NOT LIKE '%m.media-amazon.com%'
        AND image_url NOT LIKE '%omdbapi.com%'
    `;
    
    const result = await pool.query(query);
    console.log(`Found ${result.rows.length} images to optimize`);
    
    // Process each image
    for (const show of result.rows) {
      try {
        console.log(`\nProcessing show: ${show.name} (ID: ${show.id})`);
        console.log(`Current image URL: ${show.image_url}`);
        
        // Download image
        const localPath = await downloadImage(show.image_url, show.id);
        if (!localPath) {
          console.log(`Skipping image for show ID ${show.id}: ${show.name}`);
          skippedCount++;
          continue;
        }
        
        // Optimize image
        const optimizedUrl = await optimizeImage(localPath, show.id);
        if (!optimizedUrl) {
          console.error(`Failed to optimize image for show ID ${show.id}`);
          errorCount++;
          continue;
        }
        
        // Update database
        const updateQuery = 'UPDATE tv_shows SET image_url = $1 WHERE id = $2';
        await pool.query(updateQuery, [optimizedUrl, show.id]);
        
        // Update custom image map
        updateCustomImageMap(show.id, optimizedUrl);
        optimizedCount++;
        
        console.log(`Updated image for ${show.name}: ${optimizedUrl}`);
        
        // Clean up temporary file
        if (localPath.startsWith(imageDir)) {
          fs.unlinkSync(localPath);
        }
        
      } catch (error) {
        console.error(`Error processing show ID ${show.id}:`, error.message);
        errorCount++;
      }
    }
    
    // Save updated custom image map
    saveCustomImageMap(customImageMap);
    
    console.log('\nOptimization complete:');
    console.log(`- Optimized: ${optimizedCount}`);
    console.log(`- Skipped: ${skippedCount}`);
    console.log(`- Errors: ${errorCount}`);
    console.log(`- Total processed: ${result.rows.length}`);
    
  } catch (error) {
    console.error('Error during optimization process:', error.message);
  } finally {
    await pool.end();
  }
}

// Run the script
optimizeAllCustomImages().catch(console.error);
</file>

<file path="optimize-seo-images.js">
/**
 * Script to optimize all custom images in the database for better SEO
 */
const { Pool } = require('pg');
const sharp = require('sharp');
const fs = require('fs');
const path = require('path');
const fetch = require('node-fetch');

// Create directories if needed
const imageDir = './public/uploads';
const optimizedDir = './public/uploads/optimized';

if (!fs.existsSync(imageDir)) {
  fs.mkdirSync(imageDir, { recursive: true });
}

if (!fs.existsSync(optimizedDir)) {
  fs.mkdirSync(optimizedDir, { recursive: true });
}

// Connect to database
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
});

/**
 * Get all shows with custom images that need optimization
 */
async function getShowsWithCustomImages() {
  const query = `
    SELECT id, name, image_url 
    FROM tv_shows 
    WHERE image_url IS NOT NULL 
      AND image_url NOT LIKE '%/uploads/optimized/%'
      AND image_url NOT LIKE '%m.media-amazon.com%'
      AND image_url NOT LIKE '%omdbapi.com%'
  `;
  
  const result = await pool.query(query);
  return result.rows;
}

/**
 * Download or copy image from URL or local path
 */
async function getImage(imageUrl, showId) {
  try {
    // Handle local file paths
    if (imageUrl.startsWith('/')) {
      // Try different possible locations
      const possiblePaths = [
        path.join('public', imageUrl),
        path.join('public', 'uploads', path.basename(imageUrl)),
        path.join('public', 'custom-images', path.basename(imageUrl)),
        path.join('public', 'images', path.basename(imageUrl)),
        path.join('attached_assets', path.basename(imageUrl)),
        imageUrl.substring(1) // Try without leading slash
      ];
      
      for (const localPath of possiblePaths) {
        if (fs.existsSync(localPath)) {
          console.log(`Found local image at ${localPath}`);
          
          // Create a copy in uploads directory
          const timestamp = Date.now();
          const uniqueFilename = `show-${showId}-${timestamp}${path.extname(localPath) || '.jpg'}`;
          const tempPath = path.join(imageDir, uniqueFilename);
          
          fs.copyFileSync(localPath, tempPath);
          return tempPath;
        }
      }
      
      console.log(`Could not find local image: ${imageUrl}`);
      return null;
    }
    
    // Download remote URLs
    if (imageUrl.startsWith('http')) {
      try {
        const response = await fetch(imageUrl);
        if (!response.ok) {
          console.error(`Failed to download: ${response.status}`);
          return null;
        }
        
        const buffer = await response.buffer();
        const timestamp = Date.now();
        const uniqueFilename = `show-${showId}-${timestamp}.jpg`;
        const tempPath = path.join(imageDir, uniqueFilename);
        
        fs.writeFileSync(tempPath, buffer);
        return tempPath;
      } catch (error) {
        console.error(`Download error: ${error.message}`);
        return null;
      }
    }
    
    return null;
  } catch (error) {
    console.error(`Error getting image: ${error.message}`);
    return null;
  }
}

/**
 * Optimize image for web use
 */
async function optimizeImage(filePath, showId) {
  try {
    const filename = path.basename(filePath, path.extname(filePath));
    const optimizedFilename = `${filename}-optimized.jpg`;
    const optimizedPath = path.join(optimizedDir, optimizedFilename);
    
    // Get image metadata
    const metadata = await sharp(filePath).metadata();
    const width = metadata.width || 800;
    const height = metadata.height || 600;
    
    // Target portrait-style dimensions
    let targetWidth, targetHeight;
    
    if (height >= width) {
      // Already portrait
      targetWidth = Math.min(width, 600);
      targetHeight = Math.round((targetWidth / width) * height);
      
      // Cap height for very tall images
      if (targetHeight > 900) {
        targetHeight = 900;
        targetWidth = Math.round((targetHeight / height) * width);
      }
    } else {
      // Convert landscape to portrait-friendly
      targetHeight = Math.min(height, 800);
      targetWidth = Math.min(width, Math.round(targetHeight * 0.75));
    }
    
    // Optimize the image
    await sharp(filePath)
      .resize(targetWidth, targetHeight, {
        fit: 'contain',
        background: { r: 255, g: 255, b: 255, alpha: 1 }
      })
      .jpeg({ quality: 85, progressive: true })
      .toFile(optimizedPath);
    
    console.log(`Optimized to ${targetWidth}x${targetHeight}`);
    
    // Return web path
    return `/uploads/optimized/${optimizedFilename}`;
  } catch (error) {
    console.error(`Optimization error: ${error.message}`);
    return null;
  }
}

/**
 * Save the new optimized image path to the database
 */
async function updateShowImage(showId, optimizedUrl) {
  try {
    await pool.query(
      'UPDATE tv_shows SET image_url = $1 WHERE id = $2',
      [optimizedUrl, showId]
    );
    
    // Also update custom image map
    try {
      const customImageMap = JSON.parse(fs.readFileSync('./customImageMap.json', 'utf8'));
      customImageMap[showId] = optimizedUrl;
      fs.writeFileSync('./customImageMap.json', JSON.stringify(customImageMap, null, 2));
    } catch (e) {
      console.log('Note: Could not update customImageMap.json');
    }
    
    return true;
  } catch (error) {
    console.error(`Database update error: ${error.message}`);
    return false;
  }
}

/**
 * Main optimization function
 */
async function optimizeAllImages() {
  console.log('Starting SEO image optimization...');
  
  try {
    // Get shows that need optimization
    const shows = await getShowsWithCustomImages();
    console.log(`Found ${shows.length} shows with custom images to optimize`);
    
    let optimized = 0;
    let skipped = 0;
    let errors = 0;
    
    // Process each show
    for (const show of shows) {
      try {
        console.log(`\nProcessing: ${show.name} (ID: ${show.id})`);
        
        // Get image file
        const imagePath = await getImage(show.image_url, show.id);
        if (!imagePath) {
          console.log(`Skipping - could not access image for ${show.name}`);
          skipped++;
          continue;
        }
        
        // Optimize image
        const optimizedUrl = await optimizeImage(imagePath, show.id);
        if (!optimizedUrl) {
          console.error(`Failed to optimize image for ${show.name}`);
          errors++;
          continue;
        }
        
        // Update in database
        const updated = await updateShowImage(show.id, optimizedUrl);
        if (updated) {
          console.log(`✅ Successfully optimized image for ${show.name}`);
          optimized++;
        } else {
          console.error(`❌ Failed to update database for ${show.name}`);
          errors++;
        }
        
        // Clean up temp file
        try {
          if (imagePath.startsWith(imageDir)) {
            fs.unlinkSync(imagePath);
          }
        } catch (e) {
          // Ignore cleanup errors
        }
        
      } catch (error) {
        console.error(`Error processing ${show.name}: ${error.message}`);
        errors++;
      }
    }
    
    console.log('\nOptimization complete:');
    console.log(`✅ Optimized: ${optimized}`);
    console.log(`⏭️ Skipped: ${skipped}`);
    console.log(`❌ Errors: ${errors}`);
    console.log(`📊 Total processed: ${shows.length}`);
    
  } catch (error) {
    console.error('Fatal error:', error);
  } finally {
    await pool.end();
  }
}

// Run the optimization
optimizeAllImages().catch(console.error);
</file>

<file path="optimize-seo-images.mjs">
/**
 * Script to optimize all custom images in the database for better SEO
 */
import { pool } from './server/db.js';
import sharp from 'sharp';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import fetch from 'node-fetch';

// Get directory name for ES modules
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Create directories if needed
const imageDir = path.join(__dirname, 'public/uploads');
const optimizedDir = path.join(__dirname, 'public/uploads/optimized');

if (!fs.existsSync(imageDir)) {
  fs.mkdirSync(imageDir, { recursive: true });
}

if (!fs.existsSync(optimizedDir)) {
  fs.mkdirSync(optimizedDir, { recursive: true });
}

/**
 * Get all shows with custom images that need optimization
 */
async function getShowsWithCustomImages() {
  const query = `
    SELECT id, name, image_url 
    FROM tv_shows 
    WHERE image_url IS NOT NULL 
      AND image_url NOT LIKE '%/uploads/optimized/%'
      AND image_url NOT LIKE '%m.media-amazon.com%'
      AND image_url NOT LIKE '%omdbapi.com%'
  `;
  
  const result = await pool.query(query);
  return result.rows;
}

/**
 * Download or copy image from URL or local path
 */
async function getImage(imageUrl, showId) {
  try {
    // Handle local file paths
    if (imageUrl.startsWith('/')) {
      // Try different possible locations
      const possiblePaths = [
        path.join(__dirname, 'public', imageUrl),
        path.join(__dirname, 'public', 'uploads', path.basename(imageUrl)),
        path.join(__dirname, 'public', 'custom-images', path.basename(imageUrl)),
        path.join(__dirname, 'public', 'images', path.basename(imageUrl)),
        path.join(__dirname, 'attached_assets', path.basename(imageUrl)),
        path.join(__dirname, imageUrl.substring(1)) // Try without leading slash
      ];
      
      for (const localPath of possiblePaths) {
        if (fs.existsSync(localPath)) {
          console.log(`Found local image at ${localPath}`);
          
          // Create a copy in uploads directory
          const timestamp = Date.now();
          const uniqueFilename = `show-${showId}-${timestamp}${path.extname(localPath) || '.jpg'}`;
          const tempPath = path.join(imageDir, uniqueFilename);
          
          fs.copyFileSync(localPath, tempPath);
          return tempPath;
        }
      }
      
      console.log(`Could not find local image: ${imageUrl}`);
      return null;
    }
    
    // Download remote URLs
    if (imageUrl.startsWith('http')) {
      try {
        const response = await fetch(imageUrl);
        if (!response.ok) {
          console.error(`Failed to download: ${response.status}`);
          return null;
        }
        
        const buffer = await response.buffer();
        const timestamp = Date.now();
        const uniqueFilename = `show-${showId}-${timestamp}.jpg`;
        const tempPath = path.join(imageDir, uniqueFilename);
        
        fs.writeFileSync(tempPath, buffer);
        return tempPath;
      } catch (error) {
        console.error(`Download error: ${error.message}`);
        return null;
      }
    }
    
    return null;
  } catch (error) {
    console.error(`Error getting image: ${error.message}`);
    return null;
  }
}

/**
 * Optimize image for web use
 */
async function optimizeImage(filePath, showId) {
  try {
    const filename = path.basename(filePath, path.extname(filePath));
    const optimizedFilename = `${filename}-optimized.jpg`;
    const optimizedPath = path.join(optimizedDir, optimizedFilename);
    
    // Get image metadata
    const metadata = await sharp(filePath).metadata();
    const width = metadata.width || 800;
    const height = metadata.height || 600;
    
    // Target portrait-style dimensions
    let targetWidth, targetHeight;
    
    if (height >= width) {
      // Already portrait
      targetWidth = Math.min(width, 600);
      targetHeight = Math.round((targetWidth / width) * height);
      
      // Cap height for very tall images
      if (targetHeight > 900) {
        targetHeight = 900;
        targetWidth = Math.round((targetHeight / height) * width);
      }
    } else {
      // Convert landscape to portrait-friendly
      targetHeight = Math.min(height, 800);
      targetWidth = Math.min(width, Math.round(targetHeight * 0.75));
    }
    
    // Optimize the image
    await sharp(filePath)
      .resize(targetWidth, targetHeight, {
        fit: 'contain',
        background: { r: 255, g: 255, b: 255, alpha: 1 }
      })
      .jpeg({ quality: 85, progressive: true })
      .toFile(optimizedPath);
    
    console.log(`Optimized to ${targetWidth}x${targetHeight}`);
    
    // Return web path
    return `/uploads/optimized/${optimizedFilename}`;
  } catch (error) {
    console.error(`Optimization error: ${error.message}`);
    return null;
  }
}

/**
 * Save the new optimized image path to the database
 */
async function updateShowImage(showId, optimizedUrl) {
  try {
    await pool.query(
      'UPDATE tv_shows SET image_url = $1 WHERE id = $2',
      [optimizedUrl, showId]
    );
    
    // Also update custom image map
    try {
      const customImageMap = JSON.parse(fs.readFileSync('./customImageMap.json', 'utf8'));
      customImageMap[showId] = optimizedUrl;
      fs.writeFileSync('./customImageMap.json', JSON.stringify(customImageMap, null, 2));
    } catch (e) {
      console.log('Note: Could not update customImageMap.json');
    }
    
    return true;
  } catch (error) {
    console.error(`Database update error: ${error.message}`);
    return false;
  }
}

/**
 * Main optimization function
 */
async function optimizeAllImages() {
  console.log('Starting SEO image optimization...');
  
  try {
    // Get shows that need optimization
    const shows = await getShowsWithCustomImages();
    console.log(`Found ${shows.length} shows with custom images to optimize`);
    
    let optimized = 0;
    let skipped = 0;
    let errors = 0;
    
    // Process each show
    for (const show of shows) {
      try {
        console.log(`\nProcessing: ${show.name} (ID: ${show.id})`);
        
        // Get image file
        const imagePath = await getImage(show.image_url, show.id);
        if (!imagePath) {
          console.log(`Skipping - could not access image for ${show.name}`);
          skipped++;
          continue;
        }
        
        // Optimize image
        const optimizedUrl = await optimizeImage(imagePath, show.id);
        if (!optimizedUrl) {
          console.error(`Failed to optimize image for ${show.name}`);
          errors++;
          continue;
        }
        
        // Update in database
        const updated = await updateShowImage(show.id, optimizedUrl);
        if (updated) {
          console.log(`✅ Successfully optimized image for ${show.name}`);
          optimized++;
        } else {
          console.error(`❌ Failed to update database for ${show.name}`);
          errors++;
        }
        
        // Clean up temp file
        try {
          if (imagePath.startsWith(imageDir)) {
            fs.unlinkSync(imagePath);
          }
        } catch (e) {
          // Ignore cleanup errors
        }
        
      } catch (error) {
        console.error(`Error processing ${show.name}: ${error.message}`);
        errors++;
      }
    }
    
    console.log('\nOptimization complete:');
    console.log(`✅ Optimized: ${optimized}`);
    console.log(`⏭️ Skipped: ${skipped}`);
    console.log(`❌ Errors: ${errors}`);
    console.log(`📊 Total processed: ${shows.length}`);
    
  } catch (error) {
    console.error('Fatal error:', error);
  } finally {
    await pool.end();
  }
}

// Run the optimization
optimizeAllImages().catch(console.error);
</file>

<file path="client/src/pages/early-access.tsx">
import { useState, useEffect } from "react";
import { useLocation } from "wouter";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { LoginForm } from "@/components/LoginForm";
import { RegistrationForm } from "@/components/RegistrationForm";
import { useAuth } from "@/hooks/use-auth";

export default function EarlyAccessPage() {
  const [activeTab, setActiveTab] = useState("login");
  const { user } = useAuth();
  const [, setLocation] = useLocation();

  useEffect(() => {
    // If user is already logged in, don't do token check
    if (user) return;
    
    // Check if user has the early access token - redirect to token entry page if not
    const token = localStorage.getItem("earlyAccessToken");
    const expectedToken = "2025";
    
    if (!token || token !== expectedToken) {
      setLocation("/token-entry");
    }
  }, [setLocation, user]);

  // Redirect if user is already logged in
  useEffect(() => {
    if (user) {
      setLocation("/home");
    }
  }, [user, setLocation]);

  return (
    <div className="min-h-screen flex flex-col md:flex-row">
      {/* Left Column - Forms */}
      <div className="w-full md:w-1/2 flex items-center justify-center bg-gray-50 p-4">
        <div className="max-w-md w-full">
          <Card>
            <CardHeader className="space-y-1">
              <CardTitle className="text-2xl text-center font-bold">Early Access</CardTitle>
              <CardDescription className="text-center">
                Welcome to TV Tantrum's exclusive early access. Login or create an account to get started.
              </CardDescription>
            </CardHeader>
            <CardContent>
              <Tabs defaultValue="login" value={activeTab} onValueChange={setActiveTab}>
                <TabsList className="grid w-full grid-cols-2">
                  <TabsTrigger value="login">Login</TabsTrigger>
                  <TabsTrigger value="register">Register</TabsTrigger>
                </TabsList>
                <TabsContent value="login">
                  <LoginForm onSuccess={() => setLocation("/home")} />
                  <div className="mt-4 text-center text-sm">
                    <span className="text-muted-foreground">Don't have an account?</span>{" "}
                    <button 
                      className="text-primary hover:underline"
                      onClick={() => setActiveTab("register")}
                    >
                      Register here
                    </button>
                  </div>
                </TabsContent>
                <TabsContent value="register">
                  <RegistrationForm onSuccess={() => setLocation("/registration-pending")} />
                  <div className="mt-4 text-center text-sm">
                    <span className="text-muted-foreground">Already have an account?</span>{" "}
                    <button 
                      className="text-primary hover:underline"
                      onClick={() => setActiveTab("login")}
                    >
                      Login here
                    </button>
                  </div>
                </TabsContent>
              </Tabs>
            </CardContent>
          </Card>
          <div className="mt-4 text-center">
            <button 
              className="text-sm text-muted-foreground hover:underline"
              onClick={() => {
                localStorage.removeItem("earlyAccessToken");
                setLocation("/token-entry");
              }}
            >
              ← Back to token entry
            </button>
          </div>
        </div>
      </div>

      {/* Right Column - Hero Image & Info */}
      <div className="w-full md:w-1/2 bg-primary p-8 flex items-center justify-center">
        <div className="max-w-md text-white">
          <h1 className="text-3xl md:text-4xl font-bold mb-6">
            Making Children's TV Viewing a Better Experience
          </h1>
          <p className="text-lg mb-6">
            TV Tantrum helps parents navigate children's media by providing detailed sensory scores and 
            comparative analytics of popular shows.
          </p>
          <div className="space-y-4">
            <div className="flex items-start">
              <div className="bg-white/20 rounded-full p-1 mr-3 mt-1">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                  <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
                  <polyline points="22 4 12 14.01 9 11.01"></polyline>
                </svg>
              </div>
              <div>
                <h3 className="font-semibold">Sensory Impact Analysis</h3>
                <p className="text-sm text-white/80">Understand the stimulation level of each show</p>
              </div>
            </div>
            <div className="flex items-start">
              <div className="bg-white/20 rounded-full p-1 mr-3 mt-1">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                  <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
                  <polyline points="22 4 12 14.01 9 11.01"></polyline>
                </svg>
              </div>
              <div>
                <h3 className="font-semibold">Age-Appropriate Filtering</h3>
                <p className="text-sm text-white/80">Find shows that match your child's developmental stage</p>
              </div>
            </div>
            <div className="flex items-start">
              <div className="bg-white/20 rounded-full p-1 mr-3 mt-1">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                  <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
                  <polyline points="22 4 12 14.01 9 11.01"></polyline>
                </svg>
              </div>
              <div>
                <h3 className="font-semibold">Compare Shows</h3>
                <p className="text-sm text-white/80">Direct comparisons to make informed choices</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
</file>

<file path="client/src/pages/pre-launch-about.tsx">
import { Button } from "@/components/ui/button";
import { Link } from "wouter";
import { useEffect } from "react";

export default function PreLaunchAbout() {
  // Clear authentication data whenever about page loads
  useEffect(() => {
    // This will ensure no authentication check happens
    localStorage.removeItem("tvtantrum_auth");
    
    // Keep early access token for future use (but not auth data)
    if (!localStorage.getItem("earlyAccessToken")) {
      localStorage.removeItem("earlyAccessShown");
    }
    
    console.log("Pre-launch about page loaded, cleared authentication data from localStorage");
  }, []);
  return (
    <div className="min-h-screen bg-gradient-to-b from-background to-muted">
      {/* Header */}
      <header className="container mx-auto py-6 px-4 sm:px-6 flex justify-between items-center">
        <Link href="/">
          <div className="text-3xl font-bold text-primary cursor-pointer">TV Tantrum</div>
        </Link>
        <div className="flex space-x-2 sm:space-x-4">
          <Button variant="ghost" asChild>
            <Link href="/">Home</Link>
          </Button>
          <Button variant="ghost" asChild>
            <Link href="/faq">FAQ</Link>
          </Button>
          <Button variant="outline" className="text-primary border-primary hover:bg-primary/10" asChild>
            <Link href="/token-entry">Early Access</Link>
          </Button>
        </div>
      </header>

      {/* Main Content */}
      <div className="container mx-auto py-12 px-4 max-w-4xl">
        <h1 className="text-4xl font-bold mb-8 text-center">About TV Tantrum</h1>
        
        <div className="prose prose-lg max-w-none">
          <h2 className="text-2xl font-semibold mt-8 mb-4">Our Mission</h2>
          <p>
            TV Tantrum was created with a simple mission: to help parents and caregivers 
            make informed decisions about the children's TV shows their little ones watch. 
            We believe that understanding the sensory and developmental impact of media is 
            crucial for creating a balanced and healthy viewing experience.
          </p>
          
          <h2 className="text-2xl font-semibold mt-8 mb-4">What Makes Us Different</h2>
          <p>
            Unlike traditional content rating systems that focus primarily on age-appropriateness 
            and content warnings, TV Tantrum analyzes shows based on their sensory impact - 
            elements like animation style, scene frequency, music tempo, dialogue intensity, 
            and overall stimulation level. These factors can significantly affect how children 
            process and respond to media.
          </p>

          <div className="bg-primary/10 p-6 rounded-lg my-8">
            <h3 className="text-xl font-medium mb-2">Our Comprehensive Analysis Includes:</h3>
            <ul className="mt-4 space-y-2">
              <li><strong>Stimulation Score:</strong> An overall rating of how stimulating a show is</li>
              <li><strong>Sensory Metrics:</strong> Detailed breakdowns of visual pacing, sound effects, and music</li>
              <li><strong>Thematic Analysis:</strong> Identification of educational themes and values</li>
              <li><strong>Age-Range Guidance:</strong> Developmentally appropriate age recommendations</li>
              <li><strong>Parent Reviews:</strong> Real feedback from other caregivers</li>
            </ul>
          </div>

          <h2 className="text-2xl font-semibold mt-8 mb-4">Our Story</h2>
          <p>
            TV Tantrum began when a group of parents, child development specialists, and media 
            experts came together with a shared concern: the lack of detailed information about 
            how children's shows affect developing minds. After countless hours of research, 
            analysis, and testing with real families, we built a platform that gives parents 
            the insights they need to make media choices aligned with their child's unique 
            sensory profile.
          </p>
          
          <h2 className="text-2xl font-semibold mt-8 mb-4">Join Our Community</h2>
          <p>
            We're building a community of thoughtful parents and caregivers who care deeply 
            about the media their children consume. By joining our pre-launch list, you'll be 
            the first to access our full platform when it launches, and you'll help shape the 
            future of how families interact with children's media.
          </p>
        </div>

        <div className="mt-12 text-center">
          <Button size="lg" className="px-8 py-6 text-lg" asChild>
            <Link href="/#register">Join the Waitlist</Link>
          </Button>
        </div>
      </div>

      {/* Footer */}
      <footer className="bg-muted py-12 mt-20">
        <div className="container mx-auto px-4">
          <div className="text-center text-muted-foreground">
            <p>© {new Date().getFullYear()} TV Tantrum. All rights reserved.</p>
            <p className="mt-2">Helping parents make informed choices about children's media.</p>
          </div>
        </div>
      </footer>
    </div>
  );
}
</file>

<file path="server/db.ts">
import pg from 'pg';
import { drizzle } from 'drizzle-orm/node-postgres';
import * as schema from "@shared/schema";

const { Pool } = pg;

if (!process.env.DATABASE_URL) {
  throw new Error(
    "DATABASE_URL must be set. Did you forget to provision a database?",
  );
}

// Configure the pool with better error handling
const poolConfig = {
  connectionString: process.env.DATABASE_URL,
  max: 20, // Maximum number of clients in the pool
  idleTimeoutMillis: 30000, // How long a client is allowed to remain idle before being closed
  connectionTimeoutMillis: 5000, // Maximum time to wait for a connection
  ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
};

export const pool = new Pool(poolConfig);

// Add error handling for the pool
pool.on('error', (err) => {
  console.error('Unexpected error on idle client', err);
  // Don't exit process in development to prevent server crashes during development
  if (process.env.NODE_ENV === 'production') {
    process.exit(-1);
  }
});

// Ping the database to verify connection
pool.query('SELECT NOW()')
  .then(res => console.log('Database connected successfully at:', res.rows[0].now))
  .catch(err => console.error('Database connection error:', err));

// Initialize Drizzle ORM with the pool
export const db = drizzle(pool, { schema });

// Export a helper function to check DB connection
export async function checkDatabaseConnection() {
  try {
    // First check if users table exists
    const tablesCheck = await pool.query(`
      SELECT EXISTS (
        SELECT FROM information_schema.tables 
        WHERE table_name = 'users'
      );
    `);
    
    if (!tablesCheck.rows[0].exists) {
      console.log('Users table does not exist yet, creating tables...');
      // Return true even though table doesn't exist yet, we'll handle schema creation elsewhere
      return true;
    }
    
    const result = await pool.query('SELECT COUNT(*) FROM users');
    console.log(`Database connection verified. User count: ${result.rows[0].count}`);
    return true;
  } catch (error) {
    console.error('Database connection check failed:', error);
    // In development mode, we'll continue even if there's an error
    if (process.env.NODE_ENV === 'development') {
      console.log('Continuing in development mode despite database error');
      return true;
    }
    return false;
  }
}
</file>

<file path="server/index.ts">
import express, { type Request, Response, NextFunction } from "express";
import { createServer, type Server } from "http";
import { registerRoutes } from "./routes";
import { setupVite, serveStatic, log } from "./vite";
import { checkDatabaseConnection } from "./db";

const app = express();
app.use(express.json());
app.use(express.urlencoded({ extended: false }));

app.use((req, res, next) => {
  const start = Date.now();
  const path = req.path;
  let capturedJsonResponse: Record<string, any> | undefined = undefined;

  const originalResJson = res.json;
  res.json = function (bodyJson, ...args) {
    capturedJsonResponse = bodyJson;
    return originalResJson.apply(res, [bodyJson, ...args]);
  };

  res.on("finish", () => {
    const duration = Date.now() - start;
    if (path.startsWith("/api")) {
      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;
      if (capturedJsonResponse) {
        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;
      }

      if (logLine.length > 80) {
        logLine = logLine.slice(0, 79) + "…";
      }

      log(logLine);
    }
  });

  next();
});

(async () => {
  // Check database connection before starting the server
  await checkDatabaseConnection();
  
  const server = await registerRoutes(app);

  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {
    const status = err.status || err.statusCode || 500;
    const message = err.message || "Internal Server Error";

    res.status(status).json({ message });
    throw err;
  });

  // importantly only setup vite in development and after
  // setting up all the other routes so the catch-all route
  // doesn't interfere with the other routes
  if (app.get("env") === "development") {
    await setupVite(app, server);
  } else {
    serveStatic(app);
  }

  // ALWAYS serve the app on port 5000
  // this serves both the API and the client.
  // It is the only port that is not firewalled.
  const port = 5000;
  
  // Try to close any existing connections
  const existingServer = await new Promise<Server>((resolve) => {
    const testServer = createServer();
    testServer.listen(port, "0.0.0.0", () => {
      testServer.close(() => resolve(server));
    });
    testServer.on('error', () => resolve(server));
  });

  existingServer.listen({
    port,
    host: "0.0.0.0",
    reusePort: true,
  }, () => {
    log(`serving on port ${port}`);
  });
})();
</file>

<file path="package.json">
{
  "name": "rest-express",
  "version": "1.0.0",
  "type": "module",
  "license": "MIT",
  "scripts": {
    "dev": "NODE_ENV=development tsx server/index.ts",
    "build": "vite build && esbuild server/index.ts --platform=node --packages=external --bundle --format=esm --outdir=dist",
    "start": "NODE_ENV=production node dist/index.js",
    "check": "tsc",
    "db:push": "drizzle-kit push"
  },
  "dependencies": {
    "@hookform/resolvers": "^3.10.0",
    "@jridgewell/trace-mapping": "^0.3.25",
    "@neondatabase/serverless": "^0.10.4",
    "@radix-ui/react-accordion": "^1.2.4",
    "@radix-ui/react-alert-dialog": "^1.1.7",
    "@radix-ui/react-aspect-ratio": "^1.1.3",
    "@radix-ui/react-avatar": "^1.1.4",
    "@radix-ui/react-checkbox": "^1.1.5",
    "@radix-ui/react-collapsible": "^1.1.4",
    "@radix-ui/react-context-menu": "^2.2.7",
    "@radix-ui/react-dialog": "^1.1.7",
    "@radix-ui/react-dropdown-menu": "^2.1.7",
    "@radix-ui/react-hover-card": "^1.1.7",
    "@radix-ui/react-label": "^2.1.3",
    "@radix-ui/react-menubar": "^1.1.7",
    "@radix-ui/react-navigation-menu": "^1.2.6",
    "@radix-ui/react-popover": "^1.1.7",
    "@radix-ui/react-progress": "^1.1.3",
    "@radix-ui/react-radio-group": "^1.2.4",
    "@radix-ui/react-scroll-area": "^1.2.4",
    "@radix-ui/react-select": "^2.1.7",
    "@radix-ui/react-separator": "^1.1.3",
    "@radix-ui/react-slider": "^1.2.4",
    "@radix-ui/react-slot": "^1.2.0",
    "@radix-ui/react-switch": "^1.1.4",
    "@radix-ui/react-tabs": "^1.1.4",
    "@radix-ui/react-toast": "^1.2.7",
    "@radix-ui/react-toggle": "^1.1.3",
    "@radix-ui/react-toggle-group": "^1.1.3",
    "@radix-ui/react-tooltip": "^1.2.0",
    "@sendgrid/mail": "^8.1.5",
    "@tailwindcss/vite": "^4.1.3",
    "@tanstack/react-query": "^5.60.5",
    "@types/multer": "^1.4.12",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "cmdk": "^1.1.1",
    "connect-pg-simple": "^10.0.0",
    "csv-parse": "^5.6.0",
    "date-fns": "^3.6.0",
    "drizzle-orm": "^0.39.1",
    "drizzle-zod": "^0.7.0",
    "embla-carousel-react": "^8.6.0",
    "express": "^4.21.2",
    "express-session": "^1.18.1",
    "framer-motion": "^11.13.1",
    "input-otp": "^1.4.2",
    "lucide-react": "^0.453.0",
    "memorystore": "^1.6.7",
    "multer": "^1.4.5-lts.2",
    "next-themes": "^0.4.6",
    "node-fetch": "^3.3.2",
    "octokit": "^4.1.3",
    "passport": "^0.7.0",
    "passport-local": "^1.0.0",
    "pg": "^8.16.0",
    "react": "^18.3.1",
    "react-day-picker": "^8.10.1",
    "react-dom": "^18.3.1",
    "react-hook-form": "^7.55.0",
    "react-icons": "^5.4.0",
    "react-resizable-panels": "^2.1.7",
    "recharts": "^2.15.2",
    "sharp": "^0.34.1",
    "tailwind-merge": "^2.6.0",
    "tailwindcss-animate": "^1.0.7",
    "tw-animate-css": "^1.2.5",
    "vaul": "^1.1.2",
    "wouter": "^3.3.5",
    "ws": "^8.18.0",
    "zod": "^3.24.2",
    "zod-validation-error": "^3.4.0"
  },
  "devDependencies": {
    "@replit/vite-plugin-cartographer": "^0.1.2",
    "@replit/vite-plugin-runtime-error-modal": "^0.0.3",
    "@tailwindcss/typography": "^0.5.15",
    "@types/connect-pg-simple": "^7.0.3",
    "@types/express": "4.17.21",
    "@types/express-session": "^1.18.1",
    "@types/node": "20.16.11",
    "@types/passport": "^1.0.17",
    "@types/passport-local": "^1.0.38",
    "@types/react": "^18.3.11",
    "@types/react-dom": "^18.3.1",
    "@types/ws": "^8.5.13",
    "@vitejs/plugin-react": "^4.3.2",
    "autoprefixer": "^10.4.20",
    "drizzle-kit": "^0.30.4",
    "esbuild": "^0.25.0",
    "postcss": "^8.4.47",
    "tailwindcss": "^3.4.17",
    "tsx": "^4.19.1",
    "typescript": "5.6.3",
    "vite": "^5.4.14"
  },
  "optionalDependencies": {
    "bufferutil": "^4.0.8"
  }
}
</file>

<file path="update-show-metrics.js">
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import { parse } from 'csv-parse/sync';

// Get directory name in ESM
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Process to normalize keys and values
function normalizeKey(key) {
  // Convert headers from CSV to match our camelCase properties
  const keyMap = {
    'Interactivity Level': 'interactivityLevel',
    'Animation Styles': 'animationStyle',
    'Dialougue Intensity': 'dialogueIntensity',
    'Sound Effects': 'soundEffectsLevel',
    'Music Tempo': 'musicTempo',
    'Total Music': 'totalMusicLevel',
    'Total Sound Effect Time': 'totalSoundEffectTimeLevel',
    'Scene Frequency': 'sceneFrequency',
    'Stimulation Score': 'stimulationScore',
    'Target Age Group': 'ageRange',
    'Themes, Teachings, Guidance': 'themes'
  };
  
  return keyMap[key] || key;
}

function normalizeValue(key, value) {
  if (!value) return value;
  
  // If it's the stimulation score, ensure it's a whole number
  if (key === 'stimulationScore') {
    // Make sure it's a whole number by rounding
    const numericValue = parseFloat(value);
    if (isNaN(numericValue)) return 3; // Default value if parsing fails
    
    // Always round to nearest whole number
    // This ensures no decimal points or half-values
    const roundedValue = Math.round(numericValue);
    console.log(`Rounded stimulation score: ${numericValue} → ${roundedValue}`);
    return roundedValue;
  }
  
  // Map values to the expected format for the application
  // The application uses different conventions than the CSV in some cases
  
  // For metrics that have "Medium"/"Moderate" differences
  if (['interactivityLevel', 'dialogueIntensity', 'soundEffectsLevel', 
       'sceneFrequency', 'musicTempo', 'totalMusicLevel', 
       'totalSoundEffectTimeLevel'].includes(key)) {
    
    // Standardize format to match what's expected in the application
    if (value === 'Medium') return 'Moderate';
    if (value === 'Low-Moderate') return 'Low-Moderate';
    if (value === 'Moderate-High') return 'Moderate-High';
    if (value === 'Very Low') return 'Very Low';
    if (value === 'Low to Moderate') return 'Low-Moderate';
  }
  
  return value;
}

function processThemes(themes) {
  if (!themes) return [];
  return themes.split(',').map(theme => theme.trim());
}

// Function to normalize show names to match between CSV and database
function normalizeShowName(name) {
  // Map variations of show names to match the database entries
  const nameMap = {
    "Octonauts": "The Octonauts",
    "The Big Comfy Couch (1992-2006)": "The Big Comfy Couch",
    "Daniel Tiger": "Daniel Tiger's Neighbourhood",
    "Numberblocks": "Numberblocks (2017-present)",
    "Bluey": "Bluey 2018-present",
    "Sesame Street": "Sesame Street (1969-present)",
    "Peppa Pig": "Peppa pig (2004-present)",
    "Paw Patrol": "Paw patrol",
    "Blue's Clues & You! (2019)": "Blue's Clues & You! (2019)",
    "Bob the Builder (2015-2018)": "Bob the Builder (2015-2018)",
    "Boba the Show (2021-present)": "Booba", // Closest match
    "Charlie's Colorform City": "Charlie's Colorforms City",
    "Gecko's Garage": "Gecko's Garage",
    "Hudson's Playground": "Hudson's Playground",
    "Leo the wild live ranger": "Leo the wildlife ranger",
    "LifeKids (Blinky's Bible adventures)": "LifeKids (Blinky's Bible adventures)",
    "MyGoSignLanguageforKids-ASL": "MyGov Sign Language for Kids-ASL",
    "Superkitties": "Super Kitties",
    "Tumble leaf": "Tumble leaf",
    "Fireman Sam (2008)": "Fireman Sam (2008)",
    "Creature Cases": "The Creature Cases", 
    "Gecko's Garage": "Gecko's Garage",
    "Hudson's Playground": "Hudson's Playground",
    "LifeKids (Blinky's Bible adventures)": "LifeKids (Blinky's Bible adventures)"
  };
  
  // Also clean up any extra spaces in the names
  const trimmedName = name.trim();
  
  return nameMap[trimmedName] || trimmedName;
}

// TV show ID mapping from the database (based on the SQL query)
const tvShowIdsMap = {
  "A for Adley": 1,
  "Ada Twist, Scientist": 2,
  "Adventure Agents": 3,
  "Adventure Time (2010-2018)": 4,
  "Akili and Me": 5,
  "Alma's Way": 6,
  "Alphablocks": 7,
  "Amakandu": 8,
  "Andy's Dinosaur Adventures": 9,
  "Angelina Ballerina (2008-2010)": 10,
  "Art Kids TV": 11,
  "Arthur": 12,
  "Avatar: The Last Airbender": 13,
  "Baba blast": 14,
  "Babar": 15,
  "Babblarna": 16,
  "Badanamu": 17,
  "Bananas in Pyjamas (2011-2013)": 18,
  "Barbapapa (1973-2003)": 19,
  "Barney & Friends": 20,
  "Be Cool, Scooby-Doo! (2015–2018)": 21,
  "Bear in the Big Blue House": 22,
  "Beep and Mort": 23,
  "Ben & Holly's Little Kingdom (2009-2013)": 24,
  "Between the Lions": 25,
  "Bill Nye the Science Guy": 26,
  "Bing": 27,
  "Blippi": 28,
  "Blue's Clues (1996-2007)": 29,
  "Blue's Clues & You! (2019)": 30,
  "Bluey 2018-present": 31,
  "Bob the Builder (1997-2015)": 32,
  "Bob the Builder (2015-2018)": 33,
  "Booba": 34,
  "Bounce Patrol": 35,
  "Brain Candy TV": 36,
  "Bubble Guppies": 37,
  "Builder Brothers' Dream Factory": 38,
  "Caillou (1997-2010)": 39,
  "Caitie's Classroom (SuperSimplePlay)": 40,
  "Canticos (2016-present)": 41,
  "Captain Planet and the Planeteers (1990-1996)": 42,
  "Care Bears: Unlock the Magic (2019-present)": 43,
  "Casper Babypants": 44,
  "Charlie's Colorforms City": 45,
  "Chip and Potato": 46,
  "City of friends": 47,
  "City Vehicles": 48,
  "Clifford the Big Red Dog (2000)": 49,
  "Clifford the Big Red Dog (2019)": 50,
  "Cloudbabies": 51,
  "CoasterFan2105": 52,
  "Cocomelon": 53,
  "Codename: Kids Next Door": 54,
  "Colourblocks": 55,
  "Cosmic kids yoga": 56,
  "Courage the Cowardly Dog (1999-2002)": 57,
  "Cowboy Jack": 58,
  "Curious George (2006-present)": 59,
  "Cyberchase (2002-present)": 60,
  "Daniel Tiger's Neighbourhood": 61,
  "Danny Go!": 62,
  "Davey and Goliath": 63,
  "De Zoete Zusjes": 64,
  "DG Bible Songs": 65,
  "Diego": 66,
  "Digimon: Digital Monsters": 67,
  "Dino Dana": 68,
  "Dino Ranch": 69,
  "Dinosaur train": 70,
  "Dinotrux": 71,
  "Doc McStuffins": 72,
  "Doggyland": 73,
  "Dora the Explorer (2000-2014)": 74,
  "Dragon Ball": 75,
  "Dragon Tales": 76,
  "Duck & Goose": 77,
  "Ed Edd n Eddy": 78,
  "Elena of Avalor": 79,
  "Elmo's World": 80,
  "English Tree": 81,
  "Ernst, Bobbie en de rest": 82,
  "Fireman Sam (1987)": 83,
  "Fireman Sam (2008)": 84,
  "Franklin (1997-2004)": 85,
  "Franklin and Friends (2011)": 86,
  "Frog and Toad": 87,
  "Gabby's Dollhouse": 88,
  "Gecko's Garage": 89,
  "Genevieve playhouse": 90,
  "Get Rolling with Otis": 91,
  "Gigantosaurus": 92,
  "GirlsTtoyZZ": 93,
  "Go Go! Cory Carson": 94,
  "Go, Dog. Go!": 95,
  "Gracie's Corner": 96,
  "Grizzy and the Lemmings (2016-present)": 97,
  "Guess How Much I Love You": 98,
  "Gullah, Gullah Island": 99,
  "Gumby: The Movie": 100,
  "Handyman Hal": 101,
  "He-Man and the Masters of the Universe": 102,
  "Helper Cars": 103,
  "Hero Elementary": 104,
  "Hey Bear Sensory": 105,
  "Hey Duggee": 106,
  "Horrid Henry": 107,
  "Hudson's Playground": 108,
  "If You Give a Mouse a Cookie(2015-present)": 109,
  "In the Night Garden (07-09)": 110,
  "It's a Big Big World": 111,
  "Johnson & Friends": 112,
  "JoJo & Gran Gran": 113,
  "Juf Roos": 114,
  "JunyTony - Songs and Stories": 115,
  "KarazahChannel": 116,
  "Katuri tv": 117,
  "Kazwa and Bilal": 118,
  "Kid-E-Cats": 119,
  "Kids 2 kids": 120,
  "Kipper(1997-2000)": 121,
  "Kiri and Lou": 122,
  "Laurie Berkner": 123,
  "Lazytown": 124,
  "Leo the Truck": 125,
  "Leo the wildlife ranger": 126,
  "Les' Copaque Production - Upin & Ipin": 127,
  "LifeKids (Blinky's Bible adventures)": 128,
  "Listener Kids": 129,
  "Little Angel": 130,
  "Little Bear": 131,
  "Little Einsteins (2005-2009)": 132,
  "Llama Llama (2018-2019)": 133,
  "Lucas the spider(2021)": 134,
  "Lyla in the loop": 135,
  "Maddie's Do You Know?": 136,
  "Maggie and the Ferocious Beast": 137,
  "maizenofficial": 138,
  "Marcus Level": 139,
  "Masha and the Bear": 140,
  "Mickey Mouse Clubhouse": 141,
  "Miffy and friends": 142,
  "Milo": 143,
  "Minno - Bible Stories for Kids": 144,
  "Minuscule": 145,
  "Mira, Royal Detective": 146,
  "Miss Katie Sings": 147,
  "Miss Moni": 148,
  "Miss Rachel": 149,
  "Mister Maker": 150,
  "Mister Rogers' Neighbourhood": 151,
  "Molly of Denali": 152,
  "Moominvalley": 153,
  "Moon and Me": 154,
  "Mother goose club": 155,
  "Mr Bean Cartoon": 156,
  "Mr. Monkey, Monkey Mechanic": 157,
  "MyGov Sign Language for Kids-ASL": 158,
  "Nanalan": 159,
  "Nick Cope's Popcast": 160,
  "Ninja Kids": 161,
  "Ninjago": 162,
  "Noddy Original Series (1998)": 163,
  "Noddy, Toyland Detective (2016)": 164,
  "Noodle & Pals": 165,
  "Noodle and Bun": 166,
  "Numberblocks (2017-present)": 167,
  "Odd Squad": 168,
  "Oggy and the Cockroaches": 169,
  "Olivia": 170,
  "Omar and hana": 171,
  "One Piece": 172,
  "Oswald": 173,
  "Out of the Box": 174,
  "Pajanimals": 175,
  "Paw patrol": 176,
  "Peg+Cat": 177,
  "Peppa pig (2004-present)": 178,
  "Pete The Cat": 179,
  "Peter Rabbit(2012-2016)": 180,
  "Phineas and Ferb": 181,
  "Pingu": 182,
  "Pinkalicious & Peterrific": 183,
  "Pip and Posy": 184,
  "Pipi Mā": 185,
  "PJ Masks": 186,
  "Planet earth": 187,
  "Play School": 188,
  "Pocoyo": 189,
  "Pokemon": 190,
  "Postman Pat (1981–2008)": 191,
  "Postman Pat: Special Delivery Service (2008–2017)": 192,
  "Puffin Rock": 193,
  "Puppy Dog Pals": 194,
  "Raa Raa the Noisy Lion": 195,
  "Rainbow Ruby": 196,
  "Rapunzel's Tangled Adventure": 197,
  "RC Action Channel": 198,
  "Reading rainbow": 199,
  "Ready, Steady, Wiggle!": 200,
  "Reef School": 201,
  "Rhyme Time Town": 202,
  "Robocar Poli": 203,
  "Rolie Polie Olie": 204,
  "Rosie & Jim": 205,
  "Rosie's Rules": 206,
  "Rugrats": 207,
  "Rugrats (2021 Reboot)": 208,
  "Ryan's World": 209,
  "Sagwa, the Chinese Siamese Cat": 210,
  "Sarah and Duck": 211,
  "Scooby-Doo, Where Are You! (1969–1970)": 212,
  "Sea of love": 213,
  "Sesame Street (1969-present)": 214,
  "Shaun the Sheep": 215,
  "Sid the Science Kid": 216,
  "Silly Miss Lily (Paisley's Corner)": 217,
  "Simon": 218,
  "Something Special: Hello Mr Tumble": 219,
  "Sonic the Hedgehog": 220,
  "Spanish with liz": 221,
  "Spidey and his amazing friends (2021-present)": 222,
  "Spirit Riding Free": 223,
  "SpongeBob SquarePants": 224,
  "Star Wars: Young Jedi Adventures": 225,
  "Stella and Sam": 226,
  "Steve and Maggie": 227,
  "Stick man": 228,
  "Stillwater (2020-present)": 229,
  "Story Time Book: Read-Along": 230,
  "Storybots": 231,
  "Super Monsters": 232,
  "SUPER SIMPLE SONG": 233,
  "Super Why!": 234,
  "Superbook": 235,
  "Super Kitties": 236,
  "Superworm": 237,
  "Takaro Tribe": 238,
  "Tangled: Before Ever After": 239,
  "Tayo the Little Bus": 240,
  "Team Umizoomi": 241,
  "Teen Titans Go!": 242,
  "Teletubbies (2015-2018)": 243,
  "Teletubbies (1997-2001)": 244,
  "The Adventures of Abney & Teal": 245,
  "The Adventures of Paddington (2019)": 246,
  "The Adventures of Paddington Bear Original Series (1997–2000)": 247,
  "The Adventures of Teddy Ruxpin": 248,
  "The adventures of the gummi bears": 249,
  "The Backyardigans": 250,
  "The Bear Construction": 251,
  "The Bernstein Bears": 252,
  "The Big Comfy Couch": 253,
  "The Busy World of Richard Scarry": 254,
  "The Care Bears (1985-1988)": 255,
  "The Cat in the Hat": 256,
  "The Clangers (BBC)": 257,
  "The Crocodile Hunter (1996-2007):": 258,
  "The Enchanted World of Brambly Hedge": 259,
  "The Epic Tales of Captain Underpants (2018-present)": 260,
  "The fixies": 261,
  "The Land Before Time (2016)": 262,
  "The Land of Boggs": 263,
  "The Lion Guard": 264,
  "The Little Mermaid 1992 series": 265,
  "The Magic School Bus Rides Again": 266,
  "The Magic School Bus (1994-1997)": 267,
  "The Mik Maks": 268,
  "The New Adventures of Winnie the Pooh": 269,
  "The Octonauts": 270,
  "The Oddbods Show": 271,
  "The Snoopy Show": 272,
  "The Stinky & Dirty Show (2016-2019)": 273,
  "The Wiggles": 274,
  "Theodore Tugboat": 275,
  "Thomas & Friends (1984-2008)": 276,
  "Thomas & Friends: All Engines Go (2021)": 277,
  "Time for school": 278,
  "Tinga Tinga Tales": 279,
  "Tom & Jerry": 280,
  "Topsy and Tim": 281,
  "Tots TV": 282,
  "Tractor Ted": 283,
  "Trash truck": 284,
  "Tumble leaf": 285,
  "Tweedy & Fluff": 286,
  "Ultimate Spiderman": 287,
  "VeggieTales": 288,
  "VeggieTales in the House (2014-2016)": 289,
  "Vlad and Nikki": 290,
  "Vooks": 291,
  "Wacky Races": 292,
  "Wallykazam": 293,
  "What's New, Scooby-Doo? (2002–2006)": 294,
  "Wishenpoof": 295,
  "Woolly and Tig": 296,
  "Work It Out Wombats": 297,
  "Xavier Riddle and the Secret Museum": 298,
  "Zaky & friends": 299,
  "Zoboomafoo (1999-2001)": 300
};

// Main function to run the script
async function main() {
  try {
    const csvFilePath = path.join(__dirname, 'tvshow_sensory_data.csv');
    const csvData = fs.readFileSync(csvFilePath, 'utf8');
    
    // Parse CSV data
    const records = parse(csvData, {
      columns: true,
      skip_empty_lines: true
    });
    
    // Get header row to identify metric columns
    const headers = Object.keys(records[0]);
    
    // Now read the existing customShowDetailsMap.json
    const customDetailsPath = path.join(__dirname, 'customShowDetailsMap.json');
    let customDetailsMap = {};
    
    if (fs.existsSync(customDetailsPath)) {
      const customDetailsData = fs.readFileSync(customDetailsPath, 'utf8');
      customDetailsMap = JSON.parse(customDetailsData);
    }
    
    // Count how many shows we update
    let updatedCount = 0;
    let matchedCount = 0;
    
    // Create a reverse lookup to find show IDs from names
    const showNameToIdMap = {};
    for (const [name, id] of Object.entries(tvShowIdsMap)) {
      // Convert to lowercase for case-insensitive matching
      showNameToIdMap[name.toLowerCase()] = id;
    }
    
    // Keep a list of shows that couldn't be matched for reporting
    const unmatchedShows = [];
    
    // Process each row in the CSV
    for (const record of records) {
      const showName = record['Programs'];
      if (!showName) continue;
      
      // Normalize the show name to match our database entries
      const normalizedShowName = normalizeShowName(showName);
      let showId = tvShowIdsMap[normalizedShowName];
      
      // If direct lookup fails, try to find a similar show name in our database
      if (!showId) {
        // Try case insensitive matching
        const lowerCaseName = normalizedShowName.toLowerCase();
        showId = showNameToIdMap[lowerCaseName];
        
        // If still no match, try fuzzy matching for certain problematic shows
        if (!showId) {
          // Log the problematic show name for debugging
          console.log(`Debug - Show name: "${showName}"`);
          
          // Special hardcoded mappings for problematic shows
          if (showName.includes('Creature Cases')) {
            console.log('Debug - Matched Creature Cases');
            showId = 157; // Mr. Monkey, Monkey Mechanic - closest match in theme for now
          } else if (showName.includes("Gecko")) {
            console.log('Debug - Matched Gecko\'s Garage');
            showId = 89; // This should be the correct ID for Gecko's Garage
          } else if (showName.includes("Hudson")) {
            console.log('Debug - Matched Hudson\'s Playground');
            showId = 108; // This should be the correct ID for Hudson's Playground
          } else if (showName.includes("LifeKid")) {
            console.log('Debug - Matched LifeKids');
            showId = 128; // This should be the correct ID for LifeKids
          }
          
          // If still no match after all attempts, add to unmatched list
          if (!showId) {
            unmatchedShows.push(showName);
            continue;
          }
        }
      }
      
      matchedCount++;
      
      // Found a match, create the details object
      const details = {};
      
      // Process each column for a show
      for (const header of headers) {
        if (header === 'Programs') continue; // Skip the show name column
        
        const normalizedKey = normalizeKey(header);
        if (!normalizedKey) continue;
        
        if (normalizedKey === 'themes') {
          details[normalizedKey] = processThemes(record[header]);
        } else if (record[header]) {
          details[normalizedKey] = normalizeValue(normalizedKey, record[header]);
        }
      }
      
      // Update the custom details map
      const showIdStr = showId.toString();
      
      // Merge with existing details if any
      const existingDetails = customDetailsMap[showIdStr] || {};
      const mergedDetails = {
        ...existingDetails,
        ...details
      };

      // Final check to ensure stimulation score is a whole number
      if (mergedDetails.stimulationScore !== undefined) {
        if (typeof mergedDetails.stimulationScore !== 'number') {
          mergedDetails.stimulationScore = parseInt(mergedDetails.stimulationScore, 10) || 3;
        }
        mergedDetails.stimulationScore = Math.round(mergedDetails.stimulationScore);
      }

      customDetailsMap[showIdStr] = mergedDetails;
      
      updatedCount++;
    }
    
    // Save the updated customShowDetailsMap.json
    fs.writeFileSync(
      customDetailsPath, 
      JSON.stringify(customDetailsMap, null, 2)
    );
    
    console.log(`Matched ${matchedCount} shows from the CSV with database IDs`);
    console.log(`Updated ${updatedCount} shows in the customShowDetailsMap.json file`);
    
    // Log shows that couldn't be matched
    if (unmatchedShows.length > 0) {
      console.log(`\nWarning: ${unmatchedShows.length} shows from the CSV could not be matched to the database:`);
      unmatchedShows.forEach(name => console.log(`  - ${name}`));
    }
    
  } catch (error) {
    console.error('Error processing CSV:', error);
  }
}

// Run the main function
main();
</file>

<file path="client/src/pages/token-entry.tsx">
import { useState, useEffect } from "react";
import { useLocation } from "wouter";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { useToast } from "@/hooks/use-toast";
import { useAuth } from "@/hooks/use-auth";

export default function TokenEntryPage() {
  const [token, setToken] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [, setLocation] = useLocation();
  const { toast } = useToast();
  const { user } = useAuth();
  
  const expectedToken = "2025";

  // If user is already logged in, redirect to home
  useEffect(() => {
    if (user) {
      setLocation("/home");
    }
  }, [user, setLocation]);

  // Enable automatic redirect when a valid token exists
  useEffect(() => {
    const storedToken = localStorage.getItem("earlyAccessToken");
    if (storedToken === expectedToken) {
      // Redirect to early access auth page when token is already stored
      setLocation("/early-access");
    }
  }, [setLocation]);

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);
    
    // Simulate API check with a timeout
    setTimeout(() => {
      if (token.trim().toLowerCase() === expectedToken.toLowerCase()) {
        // Store token in localStorage for persistence
        localStorage.setItem("earlyAccessToken", expectedToken);
        toast({
          title: "Success!",
          description: "Your early access token has been verified.",
          variant: "default"
        });
        // Redirect to early access login/registration page after successful verification
        setLocation("/early-access");
      } else {
        toast({
          title: "Invalid Token",
          description: "The token you entered is not valid. Please check and try again.",
          variant: "destructive"
        });
      }
      setIsLoading(false);
    }, 800);
  };

  return (
    <div className="min-h-screen bg-gradient-to-b from-primary to-primary-800 flex items-center justify-center p-4">
      <Card className="max-w-md w-full shadow-xl">
        <CardHeader className="space-y-1 text-center">
          <CardTitle className="text-2xl font-bold">Early Access</CardTitle>
          <CardDescription>
            Enter your early access token to proceed
          </CardDescription>
        </CardHeader>
        <form onSubmit={handleSubmit}>
          <CardContent className="space-y-4">
            <div className="space-y-2">
              <Input
                id="token"
                placeholder="Enter your early access token"
                value={token}
                onChange={(e) => setToken(e.target.value)}
                className="w-full"
                required
              />
            </div>
          </CardContent>
          <CardFooter className="flex flex-col space-y-4">
            <Button 
              type="submit" 
              className="w-full" 
              disabled={isLoading || !token.trim()}
            >
              {isLoading ? "Verifying..." : "Verify Token"}
            </Button>
            <div className="text-center text-sm text-muted-foreground">
              <span className="hover:underline cursor-pointer" onClick={() => setLocation("/")}>
                ← Return to landing page
              </span>
            </div>
          </CardFooter>
        </form>
      </Card>
    </div>
  );
}
</file>

<file path="server/database-storage.ts">
import { db, pool } from "./db";
import { eq, and, or, not, sql, desc, inArray, like, count } from "drizzle-orm";
import { 
  users, favorites, tvShows, tvShowReviews, tvShowSearches,
  type User, type InsertUser, 
  type TvShow, type InsertTvShow, 
  type TvShowReview, type InsertTvShowReview,
  type TvShowSearch, type InsertTvShowSearch,
  type Favorite, type InsertFavorite,
  type TvShowGitHub
} from "@shared/schema";
import { preserveCustomImageUrl, updateCustomImageMap } from "./image-preservator";
import { updateCustomShowDetails, preserveCustomShowDetails } from "./details-preservator";

export interface IStorage {
  // User methods
  getUser(id: number): Promise<User | undefined>;
  getUserByUsername(username: string): Promise<User | undefined>;
  getUserByEmail(email: string): Promise<User | undefined>;
  createUser(user: InsertUser): Promise<User>;
  getAllUsers(): Promise<User[]>;
  updateUserApproval(userId: number, isApproved: boolean): Promise<User | undefined>;
  
  // TV Shows methods
  getAllTvShows(): Promise<TvShow[]>;
  getTvShowById(id: number): Promise<TvShow | undefined>;
  getTvShowsByFilter(filters: { 
    ageGroup?: string; 
    ageRange?: {min: number, max: number};
    tantrumFactor?: string; 
    sortBy?: string; 
    search?: string;
    themes?: string[];
    interactionLevel?: string;
    dialogueIntensity?: string;
    soundFrequency?: string;
    stimulationScoreRange?: {min: number, max: number};
  }): Promise<TvShow[]>;
  addTvShow(show: InsertTvShow): Promise<TvShow>;
  updateTvShow(id: number, show: Partial<InsertTvShow>): Promise<TvShow | undefined>;
  deleteTvShow(id: number): Promise<boolean>;
  
  // Reviews methods
  getReviewsByTvShowId(tvShowId: number): Promise<TvShowReview[]>;
  addReview(review: InsertTvShowReview): Promise<TvShowReview>;
  
  // Search/Popularity tracking methods
  trackShowSearch(tvShowId: number): Promise<void>;
  trackShowView(tvShowId: number): Promise<void>;
  getPopularShows(limit?: number): Promise<TvShow[]>;
  
  // Import shows from GitHub data
  importShowsFromGitHub(shows: TvShowGitHub[]): Promise<TvShow[]>;

  // Favorites methods
  addFavorite(userId: number, tvShowId: number): Promise<Favorite>;
  removeFavorite(userId: number, tvShowId: number): Promise<boolean>;
  getUserFavorites(userId: number): Promise<TvShow[]>;
  isFavorite(userId: number, tvShowId: number): Promise<boolean>;
  getSimilarShows(userId: number, limit?: number): Promise<TvShow[]>;
}

export class DatabaseStorage implements IStorage {
  async getUser(id: number): Promise<User | undefined> {
    try {
      const result = await pool.query('SELECT * FROM users WHERE id = $1', [id]);
      
      if (result.rows.length === 0) {
        return undefined;
      }
      
      return {
        id: result.rows[0].id,
        email: result.rows[0].email,
        password: result.rows[0].password,
        username: result.rows[0].username,
        isAdmin: result.rows[0].is_admin,
        country: result.rows[0].country,
        createdAt: result.rows[0].created_at,
        isApproved: result.rows[0].is_approved
      };
    } catch (error) {
      console.error(`Error getting user by ID ${id}:`, error);
      return undefined;
    }
  }

  async getUserByEmail(email: string): Promise<User | undefined> {
    console.log(`Searching for user with email: ${email}`);
    
    // First, try a simple query to verify the database is accessible
    try {
      const checkResult = await pool.query('SELECT COUNT(*) FROM users');
      console.log(`Total users in database: ${checkResult.rows[0].count}`);
    } catch (error) {
      console.error('Error checking user count:', error);
    }
    
    try {
      // Try direct query without transaction to see if that's the issue
      const directResult = await pool.query('SELECT * FROM users WHERE email = $1 LIMIT 1', [email]);
      console.log(`Direct query result:`, {
        rowCount: directResult.rowCount,
        found: directResult.rows.length > 0,
        id: directResult.rows[0]?.id
      });
      
      if (directResult.rows.length > 0) {
        // Use direct query result without transaction
        return {
          id: directResult.rows[0].id,
          email: directResult.rows[0].email,
          password: directResult.rows[0].password,
          username: directResult.rows[0].username,
          isAdmin: directResult.rows[0].is_admin,
          country: directResult.rows[0].country,
          createdAt: directResult.rows[0].created_at,
          isApproved: directResult.rows[0].is_approved
        };
      } else {
        console.log(`User with email ${email} not found in direct query`);
      }
    } catch (directError) {
      console.error(`Error in direct query for email ${email}:`, directError);
    }
    
    return undefined;
  }
  
  async getUserByUsername(username: string): Promise<User | undefined> {
    console.log(`Searching for user with username: ${username}`);
    
    try {
      // Try direct query without transaction
      const directResult = await pool.query('SELECT * FROM users WHERE username = $1 LIMIT 1', [username]);
      console.log(`Direct query result for username:`, {
        rowCount: directResult.rowCount,
        found: directResult.rows.length > 0,
        id: directResult.rows[0]?.id
      });
      
      if (directResult.rows.length > 0) {
        // Use direct query result without transaction
        return {
          id: directResult.rows[0].id,
          email: directResult.rows[0].email,
          password: directResult.rows[0].password,
          username: directResult.rows[0].username,
          isAdmin: directResult.rows[0].is_admin,
          country: directResult.rows[0].country,
          createdAt: directResult.rows[0].created_at,
          isApproved: directResult.rows[0].is_approved
        };
      } else {
        console.log(`User with username ${username} not found in direct query`);
      }
    } catch (directError) {
      console.error(`Error in direct query for username ${username}:`, directError);
    }
    
    return undefined;
  }

  async createUser(insertUser: InsertUser): Promise<User> {
    const client = await pool.connect();
    
    try {
      // Start transaction
      await client.query('BEGIN');
      
      const now = new Date().toISOString();
      
      // Ensure username is never null to match schema requirements
      const userToInsert = {
        ...insertUser,
        username: insertUser.username || '', // Convert null to empty string if needed
        createdAt: now,
      };
      
      console.log('Creating user with data:', {...userToInsert, password: '[REDACTED]'});
      
      // Use client instead of pool for transaction
      const result = await client.query(`
        INSERT INTO users (email, password, username, is_admin, country, created_at, is_approved) 
        VALUES ($1, $2, $3, $4, $5, $6, $7) 
        RETURNING *
      `, [
        userToInsert.email,
        userToInsert.password,
        userToInsert.username,
        userToInsert.isAdmin || false,
        userToInsert.country || '',
        userToInsert.createdAt,
        userToInsert.isApproved || false
      ]);
      
      // Explicitly commit the transaction
      await client.query('COMMIT');
      
      // Convert from raw SQL result to our expected User type
      const user: User = {
        id: result.rows[0].id,
        email: result.rows[0].email,
        password: result.rows[0].password,
        username: result.rows[0].username,
        isAdmin: result.rows[0].is_admin,
        country: result.rows[0].country,
        createdAt: result.rows[0].created_at,
        isApproved: result.rows[0].is_approved
      };
      
      console.log('User created successfully with ID:', user.id);
      return user;
    } catch (error) {
      // Rollback transaction on error
      await client.query('ROLLBACK');
      console.error('Error creating user in database:', error);
      throw error; // Re-throw to be caught by the API layer
    } finally {
      // Always release the client back to the pool
      client.release();
    }
  }
  
  async getAllUsers(): Promise<User[]> {
    const client = await pool.connect();
    
    try {
      // Use a transaction to ensure data consistency
      await client.query('BEGIN');
      
      // Execute the query with the client
      const result = await client.query('SELECT * FROM users ORDER BY id DESC');
      
      // Commit the transaction
      await client.query('COMMIT');
      
      // Map the SQL results to our User type
      const userList: User[] = result.rows.map(row => ({
        id: row.id,
        email: row.email,
        password: row.password,
        username: row.username,
        isAdmin: row.is_admin,
        country: row.country,
        createdAt: row.created_at,
        isApproved: row.is_approved
      }));
      
      console.log(`Fetched ${userList.length} users from database`);
      return userList;
    } catch (error) {
      // Rollback the transaction on error
      await client.query('ROLLBACK');
      console.error('Error fetching users:', error);
      return [];
    } finally {
      // Release the client back to the pool
      client.release();
    }
  }
  
  async updateUserApproval(userId: number, isApproved: boolean): Promise<User | undefined> {
    const client = await pool.connect();
    
    try {
      // Start transaction
      await client.query('BEGIN');
      
      // Execute update with transaction
      const result = await client.query(`
        UPDATE users 
        SET is_approved = $1 
        WHERE id = $2 
        RETURNING *
      `, [isApproved, userId]);
      
      if (result.rows.length === 0) {
        await client.query('ROLLBACK');
        console.log(`No user found with ID ${userId} to update approval status`);
        return undefined;
      }
      
      // Commit the transaction
      await client.query('COMMIT');
      
      // Map the SQL result to our User type
      const updatedUser: User = {
        id: result.rows[0].id,
        email: result.rows[0].email,
        password: result.rows[0].password,
        username: result.rows[0].username,
        isAdmin: result.rows[0].is_admin,
        country: result.rows[0].country,
        createdAt: result.rows[0].created_at,
        isApproved: result.rows[0].is_approved
      };
      
      console.log(`Updated approval status for user ${updatedUser.id} to ${isApproved}`);
      return updatedUser;
    } catch (error) {
      // Rollback on error
      await client.query('ROLLBACK');
      console.error(`Error updating approval status for user ${userId}:`, error);
      return undefined;
    } finally {
      // Always release the client
      client.release();
    }
  }

  async getAllTvShows(): Promise<TvShow[]> {
    return await db.select().from(tvShows);
  }

  async getTvShowById(id: number): Promise<TvShow | undefined> {
    const [show] = await db.select().from(tvShows).where(eq(tvShows.id, id));
    return show;
  }

  async getTvShowsByFilter(filters: { 
    ageGroup?: string; 
    tantrumFactor?: string; 
    sortBy?: string; 
    search?: string;
    themes?: string[];
    interactionLevel?: string;
    dialogueIntensity?: string;
    soundFrequency?: string;
    stimulationScoreRange?: {min: number, max: number};
  }): Promise<TvShow[]> {
    // Build query based on filters
    let query = db.select().from(tvShows);
    
    // Apply filters
    const conditions = [];
    
    // Handle age range filtering
    if (filters.ageRange) {
      const { min, max } = filters.ageRange;
      
      // Extract the min and max from the show's ageRange string
      // Patterns we handle: "0-2", "3-5", "6-8", "9-12", "13+", "Any Age"
      conditions.push(
        or(
          // Special case for "Any Age"
          eq(tvShows.ageRange, "Any Age"),
          
          // Match exact ranges
          and(
            or(
              // Handle standard age ranges like "3-5"
              and(
                not(like(tvShows.ageRange, "%+%")), // Not a range ending with +
                sql`
                  CAST(SPLIT_PART(${tvShows.ageRange}, '-', 1) AS INTEGER) >= ${min} AND
                  CAST(SPLIT_PART(${tvShows.ageRange}, '-', 2) AS INTEGER) <= ${max}
                `
              ),
              
              // Handle ranges with + like "13+"
              and(
                like(tvShows.ageRange, "%+%"),
                sql`CAST(SUBSTRING(${tvShows.ageRange} FROM 1 FOR POSITION('+' IN ${tvShows.ageRange})-1) AS INTEGER) BETWEEN ${min} AND ${max}`
              )
            )
          ),
          
          // Include shows where the lower end of the range overlaps with our filter range
          and(
            not(like(tvShows.ageRange, "%+%")), // Not a range ending with +
            sql`
              CAST(SPLIT_PART(${tvShows.ageRange}, '-', 1) AS INTEGER) >= ${min} AND
              CAST(SPLIT_PART(${tvShows.ageRange}, '-', 1) AS INTEGER) <= ${max}
            `
          ),
          
          // Include shows where the upper end of the range overlaps with our filter range
          and(
            not(like(tvShows.ageRange, "%+%")), // Not a range ending with +
            sql`
              CAST(SPLIT_PART(${tvShows.ageRange}, '-', 2) AS INTEGER) >= ${min} AND
              CAST(SPLIT_PART(${tvShows.ageRange}, '-', 2) AS INTEGER) <= ${max}
            `
          ),
          
          // Include shows that completely span our filter range
          and(
            not(like(tvShows.ageRange, "%+%")), // Not a range ending with +
            sql`
              CAST(SPLIT_PART(${tvShows.ageRange}, '-', 1) AS INTEGER) <= ${min} AND
              CAST(SPLIT_PART(${tvShows.ageRange}, '-', 2) AS INTEGER) >= ${max}
            `
          )
        )
      );
    } 
    // Legacy support for exact age group matching
    else if (filters.ageGroup) {
      conditions.push(eq(tvShows.ageRange, filters.ageGroup));
    }
    
    if (filters.tantrumFactor) {
      // Convert descriptive term to numerical value
      let stimulationScore;
      switch (filters.tantrumFactor.toLowerCase()) {
        case 'low': stimulationScore = 1; break;
        case 'low-medium': stimulationScore = 2; break;
        case 'medium': stimulationScore = 3; break;
        case 'medium-high': stimulationScore = 4; break;
        case 'high': stimulationScore = 5; break;
      }
      
      if (stimulationScore) {
        conditions.push(eq(tvShows.stimulationScore, stimulationScore));
      }
    }
    
    if (filters.interactionLevel) {
      conditions.push(eq(tvShows.interactivityLevel, filters.interactionLevel));
    }
    
    if (filters.dialogueIntensity) {
      conditions.push(eq(tvShows.dialogueIntensity, filters.dialogueIntensity));
    }
    
    if (filters.soundFrequency) {
      conditions.push(eq(tvShows.soundEffectsLevel, filters.soundFrequency));
    }
    
    if (filters.stimulationScoreRange) {
      const { min, max } = filters.stimulationScoreRange;
      conditions.push(sql`${tvShows.stimulationScore} >= ${min} AND ${tvShows.stimulationScore} <= ${max}`);
    }
    
    if (filters.search) {
      // Simple text search across name and description
      const searchTerm = `%${filters.search}%`;
      conditions.push(sql`(${tvShows.name} ILIKE ${searchTerm} OR ${tvShows.description} ILIKE ${searchTerm})`);
    }
    
    // Filter by themes
    if (filters.themes && filters.themes.length > 0) {
      // We need a way to check if all themes are present in the array
      // For multiple themes, we'll need a post-query filter since PostgreSQL array operations 
      // don't easily support checking if an array contains all values from another array
      console.log(`Filtering by themes: ${filters.themes.join(', ')}`);
    }
    
    // Apply all conditions
    if (conditions.length > 0) {
      query = query.where(and(...conditions));
    }
    
    // Apply sort order
    if (filters.sortBy) {
      switch (filters.sortBy.toLowerCase()) {
        case 'name_asc':
          query = query.orderBy(tvShows.name);
          break;
        case 'name_desc':
          query = query.orderBy(desc(tvShows.name));
          break;
        case 'stimulation_asc':
          query = query.orderBy(tvShows.stimulationScore);
          break;
        case 'stimulation_desc':
          query = query.orderBy(desc(tvShows.stimulationScore));
          break;
        case 'year_asc':
          query = query.orderBy(tvShows.releaseYear);
          break;
        case 'year_desc':
          query = query.orderBy(desc(tvShows.releaseYear));
          break;
        default:
          // Default to name ascending
          query = query.orderBy(tvShows.name);
      }
    } else {
      // Default sort order
      query = query.orderBy(tvShows.name);
    }
    
    // Execute query
    let shows = await query;
    
    // Post-process for theme filtering
    // This needs to happen after the SQL query because
    // PostgreSQL array operations don't easily support checking if an array contains all values from another array
    if (filters.themes && filters.themes.length > 0) {
      // Filter for shows that have ALL the requested themes
      shows = shows.filter(show => {
        // Make sure show has themes array
        if (!show.themes || !Array.isArray(show.themes) || show.themes.length === 0) {
          return false;
        }
        
        // Using 'every' means ALL filter themes must be present
        // Using 'some' inside means each filter theme needs to match at least one of the show's themes
        return filters.themes!.every(filterTheme => 
          show.themes!.some(showTheme => 
            // Case-insensitive comparison
            showTheme.toLowerCase() === filterTheme.toLowerCase()
          )
        );
      });
    }
    
    return shows;
  }

  async addTvShow(show: InsertTvShow): Promise<TvShow> {
    const [newShow] = await db.insert(tvShows).values(show).returning();
    return newShow;
  }

  async updateTvShow(id: number, show: Partial<InsertTvShow>): Promise<TvShow | undefined> {
    // If we're updating the image URL, save it to our custom map
    if (show.imageUrl) {
      updateCustomImageMap(id, show.imageUrl);
    }
    
    // Save stimulation metrics and other important details to our custom details map
    const stimulationMetrics: Record<string, any> = {};
    const importantFields = [
      'stimulationScore', 'musicTempo', 'totalMusicLevel', 'totalSoundEffectTimeLevel', 
      'sceneFrequency', 'interactivityLevel', 'dialogueIntensity', 'soundEffectsLevel',
      'animationStyle', 'ageRange', 'themes', 'description'
    ];
    
    // Round stimulation score to whole numbers if it exists
    if ('stimulationScore' in show && show.stimulationScore !== undefined) {
      show.stimulationScore = Math.round(Number(show.stimulationScore));
    }
    
    // Check if we're updating any important fields
    let hasImportantFields = false;
    for (const field of importantFields) {
      if (field in show && show[field as keyof typeof show] !== undefined) {
        stimulationMetrics[field] = show[field as keyof typeof show];
        hasImportantFields = true;
      }
    }
    
    // Save to custom details map if we have important fields to preserve
    if (hasImportantFields) {
      updateCustomShowDetails(id, stimulationMetrics);
    }
    
    const [updatedShow] = await db
      .update(tvShows)
      .set(show)
      .where(eq(tvShows.id, id))
      .returning();
    return updatedShow;
  }

  async deleteTvShow(id: number): Promise<boolean> {
    const result = await db.delete(tvShows).where(eq(tvShows.id, id));
    return result.count > 0;
  }

  async getReviewsByTvShowId(tvShowId: number): Promise<TvShowReview[]> {
    // Use sql template to explicitly specify column names
    return await db.execute(sql`
      SELECT 
        id, 
        tv_show_id as "tvShowId", 
        user_name as "userName", 
        rating, 
        review, 
        created_at as "createdAt"
      FROM tv_show_reviews 
      WHERE tv_show_id = ${tvShowId}
    `);
  }

  async addReview(review: InsertTvShowReview): Promise<TvShowReview> {
    const now = new Date().toISOString();
    const [newReview] = await db
      .insert(tvShowReviews)
      .values({
        ...review,
        createdAt: now
      })
      .returning();
    return newReview;
  }

  async trackShowSearch(tvShowId: number): Promise<void> {
    const now = new Date().toISOString();
    const [existingSearch] = await db
      .select()
      .from(tvShowSearches)
      .where(eq(tvShowSearches.tvShowId, tvShowId));

    if (existingSearch) {
      await db
        .update(tvShowSearches)
        .set({
          searchCount: existingSearch.searchCount + 1,
          lastSearched: now,
        })
        .where(eq(tvShowSearches.id, existingSearch.id));
    } else {
      await db.insert(tvShowSearches).values({
        tvShowId,
        searchCount: 1,
        viewCount: 0,
        lastSearched: now,
        lastViewed: null,
      });
    }
  }

  async trackShowView(tvShowId: number): Promise<void> {
    const now = new Date().toISOString();
    const [existingSearch] = await db
      .select()
      .from(tvShowSearches)
      .where(eq(tvShowSearches.tvShowId, tvShowId));

    if (existingSearch) {
      await db
        .update(tvShowSearches)
        .set({
          viewCount: existingSearch.viewCount + 1,
          lastViewed: now,
        })
        .where(eq(tvShowSearches.id, existingSearch.id));
    } else {
      await db.insert(tvShowSearches).values({
        tvShowId,
        searchCount: 0,
        viewCount: 1,
        lastViewed: now,
        lastSearched: now,
      });
    }
  }

  async getPopularShows(limit: number = 10): Promise<TvShow[]> {
    // Get the top viewed shows and join with the tvShows table
    const popularShows = await db
      .select({
        show: tvShows,
        totalViews: tvShowSearches.viewCount,
      })
      .from(tvShowSearches)
      .innerJoin(tvShows, eq(tvShowSearches.tvShowId, tvShows.id))
      .orderBy(desc(tvShowSearches.viewCount))
      .limit(limit);

    return popularShows.map((item) => item.show);
  }

  async importShowsFromGitHub(githubShows: TvShowGitHub[]): Promise<TvShow[]> {
    const importedShows: TvShow[] = [];

    for (const githubShow of githubShows) {
      try {
        if (!githubShow.title) {
          console.warn("Skipping show with no title:", githubShow);
          continue;
        }

        // Check if the show already exists
        const [existingShow] = await db
          .select()
          .from(tvShows)
          .where(eq(tvShows.name, githubShow.title));

        if (existingShow) {
          // Update the existing show
          
          // Check for custom image URL first
          const preservedImageUrl = preserveCustomImageUrl(existingShow.id, existingShow.imageUrl);
          
          // Create the update object with GitHub data
          const updateData = {
            // Use the correct property names from the TvShowGitHub type
            description: existingShow.description, // Keep existing description if not provided
            stimulationScore: typeof githubShow.stimulation_score === 'number' 
              ? Math.round(githubShow.stimulation_score) 
              : Math.round(existingShow.stimulationScore),
            dialogueIntensity: githubShow.dialogue_intensity || existingShow.dialogueIntensity,
            soundEffectsLevel: githubShow.sound_effects_level || existingShow.soundEffectsLevel,
            interactivityLevel: githubShow.interactivity_level || existingShow.interactivityLevel,
            ageRange: githubShow.target_age_group || existingShow.ageRange,
            themes: githubShow.themes || existingShow.themes,
            availableOn: [githubShow.platform] || existingShow.availableOn,
            releaseYear: typeof githubShow.release_year === 'number' && !isNaN(githubShow.release_year) ? githubShow.release_year : existingShow.releaseYear,
            endYear: typeof githubShow.end_year === 'number' && !isNaN(githubShow.end_year) ? githubShow.end_year : existingShow.endYear,
            episodeLength: githubShow.avg_episode_length && !isNaN(parseInt(githubShow.avg_episode_length)) ? parseInt(githubShow.avg_episode_length) : existingShow.episodeLength,
            seasons: githubShow.seasons && !isNaN(parseInt(githubShow.seasons)) ? parseInt(githubShow.seasons) : existingShow.seasons,
            // Preserve our custom image URLs during imports
            imageUrl: preservedImageUrl || githubShow.imageUrl || getDefaultImageUrl(githubShow.title, githubShow.image_filename) || existingShow.imageUrl,
          };
          
          // Apply custom details preservation - this will prioritize any custom stimulation metrics
          // and other important details we've saved from admin edits
          const mergedData = preserveCustomShowDetails(existingShow.id, existingShow, updateData);
          
          const [updatedShow] = await db
            .update(tvShows)
            .set(mergedData)
            .where(eq(tvShows.id, existingShow.id))
            .returning();

          importedShows.push(updatedShow);
        } else {
          // Insert new show with default values for required fields
          const tvShow: Partial<InsertTvShow> = {
            name: githubShow.title,
            description: 'A children\'s TV show', // Default description
            stimulationScore: typeof githubShow.stimulation_score === 'number' ? Math.round(githubShow.stimulation_score) : 3,
            dialogueIntensity: githubShow.dialogue_intensity || 'Medium',
            soundEffectsLevel: githubShow.sound_effects_level || 'Medium',
            interactivityLevel: githubShow.interactivity_level || 'Medium',
            ageRange: githubShow.target_age_group || '3-5',
            themes: githubShow.themes || [],
            availableOn: [githubShow.platform],
            releaseYear: typeof githubShow.release_year === 'number' && !isNaN(githubShow.release_year) ? githubShow.release_year : null,
            endYear: typeof githubShow.end_year === 'number' && !isNaN(githubShow.end_year) ? githubShow.end_year : null,
            episodeLength: githubShow.avg_episode_length && !isNaN(parseInt(githubShow.avg_episode_length)) ? parseInt(githubShow.avg_episode_length) : 15,
            seasons: githubShow.seasons && !isNaN(parseInt(githubShow.seasons)) ? parseInt(githubShow.seasons) : null,
            imageUrl: githubShow.imageUrl || getDefaultImageUrl(githubShow.title, githubShow.image_filename),
            // Add default values for required fields using proper camelCase
            overallRating: 3
          };

          const [newShow] = await db.insert(tvShows).values(tvShow).returning();
          importedShows.push(newShow);
        }
      } catch (error) {
        console.error(`Error importing show ${githubShow.title}:`, error);
      }
    }

    return importedShows;
  }

  // Favorites methods
  async addFavorite(userId: number, tvShowId: number): Promise<Favorite> {
    // Check if the favorite already exists
    const [existingFavorite] = await db
      .select()
      .from(favorites)
      .where(and(
        eq(favorites.userId, userId),
        eq(favorites.tvShowId, tvShowId)
      ));

    if (existingFavorite) {
      return existingFavorite;
    }

    // Add the favorite
    const now = new Date().toISOString();
    const [favorite] = await db
      .insert(favorites)
      .values({
        userId,
        tvShowId,
        createdAt: now,
      })
      .returning();

    return favorite;
  }

  async removeFavorite(userId: number, tvShowId: number): Promise<boolean> {
    const result = await db
      .delete(favorites)
      .where(and(
        eq(favorites.userId, userId),
        eq(favorites.tvShowId, tvShowId)
      ));

    return result.count > 0;
  }

  async getUserFavorites(userId: number): Promise<TvShow[]> {
    const favoriteShows = await db
      .select({
        show: tvShows,
      })
      .from(favorites)
      .innerJoin(tvShows, eq(favorites.tvShowId, tvShows.id))
      .where(eq(favorites.userId, userId))
      .orderBy(tvShows.name);

    return favoriteShows.map(item => item.show);
  }

  async isFavorite(userId: number, tvShowId: number): Promise<boolean> {
    const [favorite] = await db
      .select()
      .from(favorites)
      .where(and(
        eq(favorites.userId, userId),
        eq(favorites.tvShowId, tvShowId)
      ));

    return !!favorite;
  }

  async getSimilarShows(userId: number, limit: number = 5): Promise<TvShow[]> {
    // Get user's favorite shows
    const userFavorites = await this.getUserFavorites(userId);
    
    if (userFavorites.length === 0) {
      // If user has no favorites, return popular shows instead
      return this.getPopularShows(limit);
    }
    
    // Extract features from user's favorites to build a profile
    const favoriteIds = userFavorites.map(show => show.id);
    const avgStimulationScore = Math.round(
      userFavorites.reduce((sum, show) => sum + show.stimulationScore, 0) / userFavorites.length
    );
    
    // Get common themes from user's favorites
    const themeFrequency: Record<string, number> = {};
    userFavorites.forEach(show => {
      show.themes?.forEach(theme => {
        themeFrequency[theme] = (themeFrequency[theme] || 0) + 1;
      });
    });
    
    // Get top themes (those that appear in at least 25% of favorites)
    const minThemeCount = Math.max(1, Math.floor(userFavorites.length * 0.25));
    const commonThemes = Object.entries(themeFrequency)
      .filter(([_, count]) => count >= minThemeCount)
      .map(([theme]) => theme);
    
    // Find shows with similar characteristics but not already in favorites
    // This is a simple recommendation algorithm that checks for shows with
    // similar stimulation score and at least one common theme
    const stimScoreRange = { min: Math.max(1, avgStimulationScore - 1), max: Math.min(5, avgStimulationScore + 1) };
    
    const similarShows = await db
      .select()
      .from(tvShows)
      .where(
        and(
          sql`${tvShows.stimulationScore} >= ${stimScoreRange.min} AND ${tvShows.stimulationScore} <= ${stimScoreRange.max}`,
          sql`NOT (${tvShows.id} IN (${favoriteIds.join(',')}))`
        )
      )
      .orderBy(desc(tvShows.stimulationScore)) // Sort by stimulation score for consistent results
      .limit(limit * 2); // Get more than we need to filter by themes
    
    // Score each show based on theme matches and stimulation score similarity
    interface ScoredShow {
      show: TvShow;
      score: number;
    }
    
    const scoredShows: ScoredShow[] = similarShows.map(show => {
      let score = 0;
      
      // Score based on stimulation score similarity (0-5 points)
      const stimDiff = Math.abs(show.stimulationScore - avgStimulationScore);
      score += (5 - stimDiff);
      
      // Score based on theme matches (3 points per match)
      if (show.themes) {
        commonThemes.forEach(theme => {
          if (show.themes?.includes(theme)) {
            score += 3;
          }
        });
      }
      
      return { show, score };
    });
    
    // Sort by score and take the top 'limit' shows
    return scoredShows
      .sort((a, b) => b.score - a.score)
      .slice(0, limit)
      .map(item => item.show);
  }
}

// Helper function to build a default image URL
function getDefaultImageUrl(title: string | undefined, image_filename: string | undefined): string {
  // Check if image_filename exists and use it
  if (image_filename) {
    return `https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/${image_filename}`;
  }
  
  // Check if title exists
  if (!title) {
    return `https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/default.jpg`;
  }
  
  // Format the title for a URL-friendly string
  const formattedTitle = title
    .replace(/[^a-zA-Z0-9]/g, "")  // Remove all non-alphanumeric characters
    .toLowerCase();
  
  return `https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/${formattedTitle}.jpg`;
}

export const storage = new DatabaseStorage();
</file>

<file path="client/src/components/Navbar.tsx">
import { useState, useEffect } from "react";
import { Link, useLocation } from "wouter";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { useQuery } from "@tanstack/react-query";
import { apiGet } from "@/lib/queryClient";
import { Search, User, LogOut, Home, Filter, BarChart2, Info, Settings, X } from "lucide-react";
import type { TvShow } from "../../../shared/schema";
import { useAuth } from "@/hooks/use-auth";

export default function Navbar() {
  const [location] = useLocation();
  const [searchTerm, setSearchTerm] = useState("");
  const [showResults, setShowResults] = useState(false);
  const [isNavOpen, setIsNavOpen] = useState(false);
  const { user, logoutMutation, isAdmin } = useAuth();

  // Fetch shows for search dropdown
  const { data: shows } = useQuery({
    queryKey: ['/api/shows'],
    queryFn: async () => {
      const response = await fetch('/api/shows');
      if (!response.ok) {
        throw new Error('Failed to fetch shows');
      }
      const data = await response.json();
      return data as TvShow[];
    },
    staleTime: 60000, // 1 minute
  });

  const handleSearch = (e: React.FormEvent) => {
    e.preventDefault();
    if (searchTerm.trim()) {
      // For all searches, direct to browse page with search filter
      console.log('Navbar - Submitting search for:', searchTerm.trim());
      // Use setLocation from wouter instead of directly setting window.location
      // This keeps the app in SPA mode and avoids a full page reload
      window.location.href = `/browse?search=${encodeURIComponent(searchTerm.trim())}`;
      setShowResults(false);
    }
  };
  
  // Hide results when clicking outside
  useEffect(() => {
    const handleClickOutside = () => setShowResults(false);
    document.addEventListener('click', handleClickOutside);
    return () => document.removeEventListener('click', handleClickOutside);
  }, []);

  // Filter shows based on search term
  const filteredShows = shows?.filter((show: TvShow) => {
    if (!searchTerm.trim()) return false;
    
    const searchLower = searchTerm.toLowerCase().trim();
    const nameLower = show.name.toLowerCase();
    
    // Direct match in name
    if (nameLower.includes(searchLower)) return true;
    
    // Handle shows with year ranges
    const nameWithoutYears = nameLower.replace(/\s+\d{4}(-\d{4}|-present)?/g, '');
    if (nameWithoutYears.includes(searchLower)) return true;
    
    // Match any part of a word
    const words = nameLower.split(/\s+/);
    if (words.some((word: string) => word.includes(searchLower))) return true;
    
    // Handle apostrophes and special characters
    const simplifiedName = nameLower.replace(/[''\.]/g, '');
    if (simplifiedName.includes(searchLower)) return true;
    
    return false;
  }).slice(0, 6);

  return (
    <header className="sticky top-0 z-50 bg-primary shadow-md">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex justify-between h-16">
          <div className="flex items-center">
            <Link href="/home" className="flex-shrink-0">
              <h1 className="text-2xl font-heading font-bold" style={{ color: "#F6CB59" }}>TV Tantrum</h1>
            </Link>
            <nav className="hidden md:ml-10 md:flex space-x-8">
              <Link 
                href="/home"
                className={`${location === '/home' ? 'text-white border-b-2 border-white' : 'text-white/80 hover:text-white'} font-medium px-1 py-4 flex items-center`}
              >
                <Home className="w-4 h-4 mr-2" />
                Home
              </Link>
              <Link 
                href="/browse"
                className={`${location === '/browse' ? 'text-white border-b-2 border-white' : 'text-white/80 hover:text-white'} font-medium px-1 py-4 flex items-center`}
              >
                <Filter className="w-4 h-4 mr-2" />
                Browse
              </Link>
              <Link 
                href="/compare"
                className={`${location === '/compare' ? 'text-white border-b-2 border-white' : 'text-white/80 hover:text-white'} font-medium px-1 py-4 flex items-center`}
              >
                <BarChart2 className="w-4 h-4 mr-2" />
                Compare
              </Link>
              <Link 
                href="/app-about"
                className={`${location === '/app-about' ? 'text-white border-b-2 border-white' : 'text-white/80 hover:text-white'} font-medium px-1 py-4 flex items-center`}
              >
                <Info className="w-4 h-4 mr-2" />
                About
              </Link>
            </nav>
          </div>
          
          <div className="flex items-center gap-4">
            {/* Authentication links */}
            <div className="hidden md:flex items-center gap-3">
              {user ? (
                <div className="flex items-center gap-2">
                  {isAdmin && (
                    <Link href="/admin">
                      <Button 
                        variant="ghost" 
                        className="flex items-center gap-1 text-white/90 hover:text-white hover:bg-primary-700"
                      >
                        <Settings className="h-4 w-4" />
                        <span>Admin</span>
                      </Button>
                    </Link>
                  )}
                  <Button 
                    variant="ghost" 
                    className="flex items-center gap-1 text-white/90 hover:text-white hover:bg-primary-700"
                    onClick={() => logoutMutation.mutate()}
                  >
                    <LogOut className="h-4 w-4" />
                    <span>Logout</span>
                  </Button>
                  <Button 
                    variant="ghost" 
                    className="flex items-center gap-1 text-white/90 hover:text-white hover:bg-primary-700"
                  >
                    <User className="h-4 w-4" />
                    <span>{user.username}</span>
                  </Button>
                </div>
              ) : (
                <Link href="/auth">
                  <Button 
                    variant="ghost" 
                    className="text-white/90 hover:text-white hover:bg-primary-700"
                  >
                    Login / Register
                  </Button>
                </Link>
              )}
            </div>
            
            {/* Mobile menu button */}
            <Button
              variant="ghost"
              size="icon"
              className="md:hidden ml-4 text-white hover:text-white/80"
              onClick={() => setIsNavOpen(true)}
            >
              <i className="fas fa-bars text-xl"></i>
            </Button>
            
            {/* Custom mobile navigation overlay */}
            {isNavOpen && (
              <div className="fixed inset-0 z-50 md:hidden">
                {/* Backdrop */}
                <div 
                  className="fixed inset-0 bg-black/50"
                  onClick={() => setIsNavOpen(false)}
                />
                
                {/* Side drawer */}
                <div className="fixed inset-y-0 left-0 w-64 bg-white p-4 overflow-y-auto">
                  <div className="flex justify-between items-center mb-4">
                    <Link href="/home" onClick={() => setIsNavOpen(false)}>
                      <h2 className="text-lg font-bold" style={{ color: "#F6CB59" }}>TV Tantrum</h2>
                    </Link>
                    <Button
                      variant="ghost"
                      size="icon"
                      className="text-gray-500 hover:bg-gray-100"
                      onClick={() => setIsNavOpen(false)}
                    >
                      <X className="h-5 w-5" />
                    </Button>
                  </div>
                  
                  <div className="space-y-1">
                    <Link 
                      href="/home"
                      onClick={() => setIsNavOpen(false)}
                      className={`flex items-center px-3 py-2 text-base font-medium ${location === '/home' ? 'text-primary-600 bg-primary-50' : 'text-gray-500 hover:text-primary-600 hover:bg-primary-50'} rounded-md`}
                    >
                      <Home className="h-5 w-5 mr-3" />
                      Home
                    </Link>
                    <Link 
                      href="/browse"
                      onClick={() => setIsNavOpen(false)}
                      className={`flex items-center px-3 py-2 text-base font-medium ${location === '/browse' ? 'text-primary-600 bg-primary-50' : 'text-gray-500 hover:text-primary-600 hover:bg-primary-50'} rounded-md`}
                    >
                      <Filter className="h-5 w-5 mr-3" />
                      Browse
                    </Link>
                    <Link 
                      href="/compare"
                      onClick={() => setIsNavOpen(false)}
                      className={`flex items-center px-3 py-2 text-base font-medium ${location === '/compare' ? 'text-primary-600 bg-primary-50' : 'text-gray-500 hover:text-primary-600 hover:bg-primary-50'} rounded-md`}
                    >
                      <BarChart2 className="h-5 w-5 mr-3" />
                      Compare
                    </Link>
                    <Link 
                      href="/app-about"
                      onClick={() => setIsNavOpen(false)}
                      className={`flex items-center px-3 py-2 text-base font-medium ${location === '/app-about' ? 'text-primary-600 bg-primary-50' : 'text-gray-500 hover:text-primary-600 hover:bg-primary-50'} rounded-md`}
                    >
                      <Info className="h-5 w-5 mr-3" />
                      About
                    </Link>
                    
                    {/* Authentication links */}
                    {user ? (
                      <>
                        {isAdmin && (
                          <Link 
                            href="/admin"
                            onClick={() => setIsNavOpen(false)}
                            className="flex items-center px-3 py-2 text-base font-medium text-gray-500 hover:text-primary-600 hover:bg-primary-50 rounded-md"
                          >
                            <Settings className="h-5 w-5 mr-2" />
                            Admin Dashboard
                          </Link>
                        )}
                        <button
                          onClick={() => {
                            logoutMutation.mutate();
                            setIsNavOpen(false);
                          }}
                          className="flex w-full items-center px-3 py-2 text-base font-medium text-gray-500 hover:text-primary-600 hover:bg-primary-50 rounded-md"
                        >
                          <LogOut className="h-5 w-5 mr-2" />
                          Logout
                        </button>
                        <div className="flex items-center px-3 py-2 text-base font-medium text-gray-500 rounded-md">
                          <User className="h-5 w-5 mr-2" />
                          {user.username}
                        </div>
                      </>
                    ) : (
                      <Link 
                        href="/auth"
                        onClick={() => setIsNavOpen(false)}
                        className="flex items-center px-3 py-2 text-base font-medium text-gray-500 hover:text-primary-600 hover:bg-primary-50 rounded-md"
                      >
                        <User className="h-5 w-5 mr-2" />
                        Login / Register
                      </Link>
                    )}
                  </div>
                  
                  {/* Search has been removed to make interface cleaner */}
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    </header>
  );
}
</file>

<file path="client/src/pages/auth-page.tsx">
import { useState, useEffect } from "react";
import { useLocation, useRoute } from "wouter";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { useAuth } from "@/hooks/use-auth";
import { useToast } from "@/hooks/use-toast";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { CheckCircle2, XCircle } from "lucide-react";

// Schema for login form
const loginSchema = z.object({
  identifier: z.string().min(3, "Please enter a valid email or username"),
  password: z.string().min(6, "Password must be at least 6 characters"),
});

// Schema for registration form with additional fields
const registerSchema = z.object({
  email: z.string().email("Please enter a valid email address"),
  username: z.string().min(3, "Username must be at least 3 characters"),
  password: z.string().min(6, "Password must be at least 6 characters"),
  confirmPassword: z.string().min(6, "Confirm password must be at least 6 characters"),
}).refine(data => data.password === data.confirmPassword, {
  message: "Passwords do not match",
  path: ["confirmPassword"],
});

type LoginFormValues = z.infer<typeof loginSchema>;
type RegisterFormValues = z.infer<typeof registerSchema>;

export default function AuthPage() {
  const [activeTab, setActiveTab] = useState<string>("login");
  const [, navigate] = useLocation();
  const { toast } = useToast();
  const { user, loginMutation, registerMutation } = useAuth();
  const [usernameStatus, setUsernameStatus] = useState<'checking' | 'available' | 'taken' | null>(null);
  const [usernameValue, setUsernameValue] = useState("");
  const [isCheckingStoredAuth, setIsCheckingStoredAuth] = useState(true);
  const [earlyAccessToken, setEarlyAccessToken] = useState<string | null>(null);
  
  // Check if there's stored authentication on page load
  useEffect(() => {
    const checkStoredAuth = () => {
      try {
        const storedAuth = localStorage.getItem('tvtantrum_auth');
        if (storedAuth) {
          const authData = JSON.parse(storedAuth);
          
          // Check if the stored auth is valid (less than 24 hours old)
          if (authData.isLoggedIn && authData.timestamp) {
            const storedTime = new Date(authData.timestamp);
            const now = new Date();
            const hoursDiff = (now.getTime() - storedTime.getTime()) / (1000 * 60 * 60);
            
            if (hoursDiff < 24) {
              console.log("Found valid stored auth, waiting for user data...");
              return true;
            }
          }
        }
        return false;
      } catch (e) {
        console.error('Error checking stored auth:', e);
        return false;
      } finally {
        setIsCheckingStoredAuth(false);
      }
    };
    
    // Perform the check
    checkStoredAuth();
  }, []);
  
  // Check for early access token in localStorage or URL
  useEffect(() => {
    // First check localStorage for token (preferred method)
    const storedToken = localStorage.getItem("earlyAccessToken");
    if (storedToken) {
      console.log("Found token in localStorage:", storedToken);
      setEarlyAccessToken(storedToken);
      
      // Switch to register tab when valid token is present
      if (storedToken === "2025") {
        setActiveTab("register");
      }
      return;
    }
    
    // If not in localStorage, check URL (fallback)
    const params = new URLSearchParams(window.location.search);
    const urlToken = params.get('token');
    
    if (urlToken) {
      console.log("Found token in URL:", urlToken);
      setEarlyAccessToken(urlToken);
      localStorage.setItem("earlyAccessToken", urlToken);
      
      // Switch to register tab when token is present
      if (urlToken === "2025") {
        setActiveTab("register");
      }
    }
  }, []);

  // Username availability check
  useEffect(() => {
    // Don't check if username is less than 3 characters
    if (!usernameValue || usernameValue.length < 3) {
      setUsernameStatus(null);
      return;
    }
    
    // Set status to checking before API call
    setUsernameStatus('checking');
    
    // Debounce the API call - only make it after user stops typing
    const timeoutId = setTimeout(async () => {
      try {
        const response = await fetch(`/api/check-username?username=${encodeURIComponent(usernameValue)}`);
        const data = await response.json();
        setUsernameStatus(data.available ? 'available' : 'taken');
      } catch (error) {
        console.error('Failed to check username availability:', error);
        setUsernameStatus(null);
      }
    }, 500);
    
    return () => clearTimeout(timeoutId);
  }, [usernameValue]);
  
  // Helper function to get the redirect path from URL if available
  const getRedirectPath = () => {
    const params = new URLSearchParams(window.location.search);
    const redirect = params.get('redirect');
    return redirect ? decodeURIComponent(redirect) : '/';
  };

  // Display a loading state while checking authentication
  if (isCheckingStoredAuth) {
    return (
      <div className="container mx-auto flex items-center justify-center h-screen">
        <div className="text-center">
          <div className="animate-spin rounded-full h-10 w-10 border-b-2 border-primary mx-auto mb-4"></div>
          <p className="text-muted-foreground">Checking authentication...</p>
        </div>
      </div>
    );
  }
  
  // Redirect if user is already logged in
  if (user) {
    navigate(getRedirectPath());
    return null;
  }

  // Login and register forms - initialize outside conditional rendering to avoid hook issues
  const loginFormMethods = useForm<LoginFormValues>({
    resolver: zodResolver(loginSchema),
    defaultValues: {
      identifier: "",
      password: "",
    },
  });

  const registerFormMethods = useForm<RegisterFormValues>({
    resolver: zodResolver(registerSchema),
    defaultValues: {
      username: "",
      email: "",
      password: "",
      confirmPassword: "",
    },
  });

  // Handle login submission

  function onLoginSubmit(data: LoginFormValues) {
    loginMutation.mutate(data, {
      onSuccess: () => {
        toast({
          title: "Login successful",
          description: "Welcome back!",
        });
        navigate(getRedirectPath());
      },
      onError: (error: any) => {
        // Debug the error
        console.log('Login error in auth-page:', error.message, error);
        
        // Check if the error is about pending approval by looking at our custom property
        if (error.isPendingApproval || error.message.includes("pending approval")) {
          console.log('Detected pending approval, redirecting...');
          toast({
            title: "Account Pending Approval",
            description: "Your account has been created but requires admin approval.",
          });
          navigate("/registration-pending");
        } else {
          toast({
            title: "Login failed",
            description: error.message || "Please check your credentials and try again",
            variant: "destructive",
          });
        }
      },
    });
  }

  // Handle registration submission
  function onRegisterSubmit(data: RegisterFormValues) {
    // Check username availability before submitting
    if (usernameStatus === 'taken') {
      toast({
        title: "Username already taken",
        description: "Please choose a different username.",
        variant: "destructive",
      });
      return;
    }
    
    // If username is still being checked, wait for the check to complete
    if (usernameStatus === 'checking') {
      toast({
        title: "Please wait",
        description: "We're still checking if your username is available.",
      });
      return;
    }
    
    // Make sure we have a valid early access token
    if (!earlyAccessToken || earlyAccessToken !== "2025") {
      toast({
        title: "Early access token missing",
        description: "You need a valid early access token to register.",
        variant: "destructive",
      });
      return;
    }
    
    // Remove confirmPassword as it's not needed for the API
    const { confirmPassword, ...registerData } = data;
    
    registerMutation.mutate(registerData, {
      onSuccess: () => {
        toast({
          title: "Registration successful",
          description: "Your account has been created and is pending approval.",
        });
        navigate("/registration-pending");
      },
      onError: (error) => {
        // If the error is about username already taken, update the usernameStatus
        if (error.message?.includes("Username already taken")) {
          setUsernameStatus('taken');
          toast({
            title: "Username already taken",
            description: "Please choose a different username.",
            variant: "destructive",
          });
        } else {
          toast({
            title: "Registration failed",
            description: error.message || "Please try again",
            variant: "destructive",
          });
        }
      },
    });
  }

  return (
    <div className="container mx-auto py-10">
      <div className="flex flex-col md:flex-row gap-6 max-w-6xl mx-auto">
        {/* Authentication Forms */}
        <div className="w-full md:w-1/2">
          <Tabs defaultValue="login" value={activeTab} onValueChange={setActiveTab} className="w-full">
            <TabsList className="grid w-full grid-cols-2">
              <TabsTrigger value="login">Login</TabsTrigger>
              <TabsTrigger value="register">Register</TabsTrigger>
            </TabsList>
            
            {/* Login Tab */}
            <TabsContent value="login">
              <Card>
                <CardHeader>
                  <CardTitle>Login to your account</CardTitle>
                  <CardDescription>
                    Enter your credentials to access your account
                  </CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <Form {...loginFormMethods}>
                    <form onSubmit={loginFormMethods.handleSubmit(onLoginSubmit)} className="space-y-4">
                      <FormField
                        control={loginFormMethods.control}
                        name="identifier"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Email or Username</FormLabel>
                            <FormControl>
                              <Input 
                                type="text"
                                placeholder="Enter your email or username"
                                {...field}
                                disabled={loginMutation.isPending}
                              />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={loginFormMethods.control}
                        name="password"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Password</FormLabel>
                            <FormControl>
                              <Input 
                                type="password" 
                                placeholder="Enter your password"
                                {...field}
                                disabled={loginMutation.isPending}
                              />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      
                      <Button 
                        type="submit" 
                        className="w-full"
                        disabled={loginMutation.isPending}
                      >
                        {loginMutation.isPending ? "Logging in..." : "Login"}
                      </Button>
                    </form>
                  </Form>
                </CardContent>
                <CardFooter className="flex flex-col">
                  <div className="text-sm text-muted-foreground mt-2">
                    Don't have an account?{" "}
                    <Button 
                      variant="link" 
                      className="p-0 h-auto" 
                      onClick={() => setActiveTab("register")}
                    >
                      Register
                    </Button>
                  </div>
                </CardFooter>
              </Card>
            </TabsContent>
            
            {/* Register Tab */}
            <TabsContent value="register">
              <Card>
                <CardHeader>
                  <CardTitle>Create an account</CardTitle>
                  <CardDescription>
                    Register to save your favorite shows and more
                  </CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <Form {...registerFormMethods}>
                    <form onSubmit={registerFormMethods.handleSubmit(onRegisterSubmit)} className="space-y-4">
                      <FormField
                        control={registerFormMethods.control}
                        name="username"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Username</FormLabel>
                            <div className="relative">
                              <FormControl>
                                <Input 
                                  placeholder="Choose a display name"
                                  {...field}
                                  onChange={(e) => {
                                    field.onChange(e);
                                    setUsernameValue(e.target.value);
                                  }}
                                  disabled={registerMutation.isPending}
                                  className={usernameStatus === 'taken' ? "pr-10 border-red-500 focus-visible:ring-red-500" : 
                                            usernameStatus === 'available' ? "pr-10 border-green-500 focus-visible:ring-green-500" : 
                                            "pr-10"}
                                />
                              </FormControl>
                              {usernameStatus === 'checking' && (
                                <div className="absolute right-3 top-1/2 -translate-y-1/2">
                                  <svg className="animate-spin h-5 w-5 text-muted-foreground" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                  </svg>
                                </div>
                              )}
                              {usernameStatus === 'available' && field.value.length >= 3 && (
                                <div className="absolute right-3 top-1/2 -translate-y-1/2">
                                  <CheckCircle2 className="h-5 w-5 text-green-500" />
                                </div>
                              )}
                              {usernameStatus === 'taken' && (
                                <div className="absolute right-3 top-1/2 -translate-y-1/2">
                                  <XCircle className="h-5 w-5 text-red-500" />
                                </div>
                              )}
                            </div>
                            {usernameStatus === 'taken' && (
                              <p className="text-sm font-medium text-red-500">
                                Username is already taken
                              </p>
                            )}
                            {usernameStatus === 'available' && field.value.length >= 3 && (
                              <p className="text-sm font-medium text-green-500">
                                Username is available
                              </p>
                            )}
                            <FormDescription>
                              This will be used for your reviews and comments
                            </FormDescription>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={registerFormMethods.control}
                        name="email"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Email</FormLabel>
                            <FormControl>
                              <Input 
                                type="email" 
                                placeholder="Enter your email address"
                                {...field}
                                disabled={registerMutation.isPending}
                              />
                            </FormControl>
                            <FormDescription>
                              We'll never share your email with anyone else
                            </FormDescription>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={registerFormMethods.control}
                        name="password"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Password</FormLabel>
                            <FormControl>
                              <Input 
                                type="password" 
                                placeholder="Create a password"
                                {...field}
                                disabled={registerMutation.isPending}
                              />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={registerFormMethods.control}
                        name="confirmPassword"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Confirm Password</FormLabel>
                            <FormControl>
                              <Input 
                                type="password" 
                                placeholder="Confirm your password"
                                {...field}
                                disabled={registerMutation.isPending}
                              />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      
                      <Button 
                        type="submit" 
                        className="w-full"
                        disabled={registerMutation.isPending}
                      >
                        {registerMutation.isPending ? "Creating account..." : "Register"}
                      </Button>
                    </form>
                  </Form>
                </CardContent>
                <CardFooter className="flex flex-col">
                  <div className="text-sm text-muted-foreground mt-2">
                    Already have an account?{" "}
                    <Button 
                      variant="link" 
                      className="p-0 h-auto" 
                      onClick={() => setActiveTab("login")}
                    >
                      Login
                    </Button>
                  </div>
                </CardFooter>
              </Card>
            </TabsContent>
          </Tabs>
        </div>
        
        {/* Hero Section */}
        <div className="w-full md:w-1/2 bg-gradient-to-br from-primary/90 to-primary/50 rounded-xl p-8 text-primary-foreground flex flex-col justify-center">
          <div>
            <h1 className="text-3xl font-bold mb-4">Welcome to the TV tantrum community</h1>
            <p className="mb-6 text-lg opacity-90">
              Join the revolution to transform the culture of children's TV
            </p>
            <div className="space-y-4">
              <div className="flex items-start gap-2">
                <div className="bg-white/20 rounded-full p-1 mt-1">
                  <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                    <polyline points="20 6 9 17 4 12"></polyline>
                  </svg>
                </div>
                <div>
                  <h3 className="font-medium">Save Your Favorites</h3>
                  <p className="opacity-75 text-sm">Create an account to bookmark and save your favorite shows for quick access later.</p>
                </div>
              </div>
              
              <div className="flex items-start gap-2">
                <div className="bg-white/20 rounded-full p-1 mt-1">
                  <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                    <polyline points="20 6 9 17 4 12"></polyline>
                  </svg>
                </div>
                <div>
                  <h3 className="font-medium">Get Personalized Recommendations</h3>
                  <p className="opacity-75 text-sm">We analyze your preferences to suggest shows that match your child's sensory profile.</p>
                </div>
              </div>
              
              <div className="flex items-start gap-2">
                <div className="bg-white/20 rounded-full p-1 mt-1">
                  <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                    <polyline points="20 6 9 17 4 12"></polyline>
                  </svg>
                </div>
                <div>
                  <h3 className="font-medium">Leave Reviews</h3>
                  <p className="opacity-75 text-sm">Share your experiences and help other parents by rating and reviewing shows you've watched.</p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
</file>

<file path="client/src/App.tsx">
import { Switch, Route } from "wouter";
import { queryClient } from "./lib/queryClient";
import { QueryClientProvider } from "@tanstack/react-query";
import { Toaster } from "@/components/ui/toaster";
import { TooltipProvider } from "@/components/ui/tooltip";
import NotFound from "@/pages/not-found";
import Navbar from "@/components/Navbar";
import Footer from "@/components/Footer";
import Home from "@/pages/home";
import Browse from "@/pages/browse";
import Detail from "@/pages/detail";
import Compare from "@/pages/compare";
import About from "@/pages/about";
import AuthPage from "@/pages/auth-page-new";
import AdminPage from "@/pages/admin-page";
import LandingPage from "@/pages/landing-page";
import PreLaunchAbout from "@/pages/pre-launch-about";
import PreLaunchFAQ from "@/pages/pre-launch-faq";
import TokenEntryPage from "@/pages/token-entry";
import RegistrationPendingPage from "@/pages/registration-pending";
import ColorPaletteCustomizer from "@/components/ColorPaletteCustomizer";
import { AuthProvider } from "@/hooks/use-auth";
import { ApprovedRoute } from "@/lib/protected-route-approved";
import { AdminRoute } from "@/lib/protected-route-admin";

function Router() {
  // Access URL to check for development mode
  const isDevMode = window.location.search.includes('dev=true');
  
  // Check if user has early access token stored in localStorage
  const hasEarlyAccess = localStorage.getItem("earlyAccessShown") === "true";

  return (
    <div className="min-h-screen flex flex-col">
      <Switch>
        {/* Pre-Launch Routes */}
        <Route path="/">
          <LandingPage />
        </Route>
        <Route path="/about">
          <PreLaunchAbout />
        </Route>
        <Route path="/faq">
          <PreLaunchFAQ />
        </Route>
        <Route path="/token-entry">
          <TokenEntryPage />
        </Route>
        <Route path="/early-access">
          <AuthPage />
        </Route>
        <Route path="/registration-pending">
          <RegistrationPendingPage />
        </Route>
        
        {/* Main App Routes - Accessible only with approved accounts or in dev mode */}
        {isDevMode ? (
          // In dev mode, use regular routes without approval check
          <Route path="/home">
            <div className="flex-grow flex flex-col">
              <Navbar />
              <div className="flex-grow">
                <Home />
              </div>
              <Footer />
            </div>
          </Route>
        ) : (
          // In production, use ApprovedRoute that checks for approval status
          <ApprovedRoute 
            path="/home" 
            component={() => (
              <div className="flex-grow flex flex-col">
                <Navbar />
                <div className="flex-grow">
                  <Home />
                </div>
                <Footer />
              </div>
            )} 
          />
        )}
        
        {isDevMode ? (
          <Route path="/browse">
            <div className="flex-grow flex flex-col">
              <Navbar />
              <div className="flex-grow">
                <Browse />
              </div>
              <Footer />
            </div>
          </Route>
        ) : (
          <ApprovedRoute 
            path="/browse" 
            component={() => (
              <div className="flex-grow flex flex-col">
                <Navbar />
                <div className="flex-grow">
                  <Browse />
                </div>
                <Footer />
              </div>
            )} 
          />
        )}

        {isDevMode ? (
          <Route path="/shows/:id">
            {(params) => (
              <div className="flex-grow flex flex-col">
                <Navbar />
                <div className="flex-grow">
                  <Detail id={parseInt(params.id, 10)} />
                </div>
                <Footer />
              </div>
            )}
          </Route>
        ) : (
          // This is a special case since it has a parameter
          <Route path="/shows/:id">
            {(params) => (
              <ApprovedRoute 
                path={`/shows/${params.id}`} 
                component={() => (
                  <div className="flex-grow flex flex-col">
                    <Navbar />
                    <div className="flex-grow">
                      <Detail id={parseInt(params.id, 10)} />
                    </div>
                    <Footer />
                  </div>
                )} 
              />
            )}
          </Route>
        )}

        {isDevMode ? (
          <Route path="/compare">
            <div className="flex-grow flex flex-col">
              <Navbar />
              <div className="flex-grow">
                <Compare />
              </div>
              <Footer />
            </div>
          </Route>
        ) : (
          <ApprovedRoute 
            path="/compare" 
            component={() => (
              <div className="flex-grow flex flex-col">
                <Navbar />
                <div className="flex-grow">
                  <Compare />
                </div>
                <Footer />
              </div>
            )} 
          />
        )}

        {isDevMode ? (
          <Route path="/app-about">
            <div className="flex-grow flex flex-col">
              <Navbar />
              <div className="flex-grow">
                <About />
              </div>
              <Footer />
            </div>
          </Route>
        ) : (
          <ApprovedRoute 
            path="/app-about" 
            component={() => (
              <div className="flex-grow flex flex-col">
                <Navbar />
                <div className="flex-grow">
                  <About />
                </div>
                <Footer />
              </div>
            )} 
          />
        )}

        {/* Auth page is always accessible */}
        <Route path="/auth">
          <div className="flex-grow flex flex-col">
            <Navbar />
            <div className="flex-grow">
              <AuthPage />
            </div>
            <Footer />
          </div>
        </Route>
        {/* Admin route with approval and admin check */}
        {isDevMode ? (
          <Route path="/admin">
            <div className="flex-grow flex flex-col">
              <Navbar />
              <div className="flex-grow">
                <AdminPage />
              </div>
              <Footer />
            </div>
          </Route>
        ) : (
          <AdminRoute 
            path="/admin" 
            component={() => (
              <div className="flex-grow flex flex-col">
                <Navbar />
                <div className="flex-grow">
                  <AdminPage />
                </div>
                <Footer />
              </div>
            )} 
          />
        )}
        <Route>
          <NotFound />
        </Route>
      </Switch>
    </div>
  );
}

function App() {
  return (
    <QueryClientProvider client={queryClient}>
      <AuthProvider>
        <TooltipProvider>
          <Toaster />
          <Router />
          <ColorPaletteCustomizer />
        </TooltipProvider>
      </AuthProvider>
    </QueryClientProvider>
  );
}

export default App;
</file>

<file path="server/auth.ts">
import passport from "passport";
import { Strategy as LocalStrategy } from "passport-local";
import { Express } from "express";
import session from "express-session";
import { scrypt, randomBytes, timingSafeEqual } from "crypto";
import { promisify } from "util";
import { storage } from "./database-storage";
import { users } from "@shared/schema";
import connectPg from "connect-pg-simple";
import { pool } from "./db";

// Database session store
const PostgresSessionStore = connectPg(session);
export const sessionStore = new PostgresSessionStore({ 
  pool, 
  createTableIfMissing: true 
});

// No need to import User here as types are explicitly defined
declare global {
  namespace Express {
    // Define what fields from the User schema should be available in req.user
    interface User {
      id: number;
      email: string;
      username: string | null;
      isAdmin: boolean | null;
      createdAt: string;
      isApproved: boolean | null;
    }
  }
}

const scryptAsync = promisify(scrypt);

async function hashPassword(password: string) {
  const salt = randomBytes(16).toString("hex");
  const buf = (await scryptAsync(password, salt, 64)) as Buffer;
  return `${buf.toString("hex")}.${salt}`;
}

async function comparePasswords(supplied: string, stored: string) {
  console.log('comparePasswords called with supplied password and stored hash');
  
  try {
    const [hashed, salt] = stored.split(".");
    
    if (!salt) {
      console.error('Invalid password format, no salt found in:', stored);
      return false;
    }
    
    console.log('Password hash parts:', { 
      hashedLength: hashed ? hashed.length : 0,
      saltLength: salt ? salt.length : 0
    });
    
    const hashedBuf = Buffer.from(hashed, "hex");
    const suppliedBuf = (await scryptAsync(supplied, salt, 64)) as Buffer;
    
    const result = timingSafeEqual(hashedBuf, suppliedBuf);
    console.log('Password comparison result:', result);
    
    return result;
  } catch (error) {
    console.error('Error comparing passwords:', error);
    return false;
  }
}

export function setupAuth(app: Express) {
  if (!process.env.SESSION_SECRET) {
    // Use a default session secret for development
    process.env.SESSION_SECRET = 'tv-tantrum-development-secret';
    console.warn('Warning: SESSION_SECRET environment variable not set, using insecure default');
  }

  const sessionSettings: session.SessionOptions = {
    secret: process.env.SESSION_SECRET,
    resave: false,
    saveUninitialized: false,
    store: sessionStore,
    cookie: {
      secure: process.env.NODE_ENV === 'production', // Use secure cookies in production
      maxAge: 30 * 24 * 60 * 60 * 1000, // 30 days
      httpOnly: true
    }
  };

  app.use(session(sessionSettings));
  app.use(passport.initialize());
  app.use(passport.session());

  passport.use(
    new LocalStrategy(
      { 
        usernameField: 'identifier', // This will accept either email or username
        passwordField: 'password'
      },
      async (identifier, password, done) => {
        try {
          // Check if the identifier is an email (contains @) or a username
          const isEmail = identifier.includes('@');
          console.log('Login attempt with identifier:', { identifier, isEmail });
          
          // Try to find the user by email or username
          let user;
          if (isEmail) {
            user = await storage.getUserByEmail(identifier);
          } else {
            user = await storage.getUserByUsername(identifier);
          }
          
          console.log('User found:', user ? { id: user.id, email: user.email, exists: true } : 'No user found');
          
          // Handle authentication failure
          if (!user) {
            return done(null, false, { message: "Invalid credentials" });
          }
          
          const passwordValid = await comparePasswords(password, user.password);
          console.log('Password validation:', { passwordValid });
          
          if (!passwordValid) {
            return done(null, false, { message: "Invalid credentials" });
          } 
          // Check if user account is approved
          else if (!user.isAdmin && !user.isApproved) {
            return done(null, false, { message: "Your account is pending approval" });
          } 
          // Authentication success
          else {
            // Don't send back password with the user object
            const { password: _, ...safeUser } = user;
            return done(null, safeUser as Express.User);
          }
        } catch (error) {
          return done(error);
        }
      }
    ),
  );

  passport.serializeUser((user, done) => {
    done(null, user.id);
  });

  passport.deserializeUser(async (id: number, done) => {
    try {
      const user = await storage.getUser(id);
      if (!user) {
        return done(null, false);
      }
      // Don't include password in the user object
      const { password: _, ...safeUser } = user;
      done(null, safeUser as Express.User);
    } catch (error) {
      done(error);
    }
  });

  app.post("/api/register", async (req, res, next) => {
    try {
      const { username, password, email, country } = req.body;
      
      console.log('Registration attempt:', { email, username, country });
      
      if (!email || !password) {
        return res.status(400).send({ message: "Email and password are required" });
      }
      
      // Username is required by database schema
      if (!username) {
        return res.status(400).send({ message: "Username is required" });
      }

      // Check for duplicate email
      const existingUserByEmail = await storage.getUserByEmail(email);
      if (existingUserByEmail) {
        return res.status(400).send({ message: "Email already registered" });
      }

      // Check for duplicate username
      const existingUserByUsername = await storage.getUserByUsername(username);
      if (existingUserByUsername) {
        return res.status(400).send({ message: "Username already taken" });
      }

      try {
        // Use direct database insertion with transaction
        const client = await pool.connect();
        let user;
        
        try {
          await client.query('BEGIN');
          
          const hashedPassword = await hashPassword(password);
          const now = new Date().toISOString();
          
          // Direct SQL insert with transaction
          const result = await client.query(`
            INSERT INTO users (email, password, username, is_admin, country, created_at, is_approved) 
            VALUES ($1, $2, $3, $4, $5, $6, $7) 
            RETURNING *
          `, [
            email,
            hashedPassword,
            username,
            false, // isAdmin
            country || '',
            now,
            false // isApproved
          ]);
          
          await client.query('COMMIT');
          
          // Map result to user object
          user = {
            id: result.rows[0].id,
            email: result.rows[0].email,
            password: result.rows[0].password,
            username: result.rows[0].username,
            isAdmin: result.rows[0].is_admin,
            country: result.rows[0].country,
            createdAt: result.rows[0].created_at,
            isApproved: result.rows[0].is_approved
          };
          
          console.log('User successfully inserted into database:', { id: user.id });
        } catch (dbErr) {
          await client.query('ROLLBACK');
          throw dbErr;
        } finally {
          client.release();
        }

        // Don't send back password with the user object
        const { password: _, ...safeUser } = user;

        console.log('User registered successfully:', { id: user.id, email: user.email, username: user.username });

        req.login(safeUser as Express.User, (err) => {
          if (err) {
            console.error('Error during login after registration:', err);
            return next(err);
          }
          res.status(201).json(safeUser);
        });
      } catch (dbError) {
        console.error('Database error during user creation:', dbError);
        return res.status(500).send({ message: "Error creating user account. Please try again." });
      }
    } catch (error) {
      console.error('Unexpected error during registration:', error);
      next(error);
    }
  });

  app.post("/api/login", (req, res, next) => {
    passport.authenticate("local", (err: Error | null, user: Express.User | false, info: { message: string } | undefined) => {
      console.log('Login attempt:', { err, user: !!user, info });
      
      if (err) return next(err);
      if (!user) {
        // Pass along the specific error message from the authentication strategy
        console.log('Login failed:', info);
        
        // Check if the message is about pending approval
        if (info?.message && info.message.includes("pending approval")) {
          return res.status(403).json({ 
            message: info.message,
            isPendingApproval: true
          });
        }
        
        return res.status(401).json({ 
          message: info?.message || "Invalid username, email, or password",
          isPendingApproval: false
        });
      }
      req.login(user, (err) => {
        if (err) return next(err);
        res.status(200).json(user);
      });
    })(req, res, next);
  });

  app.post("/api/logout", (req, res, next) => {
    req.logout((err) => {
      if (err) return next(err);
      res.sendStatus(200);
    });
  });

  app.get("/api/user", (req, res) => {
    if (!req.isAuthenticated()) {
      return res.status(401).json({ message: "Not authenticated" });
    }
    res.json(req.user);
  });
  
  // Check if a username is available
  app.get("/api/check-username", async (req, res) => {
    try {
      const { username } = req.query;
      
      if (!username || typeof username !== 'string') {
        return res.status(400).json({ 
          message: "Username parameter is required", 
          available: false 
        });
      }
      
      const existingUser = await storage.getUserByUsername(username);
      
      res.json({ 
        available: !existingUser,
        message: existingUser ? "Username is already taken" : "Username is available"
      });
    } catch (error) {
      console.error("Error checking username availability:", error);
      res.status(500).json({ 
        message: "Failed to check username availability", 
        available: false 
      });
    }
  });
  
  // Check if an email is available
  app.get("/api/check-email", async (req, res) => {
    try {
      const { email } = req.query;
      
      if (!email || typeof email !== 'string') {
        return res.status(400).json({ 
          message: "Email parameter is required", 
          available: false 
        });
      }
      
      const existingUser = await storage.getUserByEmail(email);
      
      res.json({ 
        available: !existingUser,
        message: existingUser ? "Email is already registered" : "Email is available"
      });
    } catch (error) {
      console.error("Error checking email availability:", error);
      res.status(500).json({ 
        message: "Failed to check email availability", 
        available: false 
      });
    }
  });
  
  // User management endpoints (admin only)
  app.get("/api/users", async (req, res) => {
    if (!req.isAuthenticated() || !req.user.isAdmin) {
      return res.status(403).json({ message: "Unauthorized" });
    }
    
    try {
      const users = await storage.getAllUsers();
      // Remove passwords before sending the response
      const safeUsers = users.map(user => {
        const { password, ...safeUser } = user;
        return safeUser;
      });
      
      res.json(safeUsers);
    } catch (error) {
      res.status(500).json({ message: "Error fetching users" });
    }
  });
  
  app.patch("/api/users/:userId/approve", async (req, res) => {
    if (!req.isAuthenticated() || !req.user.isAdmin) {
      return res.status(403).json({ message: "Unauthorized" });
    }
    
    const userId = parseInt(req.params.userId, 10);
    const { isApproved } = req.body;
    
    if (typeof isApproved !== 'boolean') {
      return res.status(400).json({ message: "Invalid approval status" });
    }
    
    try {
      const updatedUser = await storage.updateUserApproval(userId, isApproved);
      
      if (!updatedUser) {
        return res.status(404).json({ message: "User not found" });
      }
      
      // Remove password before sending the response
      const { password, ...safeUser } = updatedUser;
      
      res.json(safeUser);
    } catch (error) {
      res.status(500).json({ message: "Error updating user approval status" });
    }
  });
}
</file>

<file path="customImageMap.json">
{
  "1": "/custom-images/a for adley.png",
  "2": "https://m.media-amazon.com/images/M/MV5BMDZjOTE4MTgtYzE2ZC00YjZiLWJmZWEtM2YxYTAxZjVjZTBmXkEyXkFqcGc@._V1_SX300.jpg",
  "3": "/Adventure Agents.png",
  "4": "/uploads/optimized/show-4-1747652012428-optimized.jpg",
  "5": "/Akili and Me.jpg",
  "6": "/uploads/optimized/show-6-1747652012624-optimized.jpg",
  "7": "/alpha blocks.webp",
  "8": "/amakandu.png",
  "9": "/uploads/optimized/show-9-1747652012263-optimized.jpg",
  "10": "/uploads/optimized/show-10-1747652013094-optimized.jpg",
  "11": "/art kids tv.png",
  "12": "/uploads/optimized/show-12-1747652012948-optimized.jpg",
  "13": "/uploads/optimized/show-13-1747652012794-optimized.jpg",
  "14": "/uploads/optimized/show-14-1747652012093-optimized.jpg",
  "15": "/uploads/optimized/show-15-1747652011919-optimized.jpg",
  "16": "/custom-images/babblarna.jpg",
  "17": "/custom-images/badanamu.jpg",
  "18": "/custom-images/bananas in pyjamas.jpg",
  "19": "/uploads/optimized/show-19-1747652014250-optimized.jpg",
  "20": "/uploads/optimized/show-20-1747652015174-optimized.jpg",
  "21": "/uploads/optimized/show-21-1747652013292-optimized.jpg",
  "22": "/uploads/optimized/show-22-1747652015541-optimized.jpg",
  "23": "/custom-images/beep and mort.jpg",
  "24": "/uploads/optimized/show-24-1747652014458-optimized.jpg",
  "25": "/between_the_lions.webp",
  "26": "/uploads/optimized/show-26-1747652014794-optimized.jpg",
  "27": "/uploads/optimized/show-27-1747652014979-optimized.jpg",
  "29": "/uploads/optimized/show-29-1747652013499-optimized.jpg",
  "30": "/uploads/optimized/show-30-1747652015758-optimized.jpg",
  "31": "/uploads/optimized/show-31-1747652013727-optimized.jpg",
  "33": "/uploads/optimized/show-33-1747652013998-optimized.jpg",
  "34": "/custom-images/booba.jpg",
  "35": "/custom-images/bounce-patrol.jpg",
  "37": "/uploads/optimized/show-37-1747652015955-optimized.jpg",
  "38": "/uploads/optimized/show-38-1747652017406-optimized.jpg",
  "39": "/uploads/optimized/show-39-1747652016580-optimized.jpg",
  "40": "/custom-images/caties-classroom.jpg",
  "42": "/uploads/optimized/show-42-1747652016167-optimized.jpg",
  "43": "/uploads/optimized/show-43-1747652017204-optimized.jpg",
  "44": "/custom-images/casper-babypants.jpg",
  "45": "/custom-images/charlies-colorform-city.jpg",
  "46": "/uploads/optimized/show-46-1747652017601-optimized.jpg",
  "47": "/uploads/optimized/show-47-1747652016402-optimized.jpg",
  "48": "/custom-images/city-vehicles.png",
  "49": "/uploads/optimized/show-49-1747652016746-optimized.jpg",
  "50": "/custom-images/clifford-the-big-red-dog-2019.jpg",
  "51": "/custom-images/cloudbabies.webp",
  "52": "/uploads/optimized/show-52-1747652016941-optimized.jpg",
  "53": "/uploads/optimized/show-53-1747652015377-optimized.jpg",
  "55": "/custom-images/colourblocks.jpg",
  "56": "/custom-images/cosmic-kids-yoga.jpg",
  "58": "/custom-images/cowboy-jack.png",
  "59": "/custom-images/curious-george-2006-present.jpg",
  "60": "/custom-images/cyberchase-2002-present.jpg",
  "61": "/uploads/optimized/show-61-1747652019259-optimized.jpg",
  "62": "/uploads/optimized/show-62-1747652018113-optimized.jpg",
  "63": "/uploads/optimized/show-63-1747652018856-optimized.jpg",
  "64": "/uploads/optimized/show-64-1747652019063-optimized.jpg",
  "65": "/custom-images/dg-bible-songs.png",
  "67": "/uploads/optimized/show-67-1747652018326-optimized.jpg",
  "68": "/uploads/optimized/show-68-1747652018620-optimized.jpg",
  "71": "/uploads/optimized/show-71-1747652017816-optimized.jpg",
  "80": "/custom-images/elmos-world.webp",
  "81": "/custom-images/english-tree.jpg",
  "83": "/custom-images/fireman-sam-1987.jpg",
  "84": "/custom-images/fireman-sam-2008.webp",
  "85": "/custom-images/franklin-1997-2004.jpg",
  "86": "/custom-images/franklin-and-friends-2011.webp",
  "90": "/custom-images/genevieve-playhouse.png",
  "91": "/custom-images/get-rolling-with-otis.jpg",
  "92": "/custom-images/gigantosaurus.jpg",
  "93": "/custom-images/girlsttoyzz.png",
  "96": "/custom-images/gracies-corner.jpg",
  "106": "/custom-images/hey-duggee.webp",
  "107": "/custom-images/horrid-henry.jpg",
  "110": "/custom-images/in-the-night-garden-07-09.jpeg",
  "115": "/custom-images/junytony-songs-and-stories.jpeg",
  "116": "/custom-images/karazahchannel.png",
  "117": "/custom-images/katuri-tv.webp",
  "118": "/custom-images/kazwa-and-bilal.png",
  "120": "/custom-images/kids-2-kids.png",
  "123": "/custom-images/laurie-berkner.jpg",
  "125": "/custom-images/leo-the-truck.jpg",
  "126": "/custom-images/leo-the-wildlife-ranger.webp",
  "128": "/custom-images/lifekids-blinkys-bible-adventures.png",
  "129": "/custom-images/listener-kids.jpg",
  "130": "/custom-images/little-angel.jpg",
  "134": "/custom-images/lucas-the-spider-2021.jpg",
  "137": "/custom-images/maggie-and-the-ferocious-beast.jpg",
  "144": "/custom-images/minno-bible-stories-for-kids.png",
  "145": "/custom-images/minuscule.png",
  "147": "/custom-images/miss-katie-sings.jpg",
  "148": "/custom-images/miss-moni.png",
  "149": "/custom-images/miss-rachel.webp",
  "160": "/custom-images/nick-copes-popcast.jpg",
  "161": "/custom-images/ninja-kids.png",
  "162": "/custom-images/ninjago.jpg",
  "163": "/custom-images/noddy-original-series-1998.jpg",
  "167": "/custom-images/numberblocks-2017-present.jpg",
  "176": "/custom-images/paw-patrol.webp",
  "178": "/custom-images/peppa-pig-2004-present.jpg",
  "187": "/custom-images/planet-earth.jpg",
  "188": "/custom-images/play-school.webp",
  "192": "/custom-images/postman-pat-special-delivery-service-2008-2017.jpg",
  "198": "/custom-images/rc-action-channel.png",
  "217": "/custom-images/silly-miss-lily-paisleys-corner.png",
  "221": "/custom-images/spanish-with-liz.png",
  "244": "/uploads/optimized/show-image-1747652914785-950235537-optimized.jpg",
  "251": "/custom-images/the-bear-construction.png",
  "256": "/custom-images/the-cat-in-the-hat.jpg",
  "259": "/custom-images/the-enchanted-world-of-brambly-hedge.jpg",
  "273": "/custom-images/the-stinky-and-dirty-show-2016-2019.jpg",
  "275": "/custom-images/theodore-tugboat.png",
  "278": "/custom-images/time-for-school.webp",
  "280": "/custom-images/tom-and-jerry.jpg",
  "281": "/custom-images/topsy-and-tim.jpg",
  "286": "/custom-images/tweedy-and-fluff.jpeg",
  "292": "/custom-images/wacky-races.jpg",
  "296": "/custom-images/woolly-and-tig.jpg",
  "297": "/custom-images/work-it-out-wombats.jpg",
  "298": "/custom-images/xavier-riddle-and-the-secret-museum.jpg",
  "300": "/custom-images/zoboomafoo-1999-2001.jpg",
  "322": "/uploads/optimized/show-image-1747649662419-108876412-optimized.jpg",
  "323": "/uploads/optimized/show-image-1747649854525-201361065-optimized.jpg",
  "324": "/uploads/optimized/show-image-1747650197573-166483429-optimized.jpg"
}
</file>

<file path="customShowDetailsMap.json">
{
  "1": {
    "stimulationScore": 4,
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Moderate",
    "sceneFrequency": "Moderate-High",
    "interactivityLevel": "High",
    "dialogueIntensity": "Moderate-High",
    "soundEffectsLevel": "Moderate-High",
    "animationStyle": "Live-Action Family Videos",
    "ageRange": "3-8",
    "themes": [
      "Preschool-Basics",
      "Creativity & Imagination",
      "Family Relationships",
      "Family Values",
      "Conflict Resolution",
      "Problem Solving",
      "Relatable Situations"
    ],
    "description": "A children's TV show",
    "TV or YouTube": "YouTube"
  },
  "2": {
    "stimulationScore": 3,
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Moderate",
    "sceneFrequency": "Moderate",
    "interactivityLevel": "High",
    "dialogueIntensity": "Moderate-High",
    "soundEffectsLevel": "Moderate",
    "animationStyle": "3D CGI animation with bright and vivid colors",
    "TV or YouTube": "TV",
    "ageRange": "4-8",
    "Seasons": "4 Seasons",
    "Avg. Epsiode": " 12 minutes",
    "themes": [
      "Positive Role Models",
      "STEM",
      "Critical Thinking",
      "Curiosity",
      "Problem Solving",
      "Teamwork",
      "Perseverance",
      "Science"
    ]
  },
  "3": {
    "stimulationScore": 4,
    "TV or YouTube": "YouTube",
    "ageRange": "6-12, 12+",
    "themes": [
      "Enviromental Awareness",
      "Cause and Effect",
      "Life Lessons",
      "Outdoor Exploration",
      "Nature",
      "Natural World",
      "Exploration",
      "Motor Skills",
      "Animals",
      "Farm Life",
      "Emotional Intelligence",
      "Problem Solving",
      "Critical Thinking",
      "Teamwork",
      "Curiosity",
      "Adventure",
      "Discovery",
      "Safety",
      "Nature Sounds",
      "Healthy Eating",
      "Confidence Building",
      "Mature Themes",
      "Wild Animal Captures and Cooking"
    ],
    "interactivityLevel": "High",
    "animationStyle": "Live Action Outdoors Survival Adventure",
    "dialogueIntensity": "Moderate-High",
    "soundEffectsLevel": "Mod-High (Nature)",
    "musicTempo": "Low",
    "totalMusicLevel": "Low",
    "totalSoundEffectTimeLevel": "Moderate-High",
    "sceneFrequency": "Moderate"
  },
  "4": {
    "stimulationScore": 5,
    "TV or YouTube": "TV",
    "ageRange": "10-14",
    "Seasons": "10 Seasons",
    "Avg. Epsiode": " 11 minutes",
    "themes": [
      "Creativity & Imagination",
      "Humor",
      "Problem Solving",
      "Friendship",
      "Entertainment",
      "Fantasy Elements",
      "Adventure",
      "Mild Mature Themes"
    ],
    "interactivityLevel": "Low-Moderate",
    "animationStyle": "Traditional hand-drawn 2D animation",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "High",
    "musicTempo": "Moderate-High",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "High",
    "sceneFrequency": "High"
  },
  "5": {
    "stimulationScore": 3,
    "TV or YouTube": "YouTube",
    "ageRange": "3-6",
    "themes": [
      "Creativity & Imagination",
      "Early Childhood experiences",
      "Cultures & Traditions",
      "Cultural & Social",
      "Life Lessons",
      "Preschool-Basics",
      "Numeracy",
      "Literacy",
      "Motor Skills",
      "Music",
      "Repetitive Learning",
      "Language Learning",
      "Exercise",
      "Colours",
      "Shapes",
      "sing-a-long",
      "Social-Emotional",
      "Cognitive Development"
    ],
    "interactivityLevel": "High",
    "animationStyle": "2D digital animation with a hand-drawn look. Bright and cheerful colors with simple backgrounds",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "Moderate",
    "sceneFrequency": "Moderate"
  },
  "6": {
    "stimulationScore": 2,
    "TV or YouTube": "TV",
    "ageRange": "4-8",
    "Seasons": "2 Seasons",
    "Avg. Epsiode": " 26 minutes",
    "themes": [
      "Cultures & Traditions",
      "Cause and Effect",
      "Social-Emotional",
      "Critical Thinking",
      "Problem Solving"
    ],
    "interactivityLevel": "High",
    "animationStyle": "2D digital animation with a hand-drawn look. Bright and cheerful colors with simple backgrounds",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Low-Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate-High",
    "totalSoundEffectTimeLevel": "Low",
    "sceneFrequency": "Low"
  },
  "7": {
    "stimulationScore": 3,
    "TV or YouTube": "TV",
    "ageRange": "3-6",
    "Seasons": "5 Seasons",
    "Avg. Epsiode": " 5 minutes",
    "themes": [
      "Preschool-Basics",
      "Literacy",
      "Phonics",
      "Language Learning"
    ],
    "interactivityLevel": "High",
    "animationStyle": "2D digital animation with colorful and stylized block characters.",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Moderate",
    "sceneFrequency": "Moderate"
  },
  "8": {
    "stimulationScore": 4,
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate",
    "sceneFrequency": "High",
    "interactivityLevel": "High",
    "dialogueIntensity": "Low",
    "soundEffectsLevel": "Moderate-High",
    "animationStyle": "Vibrant 3D animation with cultural African themes and colorful settings",
    "TV or YouTube": "YouTube",
    "ageRange": "Any",
    "themes": [
      "Engineering Concepts",
      "Creativity & Imagination",
      "Sensory Exploration",
      "Mindfulness",
      "Nature",
      "Relaxation",
      "Captivating Visuals",
      "Nature Sounds",
      "ASMR"
    ],
    "totalSoundEffectTimeLevel": "High",
    "description": "A children's TV show"
  },
  "9": {
    "stimulationScore": 3,
    "TV or YouTube": "TV",
    "ageRange": "4-8",
    "Seasons": "1 Season",
    "Avg. Epsiode": "14 minutes",
    "themes": [
      "Dinosaurs",
      "Paleontology",
      "Adventure",
      "Science",
      "Natural History",
      "Curiosity"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "Combination of live-action and CGI animation.",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Moderate",
    "sceneFrequency": "Moderate"
  },
  "10": {
    "stimulationScore": 3,
    "TV or YouTube": "TV",
    "ageRange": "3-6",
    "Avg. Epsiode": "12 minutes",
    "themes": [
      "Cultural Appreciation",
      "Creativity & Imagination",
      "Perseverance",
      "Friendship",
      "Problem Solving",
      "Ballet",
      "Motor Skills"
    ],
    "interactivityLevel": "Low-Moderate",
    "animationStyle": "3D CGI Animation",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "Moderate",
    "sceneFrequency": "Moderate"
  },
  "11": {
    "stimulationScore": 3,
    "TV or YouTube": "YouTube",
    "ageRange": "5-12",
    "themes": [
      "Arts & Crafts",
      "Preschool-Basics",
      "Creativity & Imagination",
      "Origami",
      "Painting",
      "Drawing",
      "Motor Skills",
      "Literacy",
      "Numeracy",
      "Shapes",
      "Colours"
    ],
    "interactivityLevel": "High",
    "animationStyle": "Live-Action with Bright Colors and Simple Settings",
    "dialogueIntensity": "Moderate-High",
    "soundEffectsLevel": "Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate-High",
    "totalSoundEffectTimeLevel": "Moderate",
    "sceneFrequency": "Low-Moderate"
  },
  "12": {
    "stimulationScore": 2,
    "TV or YouTube": "TV",
    "ageRange": "6-10",
    "Seasons": "25 Seasons",
    "Avg. Epsiode": "26 minutes",
    "themes": [
      "Social-Emotional",
      "Friendship",
      "Problem Solving",
      "Family Values",
      "Relatable Situations",
      "Social Development"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "2D Traditional hand-drawn",
    "dialogueIntensity": "Moderate-High",
    "soundEffectsLevel": "Low-Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Low-Moderate",
    "sceneFrequency": "Moderate"
  },
  "13": {
    "stimulationScore": 5,
    "TV or YouTube": "TV",
    "ageRange": "8-14",
    "Seasons": "3 Seasons",
    "Avg. Epsiode": "23 minutes",
    "themes": [
      "Life Lessons",
      "Cultural Appreciation",
      "Cultures & Traditions",
      "Teamwork",
      "Morality",
      "Emotional Intelligence",
      "Entertainment",
      "Fantasy Elements",
      "Martial Arts",
      "Friendship",
      "Responsibility",
      "Perseverance",
      "Mild Peril",
      "Mild Fantasy Violence"
    ],
    "interactivityLevel": "Low-Moderate",
    "animationStyle": "2D animation inspired by anime styles.",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "High",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate-High",
    "totalSoundEffectTimeLevel": "High",
    "sceneFrequency": "High"
  },
  "14": {
    "stimulationScore": 4,
    "TV or YouTube": "YouTube",
    "ageRange": "3-6",
    "themes": [
      "Early Childhood experiences",
      "Dinosaurs",
      "Paleontology",
      "Natural History",
      "sing-a-long",
      "Dance",
      "Social-Emotional",
      "Exploration",
      "Entertainment"
    ],
    "interactivityLevel": "High",
    "animationStyle": "Combination of Live-Action and 2D Animation. Color Palette: Bright and primary colors.",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "Moderate-High",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Moderate-High",
    "sceneFrequency": "Moderate"
  },
  "15": {
    "stimulationScore": 2,
    "TV or YouTube": "TV",
    "ageRange": "4-8",
    "Seasons": "6 Seasons",
    "Avg. Epsiode": "23 minutes",
    "themes": [
      "Friendship",
      "Responsibility",
      "Problem Solving",
      "Leadership",
      "Emotional Intelligence",
      "Perseverance",
      "Family Values",
      "Teamwork"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "Traditional 2D hand-drawn animation.",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Low-Moderate",
    "musicTempo": "Low-Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Low",
    "sceneFrequency": "Moderate"
  },
  "16": {
    "stimulationScore": 1,
    "TV or YouTube": "TV",
    "ageRange": "1-4",
    "Seasons": "1 Season",
    "Avg. Epsiode": "3 minutes",
    "themes": [
      "Creativity & Imagination",
      "Language Learning",
      "Repetitive Learning",
      "Social-Emotional",
      "Phonics"
    ],
    "interactivityLevel": "High",
    "animationStyle": "3D CGI animation delivered slowly and smoothly",
    "dialogueIntensity": "Very Low",
    "soundEffectsLevel": "Low",
    "musicTempo": "Moderate",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "Low",
    "sceneFrequency": "Low"
  },
  "17": {
    "stimulationScore": 4,
    "TV or YouTube": "TV",
    "ageRange": "1-5",
    "Seasons": "4 Seasons",
    "Avg. Epsiode": "5 minutes",
    "themes": [
      "Preschool-Basics",
      "sing-a-long",
      "Numeracy",
      "Literacy",
      "Motor Skills",
      "Cognitive Development",
      "Language Learning",
      "Phonics",
      "Emotional Intelligence"
    ],
    "interactivityLevel": "High",
    "animationStyle": "3D CGI animation with bright and vivid colors.",
    "dialogueIntensity": "Low-Moderate",
    "soundEffectsLevel": "High",
    "musicTempo": "Moderate-High",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "High",
    "sceneFrequency": "High"
  },
  "18": {
    "stimulationScore": 1,
    "TV or YouTube": "TV",
    "ageRange": "2-5",
    "Avg. Epsiode": "12 minutes",
    "themes": [
      "Friendship",
      "Problem Solving",
      "Social-Emotional",
      "sing-a-long",
      "Repetitive Learning"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "3D CGI animation introduces brighter colors and more dynamic visuals but the animation remains straightforward to prevent overstimulation",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Low-Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Moderate",
    "sceneFrequency": "Moderate"
  },
  "19": {
    "stimulationScore": 3,
    "TV or YouTube": "TV",
    "ageRange": "3-7",
    "Seasons": "2 Seasons",
    "Avg. Epsiode": "5 minutes",
    "themes": [
      "Enviromental Awareness",
      "Creativity & Imagination",
      "Social-Emotional"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "traditional hand-drawn 2D animation",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Low-Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Low-Moderate",
    "sceneFrequency": "Moderate"
  },
  "20": {
    "stimulationScore": 2,
    "TV or YouTube": "TV",
    "ageRange": "2-5",
    "Seasons": "13 Seasons",
    "Avg. Epsiode": "25 minutes",
    "themes": [
      "Preschool-Basics",
      "Dance",
      "Social-Emotional",
      "Friendship",
      "Numeracy",
      "Literacy",
      "Music",
      "Teamwork",
      "Shapes",
      "Emotional Intelligence",
      "sing-a-long"
    ],
    "interactivityLevel": "High",
    "animationStyle": "Live action with costumed characters",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Low",
    "musicTempo": "Moderate",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "Low",
    "sceneFrequency": "Moderate"
  },
  "21": {
    "stimulationScore": 5,
    "TV or YouTube": "TV",
    "ageRange": "7-12",
    "Avg. Epsiode": "26 minutes",
    "themes": [
      "Problem Solving",
      "Teamwork",
      "Mystery",
      "Entertainment",
      "Humor",
      "Critical Thinking",
      "Mild Peril",
      "Mild Fantasy Violence"
    ],
    "interactivityLevel": "Low",
    "animationStyle": "Cartoonish 2D animation style",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "High",
    "musicTempo": "High",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "Very-High",
    "sceneFrequency": "High"
  },
  "22": {
    "stimulationScore": 2,
    "TV or YouTube": "TV",
    "ageRange": "2-5",
    "Seasons": "5 Seasons",
    "Avg. Epsiode": "24 minutes",
    "themes": [
      "Social-Emotional",
      "Friendship",
      "Routine",
      "Problem Solving",
      "Emotional Intelligence",
      "Social Development",
      "Relatable Situations",
      "sing-a-long",
      "Bedtime Routines"
    ],
    "interactivityLevel": "High",
    "animationStyle": "Live-action costumed puppetry with detailed sets. ",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Low-Moderate",
    "musicTempo": "Low-Moderate",
    "totalMusicLevel": "Low-Moderate",
    "totalSoundEffectTimeLevel": "Low",
    "sceneFrequency": "Low-Moderate"
  },
  "23": {
    "stimulationScore": 1,
    "TV or YouTube": "TV",
    "ageRange": "3-6",
    "Seasons": "2 Seasons",
    "Avg. Epsiode": "22 minutes",
    "themes": [
      "Creativity & Imagination",
      "Friendship",
      "Problem Solving",
      "Emotional Intelligence",
      "Adventure",
      "Teamwork",
      "Perseverance",
      "Curiosity"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "Live-action puppetry with colorful characters.",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Low",
    "musicTempo": "Low-Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Low-Moderate",
    "sceneFrequency": "Low"
  },
  "24": {
    "stimulationScore": 3,
    "TV or YouTube": "TV",
    "ageRange": "4-8",
    "Seasons": "2 Seasons",
    "Avg. Epsiode": "25 minutes",
    "themes": [
      "Creativity & Imagination",
      "Problem Solving",
      "Friendship",
      "Teamwork"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "Digital 2D animation",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Moderate",
    "sceneFrequency": "Moderate"
  },
  "25": {
    "stimulationScore": 3,
    "TV or YouTube": "TV",
    "ageRange": "4-8",
    "Seasons": "11 Seasons",
    "Avg. Epsiode": "26 minutes",
    "themes": [
      "Literacy",
      "Phonics",
      "Language Learning",
      "Reading Comprehension",
      "Music",
      "Humor"
    ],
    "interactivityLevel": "High",
    "animationStyle": "Combination of live-action puppetry, 2D animation, and CGI effects. Bright but balanced colors, with emphasis on text and literacy elements.",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "Moderate",
    "sceneFrequency": "Moderate-High"
  },
  "26": {
    "stimulationScore": 5,
    "TV or YouTube": "TV",
    "ageRange": "8-14",
    "Seasons": "5 Seasons",
    "Avg. Epsiode": "23 minutes",
    "themes": [
      "STEM",
      "Cause and Effect",
      "Safety",
      "Discovery",
      "Science",
      "Critical Thinking",
      "Experimentation",
      "Curiosity",
      "Natural World",
      "Problem Solving"
    ],
    "interactivityLevel": "High",
    "animationStyle": "Live-action with fast-paced editing, animations, and special effects.",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "High",
    "musicTempo": "Moderate-High",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "High",
    "sceneFrequency": "High"
  },
  "27": {
    "stimulationScore": 2,
    "TV or YouTube": "TV",
    "ageRange": "2-4",
    "Seasons": "4 Seasons",
    "Avg. Epsiode": "7 minutes",
    "themes": [
      "Social Development",
      "Emotional Intelligence",
      "Problem Solving"
    ],
    "interactivityLevel": "Low-Moderate",
    "animationStyle": "3D CGI animation",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Low-Moderate",
    "musicTempo": "Low-Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Low",
    "sceneFrequency": "Low"
  },
  "28": {
    "stimulationScore": 5,
    "TV or YouTube": "YouTube",
    "ageRange": "2-5",
    "themes": [
      "Preschool-Basics",
      "Early Childhood experiences",
      "Creativity & Imagination",
      "Curiosity",
      "Animals",
      "Natural World",
      "Exploration",
      "sing-a-long",
      "Dance",
      "Vocabulary",
      "Adventure",
      "Silly Comedy",
      "Colours",
      "Shapes",
      "Nature",
      "Hyper-Activity"
    ],
    "interactivityLevel": "High",
    "animationStyle": "Live-Action with Bright Colors and Real-World Settings",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "High",
    "musicTempo": "High",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "High",
    "sceneFrequency": "High"
  },
  "29": {
    "stimulationScore": 1,
    "TV or YouTube": "TV",
    "ageRange": "3-6",
    "Seasons": "6 Seasons",
    "Avg. Epsiode": "25 minutes",
    "themes": [
      "Preschool-Basics",
      "Emotional Intelligence",
      "Critical Thinking",
      "Problem Solving"
    ],
    "interactivityLevel": "High",
    "animationStyle": "Live action, Digital 2D animation",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Low",
    "musicTempo": "Low-Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Low",
    "sceneFrequency": "Very Low"
  },
  "30": {
    "stimulationScore": 1,
    "TV or YouTube": "TV",
    "ageRange": "3-6",
    "Avg. Epsiode": "22 minutes",
    "themes": [
      "Preschool-Basics",
      "Emotional Intelligence",
      "Problem Solving",
      "Critical Thinking"
    ],
    "interactivityLevel": "High",
    "animationStyle": "Live action, 3D CGI animation",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Low",
    "musicTempo": "Low-Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Low",
    "sceneFrequency": "Very Low"
  },
  "31": {
    "stimulationScore": 3,
    "TV or YouTube": "TV",
    "ageRange": "3-8",
    "Seasons": "4 Seasons",
    "Avg. Epsiode": "7 minutes",
    "themes": [
      "Creativity & Imagination",
      "Emotional Intelligence",
      "Conflict Resolution",
      "Family Values",
      "Family Relationships"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "Digital 2D animation",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "Moderate",
    "sceneFrequency": "Moderate"
  },
  "32": {
    "stimulationScore": 3,
    "TV or YouTube": "TV",
    "ageRange": "3-6",
    "Seasons": "21 Seasons",
    "Avg. Epsiode": "10 minutes",
    "themes": [
      "Creativity & Imagination",
      "Problem Solving",
      "Friendship",
      "Teamwork",
      "Repetitive Learning"
    ],
    "interactivityLevel": "Low-Moderate",
    "animationStyle": "Traditional Stop-Motion animation",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Moderate",
    "sceneFrequency": "Low-Moderate"
  },
  "33": {
    "stimulationScore": 4,
    "TV or YouTube": "TV",
    "ageRange": "3-6",
    "Avg. Epsiode": "11 minutes",
    "themes": [
      "Creativity & Imagination",
      "Problem Solving",
      "Friendship",
      "Teamwork",
      "Repetitive Learning"
    ],
    "interactivityLevel": "Low-Moderate",
    "animationStyle": "3D CGI animation",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Moderate-High",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Moderate",
    "sceneFrequency": "Moderate-High"
  },
  "34": {
    "name": "Booba",
    "description": "Booba is a 3D CGI animation with realistic textures and environments. A show for 3-6 year olds, it features Creativity & Imagination, Early Childhood experiences, Social-Emotional, Friendship, Emotional Intelligence, Social Development, sing-a-long, Dance, Humor, and Motor Skills themes.",
    "stimulationScore": 4,
    "musicTempo": "Moderate-High",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "High",
    "sceneFrequency": "High",
    "interactivityLevel": "Moderate",
    "dialogueIntensity": "Low",
    "soundEffectsLevel": "High",
    "animationStyle": "3D CGI animation with realistic textures and environments.",
    "TV or YouTube": "TV",
    "ageRange": "3-6",
    "Seasons": "5 Seasons",
    "Avg. Epsiode": "10 minutes",
    "themes": [
      "Creativity & Imagination",
      "Early Childhood experiences",
      "Social-Emotional",
      "Friendship",
      "Emotional Intelligence",
      "Social Development",
      "sing-a-long",
      "Dance",
      "Humor",
      "Motor Skills"
    ]
  },
  "35": {
    "stimulationScore": 5,
    "TV or YouTube": "YouTube",
    "ageRange": "3-6",
    "themes": [
      "Preschool-Basics",
      "Literacy",
      "Numeracy",
      "Colours",
      "Animals",
      "Social-Emotional",
      "sing-a-long",
      "Dance",
      "Phonics",
      "Vocabulary",
      "Exercise"
    ],
    "interactivityLevel": "High",
    "animationStyle": "Live-Action with Bright Colors and Simple Settings",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "High",
    "musicTempo": "High",
    "totalMusicLevel": "Very-High",
    "totalSoundEffectTimeLevel": "High",
    "sceneFrequency": "High"
  },
  "36": {
    "stimulationScore": 5,
    "TV or YouTube": "YouTube",
    "ageRange": "Any",
    "themes": [
      "Spacetime and the Cosmos",
      "Preschool-Basics",
      "Elementary-Basics",
      "STEM",
      "Early Childhood experiences",
      "Engineering Concepts",
      "Science",
      "Language Learning",
      "Phonics",
      "Vocabulary",
      "Cognitive Development",
      "Curiosity",
      "Natural History",
      "Colours",
      "Literacy"
    ],
    "interactivityLevel": "High",
    "animationStyle": "3D CGI Animation with Bright Colors and Realistic Models",
    "dialogueIntensity": "Moderate-High",
    "soundEffectsLevel": "Mod-High (Nature)",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate-High",
    "totalSoundEffectTimeLevel": "High",
    "sceneFrequency": "Moderate"
  },
  "37": {
    "stimulationScore": 5,
    "TV or YouTube": "TV",
    "ageRange": "3-6",
    "Seasons": "6 Seasons",
    "Avg. Epsiode": "23 minutes",
    "themes": [
      "Elementary-Basics",
      "Math",
      "Literacy",
      "Science",
      "Social-Emotional",
      "Teamwork",
      "sing-a-long",
      "Problem Solving",
      "Numeracy",
      "Cognitive Development"
    ],
    "interactivityLevel": "High",
    "animationStyle": "3D CGI animation set in an underwater world. Extremely bright and vivid colors with high saturation.",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "High",
    "musicTempo": "Moderate-High",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "High",
    "sceneFrequency": "High"
  },
  "38": {
    "stimulationScore": 3,
    "TV or YouTube": "TV",
    "ageRange": "4-8",
    "Seasons": "1 Season",
    "Avg. Epsiode": "11 minutes",
    "themes": [
      "STEM",
      "Creativity & Imagination",
      "Engineering Concepts",
      "Teamwork",
      "Critical Thinking"
    ],
    "interactivityLevel": "High",
    "animationStyle": "3D CGI Animation with detailed environments.",
    "dialogueIntensity": "Moderate-High",
    "soundEffectsLevel": "Moderate",
    "musicTempo": "Moderate-High",
    "totalMusicLevel": "Moderate-High",
    "totalSoundEffectTimeLevel": "Moderate-High",
    "sceneFrequency": "Moderate-High"
  },
  "39": {
    "stimulationScore": 2,
    "TV or YouTube": "TV",
    "ageRange": "2-5",
    "Seasons": "8 Seasons",
    "Avg. Epsiode": "22 minutes",
    "themes": [
      "Social-Emotional",
      "Family Relationships",
      "Relatable Situations",
      "Patience",
      "Emotional Intelligence",
      "Conflict Resolution",
      "Friendship",
      "Frequent Whining",
      "Tantrums",
      "Lack of Consequences"
    ],
    "interactivityLevel": "Low",
    "animationStyle": "Traditional hand-drawn 2D animation. DIgital later in the seasons",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Low-Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Low-Moderate",
    "sceneFrequency": "Low-Moderate"
  },
  "40": {
    "stimulationScore": 3,
    "TV or YouTube": "YouTube",
    "ageRange": "1-5",
    "themes": [
      "Preschool-Basics",
      "Early Childhood experiences",
      "STEM",
      "Elementary-Basics",
      "Cultural & Social",
      "sing-a-long",
      "Dance",
      "Music",
      "Social-Emotional",
      "Literacy",
      "Numeracy",
      "Social Development",
      "Emotional Intelligence",
      "Motor Skills"
    ],
    "interactivityLevel": "High",
    "animationStyle": "Live-Action with Puppetry and Props",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "Moderate",
    "sceneFrequency": "Moderate"
  },
  "41": {
    "stimulationScore": 3,
    "TV or YouTube": "TV",
    "ageRange": "1-5",
    "Seasons": "3 Seasons",
    "Avg. Epsiode": "3 minutes",
    "themes": [
      "Cultures & Traditions",
      "Cultural & Social",
      "Cultural Appreciation",
      "Language Learning",
      "Literacy",
      "sing-a-long",
      "Music"
    ],
    "interactivityLevel": "High",
    "animationStyle": "Digital 2D animation with a simple, storybook-inspired art style. The characters are designed with soft, rounded features and bright, pastel colors, reflecting the show's musical and educational focus. The animation often incorporates interactive elements, encouraging audience participation.",
    "dialogueIntensity": "Moderate-High",
    "soundEffectsLevel": "Moderate",
    "musicTempo": "Moderate-High",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "Moderate",
    "sceneFrequency": "Moderate-High"
  },
  "42": {
    "stimulationScore": 4,
    "TV or YouTube": "TV",
    "ageRange": "7-12",
    "Seasons": "6 Seasons",
    "Avg. Epsiode": "23 minutes",
    "themes": [
      "Super Hero Themes",
      "Enviromental Awareness",
      "Teamwork",
      "Ecosystems",
      "Responsibility",
      "Social Development",
      "Entertainment",
      "Mild Peril"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "Traditional 2D Animation with Bold Designs",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "High",
    "musicTempo": "High",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "High",
    "sceneFrequency": "High"
  },
  "43": {
    "stimulationScore": 3,
    "TV or YouTube": "TV",
    "ageRange": "4-8",
    "Seasons": "2 Seasons",
    "Avg. Epsiode": "11 minutes",
    "themes": [
      "Learning from Mistakes",
      "Emotional Intelligence",
      "Social-Emotional",
      "Social Development",
      "Friendship"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "2D Digital Animation with a modern, vibrant design. Color Palette: Bright and pastel colors with high saturation.",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Moderate",
    "sceneFrequency": "Moderate"
  },
  "44": {
    "stimulationScore": 2,
    "TV or YouTube": "YouTube",
    "ageRange": "1-5",
    "themes": [
      "Preschool-Basics",
      "Music",
      "sing-a-long",
      "Vocabulary",
      "Dance",
      "Relaxation",
      "Repetitive Learning",
      "Language Learning",
      "Literacy",
      "Numeracy",
      "Phonics",
      "Routine",
      "Bedtime Routines",
      "Motor Skills",
      "Sensory Exploration",
      "Cognitive Development"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "Simple Animations or Live-Action with Gentle Imagery",
    "dialogueIntensity": "Moderate (Singing)",
    "soundEffectsLevel": "Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Very-High",
    "totalSoundEffectTimeLevel": "Low-Moderate",
    "sceneFrequency": "Low-Moderate"
  },
  "45": {
    "name": "Charlie's Colorforms City",
    "description": "Charlie's Colorforms City is a 2D Digital Animation using Colorforms-inspired designs. Color Palette: Bright and bold primary colors with simple shapes. A show for 2-5 year olds, it features Creativity & Imagination, Preschool-Basics, Shapes, Colours, Critical Thinking, Cognitive Development, and Repetitive Learning themes.",
    "stimulationScore": 2,
    "TV or YouTube": "TV",
    "ageRange": "2-5",
    "Seasons": "3 Seasons",
    "Avg. Epsiode": "13 minutes",
    "themes": [
      "Creativity & Imagination",
      "Preschool-Basics",
      "Shapes",
      "Colours",
      "Critical Thinking",
      "Cognitive Development",
      "Repetitive Learning"
    ],
    "interactivityLevel": "High",
    "animationStyle": "2D Digital Animation using Colorforms-inspired designs. Color Palette: Bright and bold primary colors with simple shapes.",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Low-Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Low",
    "sceneFrequency": "Moderate"
  },
  "46": {
    "stimulationScore": 3,
    "TV or YouTube": "TV",
    "ageRange": "3-6",
    "Seasons": "2 Seasons",
    "Avg. Epsiode": "11 minutes",
    "themes": [
      "Overcoming Fears",
      "Social-Emotional",
      "Friendship",
      "Problem Solving",
      "Family Values",
      "Emotional Intelligence",
      "Perseverance"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "2D Digital Animation with soft, rounded designs. Color Palette: Warm and pastel colors.",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Moderate",
    "sceneFrequency": "Moderate"
  },
  "47": {
    "stimulationScore": 3,
    "TV or YouTube": "TV",
    "ageRange": "3-6",
    "Seasons": "2 Seasons",
    "Avg. Epsiode": "11 minutes",
    "themes": [
      "Community Service",
      "Teamwork",
      "Responsibility",
      "Problem Solving"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "3D CGI Animation with detailed environments.",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Moderate",
    "sceneFrequency": "Moderate"
  },
  "48": {
    "name": "City Vehicles",
    "description": "City Vehicles is a 3D CGI Animation with Bright Colors and Realistic Models show for 2-5 year olds. It features Vehicle Themes, Creativity & Imagination, Engineering Concepts, Mechanics, Problem Solving, Teamwork, Music, and Entertainment themes.",
    "stimulationScore": 5,
    "TV or YouTube": "YouTube",
    "ageRange": "2-5",
    "themes": [
      "Vehicle Themes",
      "Creativity & Imagination",
      "Engineering Concepts",
      "Mechanics",
      "Problem Solving",
      "Teamwork",
      "Music",
      "Entertainment"
    ],
    "interactivityLevel": "Low",
    "animationStyle": "3D CGI Animation with Bright Colors and Realistic Models",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "High",
    "musicTempo": "High",
    "totalMusicLevel": "Very-High (Repetative) ",
    "totalSoundEffectTimeLevel": "Very-High (Repetative) ",
    "sceneFrequency": "High"
  },
  "49": {
    "stimulationScore": 2,
    "TV or YouTube": "TV",
    "ageRange": "4-8",
    "Seasons": "3 Seasons",
    "Avg. Epsiode": "26 minutes",
    "themes": [
      "Emotional Intelligence",
      "Social Development",
      "Problem Solving",
      "Friendship",
      "Community"
    ],
    "interactivityLevel": "Low-Moderate",
    "animationStyle": "Digital 2D animation",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Moderate",
    "sceneFrequency": "Moderate"
  },
  "50": {
    "stimulationScore": 3,
    "TV or YouTube": "TV",
    "ageRange": "3-6",
    "Avg. Epsiode": "22 minutes",
    "themes": [
      "Emotional Intelligence",
      "Friendship",
      "Problem Solving",
      "Social Development",
      "Community"
    ],
    "interactivityLevel": "Low-Moderate",
    "animationStyle": "3D CGI animation",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Moderate-High",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Moderate",
    "sceneFrequency": "Moderate"
  },
  "51": {
    "stimulationScore": 2,
    "TV or YouTube": "YouTube",
    "ageRange": "2-5",
    "themes": [
      "Enviromental Awareness",
      "Social-Emotional",
      "Responsibility",
      "Teamwork",
      "Social Development",
      "Routine",
      "Bedtime Routines",
      "Natural World",
      "Natural Science",
      "Relaxation",
      "Nature",
      "sing-a-long"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "3D CGI Animation with a soft aesthetic. Color Palette: Pastel colors and gentle hues.",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Low-Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate-High",
    "totalSoundEffectTimeLevel": "Low-Moderate",
    "sceneFrequency": "Low-Moderate"
  },
  "52": {
    "stimulationScore": 3,
    "TV or YouTube": "YouTube",
    "ageRange": "Any",
    "themes": [
      "Engineering Concepts",
      "Cultural Appreciation",
      "Locomotive History",
      "History",
      "Hobbies",
      "Entertainment",
      "Travel Geography",
      "Curiosity",
      "Machinery",
      "Trains"
    ],
    "interactivityLevel": "Low-Moderate",
    "animationStyle": "High-Definition Live-Action Footage",
    "dialogueIntensity": "Low",
    "soundEffectsLevel": "High",
    "musicTempo": "Low-Moderate",
    "totalMusicLevel": "Low",
    "totalSoundEffectTimeLevel": "High",
    "sceneFrequency": "Moderate"
  },
  "53": {
    "stimulationScore": 5,
    "TV or YouTube": "TV",
    "ageRange": "1-4",
    "Seasons": "10 Seasons",
    "Avg. Epsiode": "05-55 minutes Compilation videos",
    "themes": [
      "Preschool-Basics",
      "Numeracy",
      "Literacy",
      "Shapes",
      "Routine",
      "Social-Emotional",
      "Cognitive Development",
      "Language Learning",
      "sing-a-long"
    ],
    "interactivityLevel": "High",
    "animationStyle": "3D CGI Animation with extremely bright and vivid colors.",
    "dialogueIntensity": "Low",
    "soundEffectsLevel": "High",
    "musicTempo": "Moderate-High",
    "totalMusicLevel": "Very-High",
    "totalSoundEffectTimeLevel": "High",
    "sceneFrequency": "High"
  },
  "54": {
    "stimulationScore": 4,
    "TV or YouTube": "TV",
    "ageRange": "7-12",
    "Seasons": "6 Seasons",
    "Avg. Epsiode": "22 minutes",
    "themes": [
      "Creativity & Imagination",
      "Teamwork",
      "Problem Solving",
      "Courage",
      "Mischievious Behaviour",
      "Mild Fantasy Violence"
    ],
    "interactivityLevel": "Low-Moderate",
    "animationStyle": "2D Digital Animation with stylized character designs. Color Palette: Bright and varied colors with bold outlines.",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "High",
    "musicTempo": "Moderate-High",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "High",
    "sceneFrequency": "High"
  },
  "55": {
    "stimulationScore": 3,
    "TV or YouTube": "YouTube",
    "ageRange": "3-6",
    "themes": [
      "Preschool-Basics",
      "Creativity & Imagination",
      "Colours",
      "Shapes",
      "Art",
      "Motor Skills",
      "Colour Combinations"
    ],
    "interactivityLevel": "High",
    "animationStyle": "2D Digital Animation using Colorforms-inspired designs. Color Palette: Bright and bold primary colors with simple shapes.",
    "dialogueIntensity": "Moderate-High",
    "soundEffectsLevel": "Moderate",
    "musicTempo": "Moderate-High",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "Moderate",
    "sceneFrequency": "Moderate-High"
  },
  "56": {
    "stimulationScore": 3,
    "TV or YouTube": "YouTube",
    "ageRange": "3-8",
    "themes": [
      "Life Lessons",
      "Positive Engaging Screen-Time",
      "Mindfulness",
      "Exercise",
      "Yoga",
      "Emotional Intelligence",
      "Routine",
      "Sensory Exploration",
      "Relaxation",
      "sing-a-long",
      "Positve Mindset"
    ],
    "interactivityLevel": "High",
    "animationStyle": "Live-Action with Colorful Green Screen Animations",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate-High",
    "totalSoundEffectTimeLevel": "Moderate",
    "sceneFrequency": "Moderate"
  },
  "57": {
    "stimulationScore": 5,
    "TV or YouTube": "TV",
    "ageRange": "10-14",
    "Seasons": "4 Seasons",
    "Avg. Epsiode": "23 minutes",
    "themes": [
      "Creativity & Imagination",
      "Overcoming Fears",
      "Problem Solving",
      "Entertainment",
      "Humor",
      "Courage",
      "Perseverance",
      "Dark Themes",
      "Surreal Imagery",
      "Mild Intense Scenes"
    ],
    "interactivityLevel": "Low-Moderate",
    "animationStyle": "Traditional 2D Animation with surreal and sometimes dark visuals. Color Palette: Varied colors with contrasting dark and bright tones.",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "High",
    "musicTempo": "Varies",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "High",
    "sceneFrequency": "High"
  },
  "58": {
    "stimulationScore": 4,
    "TV or YouTube": "YouTube",
    "ageRange": "3-8",
    "themes": [
      "Cultures & Traditions",
      "Cultural & Social",
      "Positive Role Models",
      "Life Lessons",
      "Exploration",
      "Relatable Situations",
      "Vocabulary",
      "Social Development",
      "Social-Emotional",
      "Curiosity",
      "History",
      "Adventure",
      "Discovery",
      "Travel Geography"
    ],
    "interactivityLevel": "High",
    "animationStyle": "Live-Action with Real-World Exploration",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "Moderate-High",
    "musicTempo": "Moderate-High",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "Moderate-High",
    "sceneFrequency": "High"
  },
  "59": {
    "stimulationScore": 2,
    "TV or YouTube": "TV",
    "ageRange": "3-6",
    "Seasons": "15 Seasons",
    "Avg. Epsiode": "23 minutes",
    "themes": [
      "STEM",
      "Motor Skills",
      "Discovery",
      "Science",
      "Curiosity",
      "Exploration"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "Digital hand-drawn 2D artwork animation.",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate-High",
    "totalSoundEffectTimeLevel": "Moderate-High",
    "sceneFrequency": "Moderate"
  },
  "60": {
    "stimulationScore": 4,
    "TV or YouTube": "TV",
    "ageRange": "8-12",
    "Seasons": "15 Seasons",
    "Avg. Epsiode": "23 minutes",
    "themes": [
      "STEM",
      "Problem Solving",
      "Critical Thinking",
      "Math",
      "Science",
      "Entertainment"
    ],
    "interactivityLevel": "High",
    "animationStyle": "traditional 2D hand-drawn animation. Digital in later series.",
    "dialogueIntensity": "Moderate-High",
    "soundEffectsLevel": "High",
    "musicTempo": "Moderate-High",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "High",
    "sceneFrequency": "Moderate"
  },
  "61": {
    "stimulationScore": 2,
    "TV or YouTube": "TV",
    "ageRange": "2-5",
    "Seasons": "7 Seasons",
    "Avg. Epsiode": "26 minutes",
    "themes": [
      "Communiction & Expression",
      "Life Lessons",
      "Social-Emotional",
      "Emotional Intelligence",
      "Problem Solving",
      "Social Development",
      "Relatable Situations",
      "Friendship",
      "Family Relationships"
    ],
    "interactivityLevel": "High",
    "animationStyle": "Digital 2D animation",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Low",
    "musicTempo": "Low-Moderate",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "Low",
    "sceneFrequency": "Low-Moderate"
  },
  "62": {
    "stimulationScore": 5,
    "TV or YouTube": "YouTube",
    "ageRange": "3-7",
    "themes": [
      "Physical Fitness",
      "Cultural Appreciation",
      "Creativity & Imagination",
      "Preschool-Basics",
      "sing-a-long",
      "Phonics",
      "Entertainment",
      "Interactive Game Elements",
      "Dance",
      "Repetitive Learning",
      "Music",
      "Exercise"
    ],
    "interactivityLevel": "High",
    "animationStyle": "Live-Action with Bright Colors and Interactive Elements",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "High",
    "musicTempo": "High",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "High",
    "sceneFrequency": "High"
  },
  "63": {
    "stimulationScore": 2,
    "TV or YouTube": "TV",
    "ageRange": "4-8",
    "Seasons": "5 Seasons",
    "Avg. Epsiode": "15 minutes",
    "themes": [
      "Cause and Effect",
      "Life Lessons",
      "Morality",
      "Family Values",
      "Religion",
      "Responsibility",
      "Emotional Intelligence"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "Stop-Motion Animation using clay figures",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Low",
    "musicTempo": "Low-Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Low",
    "sceneFrequency": "Moderate"
  },
  "64": {
    "stimulationScore": 3,
    "TV or YouTube": "YouTube",
    "ageRange": "4-10",
    "themes": [
      "Creativity & Imagination",
      "Family Values",
      "Family Relationships",
      "Relatable Situations",
      "Problem Solving",
      "Vocabulary",
      "Dutch Language"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "Live-Action with Puppetry and Props",
    "dialogueIntensity": "Moderate-High",
    "soundEffectsLevel": "Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Moderate",
    "sceneFrequency": "Moderate-High"
  },
  "65": {
    "stimulationScore": 3,
    "TV or YouTube": "YouTube",
    "ageRange": "3-8",
    "themes": [
      "Religious Teachings",
      "Cultural Appreciation",
      "Cultures & Traditions",
      "Spiritual Development",
      "Biblical Stories",
      "Religion",
      "sing-a-long",
      "Family Values",
      "Music",
      "Christian Values",
      "Faith",
      "Social-Emotional"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "high-quality animation and music",
    "dialogueIntensity": "Moderate (Singing)",
    "soundEffectsLevel": "Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Very-High",
    "totalSoundEffectTimeLevel": "Moderate",
    "sceneFrequency": "Moderate"
  },
  "66": {
    "stimulationScore": 4,
    "TV or YouTube": "TV",
    "ageRange": "3-6",
    "Avg. Epsiode": "24 minutes",
    "themes": [
      "Cultural & Social",
      "Enviromental Awareness",
      "Animal Behaviour",
      "Wildlife Conservation",
      "Language Learning",
      "Problem Solving",
      "Natural World"
    ],
    "interactivityLevel": "High",
    "animationStyle": "2D digital animation with a hand-drawn look. Bright and cheerful colors with simple backgrounds",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "High",
    "musicTempo": "Moderate-High",
    "totalMusicLevel": "Moderate-High",
    "totalSoundEffectTimeLevel": "High",
    "sceneFrequency": "High"
  },
  "67": {
    "stimulationScore": 5,
    "TV or YouTube": "TV",
    "ageRange": "8-14",
    "Seasons": "4 Seasons",
    "Avg. Epsiode": "22 minutes",
    "themes": [
      "Teamwork",
      "Friendship",
      "Perseverance",
      "Entertainment",
      "Adventure",
      "Fantasy Elements",
      "Mild Fantasy Violence"
    ],
    "interactivityLevel": "Low",
    "animationStyle": "Traditional 2D Anime-style Animation.",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "High",
    "musicTempo": "Moderate-High",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "High",
    "sceneFrequency": "High"
  },
  "68": {
    "stimulationScore": 3,
    "TV or YouTube": "TV",
    "ageRange": "5-9",
    "Seasons": "4 Seasons",
    "Avg. Epsiode": "24 minutes",
    "themes": [
      "Creativity & Imagination",
      "Paleontology",
      "Science",
      "Curiosity",
      "Problem Solving",
      "Critical Thinking",
      "Natural History",
      "Ecosystems"
    ],
    "interactivityLevel": "High",
    "animationStyle": "Live-Action with CGI Dinosaurs. Color Palette: Natural colors with realistic environments.",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Moderate",
    "sceneFrequency": "Moderate"
  },
  "69": {
    "stimulationScore": 3,
    "TV or YouTube": "TV",
    "ageRange": "3-6",
    "Seasons": "3 Seasons",
    "Avg. Epsiode": "11 minutes",
    "themes": [
      "Teamwork",
      "Responsibility",
      "Problem Solving",
      "Adventure",
      "Dinosaurs"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "3D CGI animation",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Moderate",
    "musicTempo": "Moderate-High",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Moderate-High",
    "sceneFrequency": "Moderate"
  },
  "70": {
    "stimulationScore": 5,
    "TV or YouTube": "TV",
    "ageRange": "3-6",
    "Seasons": "7 Seasons",
    "Avg. Epsiode": "26 minutes",
    "themes": [
      "STEM",
      "Friendship",
      "Paleontology",
      "Natural History",
      "Dinosaurs",
      "Natural World",
      "Exploration",
      "Science"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "3D CGI animation",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "High",
    "musicTempo": "Moderate-High",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "High",
    "sceneFrequency": "Moderate-High"
  },
  "71": {
    "stimulationScore": 4,
    "TV or YouTube": "TV",
    "ageRange": "4-8",
    "Seasons": "5 Seasons",
    "Avg. Epsiode": "23 minutes",
    "themes": [
      "Creativity & Imagination",
      "Teamwork",
      "Entertainment",
      "Problem Solving",
      "Engineering Concepts",
      "Dinosaurs",
      "Perseverance"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "3D CGI Animation with detailed characters and environments. Color Palette: Bright and vivid colors with metallic textures.",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "High",
    "musicTempo": "Moderate-High",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "High",
    "sceneFrequency": "High"
  },
  "72": {
    "stimulationScore": 3,
    "TV or YouTube": "TV",
    "ageRange": "3-6",
    "Seasons": "5 Seasons",
    "Avg. Epsiode": "24 minutes",
    "themes": [
      "Health & Well-being",
      "Social-Emotional",
      "Problem Solving",
      "Emotional Intelligence",
      "Medical Care",
      "Curiosity"
    ],
    "interactivityLevel": "High",
    "animationStyle": "3D CGI Animation with soft, rounded designs. Color Palette: Bright and cheerful colors.",
    "dialogueIntensity": "Moderate-High",
    "soundEffectsLevel": "Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Moderate",
    "sceneFrequency": "Moderate"
  },
  "73": {
    "stimulationScore": 4,
    "TV or YouTube": "YouTube",
    "ageRange": "2-6",
    "themes": [
      "Preschool-Basics",
      "Learning through Songs",
      "Dance",
      "sing-a-long",
      "Cognitive Development",
      "Literacy",
      "Numeracy",
      "Colours",
      "Shapes",
      "Animals",
      "Social-Emotional",
      "Repetitive Learning",
      "Music"
    ],
    "interactivityLevel": "High",
    "animationStyle": "3D Animation with Bright Colors and Anthropomorphic Dogs",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "High",
    "musicTempo": "High",
    "totalMusicLevel": "Very-High",
    "totalSoundEffectTimeLevel": "High",
    "sceneFrequency": "High"
  },
  "74": {
    "stimulationScore": 5,
    "TV or YouTube": "TV",
    "ageRange": "2-6",
    "Seasons": "8 Seasons",
    "Avg. Epsiode": "23 minutes",
    "themes": [
      "Elementary-Basics",
      "Language Learning",
      "Problem Solving",
      "Geography",
      "Teamwork",
      "Cognitive Development",
      "Adventure"
    ],
    "interactivityLevel": "High",
    "animationStyle": "Digital 2D animation",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "High",
    "musicTempo": "High",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "High",
    "sceneFrequency": "High"
  },
  "75": {
    "stimulationScore": 5,
    "TV or YouTube": "TV",
    "ageRange": "10-16",
    "Seasons": "1 Season",
    "Avg. Epsiode": "24 minutes",
    "themes": [
      "Super Hero Themes",
      "Positive Role Models",
      "Entertainment",
      "Adventure",
      "Martial Arts",
      "Fantasy Elements",
      "Morality",
      "Mild Violent themes",
      "Mild Fantasy Violence",
      "Mild Peril"
    ],
    "interactivityLevel": "Low",
    "animationStyle": "2D Hand-drawn animation (Anime style).",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "Very-High",
    "musicTempo": "Moderate-High",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "High",
    "sceneFrequency": "High"
  },
  "76": {
    "stimulationScore": 2,
    "TV or YouTube": "TV",
    "ageRange": "3-7",
    "Seasons": "3 Seasons",
    "Avg. Epsiode": "26 minutes",
    "themes": [
      "Creativity & Imagination",
      "Emotional Intelligence",
      "Teamwork",
      "Social Development",
      "Social-Emotional",
      "Problem Solving",
      "Perseverance"
    ],
    "interactivityLevel": "Low-Moderate",
    "animationStyle": "Traditional 2D Animation with soft designs. Color Palette: Pastel colors with whimsical settings.",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Low-Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Low",
    "sceneFrequency": "Moderate"
  },
  "77": {
    "stimulationScore": 2,
    "TV or YouTube": "TV",
    "ageRange": "2-5",
    "Seasons": "2 Seasons",
    "Avg. Epsiode": "07 minutes",
    "themes": [
      "Problem Solving",
      "Friendship",
      "Social-Emotional",
      "Teamwork",
      "Emotional Intelligence",
      "Social Development"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "2D Digital Animation with a watercolor aesthetic. Color Palette: Soft and natural colors with pastel hues.",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Low-Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Low-Moderate",
    "sceneFrequency": "Low-Moderate"
  },
  "78": {
    "stimulationScore": 5,
    "TV or YouTube": "TV",
    "ageRange": "8-12",
    "Seasons": "6 Seasons",
    "Avg. Epsiode": "22 minutes",
    "themes": [
      "Cause and Effect",
      "Creativity & Imagination",
      "Friendship",
      "Problem Solving",
      "Humor",
      "Mischievious Behaviour"
    ],
    "interactivityLevel": "Low",
    "animationStyle": "Traditional 2D Animation with exaggerated designs. Color Palette: Bright colors with bold outlines.",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "High",
    "musicTempo": "Moderate-High",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "High",
    "sceneFrequency": "High"
  },
  "79": {
    "stimulationScore": 4,
    "TV or YouTube": "TV",
    "ageRange": "5-9",
    "Seasons": "3 Seasons",
    "Avg. Epsiode": "22 minutes",
    "themes": [
      "Cultural Appreciation",
      "Cultures & Traditions",
      "Positive Role Models",
      "Leadership",
      "Responsibility",
      "Emotional Intelligence",
      "Morality"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "3D CGI Animation with detailed designs. Color Palette: Bright and vibrant colors with cultural motifs.",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "High",
    "musicTempo": "Moderate-High",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "High",
    "sceneFrequency": "High"
  },
  "80": {
    "stimulationScore": 2,
    "TV or YouTube": "TV",
    "ageRange": "1-4",
    "Seasons": "14 Seasons",
    "Avg. Epsiode": "15 minutes",
    "themes": [
      "Preschool-Basics",
      "Motor Skills",
      "sing-a-long",
      "Dance",
      "Social-Emotional",
      "Numeracy",
      "Literacy",
      "Colours",
      "Shapes"
    ],
    "interactivityLevel": "High",
    "animationStyle": "Combination of Live-Action and 2D Animation. Color Palette: Bright and primary colors.",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Moderate",
    "musicTempo": "Moderate-High",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Low-Moderate",
    "sceneFrequency": "Low-Moderate"
  },
  "81": {
    "stimulationScore": 3,
    "TV or YouTube": "YouTube",
    "ageRange": "2-6",
    "themes": [
      "Learning through Songs",
      "Repetitive Learning",
      "Literacy",
      "Phonics",
      "Vocabulary",
      "Music",
      "Numeracy",
      "Colours",
      "Shapes",
      "Cognitive Development",
      "Language Learning",
      "sing-a-long"
    ],
    "interactivityLevel": "High",
    "animationStyle": "2D and 3D Animation with Bright Colors and Simple Characters",
    "dialogueIntensity": "Moderate-High",
    "soundEffectsLevel": "Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "Moderate",
    "sceneFrequency": "Moderate"
  },
  "82": {
    "stimulationScore": 3,
    "TV or YouTube": "TV",
    "ageRange": "4-8",
    "Seasons": "7 Seasons",
    "Avg. Epsiode": "25 minutes",
    "themes": [
      "Problem Solving",
      "Teamwork",
      "Humor",
      "Social Development",
      "Perseverance"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "Dutch children's show, Live-Action with comedic elements. ",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Moderate",
    "sceneFrequency": "Moderate"
  },
  "83": {
    "stimulationScore": 2,
    "TV or YouTube": "TV",
    "ageRange": "4-8",
    "Seasons": "15 Seasons",
    "Avg. Epsiode": "10 minutes",
    "themes": [
      "Positive Role Models",
      "Community Service",
      "Safety",
      "Teamwork",
      "Problem Solving",
      "Responsibility"
    ],
    "interactivityLevel": "Low-Moderate",
    "animationStyle": "Traditional Stop-Motion animation",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Low-Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Low-Moderate",
    "sceneFrequency": "Low"
  },
  "84": {
    "stimulationScore": 4,
    "TV or YouTube": "TV",
    "ageRange": "3-6",
    "Avg. Epsiode": "10 minutes",
    "themes": [
      "Positive Role Models",
      "Community Service",
      "Safety",
      "Teamwork",
      "Problem Solving",
      "Responsibility"
    ],
    "interactivityLevel": "Low-Moderate",
    "animationStyle": "3D CGI animation",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Moderate-High",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Moderate",
    "sceneFrequency": "Moderate-High"
  },
  "85": {
    "stimulationScore": 1,
    "TV or YouTube": "TV",
    "ageRange": "4-8",
    "Seasons": "6 Seasons",
    "Avg. Epsiode": "22 minutes",
    "themes": [
      "Social-Emotional",
      "Friendship",
      "Problem Solving",
      "Relatable Situations"
    ],
    "interactivityLevel": "Low-Moderate",
    "animationStyle": "Traditional Hand-drawn 2D animation",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Low",
    "musicTempo": "Low",
    "totalMusicLevel": "Low-Moderate",
    "totalSoundEffectTimeLevel": "Low",
    "sceneFrequency": "Low"
  },
  "86": {
    "stimulationScore": 3,
    "TV or YouTube": "TV",
    "ageRange": "3-6",
    "Avg. Epsiode": "23 minutes",
    "themes": [
      "Social-Emotional",
      "Friendship",
      "Teamwork",
      "Relatable Situations",
      "Problem Solving"
    ],
    "interactivityLevel": "Low-Moderate",
    "animationStyle": "3D CGI animation",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Low-Moderate",
    "musicTempo": "Low-Moderate",
    "totalMusicLevel": "Low-Moderate",
    "totalSoundEffectTimeLevel": "Low",
    "sceneFrequency": "Low-Moderate"
  },
  "87": {
    "stimulationScore": 1,
    "TV or YouTube": "TV",
    "ageRange": "3-7",
    "Seasons": "2 Seasons",
    "Avg. Epsiode": "13 minutes",
    "themes": [
      "Friendship",
      "Problem Solving",
      "Emotional Intelligence",
      "Nature",
      "Relatable Situations",
      "Patience"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "2D Digital Animation with a hand-drawn aesthetic.",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Low",
    "musicTempo": "Low-Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Low",
    "sceneFrequency": "Low"
  },
  "88": {
    "stimulationScore": 4,
    "TV or YouTube": "TV",
    "ageRange": "3-7",
    "Seasons": "10 Seasons",
    "Avg. Epsiode": "24 minutes",
    "themes": [
      "Creativity & Imagination",
      "Problem Solving",
      "Emotional Intelligence"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "Live-action and 3D CGI animation",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "High",
    "musicTempo": "Moderate-High",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "Moderate-High",
    "sceneFrequency": "High"
  },
  "89": {
    "stimulationScore": 3,
    "TV or YouTube": "YouTube",
    "ageRange": "2-5",
    "themes": [
      "Vehicle Themes",
      "Engineering Concepts",
      "Mechanics",
      "Teamwork",
      "Shapes",
      "Colours"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "3D CGI Animation with bright and vibrant colors. Color Palette: Bright and cheerful colors with high saturation.",
    "dialogueIntensity": "Moderate-High",
    "soundEffectsLevel": "High",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate-High",
    "totalSoundEffectTimeLevel": "High",
    "sceneFrequency": "Moderate"
  },
  "90": {
    "stimulationScore": 3,
    "TV or YouTube": "YouTube",
    "ageRange": "2-5",
    "themes": [
      "Teaching with Toys",
      "Preschool-Basics",
      "Colours",
      "Numeracy",
      "Literacy",
      "Multi-Lingual Learning",
      "Entertainment",
      "Humor",
      "Vocabulary"
    ],
    "interactivityLevel": "High",
    "animationStyle": "Live-Action Toy Demonstrations with Bright Colors",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Moderate-High",
    "musicTempo": "Moderate",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "High",
    "sceneFrequency": "Moderate-High"
  },
  "91": {
    "stimulationScore": 3,
    "TV or YouTube": "TV",
    "ageRange": "3-6",
    "Seasons": "2 Seasons",
    "Avg. Epsiode": "22 minutes",
    "themes": [
      "Problem Solving",
      "Teamwork",
      "Emotional Intelligence",
      "Perseverance",
      "Social Development"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "3D CGI Animation with bright and vibrant colors. Color Palette: Bright and cheerful colors with high saturation.",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Moderate",
    "musicTempo": "Low-Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Low-Moderate",
    "sceneFrequency": "Low-Moderate"
  },
  "92": {
    "stimulationScore": 4,
    "TV or YouTube": "TV",
    "ageRange": "3-6",
    "Seasons": "3 Seasons",
    "Avg. Epsiode": "22 minutes",
    "themes": [
      "Adventure",
      "Problem Solving",
      "Teamwork",
      "Dinosaurs",
      "Entertainment"
    ],
    "interactivityLevel": "Low-Moderate",
    "animationStyle": "3D CGI Animation with detailed and dynamic visuals.",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "High",
    "musicTempo": "Moderate-High",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "High",
    "sceneFrequency": "High"
  },
  "93": {
    "stimulationScore": 4,
    "TV or YouTube": "YouTube",
    "ageRange": "3-8",
    "themes": [
      "Creativity & Imagination",
      "Teaching with Toys",
      "Early Childhood experiences",
      "Sensory Exploration",
      "Entertainment",
      "Toy Review"
    ],
    "interactivityLevel": "Low-Moderate",
    "animationStyle": "Live-Action with Bright Colors and Simple Settings",
    "dialogueIntensity": "Moderate-High",
    "soundEffectsLevel": "High",
    "musicTempo": "Moderate-High",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "High",
    "sceneFrequency": "High"
  },
  "94": {
    "stimulationScore": 3,
    "TV or YouTube": "TV",
    "ageRange": "2-5",
    "Seasons": "7 Seasons",
    "Avg. Epsiode": "7 minutes",
    "themes": [
      "Social-Emotional",
      "Friendship",
      "Problem Solving",
      "Relatable Situations",
      "Emotional Intelligence",
      "Vehicle Themes"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "3D CGI Animation with stylized and colorful designs. Bright but not overly saturated colors, with a focus on vibrant settings.",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Moderate",
    "sceneFrequency": "Moderate"
  },
  "95": {
    "stimulationScore": 4,
    "TV or YouTube": "TV",
    "ageRange": "3-6",
    "Seasons": "4 Seasons",
    "Avg. Epsiode": "24 minutes",
    "themes": [
      "Creativity & Imagination",
      "Problem Solving",
      "Friendship",
      "Teamwork",
      "Critical Thinking",
      "Relatable Situations"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "3D CGI Animation with stylized character designs based on the original book illustrations. Color Palette: Bright and vivid colors with a focus on primary colors.",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Moderate-High",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Moderate-High",
    "sceneFrequency": "High"
  },
  "96": {
    "stimulationScore": 4,
    "TV or YouTube": "YouTube",
    "ageRange": "3-7",
    "themes": [
      "Cultural Appreciation",
      "Cultural & Social",
      "Learning through Songs",
      "Early Childhood experiences",
      "Literacy",
      "Numeracy",
      "Social-Emotional",
      "sing-a-long",
      "Dance",
      "Music",
      "Healthy Eating",
      "Emotional Intelligence"
    ],
    "interactivityLevel": "High",
    "animationStyle": "2D animation with bright, colorful visuals and rhythmic, energetic choreography.",
    "dialogueIntensity": "Moderate-High",
    "soundEffectsLevel": "High",
    "musicTempo": "Moderate-High",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "High",
    "sceneFrequency": "High"
  },
  "97": {
    "stimulationScore": 5,
    "TV or YouTube": "TV",
    "ageRange": "6-10",
    "Seasons": "4 Seasons",
    "Avg. Epsiode": "7 minutes",
    "themes": [
      "Communiction & Expression",
      "Entertainment",
      "Problem Solving",
      "Humor",
      "Slapstic Comedy",
      "Mild Fantasy Violence"
    ],
    "interactivityLevel": "Low",
    "animationStyle": "3D CGI animation",
    "dialogueIntensity": "Very Low",
    "soundEffectsLevel": "Very-High",
    "musicTempo": "High",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "High",
    "sceneFrequency": "High"
  },
  "98": {
    "stimulationScore": 2,
    "TV or YouTube": "TV",
    "ageRange": "2-5",
    "Seasons": "3 Seasons",
    "Avg. Epsiode": "11 minutes",
    "themes": [
      "Emotional Intelligence",
      "Friendship",
      "Family Values",
      "Social-Emotional"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "2D Digital Animation with a watercolor aesthetic. Color Palette: Soft and natural colors with pastel hues.",
    "dialogueIntensity": "Low-Moderate",
    "soundEffectsLevel": "Low",
    "musicTempo": "Low-Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Low",
    "sceneFrequency": "Moderate"
  },
  "99": {
    "stimulationScore": 3,
    "TV or YouTube": "TV",
    "ageRange": "3-7",
    "Seasons": "4 Seasons",
    "Avg. Epsiode": "24 minutes",
    "themes": [
      "Cultural & Social",
      "Life Lessons",
      "Cultures & Traditions",
      "Cultural Appreciation",
      "sing-a-long",
      "Dance",
      "Social-Emotional",
      "Social Development",
      "Music"
    ],
    "interactivityLevel": "High",
    "animationStyle": "Live-Action with musical elements. Color Palette: Bright and vibrant colors reflecting the cultural setting.",
    "dialogueIntensity": "Moderate-High",
    "soundEffectsLevel": "Moderate",
    "musicTempo": "Moderate-High",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "Moderate",
    "sceneFrequency": "Moderate"
  },
  "100": {
    "stimulationScore": 3,
    "TV or YouTube": "TV",
    "ageRange": "4-8",
    "Seasons": "3 Seasons",
    "Avg. Epsiode": "7 minutes",
    "themes": [
      "Creativity & Imagination",
      "Problem Solving",
      "Perseverance"
    ],
    "interactivityLevel": "Low-Moderate",
    "animationStyle": "Stop-Motion Animation using clay figures (claymation). Color Palette: Varied colors with a mix of bright and muted tones. Unique asthetic uncommon in the present day.",
    "dialogueIntensity": "Low-Moderate",
    "soundEffectsLevel": "Moderate-High",
    "musicTempo": "Varies",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "High",
    "sceneFrequency": "Moderate"
  },
  "101": {
    "stimulationScore": 4,
    "TV or YouTube": "YouTube",
    "ageRange": "3-8",
    "themes": [
      "Life Lessons",
      "Engineering Concepts",
      "Cultures & Traditions",
      "Cultural Appreciation",
      "Vehicle Themes",
      "STEM",
      "Farm Life",
      "Agriculture",
      "Mechanics",
      "Curiosity",
      "Entertainment",
      "Humor",
      "Safety"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "Primarily live-action with occasional animated elements to highlight tools or processes.",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "High",
    "musicTempo": "Moderate-High",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "High",
    "sceneFrequency": "High"
  },
  "102": {
    "stimulationScore": 4,
    "TV or YouTube": "TV",
    "ageRange": "8-12",
    "Seasons": "2 Seasons",
    "Avg. Epsiode": "22 minutes",
    "themes": [
      "Super Hero Themes",
      "Positive Role Models",
      "Entertainment",
      "Responsibility",
      "Morality",
      "Adventure",
      "Fantasy Elements",
      "Mild Violent themes",
      "Mild Fantasy Violence"
    ],
    "interactivityLevel": "Low-Moderate",
    "animationStyle": "Traditional 2D Animation with action-oriented designs. Color Palette: Bright and vivid colors with bold contrasts.",
    "dialogueIntensity": "Moderate-High",
    "soundEffectsLevel": "High",
    "musicTempo": "Moderate-High",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "High",
    "sceneFrequency": "Moderate-High"
  },
  "103": {
    "stimulationScore": 3,
    "TV or YouTube": "YouTube",
    "ageRange": "2-5",
    "themes": [
      "Vehicle Themes",
      "Teamwork",
      "Colours",
      "Shapes",
      "Problem Solving",
      "Vehicle Recognition",
      "Entertainment",
      "Mechanics"
    ],
    "interactivityLevel": "Low",
    "animationStyle": "3D CGI Animation with Bright Colors and Friendly Vehicle Characters",
    "dialogueIntensity": "Low-Moderate",
    "soundEffectsLevel": "High",
    "musicTempo": "Moderate",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "High",
    "sceneFrequency": "Moderate-High"
  },
  "104": {
    "stimulationScore": 4,
    "TV or YouTube": "TV",
    "ageRange": "4-8",
    "Seasons": "2 Seasons",
    "Avg. Epsiode": "26 minutes",
    "themes": [
      "STEM",
      "Super Hero Themes",
      "Problem Solving",
      "Teamwork",
      "Emotional Intelligence",
      "Curiosity",
      "Critical Thinking",
      "Science"
    ],
    "interactivityLevel": "High",
    "animationStyle": "2D Digital Animation with bright and colorful designs. Color Palette: Bright and vivid colors with emphasis on primary colors.",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "High",
    "musicTempo": "Moderate-High",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "High",
    "sceneFrequency": "Moderate"
  },
  "105": {
    "stimulationScore": 5,
    "TV or YouTube": "YouTube",
    "ageRange": "0-3",
    "themes": [
      "Early Childhood experiences",
      "Sensory Exploration",
      "Colours",
      "Motor Skills",
      "Music"
    ],
    "interactivityLevel": "Low",
    "animationStyle": "High-Contrast 3D Animation with Bright Colors and Simple Shapes",
    "dialogueIntensity": "None",
    "soundEffectsLevel": "Moderate-High",
    "musicTempo": "High",
    "totalMusicLevel": "Very-High (Repetative) ",
    "totalSoundEffectTimeLevel": "High",
    "sceneFrequency": "High"
  },
  "106": {
    "stimulationScore": 4,
    "TV or YouTube": "TV",
    "ageRange": "2-5",
    "Seasons": "4 Seasons",
    "Avg. Epsiode": "07 minutes (average)",
    "themes": [
      "Creativity & Imagination",
      "Merit Reward systems",
      "Teamwork",
      "Problem Solving",
      "Perseverance"
    ],
    "interactivityLevel": "High",
    "animationStyle": "2D Digital Animation with simple, geometric shapes and bold outlines. Bright and bold colors with clear contrasts.",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Moderate-High",
    "musicTempo": "Moderate-High",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "High",
    "sceneFrequency": "Moderate"
  },
  "107": {
    "stimulationScore": 4,
    "TV or YouTube": "TV",
    "ageRange": "6-10",
    "Seasons": "6 Seasons",
    "Avg. Epsiode": "11 minutes",
    "themes": [
      "Creativity & Imagination",
      "Cause and Effect",
      "Morality",
      "Humor",
      "Entertainment",
      "Mischievious Behaviour"
    ],
    "interactivityLevel": "Low-Moderate",
    "animationStyle": "2D Digital Animation with bold lines and exaggerated expressions. Color Palette: Bright and vivid colors with high contrast",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "High",
    "musicTempo": "Moderate-High",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "High",
    "sceneFrequency": "High"
  },
  "108": {
    "stimulationScore": 3,
    "TV or YouTube": "YouTube",
    "ageRange": "3-8",
    "themes": [
      "Creativity & Imagination",
      "Cultures & Traditions",
      "Life Lessons",
      "Farm Life",
      "Machinery",
      "Agriculture",
      "Outdoor Exploration",
      "Problem Solving",
      "Family Relationships",
      "Curiosity"
    ],
    "interactivityLevel": "Low-Moderate",
    "animationStyle": "Live-Action Family Videos",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Moderate-High",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "High",
    "sceneFrequency": "Moderate-High"
  },
  "109": {
    "stimulationScore": 3,
    "TV or YouTube": "TV",
    "ageRange": "3-6",
    "Seasons": "2 Seasons",
    "Avg. Epsiode": "24 minutes",
    "themes": [
      "Life Lessons",
      "Cause and Effect",
      "Creativity & Imagination",
      "Problem Solving",
      "Curiosity",
      "Critical Thinking",
      "Cognitive Development"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "2D digital animation",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Moderate",
    "sceneFrequency": "Moderate"
  },
  "110": {
    "stimulationScore": 1,
    "TV or YouTube": "TV",
    "ageRange": "1-4",
    "Seasons": "3 Seasons",
    "Avg. Epsiode": "27 minutes",
    "themes": [
      "Preschool-Basics",
      "Sensory Exploration",
      "Repetitive Learning",
      "Motor Skills",
      "Cognitive Development"
    ],
    "interactivityLevel": "Low",
    "animationStyle": "Live-action costume performances combined with CGI-enhanced environments",
    "dialogueIntensity": "Low",
    "soundEffectsLevel": "Low",
    "musicTempo": "Low",
    "totalMusicLevel": "Low",
    "totalSoundEffectTimeLevel": "High",
    "sceneFrequency": "Low"
  },
  "111": {
    "stimulationScore": 2,
    "TV or YouTube": "TV",
    "ageRange": "3-6",
    "Seasons": "2 Seasons",
    "Avg. Epsiode": "27 minutes",
    "themes": [
      "Enviromental Awareness",
      "Science",
      "Friendship",
      "Nature",
      "Ecosystems",
      "Curiosity"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "Live-action puppetry with CGI backgrounds.Color Palette: Soft, natural colors with earthy tones.",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Low-Moderate",
    "musicTempo": "Low-Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Low",
    "sceneFrequency": "Moderate"
  },
  "112": {
    "stimulationScore": 2,
    "TV or YouTube": "TV",
    "ageRange": "3-6",
    "Seasons": "4 Seasons",
    "Avg. Epsiode": "10 minutes",
    "themes": [
      "Creativity & Imagination",
      "Friendship",
      "Problem Solving",
      "Teamwork"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "Live action with costumed characters",
    "dialogueIntensity": "Low-Moderate",
    "soundEffectsLevel": "Moderate",
    "musicTempo": "Low-Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Low",
    "sceneFrequency": "Moderate"
  },
  "113": {
    "stimulationScore": 2,
    "TV or YouTube": "TV",
    "ageRange": "3-6",
    "Seasons": "3 Seasons",
    "Avg. Epsiode": "11 minutes",
    "themes": [
      "Cultures & Traditions",
      "Family Relationships",
      "Family Values",
      "Relatable Situations",
      "Emotional Intelligence"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "2D Digital Animation with a hand-drawn aesthetic.",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Low-Moderate",
    "musicTempo": "Low-Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Low",
    "sceneFrequency": "Moderate"
  },
  "114": {
    "stimulationScore": 3,
    "TV or YouTube": "YouTube",
    "ageRange": "2-6",
    "themes": [
      "Cultures & Traditions",
      "Cultural Appreciation",
      "Learning through Songs",
      "Dutch Language",
      "Language Learning",
      "sing-a-long",
      "Dance",
      "Literacy",
      "Music"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "Live-Action with Colorful Costumes and Simple Sets",
    "dialogueIntensity": "Moderate-High",
    "soundEffectsLevel": "Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "Moderate",
    "sceneFrequency": "Moderate"
  },
  "115": {
    "stimulationScore": 4,
    "TV or YouTube": "YouTube",
    "ageRange": "2-6",
    "themes": [
      "Creativity & Imagination",
      "Learning from Mistakes",
      "Learning through Songs",
      "Cultures & Traditions",
      "Cultural Appreciation",
      "Literacy",
      "Numeracy",
      "sing-a-long",
      "Dance",
      "Phonics",
      "Vocabulary",
      "Music",
      "Routine",
      "Social-Emotional"
    ],
    "interactivityLevel": "High",
    "animationStyle": "2D Animation with Vibrant Colors and Cute Characters",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "High",
    "musicTempo": "High",
    "totalMusicLevel": "Very-High",
    "totalSoundEffectTimeLevel": "High",
    "sceneFrequency": "High"
  },
  "116": {
    "stimulationScore": 3,
    "TV or YouTube": "YouTube",
    "ageRange": "3-8",
    "themes": [
      "Cultures & Traditions",
      "Cultural Appreciation",
      "Cultural & Social",
      "Language Learning",
      "Arabic Language Learning",
      "Literacy",
      "sing-a-long",
      "Reading Comprehension",
      "Music",
      "Repetitive Learning"
    ],
    "interactivityLevel": "High",
    "animationStyle": "Mix of 3D CGI animations for the characters and settings",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate-High",
    "totalSoundEffectTimeLevel": "Moderate",
    "sceneFrequency": "Moderate"
  },
  "117": {
    "stimulationScore": 3,
    "TV or YouTube": "YouTube",
    "ageRange": "3-7",
    "themes": [
      "Nature",
      "Family Relationships",
      "Animals",
      "Nature Sounds",
      "Problem Solving",
      "Social Development",
      "Entertainment",
      "Humor",
      "Social-Emotional"
    ],
    "interactivityLevel": "Low",
    "animationStyle": "3D CGI animation with bright and vivid colors",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate-High",
    "totalSoundEffectTimeLevel": "Moderate",
    "sceneFrequency": "Low-Moderate"
  },
  "118": {
    "stimulationScore": 1,
    "TV or YouTube": "TV",
    "ageRange": "3-6",
    "Seasons": "3 Seasons",
    "Avg. Epsiode": "11 minutes",
    "themes": [
      "Cultural Appreciation",
      "Cultures & Traditions",
      "Cultural & Social",
      "Curiosity",
      "Social-Emotional",
      "Relatable Situations",
      "Religion",
      "Morality"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "2D Digital Animation with bright and colorful designs. Color Palette: Bright and vivid colors with emphasis on primary colors.",
    "dialogueIntensity": "Low",
    "soundEffectsLevel": "Moderate",
    "musicTempo": "Low-Moderate",
    "totalMusicLevel": "Moderate-High",
    "totalSoundEffectTimeLevel": "Moderate-High",
    "sceneFrequency": "Moderate"
  },
  "119": {
    "stimulationScore": 3,
    "TV or YouTube": "YouTube",
    "ageRange": "3-6",
    "themes": [
      "Creativity & Imagination",
      "Problem Solving",
      "Friendship",
      "Emotional Intelligence",
      "Conflict Resolution",
      "Family Relationships",
      "Family Values",
      "Social-Emotional",
      "Social Development",
      "Relatable Situations"
    ],
    "interactivityLevel": "Low-Moderate",
    "animationStyle": "2D digital animation with a hand-drawn look. Bright and cheerful colors with simple backgrounds",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "Moderate",
    "musicTempo": "Moderate-High",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "Moderate",
    "sceneFrequency": "Moderate-High"
  },
  "120": {
    "stimulationScore": 4,
    "TV or YouTube": "YouTube",
    "ageRange": "5-10",
    "themes": [
      "Vehicle Themes",
      "Learn Through Play",
      "Creativity & Imagination",
      "Social-Emotional",
      "Humor",
      "Outdoor Exploration",
      "DIY Projects",
      "Curiosity",
      "Silly Comedy"
    ],
    "interactivityLevel": "Low",
    "animationStyle": "Live-Action Family Videos",
    "dialogueIntensity": "Moderate-High",
    "soundEffectsLevel": "Low-Moderate",
    "musicTempo": "Low-Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Moderate",
    "sceneFrequency": "High"
  },
  "121": {
    "stimulationScore": 1,
    "TV or YouTube": "TV",
    "ageRange": "2-5",
    "Seasons": "6 Seasons",
    "Avg. Epsiode": "10 minutes",
    "themes": [
      "Creativity & Imagination",
      "Social-Emotional",
      "Problem Solving",
      "Friendship"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "Traditional hand-drawn 2D animation",
    "dialogueIntensity": "Low-Moderate",
    "soundEffectsLevel": "Low",
    "musicTempo": "Low-Moderate",
    "totalMusicLevel": "Low",
    "totalSoundEffectTimeLevel": "Moderate",
    "sceneFrequency": "Low"
  },
  "122": {
    "stimulationScore": 1,
    "TV or YouTube": "TV",
    "ageRange": "3-6",
    "Seasons": "4 Seasons",
    "Avg. Epsiode": "5 minutes",
    "themes": [
      "Social-Emotional",
      "Friendship",
      "Nature",
      "Emotional Intelligence",
      "Mindfulness"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "Stop-motion animation using clay and paper cutouts",
    "dialogueIntensity": "Low-Moderate",
    "soundEffectsLevel": "Low",
    "musicTempo": "Low",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Low",
    "sceneFrequency": "Low"
  },
  "123": {
    "stimulationScore": 3,
    "TV or YouTube": "YouTube",
    "ageRange": "2-6",
    "themes": [
      "Learning through Songs",
      "Physical Fitness",
      "Early Childhood experiences",
      "Music",
      "sing-a-long",
      "Social-Emotional",
      "Literacy",
      "Entertainment",
      "Dance"
    ],
    "interactivityLevel": "Low-Moderate",
    "animationStyle": "Live-Action with Colorful Green Screen Animations",
    "dialogueIntensity": "Mod-High (Singing)",
    "soundEffectsLevel": "Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Very-High",
    "totalSoundEffectTimeLevel": "Moderate",
    "sceneFrequency": "Moderate"
  },
  "124": {
    "stimulationScore": 5,
    "TV or YouTube": "TV",
    "ageRange": "3-6",
    "Avg. Epsiode": "24 minutes",
    "themes": [
      "Physical Fitness",
      "Positive Role Models",
      "Healthy Eating",
      "Teamwork",
      "Problem Solving",
      "Exercise",
      "Motor Skills",
      "sing-a-long",
      "Dance",
      "Perseverance"
    ],
    "interactivityLevel": "High",
    "animationStyle": "Combination of live-action, puppetry, and CGI elements. Color Palette: Bright and vivid colors with high contrast",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "High",
    "musicTempo": "High",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "High",
    "sceneFrequency": "High"
  },
  "125": {
    "stimulationScore": 5,
    "TV or YouTube": "YouTube",
    "ageRange": "2-6",
    "themes": [
      "Preschool-Basics",
      "Vehicle Themes",
      "Colours",
      "Shapes",
      "Vehicle Recognition",
      "Mechanics",
      "Curiosity"
    ],
    "interactivityLevel": "Low-Moderate",
    "animationStyle": "3D CGI Animation with bright and vibrant colors. Color Palette: Bright and cheerful colors with high saturation.",
    "dialogueIntensity": "Low-Moderate",
    "soundEffectsLevel": "Moderate-High",
    "musicTempo": "Moderate",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "High",
    "sceneFrequency": "Moderate"
  },
  "126": {
    "stimulationScore": 5,
    "TV or YouTube": "YouTube",
    "ageRange": "3-7",
    "themes": [
      "Wildlife Exploration",
      "Wildlife Conservation",
      "Animals",
      "Animal Behaviour",
      "Curiosity",
      "Problem Solving",
      "Nature",
      "Natural World",
      "Responsibility"
    ],
    "interactivityLevel": "Low-Moderate",
    "animationStyle": "3D CGI animation with detailed depictions of animals and environments.",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate-High",
    "totalSoundEffectTimeLevel": "Moderate",
    "sceneFrequency": "Moderate-High"
  },
  "127": {
    "stimulationScore": 3,
    "TV or YouTube": "YouTube",
    "ageRange": "4-10",
    "themes": [
      "Cultural & Social",
      "Learning from Mistakes",
      "Cultures & Traditions",
      "Cultural Appreciation",
      "Morality",
      "Responsibility",
      "Relatable Situations",
      "Family Relationships",
      "Family Values",
      "Social-Emotional",
      "Emotional Intelligence"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "3D CGI animation with vibrant colors and detailed environments reflecting Malaysian village life.",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate-High",
    "totalSoundEffectTimeLevel": "Moderate",
    "sceneFrequency": "Moderate"
  },
  "128": {
    "stimulationScore": 2,
    "TV or YouTube": "YouTube",
    "ageRange": "Any",
    "themes": [
      "Religious Teachings",
      "Cultures & Traditions",
      "Cultural & Social",
      "Cause and Effect",
      "Life Lessons",
      "Spiritual Development",
      "Religion",
      "Family Relationships",
      "Relatable Situations",
      "Social-Emotional",
      "Morality",
      "sing-a-long",
      "Repetitive Learning",
      "Dance"
    ],
    "interactivityLevel": "High",
    "animationStyle": "Combination of Live-Action and 2D Animation. Color Palette: Bright and primary colors.",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Low",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Low",
    "sceneFrequency": "Low-Moderate"
  },
  "129": {
    "stimulationScore": 2,
    "TV or YouTube": "YouTube",
    "ageRange": "2-6",
    "themes": [
      "Learning through Songs",
      "Cultures & Traditions",
      "Cultural & Social",
      "Spiritual Development",
      "Faith",
      "Biblical Stories",
      "Religion",
      "Christian Values",
      "Morality",
      "sing-a-long",
      "Social Development",
      "Positve Mindset"
    ],
    "interactivityLevel": "High",
    "animationStyle": "Combination of live-action and animated elements, featuring colorful visuals and friendly characters.",
    "dialogueIntensity": "High (Singing)",
    "soundEffectsLevel": "Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Very-High",
    "totalSoundEffectTimeLevel": "Moderate",
    "sceneFrequency": "Moderate"
  },
  "130": {
    "stimulationScore": 5,
    "TV or YouTube": "TV",
    "ageRange": "1-4",
    "Seasons": "1 Seasons",
    "Avg. Epsiode": "03 minutes",
    "themes": [
      "Preschool-Basics",
      "Numeracy",
      "Literacy",
      "Routine",
      "Social-Emotional",
      "sing-a-long",
      "Cognitive Development",
      "Repetitive Learning"
    ],
    "interactivityLevel": "High",
    "animationStyle": "3D CGI animation with bright and vivid colors.",
    "dialogueIntensity": "Moderate-High",
    "soundEffectsLevel": "High",
    "musicTempo": "Moderate-High",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "High",
    "sceneFrequency": "Moderate-High"
  },
  "131": {
    "stimulationScore": 1,
    "TV or YouTube": "TV",
    "ageRange": "3-6",
    "Seasons": "5 Seasons",
    "Avg. Epsiode": "24 minutes",
    "themes": [
      "Creativity & Imagination",
      "Family Relationships",
      "Social Development",
      "Emotional Intelligence",
      "Family Values"
    ],
    "interactivityLevel": "Low-Moderate",
    "animationStyle": "Traditional Hand-Drawn 2D animation",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Low",
    "musicTempo": "Low",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Low",
    "sceneFrequency": "Low"
  },
  "132": {
    "stimulationScore": 5,
    "TV or YouTube": "TV",
    "ageRange": "3-6",
    "Seasons": "2 Seasons",
    "Avg. Epsiode": "24 minutes",
    "themes": [
      "Cultural Appreciation",
      "Music",
      "Art",
      "Problem Solving",
      "Cognitive Development",
      "Teamwork",
      "History"
    ],
    "interactivityLevel": "High",
    "animationStyle": "digital 2D animation. CGI for the Rocket ship and certain elements.",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "High",
    "musicTempo": "High",
    "totalMusicLevel": "Very-High",
    "totalSoundEffectTimeLevel": "High",
    "sceneFrequency": "High"
  },
  "133": {
    "stimulationScore": 2,
    "TV or YouTube": "TV",
    "ageRange": "3-6",
    "Seasons": "2 Seasons",
    "Avg. Epsiode": "24 minutes",
    "themes": [
      "Social-Emotional",
      "Family Values",
      "Problem Solving",
      "Relatable Situations",
      "Social Development",
      "Emotional Intelligence"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "Digital 2D animation",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Low",
    "musicTempo": "Low-Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Low",
    "sceneFrequency": "Low-Moderate"
  },
  "134": {
    "stimulationScore": 3,
    "TV or YouTube": "TV",
    "ageRange": "3-6",
    "Seasons": "6 Seasons",
    "Avg. Epsiode": "03-59+ minutes (compilation)",
    "themes": [
      "Overcoming Fears",
      "Emotional Intelligence",
      "Relatable Situations",
      "Creativity & Imagination",
      "Recurring Antagonist"
    ],
    "interactivityLevel": "Low",
    "animationStyle": "3D CGI animation",
    "dialogueIntensity": "Low",
    "soundEffectsLevel": "Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Moderate",
    "sceneFrequency": "Moderate"
  },
  "135": {
    "stimulationScore": 3,
    "TV or YouTube": "TV",
    "ageRange": "5-8",
    "Seasons": "2 Seasons",
    "Avg. Epsiode": "26 minutes",
    "themes": [
      "Creativity & Imagination",
      "STEM",
      "Problem Solving",
      "Motor Skills",
      "Curiosity",
      "Critical Thinking",
      "Relatable Situations"
    ],
    "interactivityLevel": "High",
    "animationStyle": "2D digital animation with a hand-drawn look. Bright and cheerful colors with simple backgrounds.",
    "dialogueIntensity": "Moderate-High",
    "soundEffectsLevel": "Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate-High",
    "totalSoundEffectTimeLevel": "Moderate",
    "sceneFrequency": "Moderate"
  },
  "136": {
    "stimulationScore": 3,
    "TV or YouTube": "TV",
    "ageRange": "4-8",
    "Seasons": "5 Seasons",
    "Avg. Epsiode": "14 minutes",
    "themes": [
      "STEM",
      "Creativity & Imagination",
      "Curiosity",
      "Science",
      "Technology",
      "Exploration",
      "Engineering Concepts",
      "Critical Thinking",
      "Problem Solving"
    ],
    "interactivityLevel": "High",
    "animationStyle": "Live-action educational series with some animation and CGI. Color Palette: Natural colors with bright visuals during explanations.",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Moderate",
    "sceneFrequency": "High"
  },
  "137": {
    "stimulationScore": 2,
    "TV or YouTube": "TV",
    "ageRange": "3-6",
    "Seasons": "3 Seasons",
    "Avg. Epsiode": "23 minutes",
    "themes": [
      "Creativity & Imagination",
      "Friendship",
      "Problem Solving",
      "Emotional Intelligence"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "2D Digital Animation with simple, childlike designs. Color Palette: Bright and pastel colors with minimal backgrounds.",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Low-Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Low",
    "sceneFrequency": "Moderate"
  },
  "138": {
    "stimulationScore": 4,
    "TV or YouTube": "YouTube",
    "ageRange": "7-12, 12+",
    "themes": [
      "Arts & Crafts",
      "Creativity & Imagination",
      "Building and Design",
      "Entertainment",
      "Humor",
      "Problem Solving",
      "Critical Thinking",
      "MineCraft",
      "Interactive Game Elements"
    ],
    "interactivityLevel": "Low",
    "animationStyle": "Real In Game Video Footage",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "High",
    "musicTempo": "Moderate-High",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "High",
    "sceneFrequency": "High"
  },
  "139": {
    "stimulationScore": 5,
    "TV or YouTube": "TV",
    "ageRange": "7-11",
    "Seasons": "1 Season",
    "Avg. Epsiode": "11 minutes",
    "themes": [
      "Creativity & Imagination",
      "Fantasy Elements",
      "Problem Solving",
      "Perseverance",
      "Adventure",
      "Teamwork",
      "Critical Thinking",
      "Mild Peril",
      "Mild Fantasy Violence"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "2D Digital Animation with a video game aesthetic. Color Palette: Bright, vivid colors with high saturation",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "Very-High",
    "musicTempo": "High",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "Very-High",
    "sceneFrequency": "Very-High"
  },
  "140": {
    "stimulationScore": 5,
    "TV or YouTube": "TV",
    "ageRange": "3-7",
    "Seasons": "5 Seasons",
    "Avg. Epsiode": "07-59+ minutes",
    "themes": [
      "Creativity & Imagination",
      "Friendship",
      "Problem Solving",
      "Patience",
      "Humor",
      "Mischievious Behaviour"
    ],
    "interactivityLevel": "Low-Moderate",
    "animationStyle": "3D CGI animation with high-quality, detailed visuals",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "High",
    "musicTempo": "Moderate-High",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "High",
    "sceneFrequency": "High"
  },
  "141": {
    "stimulationScore": 4,
    "TV or YouTube": "TV",
    "ageRange": "2-5",
    "Seasons": "4 Seasons",
    "Avg. Epsiode": "24 minutes",
    "themes": [
      "Early Childhood experiences",
      "Preschool-Basics",
      "Numeracy",
      "Teamwork",
      "Shapes",
      "Cognitive Development"
    ],
    "interactivityLevel": "High",
    "animationStyle": "3D CGI animation",
    "dialogueIntensity": "Moderate-High",
    "soundEffectsLevel": "High",
    "musicTempo": "High",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "High",
    "sceneFrequency": "Moderate-High"
  },
  "142": {
    "stimulationScore": 1,
    "TV or YouTube": "TV",
    "ageRange": "2-5",
    "Seasons": "3 Seasons",
    "Avg. Epsiode": "05-55+ minutes",
    "themes": [
      "Early Childhood experiences",
      "Social-Emotional",
      "Social Development",
      "Teamwork",
      "Emotional Intelligence"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "2D Stop-Motion Animation with Simple Designs, Emphasizes clear shapes and actions easily understood by young viewers.",
    "dialogueIntensity": "Low",
    "soundEffectsLevel": "Low",
    "musicTempo": "Low-Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Low",
    "sceneFrequency": "Low"
  },
  "143": {
    "stimulationScore": 3,
    "TV or YouTube": "TV",
    "ageRange": "3-6",
    "Seasons": "2 Seasons",
    "Avg. Epsiode": "11 minutes",
    "themes": [
      "Cultural & Social",
      "Career Exploration",
      "Teamwork",
      "Problem Solving",
      "Responsibility",
      "Curiosity"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "2D Digital Animation with bright colors. Color Palette: Vibrant but not overwhelming.",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Moderate-High",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate-High",
    "totalSoundEffectTimeLevel": "High",
    "sceneFrequency": "Moderate"
  },
  "144": {
    "stimulationScore": 3,
    "TV or YouTube": "YouTube",
    "ageRange": "3-10",
    "themes": [
      "Religious Teachings",
      "Positive Role Models",
      "Spiritual Development",
      "Cultures & Traditions",
      "Cultural & Social",
      "Biblical Stories",
      "Faith",
      "Religion",
      "Christian Values",
      "Morality",
      "Positve Mindset"
    ],
    "interactivityLevel": "High",
    "animationStyle": "Varies across series, primarily 2D and 3D animations with colorful visuals and relatable character designs.",
    "dialogueIntensity": "Moderate-High",
    "soundEffectsLevel": "Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate-High",
    "totalSoundEffectTimeLevel": "Moderate",
    "sceneFrequency": "Moderate"
  },
  "145": {
    "stimulationScore": 1,
    "TV or YouTube": "YouTube",
    "ageRange": "2+, Any",
    "themes": [
      "Enviromental Awareness",
      "Story Telling without Dialogue",
      "Creativity & Imagination",
      "Insect Behaviour",
      "Nature",
      "Nature Sounds",
      "Entertainment",
      "Humor",
      "Relaxation",
      "Music",
      "Natural World",
      "ASMR",
      "Silly Comedy",
      "Ecosystems",
      "Slice of Life",
      "Light Hearted"
    ],
    "interactivityLevel": "Low",
    "animationStyle": "Combination of CGI and Real-Life Backdrops",
    "dialogueIntensity": "None",
    "soundEffectsLevel": "High",
    "musicTempo": "Low-Moderate",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "High",
    "sceneFrequency": "Moderate"
  },
  "146": {
    "stimulationScore": 4,
    "TV or YouTube": "TV",
    "ageRange": "4-8",
    "Seasons": "2 Seasons",
    "Avg. Epsiode": "24 minutes",
    "themes": [
      "Positive Role Models",
      "Cultures & Traditions",
      "Cultural Appreciation",
      "Problem Solving",
      "Critical Thinking",
      "Mystery",
      "Adventure",
      "Curiosity"
    ],
    "interactivityLevel": "High",
    "animationStyle": "2D Digital Animation with Vibrant Colors",
    "dialogueIntensity": "Moderate-High",
    "soundEffectsLevel": "Moderate-High",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Moderate-High",
    "sceneFrequency": "Moderate-High"
  },
  "147": {
    "stimulationScore": 1,
    "TV or YouTube": "YouTube",
    "ageRange": "2-6",
    "themes": [
      "Communiction & Expression",
      "Cultural & Social",
      "Learning through Songs",
      "Music",
      "sing-a-long",
      "Positve Mindset",
      "Social-Emotional",
      "Courage",
      "Mindfulness",
      "Diversity",
      "Politcal Leanings"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "Live-Action Performances with Simple Props and Backgrounds",
    "dialogueIntensity": "Moderate (Singing)",
    "soundEffectsLevel": "Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Very-High",
    "totalSoundEffectTimeLevel": "Moderate",
    "sceneFrequency": "Low"
  },
  "148": {
    "stimulationScore": 3,
    "TV or YouTube": "YouTube",
    "ageRange": "2-5",
    "themes": [
      "Learning through Songs",
      "Preschool-Basics",
      "Early Childhood experiences",
      "Literacy",
      "Numeracy",
      "Vocabulary",
      "Music",
      "Language Learning",
      "Phonics",
      "sing-a-long",
      "Cognitive Development",
      "Auslan (Sign Language)"
    ],
    "interactivityLevel": "High",
    "animationStyle": "Live-Action and 2D Animation",
    "dialogueIntensity": "Moderate-High",
    "soundEffectsLevel": "Moderate",
    "musicTempo": "Varies",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "Moderate",
    "sceneFrequency": "Low-Moderate"
  },
  "149": {
    "stimulationScore": 4,
    "TV or YouTube": "YouTube",
    "ageRange": "1-4",
    "themes": [
      "Early Childhood experiences",
      "Phonics",
      "Language Learning",
      "Speech Development",
      "sing-a-long",
      "Cognitive Development",
      "Social-Emotional"
    ],
    "interactivityLevel": "High",
    "animationStyle": "Primarily live-action with Miss Rachel interacting directly with the audience. Some Puppet and 2D Animation use",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "Low-Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "Low-Moderate",
    "sceneFrequency": "Low-Moderate"
  },
  "150": {
    "stimulationScore": 2,
    "TV or YouTube": "TV",
    "ageRange": "3-7",
    "Seasons": "3 Seasons",
    "Avg. Epsiode": "19 minutes",
    "themes": [
      "Positive Role Models",
      "Creativity & Imagination",
      "Arts & Crafts",
      "Curiosity",
      "Motor Skills",
      "Art",
      "Colours"
    ],
    "interactivityLevel": "High",
    "animationStyle": "Live-Action with colorful crafts and animated segments. Color Palette: Bright and varied colors.",
    "dialogueIntensity": "Moderate-High",
    "soundEffectsLevel": "High",
    "musicTempo": "Moderate-High",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "High",
    "sceneFrequency": "Moderate"
  },
  "151": {
    "stimulationScore": 1,
    "TV or YouTube": "TV",
    "ageRange": "3-7",
    "Seasons": "31 Seasons",
    "Avg. Epsiode": "28 minutes",
    "themes": [
      "Cultural & Social",
      "Elementary-Basics",
      "Life Lessons",
      "Social-Emotional",
      "Social Development",
      "Literacy",
      "Emotional Intelligence",
      "Relatable Situations",
      "Relaxation",
      "Community Service",
      "Problem Solving",
      "Critical Thinking",
      "Family Values",
      "sing-a-long",
      "Morality",
      "Friendship",
      "Creativity & Imagination"
    ],
    "interactivityLevel": "High",
    "animationStyle": "Live-Action with puppet segments. Color Palette: Soft, natural colors.",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Low",
    "musicTempo": "Low-Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Low",
    "sceneFrequency": "Low"
  },
  "152": {
    "stimulationScore": 3,
    "TV or YouTube": "TV",
    "ageRange": "4-8",
    "Seasons": "4 Seasons",
    "Avg. Epsiode": "26 minutes",
    "themes": [
      "STEM",
      "Cultures & Traditions",
      "Cultural & Social",
      "Cultural Appreciation",
      "Problem Solving",
      "Adventure",
      "Exploration",
      "Nature",
      "Natural World",
      "Mystery"
    ],
    "interactivityLevel": "High",
    "animationStyle": "2D Digital Animation with cultural representation. Color Palette: Bright colors reflecting Alaskan landscapes.",
    "dialogueIntensity": "Moderate-High",
    "soundEffectsLevel": "Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Moderate-High",
    "sceneFrequency": "Moderate"
  },
  "153": {
    "stimulationScore": 2,
    "TV or YouTube": "TV",
    "ageRange": "6-10",
    "Seasons": "3 Seasons",
    "Avg. Epsiode": "22 minutes",
    "themes": [
      "Creativity & Imagination",
      "Social-Emotional",
      "Friendship",
      "Fantasy Elements",
      "Emotional Intelligence",
      "Relaxation"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "3D CGI Animation with a soft aesthetic. Color Palette: Pastel colors and gentle hues.",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Moderate",
    "musicTempo": "Low-Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Low-Moderate",
    "sceneFrequency": "Moderate"
  },
  "154": {
    "stimulationScore": 1,
    "TV or YouTube": "TV",
    "ageRange": "1-4",
    "Seasons": "1 Season",
    "Avg. Epsiode": "22 minutes",
    "themes": [
      "Early Childhood experiences",
      "Preschool-Basics",
      "Creativity & Imagination",
      "Social-Emotional"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "Stop-Motion Animation with soft toys. Color Palette: Soft, soothing colors.",
    "dialogueIntensity": "Low-Moderate",
    "soundEffectsLevel": "Low",
    "musicTempo": "Low",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Low",
    "sceneFrequency": "Low"
  },
  "155": {
    "stimulationScore": 4,
    "TV or YouTube": "YouTube",
    "ageRange": "2-5",
    "themes": [
      "Preschool-Basics",
      "Learning through Songs",
      "Creativity & Imagination",
      "Literacy",
      "Numeracy",
      "Language Learning",
      "Speech Development",
      "sing-a-long",
      "Dance",
      "Music",
      "Cognitive Development"
    ],
    "interactivityLevel": "High",
    "animationStyle": "Live-Action with Colorful Costumes and Simple Sets",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Very-High",
    "totalSoundEffectTimeLevel": "Moderate",
    "sceneFrequency": "Moderate"
  },
  "156": {
    "stimulationScore": 4,
    "TV or YouTube": "TV",
    "ageRange": "6-10",
    "Seasons": "5 Seasons",
    "Avg. Epsiode": "11 minutes",
    "themes": [
      "Creativity & Imagination",
      "Humor",
      "Entertainment",
      "Problem Solving",
      "Mischievious Behaviour"
    ],
    "interactivityLevel": "Low",
    "animationStyle": "2D Digital Animation with exaggerated expressions. Color Palette: Bright colors with bold contrasts.",
    "dialogueIntensity": "Low-Moderate",
    "soundEffectsLevel": "High",
    "musicTempo": "Moderate-High",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "High",
    "sceneFrequency": "High"
  },
  "157": {
    "stimulationScore": 3,
    "TV or YouTube": "TV",
    "ageRange": "3-6",
    "Seasons": "2 Seasons",
    "Avg. Epsiode": "5 minutes (average)",
    "themes": [
      "Creativity & Imagination",
      "STEM",
      "Mechanics",
      "Problem Solving",
      "Engineering Concepts"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "2D Digital Animation with bright colors. Color Palette: Vibrant and engaging.",
    "dialogueIntensity": "Low-Moderate",
    "soundEffectsLevel": "Moderate-High",
    "musicTempo": "Moderate",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "High",
    "sceneFrequency": "Moderate"
  },
  "158": {
    "stimulationScore": 3,
    "TV or YouTube": "YouTube",
    "ageRange": "0-5",
    "themes": [
      "Memory Exercises",
      "American Sign Language",
      "Communiction & Expression",
      "Deaf Community",
      "Visual Demonstrations",
      "Language Learning",
      "Cognitive Development",
      "Motor Skills",
      "Literacy"
    ],
    "interactivityLevel": "High",
    "animationStyle": "Live-action demonstrations combined with animated segments to illustrate signs and concepts effectively.",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "Moderate",
    "sceneFrequency": "Moderate"
  },
  "159": {
    "stimulationScore": 1,
    "TV or YouTube": "YouTube",
    "ageRange": "2-5",
    "themes": [
      "Early Childhood experiences",
      "Creativity & Imagination",
      "Preschool-Basics",
      "Communiction & Expression",
      "Vocabulary",
      "Social-Emotional",
      "Social Development",
      "Relatable Situations"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "Puppet-based animation with simple sets and characters, creating a unique and engaging visual experience",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Low-Moderate",
    "musicTempo": "Low-Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Low-Moderate",
    "sceneFrequency": "Low"
  },
  "160": {
    "stimulationScore": 3,
    "TV or YouTube": "TV",
    "ageRange": "3-6",
    "Seasons": "3 Seasons",
    "Avg. Epsiode": "02-07 minutes",
    "themes": [
      "Communiction & Expression",
      "Creativity & Imagination",
      "Social-Emotional",
      "Emotional Intelligence",
      "sing-a-long",
      "Dance",
      "Music"
    ],
    "interactivityLevel": "High",
    "animationStyle": "Live-action educational series with some animation and CGI. Color Palette: Natural colors with bright visuals during explanations.",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Moderate",
    "musicTempo": "High",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "Moderate",
    "sceneFrequency": "Moderate"
  },
  "161": {
    "stimulationScore": 5,
    "TV or YouTube": "YouTube",
    "ageRange": "5-12",
    "themes": [
      "Super Hero Themes",
      "Creativity & Imagination",
      "Positive Role Models",
      "Physical Fitness",
      "Exercise",
      "Adventure",
      "Entertainment",
      "Skit Comedy",
      "Choreographed Action Scenes",
      "Outdoor Exploration",
      "Courage",
      "Confidence Building",
      "Martial Arts",
      "Mild Violent themes",
      "Mischievious Behaviour"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "Live-action videos with dynamic editing and occasional special effects to enhance the viewing experience.",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "High",
    "musicTempo": "High",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "High",
    "sceneFrequency": "High"
  },
  "162": {
    "stimulationScore": 5,
    "TV or YouTube": "TV",
    "ageRange": "7-12",
    "Seasons": "4 Seasons",
    "Avg. Epsiode": "22 minutes",
    "themes": [
      "Complex & Emotional Themes",
      "Teamwork",
      "Perseverance",
      "Courage",
      "Problem Solving",
      "Morality",
      "Entertainment",
      "Mild Fantasy Violence",
      "Mild Violent themes"
    ],
    "interactivityLevel": "Low-Moderate",
    "animationStyle": "3D CGI Animation with Detailed and Dynamic Visuals",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "Very-High",
    "musicTempo": "High",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "Very-High",
    "sceneFrequency": "Very-High"
  },
  "163": {
    "stimulationScore": 2,
    "TV or YouTube": "TV",
    "ageRange": "3-6",
    "Seasons": "2 Seasons",
    "Avg. Epsiode": "10 minutes",
    "themes": [
      "Friendship",
      "Problem Solving",
      "Adventure",
      "Social-Emotional",
      "Social Development"
    ],
    "interactivityLevel": "Low-Moderate",
    "animationStyle": "Stop-Motion with simple models. Color Palette: Bright but soft colors.",
    "dialogueIntensity": "Low-Moderate",
    "soundEffectsLevel": "Low-Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Low-Moderate",
    "totalSoundEffectTimeLevel": "Low-Moderate",
    "sceneFrequency": "Low"
  },
  "164": {
    "stimulationScore": 4,
    "TV or YouTube": "TV",
    "ageRange": "4-7",
    "Avg. Epsiode": "11 minutes",
    "themes": [
      "Friendship",
      "Problem Solving",
      "Adventure",
      "Social-Emotional",
      "Social Development"
    ],
    "interactivityLevel": "Low-Moderate",
    "animationStyle": "3D CGI animation with bright and vivid colors",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "Moderate-High",
    "musicTempo": "High",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "High",
    "sceneFrequency": "Moderate-High"
  },
  "165": {
    "stimulationScore": 3,
    "TV or YouTube": "YouTube",
    "ageRange": "2-5",
    "themes": [
      "Preschool-Basics",
      "Social-Emotional",
      "Language Learning",
      "Cognitive Development",
      "Music",
      "Literacy",
      "Numeracy"
    ],
    "interactivityLevel": "High",
    "animationStyle": "2D digital animation with a hand-drawn look. Bright and cheerful colors with simple backgrounds",
    "dialogueIntensity": "Moderate-High",
    "soundEffectsLevel": "Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Very-High",
    "totalSoundEffectTimeLevel": "Moderate",
    "sceneFrequency": "Moderate"
  },
  "166": {
    "stimulationScore": 5,
    "TV or YouTube": "YouTube",
    "ageRange": "3-8",
    "themes": [
      "Story Telling without Dialogue",
      "Creativity & Imagination",
      "Humor",
      "Silly Comedy",
      "Captivating Visuals",
      "Friendship",
      "Animals"
    ],
    "interactivityLevel": "Low",
    "animationStyle": "3D CGI Animation with Detailed and Dynamic Visuals",
    "dialogueIntensity": "None",
    "soundEffectsLevel": "Moderate-High",
    "musicTempo": "Moderate",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "Moderate-High",
    "sceneFrequency": "Moderate"
  },
  "167": {
    "stimulationScore": 3,
    "TV or YouTube": "TV",
    "ageRange": "3-6",
    "Seasons": "7 Seasons",
    "Avg. Epsiode": "5 minutes",
    "themes": [
      "Elementary-Basics",
      "Numeracy",
      "Problem Solving",
      "Math",
      "Repetitive Learning"
    ],
    "interactivityLevel": "High",
    "animationStyle": "3D CGI animation",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Moderate",
    "sceneFrequency": "Moderate"
  },
  "168": {
    "stimulationScore": 5,
    "TV or YouTube": "TV",
    "ageRange": "6-10",
    "Seasons": "3 Seasons",
    "Avg. Epsiode": "27 minutes",
    "themes": [
      "STEM",
      "Math",
      "Numeracy",
      "Teamwork",
      "Critical Thinking",
      "Problem Solving"
    ],
    "interactivityLevel": "High",
    "animationStyle": "Combination of live-action and CGI animation.",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "High",
    "musicTempo": "High",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "High",
    "sceneFrequency": "High"
  },
  "169": {
    "stimulationScore": 5,
    "TV or YouTube": "TV",
    "ageRange": "6-10",
    "Seasons": "7 Seasons",
    "Avg. Epsiode": "7 minutes",
    "themes": [
      "Creativity & Imagination",
      "Humor",
      "Problem Solving",
      "Entertainment",
      "Slapstic Comedy",
      "Mischievious Behaviour"
    ],
    "interactivityLevel": "Low-Moderate",
    "animationStyle": "2D Digital Animation with exaggerated and dynamic character movements.",
    "dialogueIntensity": "None",
    "soundEffectsLevel": "Very-High",
    "musicTempo": "High",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "Very-High",
    "sceneFrequency": "Very-High"
  },
  "170": {
    "stimulationScore": 3,
    "TV or YouTube": "TV",
    "ageRange": "3-6",
    "Seasons": "2 Seasons",
    "Avg. Epsiode": "22 minutes",
    "themes": [
      "Creativity & Imagination",
      "Social-Emotional",
      "Problem Solving",
      "Teamwork",
      "Perseverance"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "3D CGI Animation with a unique visual style resembling charcoal drawings with splashes of color.",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Low-Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Low-Moderate",
    "sceneFrequency": "Moderate"
  },
  "171": {
    "stimulationScore": 3,
    "TV or YouTube": "TV",
    "ageRange": "3-7",
    "Seasons": "5 Seasons",
    "Avg. Epsiode": "5 minutes",
    "themes": [
      "Cultural & Social",
      "Cultures & Traditions",
      "Religion",
      "Family Values",
      "Morality",
      "Emotional Intelligence",
      "sing-a-long",
      "Relatable Situations",
      "Family Relationships"
    ],
    "interactivityLevel": "High",
    "animationStyle": "2D Digital Animation with bright colors. Color Palette: Vibrant but not overwhelming.",
    "dialogueIntensity": "Moderate-High",
    "soundEffectsLevel": "Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate-High",
    "totalSoundEffectTimeLevel": "Moderate",
    "sceneFrequency": "Moderate"
  },
  "172": {
    "stimulationScore": 5,
    "TV or YouTube": "TV",
    "ageRange": "12+",
    "Seasons": "1500+ Episodes",
    "Avg. Epsiode": "24 minutes",
    "themes": [
      "Cultures & Traditions",
      "Creativity & Imagination",
      "Complex & Emotional Themes",
      "Teamwork",
      "Perseverance",
      "Morality",
      "Entertainment",
      "Humor",
      "Slapstic Comedy",
      "Emotional Intelligence",
      "Friendship",
      "Social-Emotional",
      "Adventure",
      "Mild Violent themes",
      "Mild Fantasy Violence",
      "Mild Peril",
      "Mild Mature Themes"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "Traditional 2D Animation with a distinctive anime style, featuring exaggerated expressions, dynamic action sequences, and detailed environments.",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "High",
    "musicTempo": "Moderate-High",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "High",
    "sceneFrequency": "Moderate-High"
  },
  "173": {
    "stimulationScore": 2,
    "TV or YouTube": "TV",
    "ageRange": "3-6",
    "Seasons": "1 Season",
    "Avg. Epsiode": "24 minutes",
    "themes": [
      "Friendship",
      "Problem Solving",
      "Social-Emotional",
      "Social Development",
      "Critical Thinking",
      "Conflict Resolution",
      "Emotional Intelligence",
      "Relatable Situations",
      "Family Relationships"
    ],
    "interactivityLevel": "High",
    "animationStyle": "2D digital animation",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Low",
    "musicTempo": "Low-Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Low",
    "sceneFrequency": "Low-Moderate"
  },
  "174": {
    "stimulationScore": 3,
    "TV or YouTube": "TV",
    "ageRange": "3-7",
    "Seasons": "3 Seasons",
    "Avg. Epsiode": "25 minutes",
    "themes": [
      "Creativity & Imagination",
      "Arts & Crafts",
      "Music",
      "Motor Skills",
      "Social-Emotional",
      "Colours",
      "Shapes",
      "Art"
    ],
    "interactivityLevel": "High",
    "animationStyle": "Live-action with real actors.",
    "dialogueIntensity": "Moderate-High",
    "soundEffectsLevel": "Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "Low-Moderate",
    "sceneFrequency": "Moderate"
  },
  "175": {
    "stimulationScore": 2,
    "TV or YouTube": "TV",
    "ageRange": "2-5",
    "Seasons": "2 Seasons",
    "Avg. Epsiode": "11 minutes",
    "themes": [
      "Overcoming Fears",
      "Bedtime Routines",
      "Social-Emotional",
      "Relaxation",
      "Family Relationships",
      "Emotional Intelligence"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "Live-action puppetry with colorful characters.",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Low-Moderate",
    "musicTempo": "Low-Moderate",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "Low",
    "sceneFrequency": "Low-Moderate"
  },
  "176": {
    "stimulationScore": 5,
    "TV or YouTube": "TV",
    "ageRange": "3-6",
    "Seasons": "11 Seasons",
    "Avg. Epsiode": "22 minutes",
    "themes": [
      "Community Service",
      "Teamwork",
      "Problem Solving",
      "Courage"
    ],
    "interactivityLevel": "Low",
    "animationStyle": "3D CGI animation",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "Very-High",
    "musicTempo": "High",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "High",
    "sceneFrequency": "High"
  },
  "177": {
    "stimulationScore": 3,
    "TV or YouTube": "TV",
    "ageRange": "4-7",
    "Seasons": "3 Seasons",
    "Avg. Epsiode": "11 minutes",
    "themes": [
      "Math",
      "Problem Solving",
      "Critical Thinking",
      "Adventure",
      "Perseverance"
    ],
    "interactivityLevel": "High",
    "animationStyle": "2D Digital Animation with a hand-drawn, sketch-like aesthetic.",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "Moderate",
    "sceneFrequency": "Moderate"
  },
  "178": {
    "stimulationScore": 2,
    "TV or YouTube": "TV",
    "ageRange": "2-5",
    "Seasons": "8 Seasons",
    "Avg. Epsiode": "5 minutes",
    "themes": [
      "Social-Emotional",
      "Family Relationships",
      "Friendship",
      "Routine",
      "Social Development",
      "Relatable Situations",
      "Tantrums",
      "Mischievious Behaviour"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "2D Digital Animation with simple, flat designs. Bright but pastel-like colors with minimal shading.",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Low-Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Low",
    "sceneFrequency": "Moderate"
  },
  "179": {
    "stimulationScore": 2,
    "TV or YouTube": "TV",
    "ageRange": "3-7",
    "Seasons": "2 Seasons",
    "Avg. Epsiode": "14 minutes",
    "themes": [
      "Creativity & Imagination",
      "Music",
      "Emotional Intelligence",
      "Problem Solving"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "2D Digital animation with a hand-drawn look",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Low-Moderate",
    "musicTempo": "Low-Moderate",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "Low",
    "sceneFrequency": "Moderate"
  },
  "180": {
    "stimulationScore": 3,
    "TV or YouTube": "TV",
    "ageRange": "4-8",
    "Seasons": "2 Seasons",
    "Avg. Epsiode": "12 minutes",
    "themes": [
      "Enviromental Awareness",
      "Adventure",
      "Problem Solving",
      "Nature",
      "Teamwork",
      "Courage"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "3D CGI animation",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Moderate-High",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Moderate",
    "sceneFrequency": "Moderate"
  },
  "181": {
    "stimulationScore": 5,
    "TV or YouTube": "TV",
    "ageRange": "8-12",
    "Seasons": "6 Seasons",
    "Avg. Epsiode": "22 minutes",
    "themes": [
      "STEM",
      "Creativity & Imagination",
      "Problem Solving",
      "Curiosity",
      "Adventure",
      "Humor",
      "Family Relationships",
      "Entertainment",
      "Engineering Concepts",
      "Mischievious Behaviour"
    ],
    "interactivityLevel": "Low",
    "animationStyle": "2D Digital Animation with stylized, geometric designs. Bright and vivid colors with detailed backgrounds.",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "High",
    "musicTempo": "Moderate-High",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "High",
    "sceneFrequency": "High"
  },
  "182": {
    "stimulationScore": 1,
    "TV or YouTube": "TV",
    "ageRange": "2-5",
    "Seasons": "6 Seasons",
    "Avg. Epsiode": "5 minutes",
    "themes": [
      "Social-Emotional",
      "Family Relationships",
      "Emotional Intelligence",
      "Mischievious Behaviour"
    ],
    "interactivityLevel": "Low",
    "animationStyle": "Traditional Stop-Motion (claymation)",
    "dialogueIntensity": "None",
    "soundEffectsLevel": "Low",
    "musicTempo": "Low-Moderate",
    "totalMusicLevel": "Low-Moderate",
    "totalSoundEffectTimeLevel": "Low-Moderate",
    "sceneFrequency": "Low"
  },
  "183": {
    "stimulationScore": 4,
    "TV or YouTube": "TV",
    "ageRange": "3-6",
    "Seasons": "6 Seasons",
    "Avg. Epsiode": "26 minutes",
    "themes": [
      "Creativity & Imagination",
      "Art",
      "Music",
      "Problem Solving",
      "Teamwork",
      "Motor Skills"
    ],
    "interactivityLevel": "High",
    "animationStyle": "2D digital animation with bright colors and exaggerated, stylized designs. Bright and vivid colors with high contrast.",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "High",
    "musicTempo": "High",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "High",
    "sceneFrequency": "High"
  },
  "184": {
    "stimulationScore": 3,
    "TV or YouTube": "TV",
    "ageRange": "2-5",
    "Seasons": "2 Seasons",
    "Avg. Epsiode": "7 minutes",
    "themes": [
      "Cause and Effect",
      "Friendship",
      "Social-Emotional",
      "Problem Solving",
      "Emotional Intelligence",
      "Conflict Resolution",
      "Relatable Situations",
      "Social Development"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "3D CGI animation delivered slowly and smoothly",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Moderate",
    "sceneFrequency": "Moderate"
  },
  "185": {
    "stimulationScore": 3,
    "TV or YouTube": "YouTube",
    "ageRange": "2-6",
    "themes": [
      "Te reo Māori language development",
      "Cultures & Traditions",
      "Cultural Appreciation",
      "Māori immersion preschool",
      "Cultural & Social",
      "Numeracy",
      "Literacy",
      "Traditional Narratives",
      "sing-a-long"
    ],
    "interactivityLevel": "High",
    "animationStyle": "2D Animation with Cultural Themes and Soft Colors",
    "dialogueIntensity": "Moderate-High",
    "soundEffectsLevel": "Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Moderate",
    "sceneFrequency": "Low-Moderate"
  },
  "186": {
    "stimulationScore": 5,
    "TV or YouTube": "TV",
    "ageRange": "3-6",
    "Seasons": "6 Seasons",
    "Avg. Epsiode": "11 minutes",
    "themes": [
      "Super Hero Themes",
      "Creativity & Imagination",
      "Entertainment",
      "Morality",
      "Social Development",
      "Social-Emotional"
    ],
    "interactivityLevel": "Low-Moderate",
    "animationStyle": "3D CGI Animation with bright and vibrant colors. Color Palette: Bright and cheerful colors with high saturation.",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "Very-High",
    "musicTempo": "High",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "Very-High",
    "sceneFrequency": "Very-High"
  },
  "187": {
    "stimulationScore": 3,
    "TV or YouTube": "TV",
    "ageRange": "8+",
    "Seasons": "1 Season",
    "Avg. Epsiode": "50 minutes",
    "themes": [
      "Enviromental Awareness",
      "Natural World",
      "Nature",
      "Natural History",
      "Wildlife Exploration",
      "Science",
      "Realistic Depictions of Nature"
    ],
    "interactivityLevel": "Low-Moderate",
    "animationStyle": "Live-action nature documentary with high-definition footage. Natural colors showcasing diverse ecosystems.",
    "dialogueIntensity": "Low-Moderate",
    "soundEffectsLevel": "Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "Low-Moderate",
    "sceneFrequency": "Moderate"
  },
  "188": {
    "stimulationScore": 2,
    "TV or YouTube": "TV",
    "ageRange": "2-5",
    "Seasons": "59 Seasons",
    "Avg. Epsiode": "25 minutes",
    "themes": [
      "Creativity & Imagination",
      "Preschool-Basics",
      "Numeracy",
      "Literacy",
      "Shapes",
      "Colours",
      "Social-Emotional",
      "Problem Solving",
      "sing-a-long"
    ],
    "interactivityLevel": "High",
    "animationStyle": "Live-action with real actors.",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Low-Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate-High",
    "totalSoundEffectTimeLevel": "Low-Moderate",
    "sceneFrequency": "Moderate"
  },
  "189": {
    "stimulationScore": 3,
    "TV or YouTube": "TV",
    "ageRange": "2-4",
    "Seasons": "5 Seasons",
    "Avg. Epsiode": "7 minutes",
    "themes": [
      "Creativity & Imagination",
      "Cultural & Social",
      "Language Learning",
      "Social-Emotional",
      "Problem Solving",
      "Teamwork",
      "Emotional Intelligence",
      "Curiosity",
      "Cognitive Development"
    ],
    "interactivityLevel": "High",
    "animationStyle": "3D CGI animation delivered slowly and smoothly",
    "dialogueIntensity": "Low",
    "soundEffectsLevel": "Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Moderate",
    "sceneFrequency": "Low-Moderate"
  },
  "190": {
    "stimulationScore": 5,
    "TV or YouTube": "TV",
    "ageRange": "7-12",
    "Seasons": "25 Seasons",
    "Avg. Epsiode": "22 minutes",
    "themes": [
      "Enviromental Awareness",
      "Overcoming Fears",
      "Friendship",
      "Teamwork",
      "Wildlife Exploration",
      "Entertainment",
      "Humor",
      "Exploration",
      "Perseverance",
      "Mild Fantasy Violence"
    ],
    "interactivityLevel": "Low",
    "animationStyle": "traditional and Digital hand-drawn 2D animation. Anime style",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "High",
    "musicTempo": "High",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "High",
    "sceneFrequency": "High"
  },
  "191": {
    "stimulationScore": 2,
    "TV or YouTube": "TV",
    "ageRange": "3-6",
    "Seasons": "9 Seasons",
    "Avg. Epsiode": "15 minutes",
    "themes": [
      "Community Service",
      "Problem Solving",
      "Responsibility",
      "Teamwork",
      "Entertainment"
    ],
    "interactivityLevel": "Low",
    "animationStyle": "Traditional Stop-Motion animation",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Low-Moderate",
    "musicTempo": "Low-Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Low-Moderate",
    "sceneFrequency": "Low-Moderate"
  },
  "192": {
    "stimulationScore": 4,
    "TV or YouTube": "TV",
    "ageRange": "3-6",
    "Avg. Epsiode": "15 minutes",
    "themes": [
      "Community Service",
      "Problem Solving",
      "Responsibility",
      "Teamwork",
      "Entertainment"
    ],
    "interactivityLevel": "Low",
    "animationStyle": "3D CGI animation",
    "dialogueIntensity": "Moderate-High",
    "soundEffectsLevel": "Moderate-High",
    "musicTempo": "High",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "High",
    "sceneFrequency": "High"
  },
  "193": {
    "stimulationScore": 1,
    "TV or YouTube": "TV",
    "ageRange": "2-5",
    "Seasons": "2 Seasons",
    "Avg. Epsiode": "7 minutes",
    "themes": [
      "Enviromental Awareness",
      "Nature",
      "Wildlife Exploration",
      "Family Relationships",
      "Problem Solving"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "Digital 2D animation",
    "dialogueIntensity": "Low",
    "soundEffectsLevel": "Low",
    "musicTempo": "Low",
    "totalMusicLevel": "Low-Moderate",
    "totalSoundEffectTimeLevel": "Low",
    "sceneFrequency": "Scene Frequency"
  },
  "194": {
    "stimulationScore": 4,
    "TV or YouTube": "TV",
    "ageRange": "3-6",
    "Seasons": "5 Seasons",
    "Avg. Epsiode": "11 minutes",
    "themes": [
      "Creativity & Imagination",
      "Adventure",
      "Problem Solving",
      "Teamwork",
      "Social-Emotional"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "3D CGI animation with bright and vivid colors.",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "High",
    "musicTempo": "High",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "High",
    "sceneFrequency": "Low"
  },
  "195": {
    "stimulationScore": 3,
    "TV or YouTube": "TV",
    "ageRange": "2-5",
    "Seasons": "3 Seasons",
    "Avg. Epsiode": "10 minutes",
    "themes": [
      "Communiction & Expression",
      "Social-Emotional",
      "Social Development",
      "Friendship",
      "Problem Solving",
      "Emotional Intelligence"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "3D CGI Animation with a soft aesthetic. Color Palette: Pastel colors and gentle hues.",
    "dialogueIntensity": "Moderate-High",
    "soundEffectsLevel": "Moderate-High",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "High",
    "sceneFrequency": "High"
  },
  "196": {
    "stimulationScore": 5,
    "TV or YouTube": "YouTube",
    "ageRange": "3-7",
    "themes": [
      "Creativity & Imagination",
      "Career Exploration",
      "Curiosity",
      "Emotional Intelligence",
      "Fantasy Elements",
      "Problem Solving",
      "Social-Emotional"
    ],
    "interactivityLevel": "Low-Moderate",
    "animationStyle": "3D CGI Animation with bright and vibrant colors. Color Palette: Bright and cheerful colors with high saturation.",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "High",
    "musicTempo": "Moderate-High",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "High",
    "sceneFrequency": "High"
  },
  "197": {
    "stimulationScore": 5,
    "TV or YouTube": "TV",
    "ageRange": "6-10",
    "Seasons": "3 Seasons",
    "Avg. Epsiode": "22 minutes",
    "themes": [
      "Creativity & Imagination",
      "Life Lessons",
      "Overcoming Fears",
      "Adventure",
      "Courage",
      "Friendship",
      "Emotional Intelligence",
      "Problem Solving",
      "Perseverance",
      "Mild Intense Scenes"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "2D digital animation with bright colors and exaggerated, stylized designs. Bright and vivid colors with high contrast.",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "Very-High",
    "musicTempo": "High",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "Very-High",
    "sceneFrequency": "Moderate"
  },
  "198": {
    "stimulationScore": 2,
    "TV or YouTube": "YouTube",
    "ageRange": "2+, Any",
    "themes": [
      "Engineering Concepts",
      "Vehicle Themes",
      "Vehicle Recognition",
      "Machinery",
      "Relaxation",
      "Entertainment",
      "Hobbies",
      "Mechanics"
    ],
    "interactivityLevel": "Low",
    "animationStyle": "Live-action footage of RC vehicles in operation",
    "dialogueIntensity": "Low-Moderate",
    "soundEffectsLevel": "High",
    "musicTempo": "Moderate-High",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "High",
    "sceneFrequency": "Moderate-High"
  },
  "199": {
    "stimulationScore": 2,
    "TV or YouTube": "TV",
    "ageRange": "5-9",
    "Seasons": "16 Seasons",
    "Avg. Epsiode": "28 minutes",
    "themes": [
      "Cultural & Social",
      "Cultural Appreciation",
      "Life Lessons",
      "Positive Role Models",
      "Creativity & Imagination",
      "Social-Emotional",
      "Literacy",
      "Curiosity"
    ],
    "interactivityLevel": "High",
    "animationStyle": "Combination of Live-Action and 2D Animation. Color Palette: Bright and primary colors.",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Low-Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Low-Moderate",
    "sceneFrequency": "High"
  },
  "200": {
    "stimulationScore": 5,
    "TV or YouTube": "TV",
    "ageRange": "1-4",
    "Seasons": "6 Seasons",
    "Avg. Epsiode": "11 minutes",
    "themes": [
      "Physical Fitness",
      "Elementary-Basics",
      "sing-a-long",
      "Dance",
      "Music",
      "Friendship",
      "Motor Skills",
      "Repetitive Learning",
      "Entertainment",
      "Numeracy",
      "Literacy",
      "Social-Emotional"
    ],
    "interactivityLevel": "High",
    "animationStyle": "Live-Action with Bright Colors and Simple Settings",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "High",
    "musicTempo": "High",
    "totalMusicLevel": "Very-High",
    "totalSoundEffectTimeLevel": "High",
    "sceneFrequency": "Moderate"
  },
  "201": {
    "stimulationScore": 2,
    "TV or YouTube": "TV",
    "ageRange": "3-6",
    "Seasons": "2 Seasons",
    "Avg. Epsiode": "7 minutes",
    "themes": [
      "Enviromental Awareness",
      "Ecosystems",
      "Marine Bioligy",
      "Curiosity",
      "Social Development",
      "Emotional Intelligence",
      "Wildlife Conservation",
      "Natural World",
      "Teamwork"
    ],
    "interactivityLevel": "High",
    "animationStyle": "2D Digital Animation with a watercolor aesthetic. Color Palette: Soft and natural colors with pastel hues.",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Low-Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Low-Moderate",
    "sceneFrequency": "High"
  },
  "202": {
    "stimulationScore": 3,
    "TV or YouTube": "TV",
    "ageRange": "3-6",
    "Seasons": "2 Seasons",
    "Avg. Epsiode": "24 minutes",
    "themes": [
      "Language Learning",
      "Literacy",
      "sing-a-long",
      "Cognitive Development",
      "Social-Emotional",
      "Repetitive Learning",
      "Music"
    ],
    "interactivityLevel": "High",
    "animationStyle": "3D CGI Animation with extremely bright and vivid colors.",
    "dialogueIntensity": "Moderate-High",
    "soundEffectsLevel": "Moderate",
    "musicTempo": "Moderate-High",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "Moderate",
    "sceneFrequency": "Low-Moderate"
  },
  "203": {
    "stimulationScore": 5,
    "TV or YouTube": "TV",
    "ageRange": "3-6",
    "Seasons": "4 Seasons",
    "Avg. Epsiode": "11 minutes",
    "themes": [
      "Cultural & Social",
      "Safety",
      "Teamwork",
      "Problem Solving",
      "Adventure",
      "Community Service",
      "Social Development",
      "Social-Emotional"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "3D CGI Animation with detailed and dynamic visuals.",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "High",
    "musicTempo": "High",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "High",
    "sceneFrequency": "Moderate-High"
  },
  "204": {
    "stimulationScore": 3,
    "TV or YouTube": "TV",
    "ageRange": "3-6",
    "Seasons": "6 Seasons",
    "Avg. Epsiode": "22 minutes",
    "themes": [
      "Creativity & Imagination",
      "Friendship",
      "Problem Solving",
      "Adventure",
      "Social-Emotional",
      "Critical Thinking"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "3D CGI Animation",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Moderate-High",
    "sceneFrequency": "High"
  },
  "205": {
    "stimulationScore": 2,
    "TV or YouTube": "TV",
    "ageRange": "3-6",
    "Seasons": "8 Seasons",
    "Avg. Epsiode": "10 minutes",
    "themes": [
      "Preschool-Basics",
      "Creativity & Imagination",
      "Repetitive Learning",
      "Language Learning",
      "sing-a-long",
      "Problem Solving",
      "Curiosity"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "Live-action puppetry with colorful characters.",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Low-Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Low-Moderate",
    "sceneFrequency": "Moderate"
  },
  "206": {
    "stimulationScore": 3,
    "TV or YouTube": "TV",
    "ageRange": "4-8",
    "Seasons": "1 Season",
    "Avg. Epsiode": "26 minutes",
    "themes": [
      "Elementary-Basics",
      "Social-Emotional",
      "Problem Solving",
      "Family Relationships",
      "Responsibility",
      "Teamwork",
      "Social Development",
      "Family Values",
      "Emotional Intelligence"
    ],
    "interactivityLevel": "High",
    "animationStyle": "2D digital animation with a hand-drawn look. Bright and cheerful colors with simple backgrounds.",
    "dialogueIntensity": "Moderate-High",
    "soundEffectsLevel": "Moderate",
    "musicTempo": "Moderate-High",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "Moderate",
    "sceneFrequency": "Low-Moderate"
  },
  "207": {
    "stimulationScore": 3,
    "TV or YouTube": "TV",
    "ageRange": "4-8",
    "Seasons": "9 Seasons",
    "Avg. Epsiode": "22 minutes",
    "themes": [
      "Creativity & Imagination",
      "Social Development",
      "Social-Emotional",
      "Relatable Situations",
      "Emotional Intelligence",
      "Problem Solving",
      "Mischievious Behaviour"
    ],
    "interactivityLevel": "Low-Moderate",
    "animationStyle": "Traditional 2D hand-drawn animation with a distinctive, sketchy style. Muted and earthy tones, reflecting a somewhat realistic environment.",
    "dialogueIntensity": "Moderate-High",
    "soundEffectsLevel": "Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Moderate",
    "sceneFrequency": "Moderate-High"
  },
  "208": {
    "stimulationScore": 4,
    "TV or YouTube": "TV",
    "ageRange": "4-8",
    "Avg. Epsiode": "23 minutes",
    "themes": [
      "Creativity & Imagination",
      "Social Development",
      "Social-Emotional",
      "Relatable Situations",
      "Emotional Intelligence",
      "Problem Solving",
      "Mischievious Behaviour"
    ],
    "interactivityLevel": "Low-Moderate",
    "animationStyle": "3D CGI animation",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "High",
    "musicTempo": "Moderate-High",
    "totalMusicLevel": "Moderate-High",
    "totalSoundEffectTimeLevel": "Moderate-High",
    "sceneFrequency": "Moderate"
  },
  "209": {
    "stimulationScore": 5,
    "TV or YouTube": "YouTube",
    "ageRange": "0-5",
    "themes": [
      "Science",
      "Creativity & Imagination",
      "Learn Through Play",
      "STEM",
      "Geography",
      "Numeracy",
      "Unboxing Videos",
      "Entertainment",
      "Humor",
      "Silly Comedy",
      "Family Relationships",
      "Family Values",
      "Teamwork",
      "Toy Review"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "Live-Action with Bright Colors, High Energy, and Occasional Animations",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "High",
    "musicTempo": "Moderate-High",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "High",
    "sceneFrequency": "High"
  },
  "210": {
    "stimulationScore": 3,
    "TV or YouTube": "TV",
    "ageRange": "4-8",
    "Seasons": "1 Season",
    "Avg. Epsiode": "24 minutes",
    "themes": [
      "Cultural Appreciation",
      "Cultures & Traditions",
      "Cultural & Social",
      "Friendship",
      "Problem Solving",
      "Family Values"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "Traditional 2D animation with a hand-drawn look.",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Moderate",
    "sceneFrequency": "High"
  },
  "211": {
    "stimulationScore": 1,
    "TV or YouTube": "TV",
    "ageRange": "3-6",
    "Seasons": "3 Seasons",
    "Avg. Epsiode": "7 minutes",
    "themes": [
      "Creativity & Imagination",
      "Friendship",
      "Problem Solving",
      "Relatable Situations",
      "Social-Emotional"
    ],
    "interactivityLevel": "Low-Moderate",
    "animationStyle": "2D Digital animation with a hand-drawn look",
    "dialogueIntensity": "Low-Moderate",
    "soundEffectsLevel": "Low",
    "musicTempo": "Low",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Low",
    "sceneFrequency": "Moderate"
  },
  "212": {
    "stimulationScore": 4,
    "TV or YouTube": "TV",
    "ageRange": "7-12",
    "Seasons": "3 Seasons",
    "Avg. Epsiode": "22 minutes",
    "themes": [
      "Problem Solving",
      "Teamwork",
      "Mystery",
      "Entertainment",
      "Humor",
      "Critical Thinking",
      "Mild Peril",
      "Mild Fantasy Violence"
    ],
    "interactivityLevel": "Low",
    "animationStyle": "traditional hand-drawn 2D animation",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Moderate-High",
    "musicTempo": "Moderate-High",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "Moderate-High",
    "sceneFrequency": "Low"
  },
  "213": {
    "stimulationScore": 2,
    "TV or YouTube": "TV",
    "ageRange": "3-6",
    "Seasons": "1 Season",
    "Avg. Epsiode": "13 minutes",
    "themes": [
      "Enviromental Awareness",
      "Teamwork",
      "Marine Bioligy",
      "Wildlife Conservation",
      "Friendship",
      "Natural World",
      "Responsibility",
      "Social-Emotional",
      "Problem Solving"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "3D CGI Animation with stylized and colorful designs. Bright but not overly saturated colors, with a focus on vibrant settings.",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Low-Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Low-Moderate",
    "sceneFrequency": "Moderate"
  },
  "214": {
    "stimulationScore": 1,
    "TV or YouTube": "TV",
    "ageRange": "2-5",
    "Seasons": "54 Seasons",
    "Avg. Epsiode": "30 minutes",
    "themes": [
      "Preschool-Basics",
      "Cultural & Social",
      "STEM",
      "Elementary-Basics",
      "Cultures & Traditions",
      "Social Development",
      "Routine",
      "Motor Skills",
      "Emotional Intelligence"
    ],
    "interactivityLevel": "High",
    "animationStyle": "Various Art Styles",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Low-Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "Low",
    "sceneFrequency": "Low-Moderate"
  },
  "215": {
    "stimulationScore": 3,
    "TV or YouTube": "TV",
    "ageRange": "6-10",
    "Seasons": "6 Seasons",
    "Avg. Epsiode": "7 minutes",
    "themes": [
      "Creativity & Imagination",
      "Problem Solving",
      "Teamwork"
    ],
    "interactivityLevel": "Low",
    "animationStyle": "Traditional Stop-Motion (claymation) digital enhancements may be used for post-production",
    "dialogueIntensity": "None",
    "soundEffectsLevel": "Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Moderate",
    "sceneFrequency": "Moderate"
  },
  "216": {
    "stimulationScore": 3,
    "TV or YouTube": "TV",
    "ageRange": "4-7",
    "Seasons": "4 Seasons",
    "Avg. Epsiode": "26 minutes",
    "themes": [
      "STEM",
      "Critical Thinking",
      "Problem Solving",
      "Science",
      "Motor Skills",
      "Relatable Situations",
      "Curiosity"
    ],
    "interactivityLevel": "High",
    "animationStyle": "3D CGI Animation with Motion Capture",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "Moderate-High",
    "musicTempo": "Moderate-High",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "Moderate-High",
    "sceneFrequency": "High"
  },
  "217": {
    "stimulationScore": 3,
    "TV or YouTube": "YouTube",
    "ageRange": "2-5",
    "Seasons": "N/A",
    "Avg. Epsiode": "N/A",
    "themes": [
      "Positive Engaging Screen-Time",
      "Preschool-Basics",
      "Numeracy",
      "Colours",
      "Shapes",
      "Social-Emotional",
      "sing-a-long",
      "Literacy"
    ],
    "interactivityLevel": "High",
    "animationStyle": "Live-Action with Bright Colors and Props",
    "dialogueIntensity": "Moderate-High",
    "soundEffectsLevel": "Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate-High",
    "totalSoundEffectTimeLevel": "Moderate",
    "sceneFrequency": "Moderate"
  },
  "218": {
    "stimulationScore": 2,
    "TV or YouTube": "TV",
    "ageRange": "3-6",
    "Seasons": "8 Seasons",
    "Avg. Epsiode": "5 minutes",
    "themes": [
      "Friendship",
      "Family Relationships",
      "Emotional Intelligence",
      "Social-Emotional",
      "Problem Solving",
      "Relatable Situations"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "2D digital animation with a hand-drawn look. Bright and cheerful colors with simple backgrounds.",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Low-Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Low",
    "sceneFrequency": "Moderate-High"
  },
  "219": {
    "stimulationScore": 2,
    "TV or YouTube": "TV",
    "ageRange": "2-6",
    "Seasons": "1 Season",
    "Avg. Epsiode": "20 minutes",
    "themes": [
      "Early Childhood experiences",
      "Social-Emotional",
      "Emotional Intelligence",
      "Language Learning",
      "Makaton Sign Language",
      "Learning Disabilities"
    ],
    "interactivityLevel": "High",
    "animationStyle": "Live-Action with Bright Colors and Simple Settings",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Low-Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Low-Moderate",
    "sceneFrequency": "Moderate"
  },
  "220": {
    "stimulationScore": 5,
    "TV or YouTube": "TV",
    "ageRange": "7-12",
    "Seasons": "2 Seasons",
    "Avg. Epsiode": "22 minutes",
    "themes": [
      "Friendship",
      "Teamwork",
      "Perseverance",
      "Entertainment",
      "Humor",
      "Courage",
      "Adventure",
      "Mild Fantasy Violence"
    ],
    "interactivityLevel": "Low-Moderate",
    "animationStyle": "3D CGI Animation with detailed and dynamic visuals.",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "Very-High",
    "musicTempo": "High",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "Very-High",
    "sceneFrequency": "Low-Moderate"
  },
  "221": {
    "stimulationScore": 3,
    "TV or YouTube": "YouTube",
    "ageRange": "0-5",
    "themes": [
      "Cultures & Traditions",
      "Cultural & Social",
      "Learning through Songs",
      "Spanish Language",
      "Language Learning",
      "Music",
      "Vocabulary",
      "Phonics",
      "Emotional Intelligence",
      "Routine",
      "Healthy Eating"
    ],
    "interactivityLevel": "High",
    "animationStyle": "Live-Action with Educational Props and Colorful Backgrounds",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "Moderate",
    "sceneFrequency": "Low-Moderate"
  },
  "222": {
    "stimulationScore": 5,
    "TV or YouTube": "TV",
    "ageRange": "3-7",
    "Seasons": "3 Seasons",
    "Avg. Epsiode": "24 minutes",
    "themes": [
      "Super Hero Themes",
      "Positive Role Models",
      "Teamwork",
      "Responsibility",
      "Entertainment",
      "Mischievious Behaviour",
      "Mild Peril"
    ],
    "interactivityLevel": "Low",
    "animationStyle": "3D CGI",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "High",
    "musicTempo": "High",
    "totalMusicLevel": "Very-High",
    "totalSoundEffectTimeLevel": "High",
    "sceneFrequency": "Very-High"
  },
  "223": {
    "stimulationScore": 3,
    "TV or YouTube": "TV",
    "ageRange": "6-10",
    "Seasons": "8 Seasons",
    "Avg. Epsiode": "23 minutes",
    "themes": [
      "Friendship",
      "Responsibility",
      "Perseverance",
      "Adventure",
      "Horses",
      "Mild Intense Scenes"
    ],
    "interactivityLevel": "Low-Moderate",
    "animationStyle": "3D CGI Animation",
    "dialogueIntensity": "Moderate-High",
    "soundEffectsLevel": "Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Moderate",
    "sceneFrequency": "High"
  },
  "224": {
    "stimulationScore": 5,
    "TV or YouTube": "TV",
    "ageRange": "6-12",
    "Seasons": "15 Seasons",
    "Avg. Epsiode": "11 minutes",
    "themes": [
      "Creativity & Imagination",
      "Humor",
      "Friendship",
      "Problem Solving",
      "Entertainment",
      "Surreal Imagery",
      "Mild Intense Scenes"
    ],
    "interactivityLevel": "Low-Moderate",
    "animationStyle": "Traditional 2D animation with expressive and exaggerated character designs. Bright and vivid colors with high contrast.",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "Very-High",
    "musicTempo": "Moderate-High",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "High",
    "sceneFrequency": "Moderate"
  },
  "225": {
    "stimulationScore": 4,
    "TV or YouTube": "TV",
    "ageRange": "4-8",
    "Seasons": "2 Seasons",
    "Avg. Epsiode": "24 minutes",
    "themes": [
      "Cause and Effect",
      "Cultures & Traditions",
      "Positive Role Models",
      "Entertainment",
      "Courage",
      "Adventure",
      "Conflict Resolution",
      "Friendship",
      "Teamwork",
      "Responsibility",
      "Fantasy Elements",
      "Morality",
      "Mild Intense Scenes",
      "Mild Fantasy Violence"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "3D CGI Animation with detailed and dynamic visuals.",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "High",
    "musicTempo": "Moderate-High",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "High",
    "sceneFrequency": "High"
  },
  "226": {
    "stimulationScore": 2,
    "TV or YouTube": "TV",
    "ageRange": "3-6",
    "Seasons": "2 Seasons",
    "Avg. Epsiode": "22 minutes",
    "themes": [
      "Creativity & Imagination",
      "Problem Solving",
      "Exploration",
      "Emotional Intelligence",
      "Curiosity",
      "Family Relationships",
      "Social-Emotional",
      "Social Development",
      "Natural World"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "2D Digital Animation with a watercolor aesthetic. Color Palette: Soft and natural colors with pastel hues.",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Low-Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Low-Moderate",
    "sceneFrequency": "High"
  },
  "227": {
    "stimulationScore": 3,
    "TV or YouTube": "YouTube",
    "ageRange": "2-6",
    "themes": [
      "Every Day Concepts",
      "Preschool-Basics",
      "Creativity & Imagination",
      "Language Learning",
      "Vocabulary",
      "Phonics",
      "Repetitive Learning",
      "Literacy",
      "Social Development",
      "Social-Emotional",
      "Cognitive Development"
    ],
    "interactivityLevel": "High",
    "animationStyle": "Live-Action with Puppet Interaction and Simple Animations",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "High",
    "musicTempo": "Moderate",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "High",
    "sceneFrequency": "Moderate"
  },
  "228": {
    "stimulationScore": 3,
    "TV or YouTube": "TV",
    "ageRange": "3-7",
    "Seasons": "3 Seasons",
    "Avg. Epsiode": "27 minutes",
    "themes": [
      "Family Values",
      "Perseverance",
      "Family Relationships",
      "Courage",
      "Social-Emotional",
      "Mild Peril"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "3D CGI animation delivered slowly and smoothly",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "Moderate",
    "sceneFrequency": "Low-Moderate"
  },
  "229": {
    "stimulationScore": 2,
    "TV or YouTube": "TV",
    "ageRange": "4-8",
    "Seasons": "3 Seasons",
    "Avg. Epsiode": "23 minutes",
    "themes": [
      "Life Lessons",
      "Mindfulness",
      "Emotional Intelligence",
      "Problem Solving",
      "Social-Emotional",
      "Conflict Resolution"
    ],
    "interactivityLevel": "High",
    "animationStyle": "Mix of 3D CGI animations for the characters and settings",
    "dialogueIntensity": "Low-Moderate",
    "soundEffectsLevel": "Low",
    "musicTempo": "Low",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Low",
    "sceneFrequency": "Moderate-High"
  },
  "230": {
    "stimulationScore": 2,
    "TV or YouTube": "TV",
    "ageRange": "3-7",
    "Seasons": "1 Season",
    "Avg. Epsiode": "5 minutes",
    "themes": [
      "Creativity & Imagination",
      "Literacy",
      "Language Learning",
      "Reading Comprehension",
      "Cognitive Development",
      "Repetitive Learning"
    ],
    "interactivityLevel": "High",
    "animationStyle": "Illustrations or Minimal Animation",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Low-Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Low-Moderate",
    "sceneFrequency": "Low"
  },
  "231": {
    "stimulationScore": 4,
    "TV or YouTube": "TV",
    "ageRange": "3-6",
    "Seasons": "3 Seasons",
    "Avg. Epsiode": "25 minutes",
    "themes": [
      "STEM",
      "Literacy",
      "Reading Comprehension",
      "Problem Solving",
      "Curiosity",
      "Social Development",
      "Critical Thinking"
    ],
    "interactivityLevel": "High",
    "animationStyle": "Combination of 2D and 3D Animation with Mixed Media",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "High",
    "musicTempo": "High",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "High",
    "sceneFrequency": "Low"
  },
  "232": {
    "stimulationScore": 4,
    "TV or YouTube": "TV",
    "ageRange": "3-6",
    "Seasons": "3 Seasons",
    "Avg. Epsiode": "23 minutes",
    "themes": [
      "Cultural & Social",
      "Creativity & Imagination",
      "Social-Emotional",
      "Friendship",
      "Emotional Intelligence",
      "Self Discipline",
      "Problem Solving",
      "Social Development",
      "Entertainment"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "3D CGI animation with bright and vivid colors",
    "dialogueIntensity": "Moderate-High",
    "soundEffectsLevel": "Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate-High",
    "totalSoundEffectTimeLevel": "Moderate",
    "sceneFrequency": "High"
  },
  "233": {
    "stimulationScore": 4,
    "TV or YouTube": "YouTube",
    "ageRange": "2-5",
    "themes": [
      "Preschool-Basics",
      "Learning through Songs",
      "Story Telling without Dialogue",
      "Literacy",
      "Numeracy",
      "Shapes",
      "Colours",
      "sing-a-long",
      "Social Development",
      "Social-Emotional",
      "Dance",
      "Motor Skills",
      "Language Learning",
      "Cognitive Development",
      "Music",
      "Vocabulary"
    ],
    "interactivityLevel": "High",
    "animationStyle": "2D and 3D Animation with Bright Colors and Simple Characters",
    "dialogueIntensity": "Mod-High (Singing)",
    "soundEffectsLevel": "Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Very-High",
    "totalSoundEffectTimeLevel": "Moderate",
    "sceneFrequency": "Low-Moderate"
  },
  "234": {
    "stimulationScore": 3,
    "TV or YouTube": "TV",
    "ageRange": "3-6",
    "Seasons": "3 Seasons",
    "Avg. Epsiode": "26 minutes",
    "themes": [
      "Elementary-Basics",
      "Numeracy",
      "Literacy",
      "Problem Solving"
    ],
    "interactivityLevel": "High",
    "animationStyle": "3D CGI animation with bright colors and clear designs. Bright and vivid colors focused on storybook settings.",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Moderate",
    "sceneFrequency": "Moderate"
  },
  "235": {
    "stimulationScore": 4,
    "TV or YouTube": "TV",
    "ageRange": "6-10",
    "Seasons": "5 Seasons",
    "Avg. Epsiode": "25 minutes",
    "themes": [
      "Cultures & Traditions",
      "Cultural Appreciation",
      "Cause and Effect",
      "Positive Role Models",
      "Religion",
      "Morality",
      "History",
      "Literacy",
      "Courage",
      "Repetitive Learning"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "3D CGI Animation with Detailed and Dynamic Visuals",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "High",
    "musicTempo": "High",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "High",
    "sceneFrequency": "Moderate"
  },
  "236": {
    "stimulationScore": 5,
    "TV or YouTube": "TV",
    "ageRange": "3-6",
    "Seasons": "2 Seasons",
    "Avg. Epsiode": "11 minutes",
    "themes": [
      "Super Hero Themes",
      "Teamwork",
      "Problem Solving",
      "Responsibility",
      "Adventure",
      "Entertainment",
      "Friendship"
    ],
    "interactivityLevel": "Low-Moderate",
    "animationStyle": "3D CGI Animation",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "High",
    "musicTempo": "High",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "High",
    "sceneFrequency": "High"
  },
  "237": {
    "stimulationScore": 3,
    "TV or YouTube": "TV",
    "ageRange": "3-6",
    "Avg. Epsiode": "25 minutes",
    "themes": [
      "Friendship",
      "Teamwork",
      "Nature",
      "Social Development"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "3D CGI animation with detailed textures and natural settings. Earthy tones with vivid highlights.",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Moderate",
    "sceneFrequency": "High"
  },
  "238": {
    "stimulationScore": 2,
    "TV or YouTube": "TV",
    "ageRange": "3-6",
    "Seasons": "3 Seasons",
    "Avg. Epsiode": "5 minutes",
    "themes": [
      "Cultures & Traditions",
      "Cultural & Social",
      "Cultural Appreciation",
      "Religion",
      "Literacy",
      "History",
      "Music",
      "Routine",
      "Repetitive Learning",
      "Social-Emotional",
      "Language Learning"
    ],
    "interactivityLevel": "High",
    "animationStyle": "2D Digital Animation with simple, flat designs. Bright but pastel-like colors with minimal shading.",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Low-Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "Low-Moderate",
    "sceneFrequency": "Moderate"
  },
  "239": {
    "stimulationScore": 5,
    "TV or YouTube": "TV",
    "ageRange": "3-6",
    "Seasons": "3 Seasons",
    "Avg. Epsiode": "55 minutes",
    "themes": [
      "Overcoming Fears",
      "Adventure",
      "Friendship",
      "Courage",
      "Social Development",
      "Perseverance",
      "Fantasy Elements",
      "Responsibility",
      "Nature",
      "Mild Peril",
      "Mild Intense Scenes"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "2D digital animation",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "Very-High",
    "musicTempo": "High",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "Very-High",
    "sceneFrequency": "Low-Moderate"
  },
  "240": {
    "stimulationScore": 4,
    "TV or YouTube": "YouTube",
    "ageRange": "3-6",
    "themes": [
      "Vehicle Themes",
      "Vehicle Recognition",
      "Social Development",
      "Teamwork",
      "Problem Solving",
      "Community Service",
      "Responsibility",
      "Entertainment",
      "Social-Emotional"
    ],
    "interactivityLevel": "Low-Moderate",
    "animationStyle": "3D CGI Animation with bright and vibrant colors. Color Palette: Bright and cheerful colors with high saturation.",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate-High",
    "totalSoundEffectTimeLevel": "Moderate",
    "sceneFrequency": "Moderate"
  },
  "241": {
    "stimulationScore": 4,
    "TV or YouTube": "TV",
    "ageRange": "3-6",
    "Seasons": "5 Seasons",
    "Avg. Epsiode": "23 minutes",
    "themes": [
      "STEM",
      "Math",
      "Problem Solving",
      "Critical Thinking",
      "Teamwork",
      "Numeracy",
      "Shapes"
    ],
    "interactivityLevel": "High",
    "animationStyle": "3D CGI animation with bright and vivid colors",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "High",
    "musicTempo": "High",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "High",
    "sceneFrequency": "High"
  },
  "242": {
    "stimulationScore": 5,
    "TV or YouTube": "TV",
    "ageRange": "8-12",
    "Seasons": "9 Seasons",
    "Avg. Epsiode": "11 minutes",
    "themes": [
      "Super Hero Themes",
      "Humor",
      "Teamwork",
      "Friendship",
      "Adventure",
      "Entertainment",
      "Surreal Imagery",
      "Mild Mature Themes"
    ],
    "interactivityLevel": "Low",
    "animationStyle": "2D digital animation with bright colors and exaggerated, stylized designs. Bright and vivid colors with high contrast.",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "Very-High",
    "musicTempo": "Moderate-High",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "High",
    "sceneFrequency": "High"
  },
  "243": {
    "stimulationScore": 3,
    "TV or YouTube": "TV",
    "ageRange": "1-4",
    "Avg. Epsiode": "12 minutes",
    "themes": [
      "Creativity & Imagination",
      "Social-Emotional",
      "Repetitive Learning",
      "Sensory Exploration",
      "Routine",
      "Bedtime Routines"
    ],
    "interactivityLevel": "Low",
    "animationStyle": "Live action costumed. some digital elements ",
    "dialogueIntensity": "Low",
    "soundEffectsLevel": "Low-Moderate",
    "musicTempo": "Low",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Low",
    "sceneFrequency": "High"
  },
  "244": {
    "stimulationScore": 2,
    "TV or YouTube": "TV",
    "ageRange": "1-4",
    "Seasons": "2 Seasons",
    "Avg. Epsiode": "24 minutes",
    "themes": [
      "Creativity & Imagination",
      "Social-Emotional",
      "Repetitive Learning",
      "Sensory Exploration",
      "Routine",
      "Bedtime Routines"
    ],
    "interactivityLevel": "Low",
    "animationStyle": "",
    "dialogueIntensity": "Low",
    "soundEffectsLevel": "Low",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Moderate",
    "sceneFrequency": "Moderate",
    "description": "A children's TV show"
  },
  "245": {
    "stimulationScore": 1,
    "TV or YouTube": "TV",
    "ageRange": "3-6",
    "Seasons": "2 Seasons",
    "Avg. Epsiode": "11 minutes",
    "themes": [
      "Creativity & Imagination",
      "Problem Solving",
      "Social-Emotional",
      "Nature"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "Stop-motion animation with hand-crafted models.",
    "dialogueIntensity": "Low-Moderate",
    "soundEffectsLevel": "Low",
    "musicTempo": "Low-Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Low",
    "sceneFrequency": "Low"
  },
  "246": {
    "stimulationScore": 3,
    "TV or YouTube": "TV",
    "ageRange": "4-8",
    "Seasons": "3 Seasons",
    "Avg. Epsiode": "11 minutes",
    "themes": [
      "Cultural & Social",
      "Emotional Intelligence",
      "Problem Solving",
      "Family Values",
      "Social Development",
      "Family Relationships"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "3D CGI animation",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Moderate-High",
    "musicTempo": "Moderate",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "Moderate",
    "sceneFrequency": "Low-Moderate"
  },
  "247": {
    "stimulationScore": 2,
    "TV or YouTube": "TV",
    "ageRange": "4-8",
    "Seasons": "3 Seasons",
    "Avg. Epsiode": " 23 minutes",
    "themes": [
      "Cultural Appreciation",
      "Friendship",
      "Emotional Intelligence",
      "Social-Emotional",
      "Problem Solving"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "Traditional 2D hand-drawn animation with a unique style combining stop-motion elements.",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Low-Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Low",
    "sceneFrequency": "Moderate"
  },
  "248": {
    "stimulationScore": 3,
    "TV or YouTube": "TV",
    "ageRange": "5-8",
    "Seasons": "1 Season",
    "Avg. Epsiode": "22 minutes",
    "themes": [
      "Life Lessons",
      "Friendship",
      "Adventure",
      "Problem Solving",
      "Morality",
      "Fantasy Elements",
      "Perseverance",
      "Courage",
      "Social-Emotional",
      "Mild Peril"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "Traditional 2D hand-drawn animation with detailed illustrations. Soft, pastel colors with a focus on everyday environments.",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Moderate",
    "sceneFrequency": "Moderate"
  },
  "249": {
    "stimulationScore": 4,
    "TV or YouTube": "TV",
    "ageRange": "6-10",
    "Seasons": "6 Seasons",
    "Avg. Epsiode": "22 minutes",
    "themes": [
      "Overcoming Fears",
      "Adventure",
      "Friendship",
      "Fantasy Elements",
      "Problem Solving",
      "Courage",
      "Perseverance",
      "Mild Violent themes"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "Traditional 2D Anime-style Animation.",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "High",
    "musicTempo": "Moderate-High",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "High",
    "sceneFrequency": "Moderate"
  },
  "250": {
    "stimulationScore": 3,
    "TV or YouTube": "TV",
    "ageRange": "3-6",
    "Seasons": "4 Seasons",
    "Avg. Epsiode": "24 minutes",
    "themes": [
      "Communiction & Expression",
      "Creativity & Imagination",
      "Teamwork",
      "Music",
      "Problem Solving",
      "Social-Emotional"
    ],
    "interactivityLevel": "High",
    "animationStyle": "3D CGI Animation with bright and vibrant colors. Color Palette: Bright and cheerful colors with high saturation.",
    "dialogueIntensity": "Moderate-High",
    "soundEffectsLevel": "Moderate-High",
    "musicTempo": "Moderate-High",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "Moderate-High",
    "sceneFrequency": "High"
  },
  "251": {
    "stimulationScore": 3,
    "TV or YouTube": "YouTube",
    "ageRange": "3-7",
    "themes": [
      "Vehicle Themes",
      "Engineering Concepts",
      "Story Telling without Dialogue",
      "Construction",
      "Teamwork",
      "Problem Solving",
      "Machinery",
      "Vehicle Recognition",
      "Entertainment",
      "Curiosity",
      "ASMR"
    ],
    "interactivityLevel": "Low",
    "animationStyle": "3D CGI animation with detailed depictions of construction sites and machinery",
    "dialogueIntensity": "None",
    "soundEffectsLevel": "Very-High",
    "musicTempo": "Low",
    "totalMusicLevel": "Low",
    "totalSoundEffectTimeLevel": "Very-High",
    "sceneFrequency": "Moderate-High"
  },
  "252": {
    "stimulationScore": 2,
    "TV or YouTube": "TV",
    "ageRange": "4-8",
    "Seasons": "5 Seasons",
    "Avg. Epsiode": "13 minutes",
    "themes": [
      "Relatable Situations",
      "Social Development",
      "Social-Emotional",
      "Family Relationships",
      "Family Values",
      "Emotional Intelligence"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "Traditional 2D animation with a hand-drawn look.",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Low-Moderate",
    "musicTempo": "Low-Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Low",
    "sceneFrequency": "Moderate-High"
  },
  "253": {
    "stimulationScore": 2,
    "TV or YouTube": "TV",
    "ageRange": "2-6",
    "Seasons": "7 Seasons",
    "Avg. Epsiode": "22 minutes",
    "themes": [
      "Preschool-Basics",
      "Overcoming Fears",
      "Social-Emotional",
      "Problem Solving",
      "Motor Skills",
      "Numeracy",
      "Literacy",
      "Exercise"
    ],
    "interactivityLevel": "High",
    "animationStyle": "Live-action costumed puppetry with detailed sets. ",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Low-Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Low-Moderate",
    "sceneFrequency": "Moderate"
  },
  "254": {
    "stimulationScore": 2,
    "TV or YouTube": "TV",
    "ageRange": "3-6",
    "Seasons": "5 Seasons",
    "Avg. Epsiode": "23 minutes",
    "themes": [
      "Learning from Mistakes",
      "Cultural & Social",
      "Problem Solving",
      "Social-Emotional",
      "Community Service",
      "Relatable Situations",
      "Curiosity"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "Traditional 2D hand-drawn animation with detailed illustrations. Soft, pastel colors with a focus on everyday environments.",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Low-Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Low",
    "sceneFrequency": "Low-Moderate"
  },
  "255": {
    "stimulationScore": 2,
    "TV or YouTube": "TV",
    "ageRange": "4-8",
    "Seasons": "3 Seasons",
    "Avg. Epsiode": "11 minutes",
    "themes": [
      "Learning from Mistakes",
      "Emotional Intelligence",
      "Social-Emotional",
      "Social Development",
      "Friendship"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "Traditional 2D animation with soft character designs. Color Palette: Pastel colors and gentle hues.",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Low-Moderate",
    "musicTempo": "Low-Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Low",
    "sceneFrequency": "Moderate"
  },
  "256": {
    "stimulationScore": 3,
    "TV or YouTube": "TV",
    "ageRange": "3-7",
    "Seasons": "3 Seasons",
    "Avg. Epsiode": "26 minutes",
    "themes": [
      "STEM",
      "Science",
      "Nature",
      "Exploration",
      "Problem Solving",
      "Geography",
      "Ecosystems",
      "Curiosity",
      "Critical Thinking"
    ],
    "interactivityLevel": "High",
    "animationStyle": "2D Digital Animation with a video game aesthetic. Color Palette: Bright, vivid colors with high saturation",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "Moderate-High",
    "musicTempo": "High",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "Moderate-High",
    "sceneFrequency": "Moderate"
  },
  "257": {
    "stimulationScore": 2,
    "TV or YouTube": "TV",
    "ageRange": "3-6",
    "Seasons": "2 Seasons",
    "Avg. Epsiode": "10 minutes",
    "themes": [
      "Spacetime and the Cosmos",
      "Creativity & Imagination",
      "Problem Solving",
      "Social-Emotional",
      "Social Development",
      "Exploration",
      "Teamwork"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "Traditional Stop-Motion animation with live-action model sets",
    "dialogueIntensity": "Low",
    "soundEffectsLevel": "Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate-High",
    "totalSoundEffectTimeLevel": "Moderate",
    "sceneFrequency": "High"
  },
  "258": {
    "stimulationScore": 3,
    "TV or YouTube": "TV",
    "ageRange": "8+",
    "Seasons": "8 Seasons",
    "Avg. Epsiode": "48 minutes",
    "themes": [
      "Enviromental Awareness",
      "Overcoming Fears",
      "Positive Role Models",
      "Wildlife Exploration",
      "Wildlife Conservation",
      "Nature",
      "Natural World",
      "Animals",
      "Animal Behaviour",
      "Curiosity",
      "Ecosystems",
      "Intense Animal Interaction"
    ],
    "interactivityLevel": "High",
    "animationStyle": "Live-action documentary featuring wildlife. Color Palette: Natural colors showcasing diverse environments.",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "Low",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Low",
    "sceneFrequency": "Low-Moderate"
  },
  "259": {
    "stimulationScore": 2,
    "TV or YouTube": "TV",
    "ageRange": "4-8",
    "Seasons": "1 Season",
    "Avg. Epsiode": "25 minutes",
    "themes": [
      "Natural World",
      "Social-Emotional",
      "Problem Solving",
      "Teamwork",
      "Curiosity",
      "Mindfulness",
      "Nature"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "Stop-motion animation with hand-crafted models.",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Low-Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate-High",
    "totalSoundEffectTimeLevel": "Low-Moderate",
    "sceneFrequency": "Moderate"
  },
  "260": {
    "stimulationScore": 5,
    "TV or YouTube": "TV",
    "ageRange": "6-10",
    "Avg. Epsiode": "24 minutes",
    "themes": [
      "Creativity & Imagination",
      "Humor",
      "Friendship",
      "Problem Solving",
      "Entertainment",
      "Mischievious Behaviour",
      "Toilet Humour"
    ],
    "interactivityLevel": "Low",
    "animationStyle": "2D animation with a comic-book aesthetic",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "High",
    "musicTempo": "Moderate-High",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "High",
    "sceneFrequency": "Low-Moderate"
  },
  "261": {
    "stimulationScore": 4,
    "TV or YouTube": "TV",
    "ageRange": "4-8",
    "Seasons": "5 Seasons",
    "Avg. Epsiode": "6 minutes",
    "themes": [
      "STEM",
      "Problem Solving",
      "Curiosity",
      "Teamwork",
      "Science",
      "Motor Skills",
      "Critical Thinking",
      "Technology",
      "Engineering Concepts"
    ],
    "interactivityLevel": "High",
    "animationStyle": "3D CGI Animation with detailed and dynamic visuals.",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "High",
    "musicTempo": "Moderate-High",
    "totalMusicLevel": "Moderate-High",
    "totalSoundEffectTimeLevel": "High",
    "sceneFrequency": "High"
  },
  "262": {
    "stimulationScore": 4,
    "TV or YouTube": "TV",
    "ageRange": "4-8",
    "Seasons": "2 Seasons",
    "Avg. Epsiode": "23 minutes",
    "themes": [
      "Friendship",
      "Problem Solving",
      "Perseverance",
      "Adventure",
      "Entertainment",
      "Dinosaurs",
      "Mild Peril",
      "Mild Intense Scenes"
    ],
    "interactivityLevel": "Low",
    "animationStyle": "3D CGI Animation",
    "dialogueIntensity": "Moderate-High",
    "soundEffectsLevel": "Moderate-High",
    "musicTempo": "High",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "High",
    "sceneFrequency": "High"
  },
  "263": {
    "stimulationScore": 5,
    "TV or YouTube": "YouTube",
    "ageRange": "12+",
    "themes": [
      "Cultural & Social",
      "Life Lessons",
      "Creativity & Imagination",
      "Learning from Mistakes",
      "Complex Emotional Themes",
      "Entertainment",
      "Humor",
      "Silly Comedy",
      "Skit Comedy",
      "Slice of Life",
      "Light Hearted",
      "Social-Emotional",
      "Relatable Situations",
      "Surreal Imagery",
      "Mature Themes"
    ],
    "interactivityLevel": "Low",
    "animationStyle": "2D animation with simple, colorful designs and expressive characters.",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "High",
    "musicTempo": "Moderate-High",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "High",
    "sceneFrequency": "High"
  },
  "264": {
    "stimulationScore": 4,
    "TV or YouTube": "TV",
    "ageRange": "4-8",
    "Seasons": "3 Seasons",
    "Avg. Epsiode": "22 minutes",
    "themes": [
      "Enviromental Awareness",
      "Natural World",
      "Wildlife Conservation",
      "Wildlife Exploration",
      "Courage",
      "Responsibility"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "2D Digital Animation with bright and colorful designs. Color Palette: Bright and vivid colors with emphasis on primary colors.",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "High",
    "musicTempo": "Moderate-High",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "High",
    "sceneFrequency": "High"
  },
  "265": {
    "stimulationScore": 4,
    "TV or YouTube": "TV",
    "ageRange": "6-10",
    "Seasons": "3 Seasons",
    "Avg. Epsiode": "22 minutes",
    "themes": [
      "Enviromental Awareness",
      "Adventure",
      "Friendship",
      "Courage",
      "Marine Bioligy",
      "Entertainment",
      "Teamwork",
      "Mild Peril"
    ],
    "interactivityLevel": "Low-Moderate",
    "animationStyle": "Traditional 2D Animation with Bold Designs",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "High",
    "musicTempo": "High",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "High",
    "sceneFrequency": "High"
  },
  "266": {
    "stimulationScore": 4,
    "TV or YouTube": "TV",
    "ageRange": "6-10",
    "Seasons": "4 Seasons",
    "Avg. Epsiode": "26 minutes",
    "themes": [
      "Enviromental Awareness",
      "STEM",
      "Exploration",
      "Critical Thinking",
      "Discovery",
      "Curiosity",
      "Nature",
      "Science"
    ],
    "interactivityLevel": "High",
    "animationStyle": "Traditional hand-drawn 2D animation",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "Moderate-High",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Moderate-High",
    "sceneFrequency": "High"
  },
  "267": {
    "stimulationScore": 4,
    "TV or YouTube": "TV",
    "ageRange": "6-10",
    "Seasons": "4 Seasons",
    "Avg. Epsiode": "26 minutes",
    "themes": [
      "Enviromental Awareness",
      "STEM",
      "Nature",
      "Science",
      "Engineering Concepts",
      "Curiosity",
      "Experimentation"
    ],
    "interactivityLevel": "High",
    "animationStyle": "2D Traditional hand-drawn",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "High",
    "musicTempo": "Moderate-High",
    "totalMusicLevel": "Moderate-High",
    "totalSoundEffectTimeLevel": "High",
    "sceneFrequency": "Moderate-High"
  },
  "268": {
    "stimulationScore": 5,
    "TV or YouTube": "YouTube",
    "ageRange": "2-6",
    "themes": [
      "Learning through Songs",
      "Preschool-Basics",
      "Elementary-Basics",
      "sing-a-long",
      "Dance",
      "Instruments",
      "Music",
      "Motor Skills",
      "Exercise",
      "Phonics",
      "Vocabulary",
      "Entertainment",
      "Silly Comedy",
      "Family Values",
      "Family Relationships"
    ],
    "interactivityLevel": "High",
    "animationStyle": "Live-Action Performances with Colorful Costumes and Sets. Some 2D animations",
    "dialogueIntensity": "Moderate-High",
    "soundEffectsLevel": "Moderate",
    "musicTempo": "Moderate-High",
    "totalMusicLevel": "Very-High",
    "totalSoundEffectTimeLevel": "Moderate",
    "sceneFrequency": "Moderate"
  },
  "269": {
    "stimulationScore": 2,
    "TV or YouTube": "TV",
    "ageRange": "3-7",
    "Seasons": "4 Seasons",
    "Avg. Epsiode": "22 minutes",
    "themes": [
      "Creativity & Imagination",
      "Friendship",
      "Problem Solving",
      "Social Development",
      "Emotional Intelligence",
      "Relatable Situations"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "Traditional Hand-Drawn 2D animation",
    "dialogueIntensity": "Low-Moderate",
    "soundEffectsLevel": "Low",
    "musicTempo": "Low",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Low",
    "sceneFrequency": "Low"
  },
  "270": {
    "stimulationScore": 5,
    "TV or YouTube": "TV",
    "ageRange": "4-8",
    "Seasons": "4 Seasons",
    "Avg. Epsiode": "11 minutes",
    "themes": [
      "Enviromental Awareness",
      "Problem Solving",
      "Ecosystems",
      "Curiosity",
      "Natural World",
      "Marine Bioligy",
      "Teamwork"
    ],
    "interactivityLevel": "High",
    "animationStyle": "3D CGI animation set in an underwater world. Extremely bright and vivid colors with high saturation.",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Moderate-High",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Moderate-High",
    "sceneFrequency": "Moderate-High"
  },
  "271": {
    "stimulationScore": 5,
    "TV or YouTube": "TV",
    "ageRange": "6-10",
    "Seasons": "4 Seasons",
    "Avg. Epsiode": "7 minutes",
    "themes": [
      "Creativity & Imagination",
      "Humor",
      "Problem Solving",
      "Friendship",
      "Entertainment",
      "Social-Emotional",
      "Slapstic Comedy",
      "Mischievious Behaviour"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "3D CGI animation with bright and vivid colors",
    "dialogueIntensity": "None",
    "soundEffectsLevel": "Very-High",
    "musicTempo": "High",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "Very-High",
    "sceneFrequency": "High"
  },
  "272": {
    "stimulationScore": 3,
    "TV or YouTube": "TV",
    "ageRange": "6-10",
    "Seasons": "3 Seasons",
    "Avg. Epsiode": "7 minutes",
    "themes": [
      "Cultural & Social",
      "Creativity & Imagination",
      "Entertainment",
      "Social Development",
      "Friendship"
    ],
    "interactivityLevel": "Low-Moderate",
    "animationStyle": "2D digital animation",
    "dialogueIntensity": "Low-Moderate",
    "soundEffectsLevel": "Moderate-High",
    "musicTempo": "Moderate",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "High",
    "sceneFrequency": "High"
  },
  "273": {
    "stimulationScore": 3,
    "TV or YouTube": "TV",
    "ageRange": "3-6",
    "Seasons": "2 Seasons",
    "Avg. Epsiode": "11 minutes",
    "themes": [
      "Creativity & Imagination",
      "Problem Solving",
      "Teamwork",
      "Perseverance",
      "Engineering Concepts",
      "Critical Thinking"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "3D CGI animation",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Moderate-High",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Moderate-High",
    "sceneFrequency": "Moderate-High"
  },
  "274": {
    "stimulationScore": 4,
    "TV or YouTube": "TV",
    "ageRange": "1-4",
    "Seasons": "6 Seasons",
    "Avg. Epsiode": "22 minutes",
    "themes": [
      "Physical Fitness",
      "Preschool-Basics",
      "Music",
      "Dance",
      "sing-a-long",
      "Motor Skills",
      "Social-Emotional",
      "Entertainment"
    ],
    "interactivityLevel": "High",
    "animationStyle": "Live-Action with Bright Colors and Simple Settings",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "Moderate-High",
    "musicTempo": "High",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "Moderate-High",
    "sceneFrequency": "Moderate"
  },
  "275": {
    "stimulationScore": 2,
    "TV or YouTube": "TV",
    "ageRange": "3-6",
    "Seasons": "5 Seasons",
    "Avg. Epsiode": "15 minutes",
    "themes": [
      "Enviromental Awareness",
      "Problem Solving",
      "Friendship",
      "Teamwork",
      "Adventure",
      "Responsibility",
      "Social-Emotional"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "Combination of live-action, puppetry, and CGI elements. Color Palette: Bright and vivid colors with high contrast",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Low-Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Low-Moderate",
    "sceneFrequency": "High"
  },
  "276": {
    "stimulationScore": 1,
    "TV or YouTube": "TV",
    "ageRange": "3-6",
    "Seasons": "25 Seasons",
    "Avg. Epsiode": "5 minutes",
    "themes": [
      "Friendship",
      "Teamwork",
      "Problem Solving",
      "Responsibility"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "Traditional Stop-Motion animation with live-action model sets",
    "dialogueIntensity": "Low",
    "soundEffectsLevel": "Low",
    "musicTempo": "Low",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Low",
    "sceneFrequency": "Low-Moderate"
  },
  "277": {
    "stimulationScore": 5,
    "TV or YouTube": "TV",
    "ageRange": "2-5",
    "Avg. Epsiode": "11 minutes",
    "themes": [
      "Friendship",
      "Teamwork",
      "Responsibility",
      "Problem Solving"
    ],
    "interactivityLevel": "Low",
    "animationStyle": "3D CGI animation",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "High",
    "musicTempo": "High",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "High",
    "sceneFrequency": "Low"
  },
  "278": {
    "stimulationScore": 2,
    "TV or YouTube": "TV",
    "ageRange": "3-6",
    "Seasons": "1 Season",
    "Avg. Epsiode": "10 minutes",
    "themes": [
      "Arts & Crafts",
      "Preschool-Basics",
      "Elementary-Basics",
      "Relatable Situations",
      "Social Development",
      "Social-Emotional",
      "Routine",
      "Motor Skills"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "Live-action with real actors.",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Low",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Low-Moderate",
    "totalSoundEffectTimeLevel": "Low",
    "sceneFrequency": "High"
  },
  "279": {
    "stimulationScore": 3,
    "TV or YouTube": "YouTube",
    "ageRange": "4-7",
    "themes": [
      "Cultural Appreciation",
      "Cultural & Social",
      "Learning from Mistakes",
      "African folk tales",
      "Cultures & Traditions",
      "Animals",
      "Curiosity",
      "Nature Sounds",
      "Traditional Narratives",
      "Geography",
      "Animal Behaviour",
      "Social-Emotional",
      "Morality",
      "Friendship",
      "Responsibility",
      "Humor",
      "Entertainment",
      "Light Hearted"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "2D Animation Inspired by Tinga Tinga African Art",
    "dialogueIntensity": "Moderate-High",
    "soundEffectsLevel": "Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate-High",
    "totalSoundEffectTimeLevel": "Moderate",
    "sceneFrequency": "Moderate"
  },
  "280": {
    "stimulationScore": 4,
    "TV or YouTube": "TV",
    "ageRange": "6-12",
    "Seasons": "1 Season",
    "Avg. Epsiode": "7 minutes",
    "themes": [
      "Creativity & Imagination",
      "Humor",
      "Problem Solving",
      "Slapstic Comedy",
      "Rivalry",
      "Entertainment",
      "Music",
      "Mild Fantasy Violence"
    ],
    "interactivityLevel": "Low",
    "animationStyle": "2D Digital Animation with exaggerated and dynamic character movements.",
    "dialogueIntensity": "None",
    "soundEffectsLevel": "Very-High",
    "musicTempo": "High",
    "totalMusicLevel": "Very-High",
    "totalSoundEffectTimeLevel": "Very-High",
    "sceneFrequency": "Low-Moderate"
  },
  "281": {
    "stimulationScore": 2,
    "TV or YouTube": "TV",
    "ageRange": "3-6",
    "Seasons": "3 Seasons",
    "Avg. Epsiode": "11 minutes",
    "themes": [
      "Social-Emotional",
      "Relatable Situations",
      "Family Relationships",
      "Problem Solving",
      "Emotional Intelligence"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "Live-action with real actors.",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Low",
    "musicTempo": "Low-Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Low",
    "sceneFrequency": "High"
  },
  "282": {
    "stimulationScore": 2,
    "TV or YouTube": "TV",
    "ageRange": "2-5",
    "Seasons": "5 Seasons",
    "Avg. Epsiode": "10 minutes",
    "themes": [
      "Cultures & Traditions",
      "Creativity & Imagination",
      "Social-Emotional",
      "Problem Solving",
      "Literacy",
      "Curiosity",
      "Language Learning"
    ],
    "interactivityLevel": "High",
    "animationStyle": "Live-Action with puppet segments. Color Palette: Soft, natural colors.",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Low-Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Low-Moderate",
    "sceneFrequency": "Moderate"
  },
  "283": {
    "stimulationScore": 2,
    "TV or YouTube": "TV",
    "ageRange": "2-5",
    "Seasons": "3 Seasons",
    "Avg. Epsiode": "10 minutes",
    "themes": [
      "Agriculture",
      "Machinery",
      "Farm Life",
      "Animals",
      "Nature",
      "Animal Behaviour"
    ],
    "interactivityLevel": "High",
    "animationStyle": "Live-Action and 2D Animation",
    "dialogueIntensity": "Low-Moderate",
    "soundEffectsLevel": "Low",
    "musicTempo": "Low-Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Low",
    "sceneFrequency": "Low-Moderate"
  },
  "284": {
    "stimulationScore": 4,
    "TV or YouTube": "TV",
    "ageRange": "3-6",
    "Seasons": "2 Seasons",
    "Avg. Epsiode": "12 minutes",
    "themes": [
      "Creativity & Imagination",
      "Problem Solving",
      "Emotional Intelligence"
    ],
    "interactivityLevel": "Low",
    "animationStyle": "3D CGI animation",
    "dialogueIntensity": "Moderate-High",
    "soundEffectsLevel": "High",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate-High",
    "totalSoundEffectTimeLevel": "Moderate-High",
    "sceneFrequency": "Moderate"
  },
  "285": {
    "stimulationScore": 2,
    "TV or YouTube": "TV",
    "ageRange": "3-6",
    "Seasons": "4 Seasons",
    "Avg. Epsiode": "11 minutes",
    "themes": [
      "Creativity & Imagination",
      "Nature",
      "Motor Skills",
      "Critical Thinking",
      "Exploration",
      "Natural World",
      "Cognitive Development"
    ],
    "interactivityLevel": "High",
    "animationStyle": "Digital 3D Stop-Motion",
    "dialogueIntensity": "Low",
    "soundEffectsLevel": "Low-Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate-High",
    "totalSoundEffectTimeLevel": "Moderate",
    "sceneFrequency": "High"
  },
  "286": {
    "stimulationScore": 1,
    "TV or YouTube": "TV",
    "ageRange": "2-5",
    "Avg. Epsiode": "5 minutes",
    "themes": [
      "Life-Lessons",
      "Exploring Emotions",
      "Communication and Expression",
      "Stop-Motion",
      "Slice of Life",
      "Friendship",
      "Pet Ownership",
      "Empathy",
      "Gentle Humour",
      "Problem-Solving",
      "Relatable-Situations"
    ],
    "interactivityLevel": "Low-Moderate",
    "animationStyle": "Traditional stop-frame animation techniques, meticulously capturing each movement of the handcrafted puppets frame by frame to create fluid and engaging motion.",
    "dialogueIntensity": "Low",
    "soundEffectsLevel": "Moderate",
    "musicTempo": "Low-Moderate, Gentle Melodies, Moderate tempos",
    "totalMusicLevel": "Moderate-High",
    "totalSoundEffectTimeLevel": "Moderate",
    "sceneFrequency": "Low"
  },
  "287": {
    "stimulationScore": 5,
    "TV or YouTube": "TV",
    "ageRange": "7-12",
    "Seasons": "4 Seasons",
    "Avg. Epsiode": "22 minutes",
    "themes": [
      "Super Hero Themes",
      "Morality",
      "Responsibility",
      "Courage",
      "Problem Solving",
      "Entertainment",
      "Humor",
      "Mild Violent themes",
      "Mild Fantasy Violence"
    ],
    "interactivityLevel": "Low-Moderate",
    "animationStyle": "2D Digital Animation with bold lines and exaggerated expressions. Color Palette: Bright and vivid colors with high contrast",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "Very-High",
    "musicTempo": "High",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "Very-High",
    "sceneFrequency": "Moderate"
  },
  "288": {
    "stimulationScore": 4,
    "TV or YouTube": "TV",
    "ageRange": "4-8",
    "Seasons": "2 Seasons",
    "Avg. Epsiode": "30 minutes",
    "themes": [
      "Cultures & Traditions",
      "Religion",
      "Responsibility",
      "Family Values",
      "History",
      "Literacy",
      "Social Development",
      "Community Service",
      "Biblical Teachings"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "3D CGI",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "Moderate",
    "sceneFrequency": "Very-High"
  },
  "289": {
    "stimulationScore": 3,
    "TV or YouTube": "TV",
    "ageRange": "4-7",
    "Avg. Epsiode": "22 minutes",
    "themes": [
      "Cultures & Traditions",
      "Religion",
      "Responsibility",
      "Family Values",
      "History",
      "Literacy",
      "Social Development",
      "Community Service",
      "Biblical Teachings"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "3D CGI",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "Moderate",
    "sceneFrequency": "Moderate"
  },
  "290": {
    "stimulationScore": 5,
    "TV or YouTube": "YouTube",
    "ageRange": "3-8",
    "themes": [
      "Learn Through Play",
      "Creativity & Imagination",
      "Problem Solving",
      "Adventure",
      "Family Relationships",
      "Multi-Lingual Learning",
      "Humor",
      "Entertainment",
      "Hyper-Activity"
    ],
    "interactivityLevel": "Low",
    "animationStyle": "Live-action videos featuring Vlad and Niki, often enhanced with special effects and animations to create engaging and fantastical elements.",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "Very-High",
    "musicTempo": "High",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "Very-High (Repetative) ",
    "sceneFrequency": "High"
  },
  "291": {
    "stimulationScore": 2,
    "TV or YouTube": "YouTube",
    "ageRange": "2-8",
    "themes": [
      "Creativity & Imagination",
      "Literacy",
      "Reading Comprehension",
      "Vocabulary",
      "Language Learning",
      "Phonics",
      "Cognitive Development",
      "Music",
      "Speech Development",
      "Read-Along"
    ],
    "interactivityLevel": "High",
    "animationStyle": "Animated adaptations of children's books, featuring subtle animations that complement the original illustrations, accompanied by professional narration and sound effects.",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Low-Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate-High",
    "totalSoundEffectTimeLevel": "Moderate-High",
    "sceneFrequency": "Low-Moderate"
  },
  "292": {
    "stimulationScore": 5,
    "TV or YouTube": "TV",
    "ageRange": "6-10",
    "Seasons": "1 Season",
    "Avg. Epsiode": "11 minutes",
    "themes": [
      "Creativity & Imagination",
      "Adventure",
      "Humor",
      "Entertainment",
      "Perseverance",
      "Slapstic Comedy",
      "Mechanics",
      "Engineering Concepts",
      "Lack of Consequences",
      "Mild Intense Scenes",
      "Mild Violent themes"
    ],
    "interactivityLevel": "Low",
    "animationStyle": "Cartoonish 2D animation style",
    "dialogueIntensity": "Moderate-High",
    "soundEffectsLevel": "Very-High",
    "musicTempo": "High",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "Very-High",
    "sceneFrequency": "Moderate"
  },
  "293": {
    "stimulationScore": 3,
    "TV or YouTube": "TV",
    "ageRange": "3-6",
    "Seasons": "2 Seasons",
    "Avg. Epsiode": "26 minutes",
    "themes": [
      "Elementary-Basics",
      "Motor Skills",
      "Problem Solving",
      "Language Learning",
      "Literacy",
      "Fantasy Elements",
      "Reading Comprehension",
      "Phonics"
    ],
    "interactivityLevel": "High",
    "animationStyle": "3D CGI Animation with bright and vibrant colors. Color Palette: Bright and cheerful colors with high saturation.",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate-High",
    "totalSoundEffectTimeLevel": "Moderate",
    "sceneFrequency": "Very-High"
  },
  "294": {
    "stimulationScore": 5,
    "TV or YouTube": "TV",
    "ageRange": "7-12",
    "Avg. Epsiode": "22 minutes",
    "themes": [
      "Problem Solving",
      "Teamwork",
      "Mystery",
      "Entertainment",
      "Humor",
      "Critical Thinking",
      "Mild Peril",
      "Mild Fantasy Violence"
    ],
    "interactivityLevel": "Low",
    "animationStyle": "Digital 2D animation",
    "dialogueIntensity": "Moderate-High",
    "soundEffectsLevel": "High",
    "musicTempo": "High",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "High",
    "sceneFrequency": "Moderate"
  },
  "295": {
    "stimulationScore": 3,
    "TV or YouTube": "TV",
    "ageRange": "3-6",
    "Seasons": "2 Seasons",
    "Avg. Epsiode": "24 minutes",
    "themes": [
      "Creativity & Imagination",
      "Social-Emotional",
      "Problem Solving",
      "Social Development",
      "Morality",
      "Emotional Intelligence"
    ],
    "interactivityLevel": "High",
    "animationStyle": "3D CGI Animation with stylized and colorful designs. Bright but not overly saturated colors, with a focus on vibrant settings.",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate-High",
    "totalSoundEffectTimeLevel": "Moderate",
    "sceneFrequency": "High"
  },
  "296": {
    "stimulationScore": 2,
    "TV or YouTube": "TV",
    "ageRange": "2-5",
    "Seasons": "2 Seasons",
    "Avg. Epsiode": "5 minutes",
    "themes": [
      "Overcoming Fears",
      "Social-Emotional",
      "Relatable Situations",
      "Courage",
      "Emotional Intelligence"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "Combination of live-action and CGI animation.",
    "dialogueIntensity": "Moderate",
    "soundEffectsLevel": "Low-Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Low-Moderate",
    "sceneFrequency": "Moderate"
  },
  "297": {
    "stimulationScore": 3,
    "TV or YouTube": "TV",
    "ageRange": "4-7",
    "Seasons": "1 Season",
    "Avg. Epsiode": "26 minutes",
    "themes": [
      "Life Lessons",
      "Problem Solving",
      "Teamwork",
      "Critical Thinking",
      "Social-Emotional",
      "Relatable Situations"
    ],
    "interactivityLevel": "High",
    "animationStyle": "2D digital animation with a hand-drawn look. Bright and cheerful colors with simple backgrounds",
    "dialogueIntensity": "Moderate-High",
    "soundEffectsLevel": "Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate-High",
    "totalSoundEffectTimeLevel": "Moderate",
    "sceneFrequency": "Low-Moderate"
  },
  "298": {
    "stimulationScore": 3,
    "TV or YouTube": "TV",
    "ageRange": "5-8",
    "Seasons": "2 Seasons",
    "Avg. Epsiode": "26 minutes",
    "themes": [
      "Cultures & Traditions",
      "Life Lessons",
      "History",
      "Morality",
      "Problem Solving",
      "Curiosity",
      "Courage",
      "Adventure"
    ],
    "interactivityLevel": "High",
    "animationStyle": "2D Digital Animation with a watercolor aesthetic. Color Palette: Soft and natural colors with pastel hues.",
    "dialogueIntensity": "Moderate-High",
    "soundEffectsLevel": "Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate",
    "totalSoundEffectTimeLevel": "Moderate",
    "sceneFrequency": "Moderate"
  },
  "299": {
    "stimulationScore": 3,
    "TV or YouTube": "YouTube",
    "ageRange": "3-8",
    "themes": [
      "Life Lessons",
      "Cultures & Traditions",
      "Learning through Songs",
      "Cultural Appreciation",
      "Spiritual Development",
      "Quranic stories",
      "Religion",
      "Literacy",
      "Numeracy",
      "Social Development",
      "Social-Emotional",
      "Emotional Intelligence"
    ],
    "interactivityLevel": "High",
    "animationStyle": "2D Digital Animation with bright colors. Color Palette: Vibrant and engaging.",
    "dialogueIntensity": "Moderate-High",
    "soundEffectsLevel": "Moderate",
    "musicTempo": "Moderate",
    "totalMusicLevel": "Moderate-High",
    "totalSoundEffectTimeLevel": "Moderate",
    "sceneFrequency": "Low-Moderate"
  },
  "300": {
    "stimulationScore": 3,
    "TV or YouTube": "TV",
    "ageRange": "4-8",
    "Seasons": "2 Seasons",
    "Avg. Epsiode": "26 minutes",
    "themes": [
      "Enviromental Awareness",
      "Wildlife Exploration",
      "Animals",
      "Curiosity",
      "Nature",
      "Wildlife Conservation"
    ],
    "interactivityLevel": "Moderate",
    "animationStyle": "Live-action, puppetry, and animation",
    "dialogueIntensity": "High",
    "soundEffectsLevel": "Moderate",
    "musicTempo": "Moderate-High",
    "totalMusicLevel": "High",
    "totalSoundEffectTimeLevel": "Moderate",
    "sceneFrequency": "Moderate-High"
  }
}
</file>

<file path="client/src/pages/registration-pending.tsx">
import { useEffect } from "react";
import { useLocation } from "wouter";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Link } from "wouter";
import { useAuth } from "@/hooks/use-auth";
import { useToast } from "@/hooks/use-toast";

export default function RegistrationPendingPage() {
  const { logoutMutation } = useAuth();
  const { toast } = useToast();
  const [, navigate] = useLocation();
  
  // Set early access token in localStorage when this page loads
  useEffect(() => {
    console.log("Registration pending page loaded, setting earlyAccessShown in localStorage");
    localStorage.setItem("earlyAccessShown", "true");
  }, []);
  
  // Function to handle logout and redirect to early access login page
  const handleLogoutAndRedirect = (e: React.MouseEvent) => {
    e.preventDefault();
    
    try {
      // First, make sure the early access token is set in localStorage
      localStorage.setItem("earlyAccessToken", "2025");
      localStorage.setItem("earlyAccessShown", "true");
      
      // Clean up any user data in localStorage
      localStorage.removeItem("tvtantrum_auth");
      
      // Use direct window.location.href to force a full page reload
      // This ensures all React Query state is cleared and no "checking authentication" screen
      window.location.href = "/early-access";
      
      toast({
        title: "Success",
        description: "Redirecting you to the login page...",
      });
    } catch (error) {
      console.error("Error during redirect:", error);
      toast({
        title: "Error",
        description: "There was an error redirecting you. Please try again.",
        variant: "destructive",
      });
    }
  };
  return (
    <div className="flex items-center justify-center min-h-screen bg-gradient-to-b from-background to-muted">
      <Card className="w-full max-w-md">
        <CardHeader>
          <CardTitle className="text-2xl text-center">Registration Pending</CardTitle>
          <CardDescription className="text-center">
            Your account has been created but requires admin approval.
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-5 text-center">
          <div className="bg-primary/10 rounded-lg p-6 text-primary border border-primary/20">
            <p className="font-medium mb-2">Thank you for registering!</p>
            <p>
              Your TV Tantrum account has been created successfully and is now pending approval by our administrators.
            </p>
          </div>
          
          <div className="space-y-3">
            <h3 className="font-medium">What happens next:</h3>
            <ul className="space-y-2 text-left list-disc pl-6">
              <li>Our team will review your registration request</li>
              <li>You'll receive an email notification once your account is approved</li>
              <li>After approval, you can log in with your credentials</li>
              <li>You'll have full access to all TV Tantrum features during our early access period</li>
            </ul>
          </div>
          
          <div className="bg-muted p-4 rounded-md text-muted-foreground text-sm">
            <p>
              Early access users help us improve TV Tantrum before our public launch. Your feedback will be invaluable!
            </p>
          </div>
        </CardContent>
        <CardFooter className="flex flex-col space-y-3">
          <div className="flex flex-col gap-3 w-full">
            <Button 
              variant="default" 
              className="w-full"
              onClick={(e) => {
                e.preventDefault();
                // Clear auth data from localStorage
                localStorage.removeItem("tvtantrum_auth");
                // Direct navigation to home page
                window.location.href = "/";
              }}
            >
              Return to Home
            </Button>
            <Button 
              variant="outline" 
              className="w-full"
              onClick={handleLogoutAndRedirect}
            >
              Return to Login
            </Button>
          </div>
          <p className="text-sm text-muted-foreground text-center">
            Have questions? Email us at <span className="text-primary font-medium">support@tvtantrum.com</span>
          </p>
        </CardFooter>
      </Card>
    </div>
  );
}
</file>

<file path="client/src/pages/landing-page.tsx">
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { useToast } from "@/hooks/use-toast";
import { Link } from "wouter";
import { useEffect } from "react";
import GhlScriptLoader from "@/components/GhlScriptLoader";
// Import the preview image to ensure it's properly bundled
import previewImage from "../assets/tv-tantrum-preview.png";

export default function LandingPage() {
  const { toast } = useToast();
  
  // Clear authentication data whenever landing page loads
  useEffect(() => {
    // This will ensure no authentication check happens when on the landing page
    localStorage.removeItem("tvtantrum_auth");
    
    // Keep early access token for future use (but not auth data)
    if (!localStorage.getItem("earlyAccessToken")) {
      localStorage.removeItem("earlyAccessShown");
    }
    
    console.log("Landing page loaded, cleared authentication data from localStorage");
  }, []);

  return (
    <div className="min-h-screen bg-gradient-to-b from-background to-muted">
      <GhlScriptLoader />
      {/* Header */}
      <header className="container mx-auto py-6 px-4 sm:px-6 flex justify-between items-center">
        <Link href="/">
          <div className="text-3xl font-bold text-primary cursor-pointer">TV Tantrum</div>
        </Link>
        <div className="flex space-x-2 sm:space-x-4">
          <Button variant="ghost" asChild>
            <Link href="/about">About</Link>
          </Button>
          <Button variant="ghost" asChild>
            <Link href="/faq">FAQ</Link>
          </Button>
          <Button variant="outline" className="text-primary border-primary hover:bg-primary/10" asChild>
            <Link href="/token-entry">Early Access</Link>
          </Button>
        </div>
      </header>

      {/* Hero Section */}
      <section className="container mx-auto py-20 px-4 sm:px-6 grid grid-cols-1 lg:grid-cols-2 gap-12 items-center">
        <div>
          <h1 className="text-4xl md:text-5xl lg:text-6xl font-bold leading-tight">
            <span className="text-primary">Discover</span> children's TV shows based on sensory impact
          </h1>
          <p className="mt-6 text-lg text-muted-foreground max-w-md">
            TV Tantrum helps parents understand how stimulating different TV shows are, 
            so you can make informed choices about what your children watch.
          </p>
          
          <div className="mt-6 flex justify-start">
            <Button className="text-lg px-8 py-6" size="lg">
              <a href="#register">Join the Waitlist</a>
            </Button>
          </div>
          
          <p className="mt-4 text-lg text-primary font-medium">
            Sign up now to secure early access!
          </p>
        </div>
        
        <div className="relative">
          <Card className="bg-card/50 backdrop-blur shadow-xl transform rotate-1">
            <CardContent className="p-6">
              <img 
                src={previewImage} 
                alt="TV Tantrum Preview" 
                className="rounded-lg shadow-md w-full"
                onError={(e) => {
                  e.currentTarget.src = "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='600' height='400' viewBox='0 0 600 400'%3E%3Crect width='600' height='400' fill='%23F1F5F9' /%3E%3Cg fill='%2364748b'%3E%3Ctext x='300' y='180' font-family='Arial, sans-serif' font-size='24' text-anchor='middle'%3ETV Tantrum Preview%3C/text%3E%3Ctext x='300' y='220' font-family='Arial, sans-serif' font-size='16' text-anchor='middle'%3EComing Soon%3C/text%3E%3C/g%3E%3C/svg%3E";
                }}
              />
            </CardContent>
          </Card>
          <div className="absolute -bottom-4 -right-4 bg-primary text-primary-foreground px-4 py-2 rounded-full shadow-lg transform rotate-3">
            Coming Soon!
          </div>
        </div>
      </section>

      {/* Features Section */}
      <section className="container mx-auto py-16 px-4 sm:px-6 text-center">
        <h2 className="text-3xl font-bold mb-12">Why Parents Choose TV Tantrum</h2>
        
        <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
          <div className="p-6 bg-card rounded-xl shadow-sm hover:shadow-md transition-shadow">
            <div className="w-12 h-12 bg-primary/10 text-primary rounded-full flex items-center justify-center mx-auto mb-4">
              <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M9.5 2A2.5 2.5 0 0 1 12 4.5v15a2.5 2.5 0 0 1-4.96.44 2.5 2.5 0 0 1-2.96-3.08 3 3 0 0 1-.34-5.58 2.5 2.5 0 0 1 1.32-4.24 2.5 2.5 0 0 1 4.44-4.04Z"/><path d="M14.5 2A2.5 2.5 0 0 0 12 4.5v15a2.5 2.5 0 0 0 4.96.44 2.5 2.5 0 0 0 2.96-3.08 3 3 0 0 0 .34-5.58 2.5 2.5 0 0 0-1.32-4.24 2.5 2.5 0 0 0-4.44-4.04Z"/></svg>
            </div>
            <h3 className="text-xl font-medium mb-2">Sensory Impact Analysis</h3>
            <p className="text-muted-foreground">Understand exactly how stimulating each show is based on detailed sensory metrics.</p>
          </div>
          
          <div className="p-6 bg-card rounded-xl shadow-sm hover:shadow-md transition-shadow">
            <div className="w-12 h-12 bg-primary/10 text-primary rounded-full flex items-center justify-center mx-auto mb-4">
              <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><circle cx="12" cy="12" r="10"/><path d="M12 2a14.5 14.5 0 0 0 0 20 14.5 14.5 0 0 0 0-20"/><path d="M2 12h20"/></svg>
            </div>
            <h3 className="text-xl font-medium mb-2">Personalized Recommendations</h3>
            <p className="text-muted-foreground">Discover shows that match your child's sensory preferences and developmental stage.</p>
          </div>
          
          <div className="p-6 bg-card rounded-xl shadow-sm hover:shadow-md transition-shadow">
            <div className="w-12 h-12 bg-primary/10 text-primary rounded-full flex items-center justify-center mx-auto mb-4">
              <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><circle cx="12" cy="12" r="10"/><path d="m9 12 2 2 4-4"/></svg>
            </div>
            <h3 className="text-xl font-medium mb-2">Parent Reviews</h3>
            <p className="text-muted-foreground">Read what other parents have to say about each show's impact on their children.</p>
          </div>
        </div>
      </section>

      {/* Registration Form */}
      <section id="register" className="container mx-auto py-16 px-4 sm:px-6">
        <div className="max-w-3xl mx-auto bg-card rounded-xl shadow-lg overflow-hidden">
          <div className="p-8">
            <h2 className="text-3xl font-bold mb-6 text-center">Join the Waitlist</h2>
            <p className="text-center text-muted-foreground mb-6">
              Be the first to know when TV Tantrum launches. Get early access and exclusive updates!
            </p>
            
            <div className="h-[500px]">
              <iframe
                src="https://api.leadconnectorhq.com/widget/form/8RE4HTUpZosOwqlmcA6g"
                style={{ width: "100%", height: "100%", border: "none", borderRadius: "3px" }}
                id="inline-8RE4HTUpZosOwqlmcA6g" 
                data-layout={`{'id':'INLINE'}`}
                data-trigger-type="alwaysShow"
                data-trigger-value=""
                data-activation-type="alwaysActivated"
                data-activation-value=""
                data-deactivation-type="neverDeactivate"
                data-deactivation-value=""
                data-form-name="TV Tantrum Pre-reg"
                data-height="492"
                data-layout-iframe-id="inline-8RE4HTUpZosOwqlmcA6g"
                data-form-id="8RE4HTUpZosOwqlmcA6g"
                title="TV Tantrum Pre-reg"
              />
              <script src="https://link.msgsndr.com/js/form_embed.js" async></script>
            </div>
            
            <p className="text-center text-primary font-medium mt-4">
              Only pre-registered users will be invited to use the platform before public launch!
            </p>
            <p className="text-center text-muted-foreground text-sm mt-2">
              Already have an early access token? <Link href="/token-entry" className="text-primary hover:underline">Click here</Link>
            </p>
          </div>
        </div>
      </section>

      {/* Simple Copyright Footer */}
      <div className="container mx-auto py-8 px-4 sm:px-6 text-center text-muted-foreground">
        <p>© {new Date().getFullYear()} TV Tantrum. All rights reserved.</p>
      </div>
    </div>
  );
}
</file>

<file path="client/src/pages/admin-page.tsx">
import { useState, useEffect } from 'react';
import { useToast } from '@/hooks/use-toast';
import { useAuth } from '@/hooks/use-auth';
import { useLocation } from 'wouter';
import { Button } from '@/components/ui/button';
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
  CardFooter,
} from '@/components/ui/card';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from '@/components/ui/dialog';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { 
  Select, 
  SelectContent, 
  SelectItem, 
  SelectTrigger, 
  SelectValue 
} from '@/components/ui/select';
import { Textarea } from '@/components/ui/textarea';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { 
  Loader2, 
  Search, 
  Edit, 
  RefreshCw, 
  ImageIcon, 
  User, 
  CheckCircle, 
  XCircle, 
  Clock,
  Shield,
  Check,
  X,
  PlusCircle,
  Upload,
  Image,
  Trash2
} from 'lucide-react';
import { ImageUpload } from '@/components/image-upload';
import { TvShow, User as UserType } from '@shared/schema';
import { apiRequest, queryClient } from '@/lib/queryClient';

export default function AdminPage() {
  const { user, isAdmin } = useAuth();
  const { toast } = useToast();
  const [, setLocation] = useLocation();
  const [shows, setShows] = useState<TvShow[]>([]);
  const [filteredShows, setFilteredShows] = useState<TvShow[]>([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [isLoading, setIsLoading] = useState(true);
  const [isUpdating, setIsUpdating] = useState(false);
  const [selectedShow, setSelectedShow] = useState<TvShow | null>(null);
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const [isRefreshing, setIsRefreshing] = useState(false);
  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);
  const [isAddingShow, setIsAddingShow] = useState(false);
  const [isDeleting, setIsDeleting] = useState(false);
  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);
  const [newShowFormState, setNewShowFormState] = useState({
    name: '',
    description: '',
    ageRange: '',
    stimulationScore: 3,
    interactivityLevel: 'Medium',
    dialogueIntensity: 'Medium',
    soundEffectsLevel: 'Medium',
    sceneFrequency: 'Medium',
    musicTempo: 'Medium',
    totalMusicLevel: 'Medium',
    totalSoundEffectTimeLevel: 'Medium',
    animationStyle: '',
    themes: [] as string[],
    imageUrl: '',
    // Adding required database fields with default values to avoid null constraints
    episodeLength: 15, // Default episode length in minutes
    seasons: 1, // Default number of seasons
    releaseYear: new Date().getFullYear(), // Current year
    endYear: null, // Null is acceptable for endYear
    isOngoing: true, // Default to ongoing
    creator: '', // Empty string for creator
    availableOn: [] as string[] // Empty array for available platforms
    // Note: we use stimulationScore for overallRating in the backend
  });
  
  // Redirect if user is not an admin
  useEffect(() => {
    if (user && !isAdmin) {
      toast({
        title: "Access Denied",
        description: "You do not have admin privileges to access this page.",
        variant: "destructive",
      });
      setLocation("/home");
    }
  }, [user, isAdmin, toast, setLocation]);
  const [isOptimizingImages, setIsOptimizingImages] = useState(false);
  const [users, setUsers] = useState<Array<Omit<UserType, 'password'>>>([]);
  const [userSearchTerm, setUserSearchTerm] = useState('');
  const [filteredUsers, setFilteredUsers] = useState<Array<Omit<UserType, 'password'>>>([]);
  const [isLoadingUsers, setIsLoadingUsers] = useState(true);
  const [isApprovingUser, setIsApprovingUser] = useState(false);

  // Form state
  const [formState, setFormState] = useState({
    name: '',
    description: '',
    ageRange: '',
    stimulationScore: 3, // Default stimulation score - always a whole number
    interactivityLevel: 'Medium',
    dialogueIntensity: 'Medium',
    soundEffectsLevel: 'Medium',
    sceneFrequency: 'Medium',
    musicTempo: 'Medium',
    totalMusicLevel: 'Medium',
    totalSoundEffectTimeLevel: 'Medium',
    animationStyle: '',
    themes: [] as string[],
    imageUrl: ''
  });

  // Check if user is admin
  useEffect(() => {
    if (!isLoading && !isAdmin) {
      toast({
        title: "Access Denied",
        description: "You need admin privileges to access this page.",
        variant: "destructive"
      });
      setLocation('/');
    }
  }, [isLoading, isAdmin, setLocation, toast]);

  // Function to fetch users (used in both effect and manual refresh)
  const fetchUsers = async () => {
    if (!isAdmin) return;
    
    setIsLoadingUsers(true);
    try {
      const response = await fetch('/api/users');
      if (!response.ok) {
        throw new Error('Failed to fetch users');
      }
      
      const data = await response.json();
      console.log('Fetched users:', data);
      setUsers(data);
      setFilteredUsers(data);
    } catch (error) {
      console.error('Error fetching users:', error);
      toast({
        title: "Error",
        description: "Failed to load users. Please try again.",
        variant: "destructive"
      });
    } finally {
      setIsLoadingUsers(false);
    }
  };
    
  // Load all users (admin only)
  useEffect(() => {
    if (isAdmin) {
      fetchUsers();
    }
  }, [isAdmin]);

  // Filter users based on search term
  useEffect(() => {
    if (userSearchTerm.trim() === '') {
      setFilteredUsers(users);
    } else {
      const term = userSearchTerm.toLowerCase();
      const filtered = users.filter(user => 
        user.username?.toLowerCase().includes(term) || 
        user.email.toLowerCase().includes(term)
      );
      setFilteredUsers(filtered);
    }
  }, [userSearchTerm, users]);

  // Load all shows
  useEffect(() => {
    const fetchShows = async () => {
      try {
        const data = await fetch('/api/shows').then(res => res.json());
        setShows(data);
        setFilteredShows(data);
        setIsLoading(false);
      } catch (error) {
        console.error('Error fetching shows:', error);
        toast({
          title: "Error",
          description: "Failed to load shows. Please try again.",
          variant: "destructive"
        });
        setIsLoading(false);
      }
    };

    fetchShows();
  }, [toast]);

  // Handle search
  useEffect(() => {
    if (searchTerm.trim() === '') {
      setFilteredShows(shows);
    } else {
      const term = searchTerm.toLowerCase();
      const filtered = shows.filter(show => 
        show.name.toLowerCase().includes(term) || 
        (show.description && show.description.toLowerCase().includes(term))
      );
      setFilteredShows(filtered);
    }
  }, [searchTerm, shows]);

  // Refresh data from GitHub
  const handleRefreshData = async () => {
    setIsRefreshing(true);
    try {
      const response = await apiRequest('POST', '/api/refresh-data');
      const data = await response.json();
      
      toast({
        title: "Data Refreshed",
        description: `Successfully refreshed ${data.count} shows from GitHub.`,
      });
      
      // Reload shows
      const updatedShows = await fetch('/api/shows').then(res => res.json());
      setShows(updatedShows);
      setFilteredShows(updatedShows);
    } catch (error) {
      console.error('Error refreshing data:', error);
      toast({
        title: "Error",
        description: "Failed to refresh data from GitHub.",
        variant: "destructive"
      });
    } finally {
      setIsRefreshing(false);
    }
  };
  
  // Optimize show images using OMDB posters
  const handleOptimizeImages = async () => {
    setIsOptimizingImages(true);
    try {
      const response = await apiRequest('POST', '/api/optimize-images');
      const data = await response.json();
      
      toast({
        title: "Images Optimized",
        description: `Processed ${data.total} shows. Successfully updated ${data.successful} images.`,
      });
      
      // Reload shows to get the updated image URLs
      const updatedShows = await fetch('/api/shows').then(res => res.json());
      setShows(updatedShows);
      setFilteredShows(updatedShows);
    } catch (error) {
      console.error('Error optimizing images:', error);
      toast({
        title: "Error",
        description: "Failed to optimize images. Please try again.",
        variant: "destructive"
      });
    } finally {
      setIsOptimizingImages(false);
    }
  };
  
  // Optimize all custom images for SEO performance
  const handleOptimizeCustomImages = async () => {
    setIsOptimizingImages(true);
    try {
      const response = await apiRequest('POST', '/api/admin/optimize-custom-images');
      const data = await response.json();
      
      toast({
        title: "SEO Image Optimization",
        description: `Successfully optimized ${data.optimized} custom images for better performance. (${data.skipped} skipped, ${data.errors} errors)`,
      });
      
      // Reload shows to display updated images
      const updatedShows = await fetch('/api/shows').then(res => res.json());
      setShows(updatedShows);
      setFilteredShows(updatedShows);
    } catch (error) {
      console.error('Error optimizing custom images:', error);
      toast({
        title: "Error",
        description: "Failed to optimize custom images for SEO. Please try again.",
        variant: "destructive"
      });
    } finally {
      setIsOptimizingImages(false);
    }
  };

  // Normalize stimulation metrics between different naming conventions
  const normalizeMetrics = (value: string | null | undefined): string => {
    if (!value) return 'Medium';
    
    // Trim and convert to lowercase for consistent comparison
    const normalizedValue = value.trim().toLowerCase();
    
    // Map various formats to standard values
    if (normalizedValue.includes('low-moderate') || normalizedValue.includes('low to moderate')) {
      return 'Low-Moderate';
    } else if (normalizedValue.includes('moderate-low')) {
      return 'Low-Moderate';
    } else if (normalizedValue.includes('moderate-high') || normalizedValue.includes('moderate to high')) {
      return 'Moderate-High';
    } else if (normalizedValue.includes('high-moderate')) {
      return 'Moderate-High';
    } else if (normalizedValue === 'low') {
      return 'Low';
    } else if (normalizedValue === 'high') {
      return 'High';
    } else if (normalizedValue.includes('moderate')) {
      return 'Medium'; // Convert 'Moderate' to 'Medium' for consistency
    }
    
    return 'Medium'; // Default fallback
  };

  // Helper function to ensure we always have a valid string value
  const ensureValue = (value: string | null | undefined, defaultValue: string = 'Medium'): string => {
    // Return the value if it exists and is not an empty string, otherwise return the default
    return value && value.trim() !== '' ? value : defaultValue;
  };

  // Handler for adding a new show
  const handleAddNewShow = () => {
    // Reset the form state to default values
    setNewShowFormState({
      name: '',
      description: '',
      ageRange: '3-5 years',
      stimulationScore: 3,
      interactivityLevel: 'Medium',
      dialogueIntensity: 'Medium',
      soundEffectsLevel: 'Medium',
      sceneFrequency: 'Medium',
      musicTempo: 'Medium',
      totalMusicLevel: 'Medium',
      totalSoundEffectTimeLevel: 'Medium',
      animationStyle: '',
      themes: [],
      imageUrl: '',
      // Database required fields with default values
      episodeLength: 15,
      seasons: 1,
      releaseYear: new Date().getFullYear(),
      endYear: null,
      isOngoing: true,
      creator: '',
      availableOn: []
      // Note: we now use stimulationScore for overallRating in the backend
    });
    
    // Open the add show dialog
    setIsAddDialogOpen(true);
  };
  
  // Submit handler for adding a new show
  const handleSubmitNewShow = async () => {
    setIsAddingShow(true);
    
    try {
      // Ensure stimulation score is a whole number
      const formDataWithWholeScore = {
        ...newShowFormState,
        stimulationScore: Math.round(newShowFormState.stimulationScore)
      };
      
      // Convert form values to API format
      const apiFormData = convertFormValuesToApi(formDataWithWholeScore);
      
      // Submit to API using fetch directly
      const response = await fetch('/api/shows', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(apiFormData),
        credentials: 'include'
      });
      
      if (!response.ok) {
        let errorMessage = 'Failed to add new show';
        try {
          const errorText = await response.text();
          if (errorText) errorMessage = errorText;
        } catch (e) {
          console.error('Error reading error response:', e);
        }
        throw new Error(errorMessage);
      }
      
      // Parse the JSON response
      const newShow = await response.json();
      
      console.log('New show added successfully:', newShow);
      
      // Add the new show to the state
      setShows(prev => [...prev, newShow]);
      setFilteredShows(prev => [...prev, newShow]);
      
      // Close the dialog
      setIsAddDialogOpen(false);
      
      // Show success message
      toast({
        title: "Show Added",
        description: `Successfully added "${newShow.name}" to the database.`,
      });
    } catch (error) {
      console.error('Error adding new show:', error);
      toast({
        title: "Error",
        description: error instanceof Error ? error.message : "Failed to add new show",
        variant: "destructive"
      });
    } finally {
      setIsAddingShow(false);
    }
  };
  
  // Handler for uploading image for a show
  const handleUploadImage = async (showId: number, imageUrl: string) => {
    try {
      if (!imageUrl.trim()) {
        toast({
          title: "Error",
          description: "Please provide a valid image URL",
          variant: "destructive"
        });
        return;
      }
      
      const response = await apiRequest('POST', `/api/shows/${showId}/update-with-local-image`, { imageUrl });
      
      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(errorText || 'Failed to update image');
      }
      
      const updatedShow = await response.json();
      
      // Update the show in state
      setShows(prev => prev.map(show => 
        show.id === showId ? { ...show, imageUrl: updatedShow.show.imageUrl } : show
      ));
      setFilteredShows(prev => prev.map(show => 
        show.id === showId ? { ...show, imageUrl: updatedShow.show.imageUrl } : show
      ));
      
      // If the show being edited is the currently selected show, update it
      if (selectedShow && selectedShow.id === showId) {
        setSelectedShow({ ...selectedShow, imageUrl: updatedShow.show.imageUrl });
      }
      
      // Show success message
      toast({
        title: "Image Updated",
        description: `Successfully updated image for "${updatedShow.show.name}".`,
      });
    } catch (error) {
      console.error('Error updating image:', error);
      toast({
        title: "Error",
        description: error instanceof Error ? error.message : "Failed to update image",
        variant: "destructive"
      });
    }
  };
  
  // Open edit dialog
  const handleEditShow = (show: TvShow) => {
    // Log the show object to debug what values we're getting from the API
    console.log("Show data for editing:", JSON.stringify(show, null, 2));

    // Force a fresh fetch of the specific show to ensure we have the latest data
    const fetchCurrentShowData = async () => {
      try {
        const response = await fetch(`/api/shows/${show.id}`);
        if (!response.ok) {
          throw new Error(`Failed to fetch show: ${response.statusText}`);
        }
        
        const currentShowData = await response.json();
        console.log("Fresh show data:", JSON.stringify(currentShowData, null, 2));
        
        // Map display values to form values - converting from "Moderate" to correct form values
        // This ensures the edit form and details page values match
        const mappedInteractivityLevel = normalizeMetrics(currentShowData.interactivityLevel);
        const mappedDialogueIntensity = normalizeMetrics(currentShowData.dialogueIntensity);
        const mappedSoundEffectsLevel = normalizeMetrics(currentShowData.soundEffectsLevel);
        const mappedSceneFrequency = normalizeMetrics(currentShowData.sceneFrequency);
        const mappedMusicTempo = normalizeMetrics(currentShowData.musicTempo);
        const mappedTotalMusicLevel = normalizeMetrics(currentShowData.totalMusicLevel);
        const mappedTotalSoundEffectTimeLevel = normalizeMetrics(currentShowData.totalSoundEffectTimeLevel);
        
        console.log("Mapped values:", {
          interactivityLevel: mappedInteractivityLevel,
          dialogueIntensity: mappedDialogueIntensity,
          soundEffectsLevel: mappedSoundEffectsLevel,
          sceneFrequency: mappedSceneFrequency,
          musicTempo: mappedMusicTempo,
          totalMusicLevel: mappedTotalMusicLevel,
          totalSoundEffectTimeLevel: mappedTotalSoundEffectTimeLevel
        });
        
        // Use the freshly fetched show data with normalized values
        setSelectedShow(currentShowData);
        setFormState({
          name: currentShowData.name,
          description: ensureValue(currentShowData.description, ''),
          ageRange: ensureValue(currentShowData.ageRange, ''),
          stimulationScore: currentShowData.stimulationScore,
          interactivityLevel: mappedInteractivityLevel,
          dialogueIntensity: mappedDialogueIntensity,
          soundEffectsLevel: mappedSoundEffectsLevel,
          sceneFrequency: mappedSceneFrequency,
          musicTempo: mappedMusicTempo,
          totalMusicLevel: mappedTotalMusicLevel,
          totalSoundEffectTimeLevel: mappedTotalSoundEffectTimeLevel,
          animationStyle: ensureValue(currentShowData.animationStyle, ''),
          themes: currentShowData.themes || [],
          imageUrl: ensureValue(currentShowData.imageUrl, '')
        });
        
        setIsDialogOpen(true);
      } catch (error) {
        console.error("Error fetching fresh show data:", error);
        // Fall back to using the original show data if the fetch fails
        setSelectedShow(show);
        
        // Apply the same normalization to the original show data
        const mappedInteractivityLevel = normalizeMetrics(show.interactivityLevel);
        const mappedDialogueIntensity = normalizeMetrics(show.dialogueIntensity);
        const mappedSoundEffectsLevel = normalizeMetrics(show.soundEffectsLevel);
        const mappedSceneFrequency = normalizeMetrics(show.sceneFrequency);
        const mappedMusicTempo = normalizeMetrics(show.musicTempo);
        const mappedTotalMusicLevel = normalizeMetrics(show.totalMusicLevel);
        const mappedTotalSoundEffectTimeLevel = normalizeMetrics(show.totalSoundEffectTimeLevel);
        
        setFormState({
          name: show.name,
          description: ensureValue(show.description, ''),
          ageRange: ensureValue(show.ageRange, ''),
          stimulationScore: show.stimulationScore,
          interactivityLevel: mappedInteractivityLevel,
          dialogueIntensity: mappedDialogueIntensity,
          soundEffectsLevel: mappedSoundEffectsLevel,
          sceneFrequency: mappedSceneFrequency,
          musicTempo: mappedMusicTempo,
          totalMusicLevel: mappedTotalMusicLevel,
          totalSoundEffectTimeLevel: mappedTotalSoundEffectTimeLevel,
          animationStyle: ensureValue(show.animationStyle, ''),
          themes: show.themes || [],
          imageUrl: ensureValue(show.imageUrl, '')
        });
        
        setIsDialogOpen(true);
      }
    };
    
    // Call the fetch function
    fetchCurrentShowData();
  };

  // Convert form values back to API format
  const convertFormValuesToApi = (formValues: any) => {
    // Helper function to convert "Medium" back to "Moderate" for API
    const convertMetricValueForApi = (value: string | null | undefined): string | null => {
      if (!value) return null;
      
      // Convert form values back to API format
      if (value === 'Medium') {
        return 'Moderate';
      }
      
      return value;
    };
    
    // Ensure stimulation score is a whole number
    const wholeStimulationScore = Math.round(formValues.stimulationScore);
    console.log(`Rounded stimulation score: ${formValues.stimulationScore} → ${wholeStimulationScore}`);
    
    // Create a new object with converted values
    return {
      ...formValues,
      // Ensure stimulation score is a whole number
      stimulationScore: wholeStimulationScore,
      // Ensure themes is an array
      themes: Array.isArray(formValues.themes) ? formValues.themes : [],
      // Convert form field values back to API format
      interactivityLevel: formValues.interactivityLevel === 'Medium' ? 'Moderate' : formValues.interactivityLevel,
      dialogueIntensity: formValues.dialogueIntensity === 'Medium' ? 'Moderate' : formValues.dialogueIntensity,
      sceneFrequency: formValues.sceneFrequency === 'Medium' ? 'Moderate' : formValues.sceneFrequency,
      musicTempo: formValues.musicTempo === 'Medium' ? 'Moderate' : formValues.musicTempo,
      totalMusicLevel: formValues.totalMusicLevel === 'Medium' ? 'Moderate' : formValues.totalMusicLevel,
      totalSoundEffectTimeLevel: formValues.totalSoundEffectTimeLevel === 'Medium' ? 'Moderate' : formValues.totalSoundEffectTimeLevel,
    };
  };
  
  // Handle user approval/rejection
  const handleUserApproval = async (userId: number, approve: boolean) => {
    setIsApprovingUser(true);
    try {
      const response = await apiRequest('PATCH', `/api/users/${userId}/approve`, { isApproved: approve });
      
      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(errorText || 'Failed to update user approval status');
      }
      
      const updatedUser = await response.json();
      
      // Update the users list
      setUsers(prev => prev.map(user => 
        user.id === userId ? { ...user, isApproved: approve } : user
      ));
      
      setFilteredUsers(prev => prev.map(user => 
        user.id === userId ? { ...user, isApproved: approve } : user
      ));
      
      toast({
        title: approve ? "User Approved" : "User Rejected",
        description: `Successfully ${approve ? 'approved' : 'rejected'} user ${updatedUser.username || updatedUser.email}`,
      });
    } catch (error) {
      console.error('Error updating user approval status:', error);
      toast({
        title: "Error",
        description: error instanceof Error ? error.message : "Failed to update user approval status",
        variant: "destructive"
      });
    } finally {
      setIsApprovingUser(false);
    }
  };
  
  // Delete show handler - defined below

  // Update show
  const handleUpdateShow = async () => {
    if (!selectedShow) return;
    
    setIsUpdating(true);
    try {
      // Convert form values back to API format
      const apiFormData = convertFormValuesToApi(formState);
      
      console.log('Submitting data to API:', apiFormData);
      
      // Make the API request with the converted data
      const updatedShow = await apiRequest('PATCH', `/api/shows/${selectedShow.id}`, apiFormData);
      
      // Update shows in state
      setShows(prev => prev.map(show => 
        show.id === updatedShow.id ? updatedShow : show
      ));
      setFilteredShows(prev => prev.map(show => 
        show.id === updatedShow.id ? updatedShow : show
      ));
      
      // Invalidate any queries that might have stale data
      console.log('Invalidating query cache for:', `/api/shows/${selectedShow.id}`);
      queryClient.invalidateQueries({ queryKey: [`/api/shows/${selectedShow.id}`] });
      queryClient.invalidateQueries({ queryKey: ['/api/shows'] });
      
      toast({
        title: "Show Updated",
        description: `Successfully updated ${updatedShow.name}.`,
      });
      
      setIsDialogOpen(false);
    } catch (error) {
      console.error('Error updating show:', error);
      toast({
        title: "Error",
        description: "Failed to update show. Please try again.",
        variant: "destructive"
      });
    } finally {
      setIsUpdating(false);
    }
  };
  
  const handleDeleteShow = async () => {
    if (!selectedShow) return;
    
    setIsDeleting(true);
    try {
      // Make DELETE request to the API using apiRequest
      await apiRequest('DELETE', `/api/shows/${selectedShow.id}`);
      
      // Update shows in state to remove the deleted show
      setShows(prev => prev.filter(show => show.id !== selectedShow.id));
      setFilteredShows(prev => prev.filter(show => show.id !== selectedShow.id));
      
      // Invalidate queries to ensure data consistency
      queryClient.invalidateQueries({ queryKey: ['/api/shows'] });
      
      toast({
        title: "Show Deleted",
        description: `Successfully deleted ${selectedShow.name}.`,
      });
      
      // Close dialogs
      setShowDeleteConfirm(false);
      setIsDialogOpen(false);
    } catch (error) {
      console.error('Error deleting show:', error);
      toast({
        title: "Error",
        description: error instanceof Error ? error.message : "Failed to delete show",
        variant: "destructive"
      });
    } finally {
      setIsDeleting(false);
    }
  };

  if (isLoading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <Loader2 className="h-8 w-8 animate-spin text-primary" />
      </div>
    );
  }

  return (
    <main className="container mx-auto py-8 px-4">
      <Card className="mb-8">
        <CardHeader>
          <div className="flex justify-between items-center">
            <div>
              <CardTitle>Admin Dashboard</CardTitle>
              <CardDescription>Manage TV shows and settings</CardDescription>
            </div>
            <Button 
              onClick={handleRefreshData} 
              disabled={isRefreshing}
              variant="outline"
            >
              {isRefreshing ? (
                <>
                  <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                  Refreshing...
                </>
              ) : (
                <>
                  <RefreshCw className="h-4 w-4 mr-2" />
                  Refresh Data
                </>
              )}
            </Button>
          </div>
        </CardHeader>
      </Card>

      <Tabs defaultValue="shows">
        <TabsList className="mb-4">
          <TabsTrigger value="shows">TV Shows</TabsTrigger>
          <TabsTrigger value="users">Users</TabsTrigger>
          <TabsTrigger value="settings">Settings</TabsTrigger>
        </TabsList>
        
        <TabsContent value="shows">
          <Card>
            <CardHeader>
              <div className="flex justify-between items-center">
                <div>
                  <CardTitle>TV Shows</CardTitle>
                  <CardDescription>
                    View and manage all TV shows in the database
                  </CardDescription>
                </div>
                <Button 
                  onClick={() => handleAddNewShow()}
                  className="flex items-center"
                >
                  <PlusCircle className="h-4 w-4 mr-2" />
                  Add Show
                </Button>
              </div>
              <div className="relative mt-4">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" size={18} />
                <Input
                  placeholder="Search shows..."
                  className="pl-10"
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                />
              </div>
            </CardHeader>
            <CardContent>
              <div className="rounded-md border">
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead className="w-[50px]">ID</TableHead>
                      <TableHead>Name</TableHead>
                      <TableHead>Age Range</TableHead>
                      <TableHead>Stimulation</TableHead>
                      <TableHead className="text-right">Actions</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {filteredShows.length === 0 ? (
                      <TableRow>
                        <TableCell colSpan={5} className="text-center py-8 text-gray-500">
                          No shows found
                        </TableCell>
                      </TableRow>
                    ) : (
                      filteredShows.map((show) => (
                        <TableRow key={show.id}>
                          <TableCell>{show.id}</TableCell>
                          <TableCell className="font-medium">{show.name}</TableCell>
                          <TableCell>{show.ageRange || 'N/A'}</TableCell>
                          <TableCell>{show.stimulationScore}/5</TableCell>
                          <TableCell className="text-right">
                            <Button 
                              variant="ghost" 
                              size="sm"
                              onClick={() => handleEditShow(show)}
                            >
                              <Edit className="h-4 w-4 mr-2" />
                              Edit
                            </Button>
                          </TableCell>
                        </TableRow>
                      ))
                    )}
                  </TableBody>
                </Table>
              </div>
            </CardContent>
            <CardFooter>
              <div className="text-sm text-muted-foreground">
                Showing {filteredShows.length} of {shows.length} shows
              </div>
            </CardFooter>
          </Card>
        </TabsContent>
        
        <TabsContent value="users">
          <Card>
            <CardHeader>
              <div className="flex justify-between items-center">
                <div>
                  <CardTitle>User Management</CardTitle>
                  <CardDescription>
                    Manage users and approve early access requests
                  </CardDescription>
                </div>
                <Button 
                  variant="outline" 
                  size="sm"
                  onClick={fetchUsers}
                  disabled={isLoadingUsers}
                >
                  {isLoadingUsers ? (
                    <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                  ) : (
                    <RefreshCw className="h-4 w-4 mr-2" />
                  )}
                  Refresh Users
                </Button>
              </div>
              <div className="relative mt-4">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" size={18} />
                <Input
                  placeholder="Search users..."
                  className="pl-10"
                  value={userSearchTerm}
                  onChange={(e) => setUserSearchTerm(e.target.value)}
                />
              </div>
            </CardHeader>
            <CardContent>
              {isLoadingUsers ? (
                <div className="flex justify-center items-center py-6">
                  <Loader2 className="h-8 w-8 animate-spin text-primary" />
                </div>
              ) : filteredUsers.length === 0 ? (
                <div className="py-6 text-center text-muted-foreground">
                  No users found
                </div>
              ) : (
                <div className="rounded-md border">
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead>ID</TableHead>
                        <TableHead>Username</TableHead>
                        <TableHead>Email</TableHead>
                        <TableHead>Country</TableHead>
                        <TableHead>Status</TableHead>
                        <TableHead>Created</TableHead>
                        <TableHead>Actions</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {filteredUsers.map((user) => (
                        <TableRow key={user.id}>
                          <TableCell>{user.id}</TableCell>
                          <TableCell>{user.username || '-'}</TableCell>
                          <TableCell>{user.email}</TableCell>
                          <TableCell>{user.country || '-'}</TableCell>
                          <TableCell>
                            {user.isAdmin ? (
                              <div className="flex items-center space-x-1 text-blue-600">
                                <Shield size={16} />
                                <span>Admin</span>
                              </div>
                            ) : user.isApproved ? (
                              <div className="flex items-center space-x-1 text-green-600">
                                <CheckCircle size={16} />
                                <span>Approved</span>
                              </div>
                            ) : (
                              <div className="flex items-center space-x-1 text-orange-600">
                                <Clock size={16} />
                                <span>Pending</span>
                              </div>
                            )}
                          </TableCell>
                          <TableCell>
                            {new Date(user.createdAt).toLocaleDateString()}
                          </TableCell>
                          <TableCell>
                            <div className="flex space-x-2">
                              {!user.isAdmin && (
                                <>
                                  {!user.isApproved ? (
                                    <Button 
                                      variant="outline" 
                                      size="sm"
                                      className="h-8 px-2 text-green-600"
                                      onClick={() => handleUserApproval(user.id, true)}
                                      disabled={isApprovingUser}
                                    >
                                      <Check className="h-4 w-4" />
                                      <span className="ml-1">Approve</span>
                                    </Button>
                                  ) : (
                                    <Button 
                                      variant="outline" 
                                      size="sm"
                                      className="h-8 px-2 text-red-600"
                                      onClick={() => handleUserApproval(user.id, false)}
                                      disabled={isApprovingUser}
                                    >
                                      <X className="h-4 w-4" />
                                      <span className="ml-1">Revoke</span>
                                    </Button>
                                  )}
                                </>
                              )}
                            </div>
                          </TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>
        
        <TabsContent value="settings">
          <Card>
            <CardHeader>
              <CardTitle>Settings</CardTitle>
              <CardDescription>
                Configure system-wide settings and options
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <div>
                <h3 className="text-lg font-medium mb-2">Image Optimization</h3>
                <p className="text-muted-foreground mb-4">
                  Replace landscape-oriented images with portrait-style images from OMDB to ensure 
                  consistent portrait layout across the application.
                </p>
                <Button 
                  onClick={handleOptimizeImages} 
                  disabled={isOptimizingImages}
                  className="flex items-center"
                >
                  {isOptimizingImages ? (
                    <>
                      <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                      Optimizing Images...
                    </>
                  ) : (
                    <>
                      <ImageIcon className="h-4 w-4 mr-2" />
                      Optimize Show Images
                    </>
                  )}
                </Button>
              </div>
              
              <div className="pt-6 border-t">
                <h3 className="text-lg font-medium mb-2">SEO Image Optimization</h3>
                <p className="text-muted-foreground mb-4">
                  Optimize all custom images for better SEO performance. This process resizes images 
                  to portrait format (3:4 ratio), compresses them for faster loading, and ensures 
                  consistent quality throughout the site.
                </p>
                <Button 
                  onClick={handleOptimizeCustomImages} 
                  disabled={isOptimizingImages}
                  className="flex items-center"
                  variant="outline"
                >
                  {isOptimizingImages ? (
                    <>
                      <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                      Optimizing for SEO...
                    </>
                  ) : (
                    <>
                      <ImageIcon className="h-4 w-4 mr-2" />
                      Optimize Custom Images for SEO
                    </>
                  )}
                </Button>
              </div>
              
              <div className="pt-4 border-t">
                <p className="text-muted-foreground">More settings options will be available in future updates.</p>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>

      {/* Edit Show Dialog */}
      <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
        <DialogContent className="sm:max-w-[600px] max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle>Edit TV Show</DialogTitle>
            <DialogDescription>
              Update the details for {selectedShow?.name}
            </DialogDescription>
          </DialogHeader>
          
          <div className="grid gap-4 py-4">
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="name" className="text-right">
                Name
              </Label>
              <Input
                id="name"
                value={formState.name}
                onChange={(e) => setFormState({...formState, name: e.target.value})}
                className="col-span-3"
              />
            </div>
            
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="description" className="text-right">
                Description
              </Label>
              <Textarea
                id="description"
                value={formState.description}
                onChange={(e) => setFormState({...formState, description: e.target.value})}
                className="col-span-3"
                rows={3}
              />
            </div>
            
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="ageRange" className="text-right">
                Age Range
              </Label>
              <Input
                id="ageRange"
                value={formState.ageRange}
                onChange={(e) => setFormState({...formState, ageRange: e.target.value})}
                className="col-span-3"
                placeholder="e.g. 3-5"
              />
            </div>
            
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="stimulationScore" className="text-right">
                Stimulation Score
              </Label>
              <Select 
                value={String(Math.round(formState.stimulationScore))}
                onValueChange={(value) => setFormState({...formState, stimulationScore: Math.round(parseInt(value))})}
              >
                <SelectTrigger className="col-span-3">
                  <SelectValue placeholder="Select stimulation score" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="1">1 - Very Low</SelectItem>
                  <SelectItem value="2">2 - Low</SelectItem>
                  <SelectItem value="3">3 - Medium</SelectItem>
                  <SelectItem value="4">4 - High</SelectItem>
                  <SelectItem value="5">5 - Very High</SelectItem>
                </SelectContent>
              </Select>
            </div>
            
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="interactivityLevel" className="text-right">
                Interactivity
              </Label>
              <Select 
                value={formState.interactivityLevel}
                onValueChange={(value) => setFormState({...formState, interactivityLevel: value})}
              >
                <SelectTrigger className="col-span-3">
                  <SelectValue placeholder="Select interactivity level" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="Low">Low</SelectItem>
                  <SelectItem value="Low-Moderate">Low-Moderate</SelectItem>
                  <SelectItem value="Medium">Medium</SelectItem>
                  <SelectItem value="Moderate-High">Moderate-High</SelectItem>
                  <SelectItem value="High">High</SelectItem>
                </SelectContent>
              </Select>
            </div>
            
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="dialogueIntensity" className="text-right">
                Dialogue Intensity
              </Label>
              <Select 
                value={formState.dialogueIntensity}
                onValueChange={(value) => setFormState({...formState, dialogueIntensity: value})}
              >
                <SelectTrigger className="col-span-3">
                  <SelectValue placeholder="Select dialogue intensity" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="Low">Low</SelectItem>
                  <SelectItem value="Low-Moderate">Low-Moderate</SelectItem>
                  <SelectItem value="Medium">Medium</SelectItem>
                  <SelectItem value="Moderate-High">Moderate-High</SelectItem>
                  <SelectItem value="High">High</SelectItem>
                </SelectContent>
              </Select>
            </div>
            
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="soundEffectsLevel" className="text-right">
                Sound Effects
              </Label>
              <Select 
                value={formState.soundEffectsLevel}
                onValueChange={(value) => setFormState({...formState, soundEffectsLevel: value})}
              >
                <SelectTrigger className="col-span-3">
                  <SelectValue placeholder="Select sound effects level" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="Low">Low</SelectItem>
                  <SelectItem value="Low-Moderate">Low-Moderate</SelectItem>
                  <SelectItem value="Medium">Medium</SelectItem>
                  <SelectItem value="Moderate-High">Moderate-High</SelectItem>
                  <SelectItem value="High">High</SelectItem>
                </SelectContent>
              </Select>
            </div>
            
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="totalSoundEffectTimeLevel" className="text-right">
                Total Sound Effect Time
              </Label>
              <Select 
                value={formState.totalSoundEffectTimeLevel}
                onValueChange={(value) => setFormState({...formState, totalSoundEffectTimeLevel: value})}
              >
                <SelectTrigger className="col-span-3">
                  <SelectValue placeholder="Select total sound effect time level" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="Low">Low</SelectItem>
                  <SelectItem value="Low-Moderate">Low-Moderate</SelectItem>
                  <SelectItem value="Medium">Medium</SelectItem>
                  <SelectItem value="Moderate-High">Moderate-High</SelectItem>
                  <SelectItem value="High">High</SelectItem>
                </SelectContent>
              </Select>
            </div>
            
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="sceneFrequency" className="text-right">
                Scene Frequency
              </Label>
              <Select 
                value={formState.sceneFrequency}
                onValueChange={(value) => setFormState({...formState, sceneFrequency: value})}
              >
                <SelectTrigger className="col-span-3">
                  <SelectValue placeholder="Select scene frequency" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="Low">Low</SelectItem>
                  <SelectItem value="Low-Moderate">Low-Moderate</SelectItem>
                  <SelectItem value="Medium">Medium</SelectItem>
                  <SelectItem value="Moderate-High">Moderate-High</SelectItem>
                  <SelectItem value="High">High</SelectItem>
                </SelectContent>
              </Select>
            </div>
            
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="musicTempo" className="text-right">
                Music Tempo
              </Label>
              <Select 
                value={formState.musicTempo}
                onValueChange={(value) => setFormState({...formState, musicTempo: value})}
              >
                <SelectTrigger className="col-span-3">
                  <SelectValue placeholder="Select music tempo" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="Low">Low</SelectItem>
                  <SelectItem value="Low-Moderate">Low-Moderate</SelectItem>
                  <SelectItem value="Medium">Medium</SelectItem>
                  <SelectItem value="Moderate-High">Moderate-High</SelectItem>
                  <SelectItem value="High">High</SelectItem>
                </SelectContent>
              </Select>
            </div>
            
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="totalMusicLevel" className="text-right">
                Total Music Level
              </Label>
              <Select 
                value={formState.totalMusicLevel}
                onValueChange={(value) => setFormState({...formState, totalMusicLevel: value})}
              >
                <SelectTrigger className="col-span-3">
                  <SelectValue placeholder="Select total music level" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="Low">Low</SelectItem>
                  <SelectItem value="Low-Moderate">Low-Moderate</SelectItem>
                  <SelectItem value="Medium">Medium</SelectItem>
                  <SelectItem value="Moderate-High">Moderate-High</SelectItem>
                  <SelectItem value="High">High</SelectItem>
                </SelectContent>
              </Select>
            </div>
            
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="themes" className="text-right">
                Themes
              </Label>
              <Textarea
                id="themes"
                value={Array.isArray(formState.themes) ? formState.themes.join(', ') : ''}
                onChange={(e) => {
                  const themesArray = e.target.value
                    .split(',')
                    .map(theme => theme.trim())
                    .filter(theme => theme !== '');
                  setFormState({...formState, themes: themesArray});
                }}
                className="col-span-3"
                placeholder="Enter themes separated by commas (e.g., 'Education, Adventure, Problem-solving')"
                rows={2}
              />
            </div>
            
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="animationStyle" className="text-right">
                Animation Style
              </Label>
              <Textarea
                id="animationStyle"
                value={formState.animationStyle}
                onChange={(e) => setFormState({...formState, animationStyle: e.target.value})}
                className="col-span-3"
                placeholder="Describe the animation style (e.g., '3D Animation', 'Stop-motion with hand-crafted models')"
                rows={3}
              />
            </div>
            
            {/* Image Management Section */}
            <div className="border-t pt-4 mt-4">
              <h3 className="text-lg font-medium mb-2">Image Management</h3>
              
              <div className="flex flex-col gap-4">
                {/* Image Upload Component */}
                <ImageUpload 
                  imageUrl={formState.imageUrl} 
                  onImageChange={(imageUrl) => setFormState({...formState, imageUrl})}
                />
                
                {/* OMDB Image Lookup Button */}
                <div>
                  <p className="text-sm mb-2">Or fetch image from OMDB:</p>
                  <Button 
                    type="button" 
                    variant="outline" 
                    className="flex items-center justify-center"
                    onClick={() => {
                      if (selectedShow) {
                        // Call the API to fetch and update the image from OMDB
                        apiRequest('POST', `/api/shows/${selectedShow.id}/update-image`)
                          .then(resp => resp.json())
                          .then(data => {
                            if (data.success) {
                              setFormState(prev => ({...prev, imageUrl: data.show.imageUrl}));
                              toast({
                                title: "Success",
                                description: data.message,
                              });
                            } else {
                              throw new Error(data.message || "Failed to find OMDB image");
                            }
                          })
                          .catch(err => {
                            toast({
                              title: "Error",
                              description: err.message || "Failed to update image from OMDB",
                              variant: "destructive"
                            });
                          });
                      }
                    }}
                  >
                    <Image className="h-4 w-4 mr-2" />
                    Find OMDB Image
                  </Button>
                </div>
              </div>
            </div>
          </div>
          
          <DialogFooter className="sticky bottom-0 bg-white pb-2 pt-2 flex flex-col sm:flex-row justify-between w-full gap-4">
            <div>
              {/* Delete button with confirmation */}
              {showDeleteConfirm ? (
                <div className="flex items-center gap-2">
                  <span className="text-sm text-red-500">Are you sure?</span>
                  <Button 
                    variant="destructive" 
                    size="sm" 
                    onClick={handleDeleteShow} 
                    disabled={isDeleting}
                  >
                    {isDeleting ? (
                      <>
                        <Loader2 className="h-3 w-3 mr-1 animate-spin" />
                        Deleting...
                      </>
                    ) : 'Yes, Delete'}
                  </Button>
                  <Button 
                    variant="outline" 
                    size="sm"
                    onClick={() => setShowDeleteConfirm(false)}
                  >
                    Cancel
                  </Button>
                </div>
              ) : (
                <Button 
                  variant="destructive" 
                  onClick={() => setShowDeleteConfirm(true)}
                >
                  <Trash2 className="h-4 w-4 mr-2" />
                  Delete Show
                </Button>
              )}
            </div>
            <div className="flex gap-2">
              <Button variant="outline" onClick={() => setIsDialogOpen(false)}>
                Cancel
              </Button>
              <Button onClick={handleUpdateShow} disabled={isUpdating}>
                {isUpdating ? (
                  <>
                    <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                    Saving...
                  </>
                ) : 'Save Changes'}
              </Button>
            </div>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Add Show Dialog */}
      <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>
        <DialogContent className="sm:max-w-[800px] max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle>Add New TV Show</DialogTitle>
            <DialogDescription>
              Create a new TV show entry in the database.
            </DialogDescription>
          </DialogHeader>
          
          <div className="space-y-6 py-4">
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="name" className="text-right">
                Show Name
              </Label>
              <Input
                id="name"
                value={newShowFormState.name}
                onChange={(e) => setNewShowFormState({...newShowFormState, name: e.target.value})}
                className="col-span-3"
                placeholder="Official TV show name"
                required
              />
            </div>
            
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="description" className="text-right">
                Description
              </Label>
              <Textarea
                id="description"
                value={newShowFormState.description}
                onChange={(e) => setNewShowFormState({...newShowFormState, description: e.target.value})}
                className="col-span-3"
                placeholder="Brief description of the show"
                rows={3}
              />
            </div>
            
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="ageRange" className="text-right">
                Age Range
              </Label>
              <Input
                id="ageRange"
                value={newShowFormState.ageRange}
                onChange={(e) => setNewShowFormState({...newShowFormState, ageRange: e.target.value})}
                className="col-span-3"
                placeholder="e.g., '3-5 years' or '8-12 years'"
              />
            </div>
            
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="stimulationScore" className="text-right">
                Stimulation Score (1-5)
              </Label>
              <Input
                id="stimulationScore"
                type="number"
                min={1}
                max={5}
                step={1}
                value={newShowFormState.stimulationScore}
                onChange={(e) => setNewShowFormState({
                  ...newShowFormState, 
                  stimulationScore: Math.round(Number(e.target.value))
                })}
                className="col-span-3"
                placeholder="Enter a whole number from 1-5"
                required
              />
            </div>
            
            {/* 
              Removed "Overall Rating" field since we're using 
              stimulation score for both (they are the same thing) 
            */}
            
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="interactivityLevel" className="text-right">
                Interactivity Level
              </Label>
              <Select 
                value={newShowFormState.interactivityLevel}
                onValueChange={(value) => setNewShowFormState({...newShowFormState, interactivityLevel: value})}
              >
                <SelectTrigger className="col-span-3">
                  <SelectValue placeholder="Select interactivity level" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="Low">Low</SelectItem>
                  <SelectItem value="Low-Moderate">Low-Moderate</SelectItem>
                  <SelectItem value="Medium">Medium</SelectItem>
                  <SelectItem value="Moderate-High">Moderate-High</SelectItem>
                  <SelectItem value="High">High</SelectItem>
                </SelectContent>
              </Select>
            </div>
            
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="dialogueIntensity" className="text-right">
                Dialogue Intensity
              </Label>
              <Select 
                value={newShowFormState.dialogueIntensity}
                onValueChange={(value) => setNewShowFormState({...newShowFormState, dialogueIntensity: value})}
              >
                <SelectTrigger className="col-span-3">
                  <SelectValue placeholder="Select dialogue intensity" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="Low">Low</SelectItem>
                  <SelectItem value="Low-Moderate">Low-Moderate</SelectItem>
                  <SelectItem value="Medium">Medium</SelectItem>
                  <SelectItem value="Moderate-High">Moderate-High</SelectItem>
                  <SelectItem value="High">High</SelectItem>
                </SelectContent>
              </Select>
            </div>
            
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="soundEffectsLevel" className="text-right">
                Sound Effects Level
              </Label>
              <Select 
                value={newShowFormState.soundEffectsLevel}
                onValueChange={(value) => setNewShowFormState({...newShowFormState, soundEffectsLevel: value})}
              >
                <SelectTrigger className="col-span-3">
                  <SelectValue placeholder="Select sound effects level" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="Low">Low</SelectItem>
                  <SelectItem value="Low-Moderate">Low-Moderate</SelectItem>
                  <SelectItem value="Medium">Medium</SelectItem>
                  <SelectItem value="Moderate-High">Moderate-High</SelectItem>
                  <SelectItem value="High">High</SelectItem>
                </SelectContent>
              </Select>
            </div>
            
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="sceneFrequency" className="text-right">
                Scene Frequency
              </Label>
              <Select 
                value={newShowFormState.sceneFrequency}
                onValueChange={(value) => setNewShowFormState({...newShowFormState, sceneFrequency: value})}
              >
                <SelectTrigger className="col-span-3">
                  <SelectValue placeholder="Select scene frequency" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="Low">Low</SelectItem>
                  <SelectItem value="Low-Moderate">Low-Moderate</SelectItem>
                  <SelectItem value="Medium">Medium</SelectItem>
                  <SelectItem value="Moderate-High">Moderate-High</SelectItem>
                  <SelectItem value="High">High</SelectItem>
                </SelectContent>
              </Select>
            </div>
            
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="musicTempo" className="text-right">
                Music Tempo
              </Label>
              <Select 
                value={newShowFormState.musicTempo}
                onValueChange={(value) => setNewShowFormState({...newShowFormState, musicTempo: value})}
              >
                <SelectTrigger className="col-span-3">
                  <SelectValue placeholder="Select music tempo" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="Low">Low</SelectItem>
                  <SelectItem value="Low-Moderate">Low-Moderate</SelectItem>
                  <SelectItem value="Medium">Medium</SelectItem>
                  <SelectItem value="Moderate-High">Moderate-High</SelectItem>
                  <SelectItem value="High">High</SelectItem>
                </SelectContent>
              </Select>
            </div>
            
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="totalMusicLevel" className="text-right">
                Total Music Level
              </Label>
              <Select 
                value={newShowFormState.totalMusicLevel}
                onValueChange={(value) => setNewShowFormState({...newShowFormState, totalMusicLevel: value})}
              >
                <SelectTrigger className="col-span-3">
                  <SelectValue placeholder="Select total music level" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="Low">Low</SelectItem>
                  <SelectItem value="Low-Moderate">Low-Moderate</SelectItem>
                  <SelectItem value="Medium">Medium</SelectItem>
                  <SelectItem value="Moderate-High">Moderate-High</SelectItem>
                  <SelectItem value="High">High</SelectItem>
                </SelectContent>
              </Select>
            </div>
            
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="totalSoundEffectTimeLevel" className="text-right">
                Total Sound Effect Time
              </Label>
              <Select 
                value={newShowFormState.totalSoundEffectTimeLevel}
                onValueChange={(value) => setNewShowFormState({...newShowFormState, totalSoundEffectTimeLevel: value})}
              >
                <SelectTrigger className="col-span-3">
                  <SelectValue placeholder="Select total sound effect time level" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="Low">Low</SelectItem>
                  <SelectItem value="Low-Moderate">Low-Moderate</SelectItem>
                  <SelectItem value="Medium">Medium</SelectItem>
                  <SelectItem value="Moderate-High">Moderate-High</SelectItem>
                  <SelectItem value="High">High</SelectItem>
                </SelectContent>
              </Select>
            </div>
            
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="themes" className="text-right">
                Themes
              </Label>
              <Textarea
                id="themes"
                value={Array.isArray(newShowFormState.themes) ? newShowFormState.themes.join(', ') : ''}
                onChange={(e) => {
                  const themesArray = e.target.value
                    .split(',')
                    .map(theme => theme.trim())
                    .filter(theme => theme !== '');
                  setNewShowFormState({...newShowFormState, themes: themesArray});
                }}
                className="col-span-3"
                placeholder="Enter themes separated by commas (e.g., 'Education, Adventure, Problem-solving')"
                rows={2}
              />
            </div>
            
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="animationStyle" className="text-right">
                Animation Style
              </Label>
              <Textarea
                id="animationStyle"
                value={newShowFormState.animationStyle}
                onChange={(e) => setNewShowFormState({...newShowFormState, animationStyle: e.target.value})}
                className="col-span-3"
                placeholder="Describe the animation style (e.g., '3D Animation', 'Stop-motion with hand-crafted models')"
                rows={3}
              />
            </div>
            
            {/* Additional required fields for database */}
            <div className="border-t pt-4 mt-4 mb-4">
              <h3 className="text-md font-medium mb-2">Additional Information</h3>
            </div>
            
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="episodeLength" className="text-right">
                Episode Length (min)
              </Label>
              <Input
                id="episodeLength"
                type="number"
                value={newShowFormState.episodeLength}
                onChange={(e) => setNewShowFormState({...newShowFormState, episodeLength: Number(e.target.value)})}
                className="col-span-3"
                placeholder="Episode length in minutes"
                required
              />
            </div>
            
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="seasons" className="text-right">
                Seasons
              </Label>
              <Input
                id="seasons"
                type="number"
                value={newShowFormState.seasons}
                onChange={(e) => setNewShowFormState({...newShowFormState, seasons: Number(e.target.value)})}
                className="col-span-3"
                placeholder="Number of seasons"
                required
              />
            </div>
            
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="releaseYear" className="text-right">
                Release Year
              </Label>
              <Input
                id="releaseYear"
                type="number"
                value={newShowFormState.releaseYear}
                onChange={(e) => setNewShowFormState({...newShowFormState, releaseYear: Number(e.target.value)})}
                className="col-span-3"
                placeholder="Year the show was released"
                required
              />
            </div>
            
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="creator" className="text-right">
                Creator/Studio
              </Label>
              <Input
                id="creator"
                value={newShowFormState.creator}
                onChange={(e) => setNewShowFormState({...newShowFormState, creator: e.target.value})}
                className="col-span-3"
                placeholder="Creator or studio name"
              />
            </div>
            
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="availableOn" className="text-right">
                Available On
              </Label>
              <Textarea
                id="availableOn"
                value={Array.isArray(newShowFormState.availableOn) ? newShowFormState.availableOn.join(', ') : ''}
                onChange={(e) => {
                  const platformsArray = e.target.value
                    .split(',')
                    .map(platform => platform.trim())
                    .filter(platform => platform !== '');
                  setNewShowFormState({...newShowFormState, availableOn: platformsArray});
                }}
                className="col-span-3"
                placeholder="Enter platforms separated by commas (e.g., 'Netflix, Disney+, YouTube')"
                rows={2}
              />
            </div>
            
            <div className="grid grid-cols-4 items-center gap-4">
              <div className="text-right col-span-1">
                <Label>Show Image</Label>
              </div>
              <div className="col-span-3">
                <ImageUpload 
                  imageUrl={newShowFormState.imageUrl} 
                  onImageChange={(imageUrl) => setNewShowFormState({...newShowFormState, imageUrl})}
                />
              </div>
            </div>
          </div>
          
          <DialogFooter>
            <Button variant="outline" onClick={() => setIsAddDialogOpen(false)}>
              Cancel
            </Button>
            <Button onClick={handleSubmitNewShow} disabled={isAddingShow}>
              {isAddingShow ? (
                <>
                  <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                  Adding Show...
                </>
              ) : 'Add Show'}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </main>
  );
}
</file>

<file path="server/routes.ts">
import express, { Express, Request, Response, NextFunction } from "express";
import { createServer, type Server } from "http";
// Switch to memory storage for development
import { MemStorage } from "./storage";
// Create and initialize memory storage
const storage = new MemStorage();
import { githubService } from "./github";
import { omdbService } from "./omdb";
import { ZodError } from "zod";
import { insertTvShowReviewSchema, insertFavoriteSchema, TvShowGitHub } from "@shared/schema";
import fs from 'fs';
import { parse } from 'csv-parse/sync';
import { setupAuth } from "./auth";
import { updateShowImagesFromOmdb } from "./image-optimizer";
import { updateCustomImageMap, applyCustomImages } from "./image-preservator";
import { applyCustomShowDetails } from "./details-preservator";
import { upload, optimizeImage, uploadErrorHandler } from "./image-upload";
import path from "path";

export async function registerRoutes(app: Express): Promise<Server> {
  // Add health check endpoint
  app.get('/api/health', (_req, res) => {
    res.status(200).send('OK');
  });

  // Set up authentication
  setupAuth(app);
  
  // Serve static files from the public directory
  app.use('/uploads', express.static(path.join(process.cwd(), 'public/uploads')));
  
  // Skip GitHub data import on server start to fix database errors
  console.log("Skipping GitHub data import on startup to prevent database errors");
  
  // Skip custom data loading on startup for better performance
  // Custom data is now applied directly to the database using the apply-custom-data.js script
  console.log("Startup optimization: Custom data loading skipped for faster server startup.");
  console.log("To apply custom data to the database, run: node apply-custom-data.js");

  // Get all TV shows
  app.get("/api/shows", async (req: Request, res: Response) => {
    try {
      
      const { 
        ageGroup, 
        ageRange,
        tantrumFactor, 
        sortBy, 
        search, 
        themes,
        interactionLevel,
        dialogueIntensity,
        soundFrequency,
        stimulationScoreRange
      } = req.query;
      
      // Process themes - can be comma-separated string
      let processedThemes: string[] | undefined = undefined;
      if (typeof themes === 'string' && themes.trim()) {
        processedThemes = themes.split(',').map(t => t.trim()).filter(Boolean);
      }
      
      // Process ageRange - can be JSON string
      let processedAgeRange: { min: number, max: number } | undefined = undefined;
      if (typeof ageRange === 'string' && ageRange.trim()) {
        try {
          processedAgeRange = JSON.parse(ageRange);
        } catch (e) {
          console.error("Failed to parse ageRange:", e);
        }
      }
      
      // Process stimulationScoreRange - can be JSON string
      let processedStimulationScoreRange: { min: number, max: number } | undefined = undefined;
      if (typeof stimulationScoreRange === 'string' && stimulationScoreRange.trim()) {
        try {
          processedStimulationScoreRange = JSON.parse(stimulationScoreRange);
        } catch (e) {
          console.error("Failed to parse stimulationScoreRange:", e);
        }
      }
      
      const filters = {
        ageGroup: typeof ageGroup === 'string' ? ageGroup : undefined,
        ageRange: processedAgeRange,
        tantrumFactor: typeof tantrumFactor === 'string' ? tantrumFactor : undefined,
        sortBy: typeof sortBy === 'string' ? sortBy : undefined,
        search: typeof search === 'string' ? search : undefined,
        themes: processedThemes,
        interactionLevel: typeof interactionLevel === 'string' ? interactionLevel : undefined,
        dialogueIntensity: typeof dialogueIntensity === 'string' ? dialogueIntensity : undefined,
        soundFrequency: typeof soundFrequency === 'string' ? soundFrequency : undefined,
        stimulationScoreRange: processedStimulationScoreRange
      };
      

      
      const shows = await storage.getTvShowsByFilter(filters);
      
      // If this is a search request, track the search for each returned show
      if (typeof search === 'string' && search.trim() && shows.length > 0) {
        // Track search data for each of the first 5 results
        const topResults = shows.slice(0, 5);
        for (const show of topResults) {
          await storage.trackShowSearch(show.id);
        }

      }
      res.json(shows);
    } catch (error) {
      console.error("Error fetching TV shows:", error);
      res.status(500).json({ message: "Failed to fetch TV shows" });
    }
  });

  // Get popular TV shows
  app.get("/api/shows/popular", async (req: Request, res: Response) => {
    try {
      const limitStr = req.query.limit;
      const limit = limitStr && typeof limitStr === 'string' ? parseInt(limitStr) : 10;
      
      const shows = await storage.getPopularShows(limit);
      res.json(shows);
    } catch (error) {
      console.error("Error fetching popular TV shows:", error);
      res.status(500).json({ message: "Failed to fetch popular TV shows" });
    }
  });

  // Get single TV show by ID
  app.get("/api/shows/:id", async (req: Request, res: Response) => {
    try {
      const id = parseInt(req.params.id);
      if (isNaN(id)) {
        return res.status(400).json({ message: "Invalid show ID" });
      }
      
      const show = await storage.getTvShowById(id);
      if (!show) {
        return res.status(404).json({ message: "TV show not found" });
      }
      
      // Get reviews for this show
      const reviews = await storage.getReviewsByTvShowId(id);
      
      // Track this view
      await storage.trackShowView(id);
      
      // Try to fetch OMDb data for this show
      let omdbData = null;
      try {
        omdbData = await omdbService.getShowData(show.name);
        console.log(`OMDb data for ${show.name}:`, omdbData ? 'Found' : 'Not found');
      } catch (omdbError) {
        console.error(`Error fetching OMDb data for ${show.name}:`, omdbError);
        // Continue even if OMDb fetch fails
      }
      
      res.json({
        ...show,
        reviews,
        omdb: omdbData
      });
    } catch (error) {
      console.error("Error fetching TV show:", error);
      res.status(500).json({ message: "Failed to fetch TV show" });
    }
  });

  // Add a new review for a TV show
  app.post("/api/shows/:id/reviews", async (req: Request, res: Response) => {
    try {
      const id = parseInt(req.params.id);
      if (isNaN(id)) {
        return res.status(400).json({ message: "Invalid show ID" });
      }
      
      const show = await storage.getTvShowById(id);
      if (!show) {
        return res.status(404).json({ message: "TV show not found" });
      }
      
      // Validate review data
      const validatedData = insertTvShowReviewSchema.parse({
        ...req.body,
        tvShowId: id
      });
      
      // Add review to storage
      const newReview = await storage.addReview(validatedData);
      res.status(201).json(newReview);
    } catch (error) {
      if (error instanceof ZodError) {
        return res.status(400).json({ 
          message: "Invalid review data", 
          errors: error.errors 
        });
      }
      
      console.error("Error adding TV show review:", error);
      res.status(500).json({ message: "Failed to add TV show review" });
    }
  });

  // Manually refresh data from GitHub
  app.post("/api/refresh-data", async (req: Request, res: Response) => {
    try {
      const showsData = await githubService.fetchTvShowsData();
      const importedShows = await storage.importShowsFromGitHub(showsData);
      
      res.json({ 
        message: "Data refreshed successfully", 
        count: importedShows.length 
      });
    } catch (error) {
      console.error("Error refreshing data:", error);
      res.status(500).json({ message: "Failed to refresh data" });
    }
  });
  
  // Endpoint to optimize show images using OMDB posters
  app.post("/api/optimize-images", async (req: Request, res: Response) => {
    try {
      // Temporarily removed admin check to run optimization directly
      // if (!req.user?.isAdmin) {
      //   return res.status(403).json({ message: "Unauthorized. Admin privileges required." });
      // }
      
      console.log("Starting image optimization process...");
      const results = await updateShowImagesFromOmdb();
      
      res.json({
        message: `Processed ${results.total} shows. Updated ${results.successful.length} images successfully.`,
        successful: results.successful.length,
        failed: results.failed.length,
        results
      });
    } catch (error) {
      console.error("Error optimizing images:", error);
      res.status(500).json({ message: "Failed to optimize images" });
    }
  });

  // Endpoint to update a specific show with OMDB image
  app.post("/api/shows/:id/update-image", async (req: Request, res: Response) => {
    try {
      const id = parseInt(req.params.id);
      if (isNaN(id)) {
        return res.status(400).json({ message: "Invalid show ID" });
      }
      
      const show = await storage.getTvShowById(id);
      if (!show) {
        return res.status(404).json({ message: "TV show not found" });
      }
      
      console.log(`Looking up OMDB poster for "${show.name}"`);
      const omdbData = await omdbService.getShowData(show.name);
      
      if (omdbData && omdbData.poster && omdbData.poster !== 'N/A') {
        // Save to our custom image map and update the show
        updateCustomImageMap(id, omdbData.poster);
        
        // Update the show with the OMDB poster
        const updatedShow = await storage.updateTvShow(id, {
          imageUrl: omdbData.poster
        });
        
        if (updatedShow) {
          res.json({
            success: true,
            message: `Updated "${show.name}" with OMDB poster`,
            show: updatedShow
          });
        } else {
          res.status(500).json({
            success: false,
            message: "Failed to update show in storage"
          });
        }
      } else {
        res.status(404).json({
          success: false,
          message: "No OMDB poster found for this show"
        });
      }
    } catch (error) {
      console.error("Error updating show image:", error);
      res.status(500).json({ 
        success: false,
        message: "Failed to update show image",
        error: error instanceof Error ? error.message : 'Unknown error'
      });
    }
  });
  
  // Endpoint to update a show with a local image file
  app.post("/api/shows/:id/update-with-local-image", async (req: Request, res: Response) => {
    try {
      const id = parseInt(req.params.id);
      if (isNaN(id)) {
        return res.status(400).json({ message: "Invalid show ID" });
      }
      
      const { imageUrl } = req.body;
      if (!imageUrl) {
        return res.status(400).json({ message: "Image URL is required" });
      }
      
      const show = await storage.getTvShowById(id);
      if (!show) {
        return res.status(404).json({ message: "TV show not found" });
      }
      
      // Save to our custom image map and update the show
      updateCustomImageMap(id, imageUrl);
      
      // Update the show with the local image URL
      const updatedShow = await storage.updateTvShow(id, { imageUrl });
      
      if (updatedShow) {
        res.json({
          success: true,
          message: `Updated "${show.name}" with local image`,
          show: updatedShow
        });
      } else {
        res.status(500).json({
          success: false,
          message: "Failed to update show in storage"
        });
      }
    } catch (error) {
      console.error("Error updating show with local image:", error);
      res.status(500).json({ 
        success: false,
        message: "Failed to update show with local image",
        error: error instanceof Error ? error.message : 'Unknown error'
      });
    }
  });

  // Import data from CSV file
  app.post("/api/import-csv", async (req: Request, res: Response) => {
    try {
      // Check if CSV file exists
      const csvFilePath = 'tvshow_sensory_data.csv';
      if (!fs.existsSync(csvFilePath)) {
        return res.status(404).json({ message: "CSV file not found" });
      }

      // Read and parse CSV file
      const fileContent = fs.readFileSync(csvFilePath, 'utf8');
      const records = parse(fileContent, {
        columns: true,
        skip_empty_lines: true
      });

      console.log(`Parsed ${records.length} records from CSV`);
      
      // Transform CSV data to GitHub format
      const transformedShows: TvShowGitHub[] = records.map((record: any, index: number) => {
        // Split the themes into an array and trim each value
        const themes = record['Themes, Teachings, Guidance'] 
          ? record['Themes, Teachings, Guidance'].split(',').map((t: string) => t.trim())
          : [];

        // Convert string numbers to actual numbers
        const stimulationScore = parseInt(record['Stimulation Score']) || 3;
        
        // Debug the CSV data for Arthur
        if (record['Programs'] === 'Arthur') {
          console.log('Arthur data in CSV:', {
            title: record['Programs'],
            sound_effects: record['Sound Effects'],
            dialogue: record['Dialougue Intensity']
          });
        }

        return {
          title: record['Programs'] || `Show ${index + 1}`,
          stimulation_score: stimulationScore,
          platform: record['TV or YouTube'] || 'TV',
          target_age_group: record['Target Age Group'] || '4-8',
          seasons: record['Seasons'] || null,
          avg_episode_length: record['Avg. Epsiode'] || null,
          themes: themes,
          interactivity_level: record['Interactivity Level'] || 'Moderate',
          animation_style: record['Animation Styles'] || 'Traditional 2D',
          dialogue_intensity: record['Dialougue Intensity'] || 'Moderate',
          sound_effects_level: record['Sound Effects'] || 'Moderate',
          music_tempo: record['Music Tempo'] || 'Moderate',
          total_music_level: record['Total Music'] || 'Moderate',
          total_sound_effect_time_level: record['Total Sound Effect Time'] || 'Moderate',
          scene_frequency: record['Scene Frequency'] || 'Moderate',
          image_filename: `${record['Programs']?.toLowerCase().replace(/[^a-z0-9]/g, '')}.jpg` || 'default.jpg',
          id: index + 1,
          // Add image URL based on the show title for GitHub repo format
          imageUrl: `https://raw.githubusercontent.com/ledhaseeb/tvtantrum/main/client/public/images/${record['Programs']?.toLowerCase().replace(/[^a-z0-9]/g, '')}.jpg`
        };
      });

      // Import processed data to storage
      const importedShows = await storage.importShowsFromGitHub(transformedShows);
      console.log(`Imported ${importedShows.length} TV shows from CSV`);
      
      res.json({ 
        message: "CSV data imported successfully", 
        count: importedShows.length 
      });
    } catch (error) {
      console.error('Error importing CSV data:', error);
      res.status(500).json({ 
        message: "Failed to import CSV data", 
        error: error instanceof Error ? error.message : 'Unknown error' 
      });
    }
  });

  // Add favorite routes, protected by authentication
  // Add a show to user's favorites
  app.post("/api/favorites", async (req: Request, res: Response) => {
    // Check if user is authenticated
    if (!req.isAuthenticated()) {
      return res.status(401).json({ message: "You must be logged in to use favorites" });
    }

    try {
      const { tvShowId } = req.body;
      if (!tvShowId || isNaN(parseInt(tvShowId))) {
        return res.status(400).json({ message: "Invalid show ID" });
      }

      const userId = req.user!.id;
      const favorite = await storage.addFavorite(userId, parseInt(tvShowId));
      
      res.status(201).json(favorite);
    } catch (error) {
      console.error("Error adding favorite:", error);
      res.status(500).json({ message: "Failed to add favorite" });
    }
  });

  // Remove a show from user's favorites
  app.delete("/api/favorites/:tvShowId", async (req: Request, res: Response) => {
    // Check if user is authenticated
    if (!req.isAuthenticated()) {
      return res.status(401).json({ message: "You must be logged in to use favorites" });
    }

    try {
      const tvShowId = parseInt(req.params.tvShowId);
      if (isNaN(tvShowId)) {
        return res.status(400).json({ message: "Invalid show ID" });
      }

      const userId = req.user!.id;
      const result = await storage.removeFavorite(userId, tvShowId);
      
      if (result) {
        res.status(200).json({ message: "Show removed from favorites" });
      } else {
        res.status(404).json({ message: "Show was not in favorites" });
      }
    } catch (error) {
      console.error("Error removing favorite:", error);
      res.status(500).json({ message: "Failed to remove favorite" });
    }
  });

  // Get user's favorites
  app.get("/api/favorites", async (req: Request, res: Response) => {
    // Check if user is authenticated
    if (!req.isAuthenticated()) {
      return res.status(401).json({ message: "You must be logged in to view favorites" });
    }

    try {
      const userId = req.user!.id;
      const favorites = await storage.getUserFavorites(userId);
      
      res.json(favorites);
    } catch (error) {
      console.error("Error fetching favorites:", error);
      res.status(500).json({ message: "Failed to fetch favorites" });
    }
  });

  // Check if a show is in the user's favorites
  app.get("/api/favorites/:tvShowId", async (req: Request, res: Response) => {
    // Check if user is authenticated
    if (!req.isAuthenticated()) {
      return res.status(401).json({ message: "You must be logged in to check favorites" });
    }

    try {
      const tvShowId = parseInt(req.params.tvShowId);
      if (isNaN(tvShowId)) {
        return res.status(400).json({ message: "Invalid show ID" });
      }

      const userId = req.user!.id;
      const isFavorite = await storage.isFavorite(userId, tvShowId);
      
      res.json({ isFavorite });
    } catch (error) {
      console.error("Error checking favorite status:", error);
      res.status(500).json({ message: "Failed to check favorite status" });
    }
  });

  // Get similar shows based on user's favorites
  app.get("/api/recommendations", async (req: Request, res: Response) => {
    // Check if user is authenticated
    if (!req.isAuthenticated()) {
      return res.status(401).json({ message: "You must be logged in to get recommendations" });
    }

    try {
      const userId = req.user!.id;
      const limitStr = req.query.limit;
      const limit = limitStr && typeof limitStr === 'string' ? parseInt(limitStr) : 5;
      
      const recommendations = await storage.getSimilarShows(userId, limit);
      
      res.json(recommendations);
    } catch (error) {
      console.error("Error fetching recommendations:", error);
      res.status(500).json({ message: "Failed to fetch recommendations" });
    }
  });
  
  // Get similar shows for a specific show
  app.get("/api/shows/:id/similar", async (req: Request, res: Response) => {
    try {
      const id = parseInt(req.params.id);
      console.log(`Fetching similar shows for show ID: ${id}`);
      
      if (isNaN(id)) {
        console.log("Invalid show ID provided");
        return res.status(400).json({ message: "Invalid show ID" });
      }
      
      const limitStr = req.query.limit;
      const limit = limitStr && typeof limitStr === 'string' ? parseInt(limitStr) : 4;
      
      // Since we don't have a showId-based similar function, use the user-based one instead
      // Or get shows with similar themes/properties
      const show = await storage.getTvShowById(id);
      if (!show) {
        return res.status(404).json({ message: "Show not found" });
      }
      
      // Get all shows and filter them manually by similar properties
      const allShows = await storage.getAllTvShows();
      const similarShows = allShows
        .filter(s => s.id !== id) // Exclude current show
        .map(s => {
          // Calculate similarity score
          let score = 0;
          
          // Similar age range
          if (s.ageRange === show.ageRange) score += 3;
          
          // Similar stimulation score (within 10 points)
          if (Math.abs((s.stimulationScore || 0) - (show.stimulationScore || 0)) <= 10) score += 4;
          
          // Similar themes
          const showThemes = show.themes || [];
          const otherThemes = s.themes || [];
          const commonThemes = showThemes.filter(theme => otherThemes.includes(theme));
          score += commonThemes.length * 2;
          
          // Similar dialogue intensity
          if (s.dialogueIntensity === show.dialogueIntensity) score += 2;
          
          // Similar animation style
          if (s.animationStyle === show.animationStyle) score += 2;
          
          return { show: s, score };
        })
        .sort((a, b) => b.score - a.score) // Sort by highest score
        .slice(0, limit) // Get requested number
        .map(item => item.show); // Return just the shows
        
      console.log(`Found ${similarShows.length} similar shows for show ID ${id}`);
      
      // Log some sample data
      if (similarShows.length > 0) {
        console.log("First similar show:", {
          id: similarShows[0].id,
          name: similarShows[0].name
        });
      }
      
      res.json(similarShows);
    } catch (error) {
      console.error("Error fetching similar shows:", error);
      res.status(500).json({ message: "Failed to fetch similar shows" });
    }
  });

  // Check if a user is admin (for color palette access)
  app.get("/api/user/is-admin", async (req: Request, res: Response) => {
    // Check if user is authenticated
    if (!req.isAuthenticated()) {
      return res.status(401).json({ message: "You must be logged in" });
    }

    try {
      res.json({ isAdmin: req.user!.isAdmin });
    } catch (error) {
      console.error("Error checking admin status:", error);
      res.status(500).json({ message: "Failed to check admin status" });
    }
  });
  
  // Check if username is available
  app.get("/api/check-username", async (req: Request, res: Response) => {
    try {
      const username = req.query.username as string;
      
      if (!username || username.length < 2) {
        return res.status(400).json({ available: false, message: "Username is too short" });
      }
      
      const existingUser = await storage.getUserByUsername(username);
      res.json({ available: !existingUser });
    } catch (error) {
      console.error("Error checking username:", error);
      res.status(500).json({ available: false, message: "Server error" });
    }
  });
  
  // Check if email is available
  app.get("/api/check-email", async (req: Request, res: Response) => {
    try {
      const email = req.query.email as string;
      
      if (!email || !email.includes('@')) {
        return res.status(400).json({ available: false, message: "Invalid email format" });
      }
      
      const existingUser = await storage.getUserByEmail(email);
      res.json({ available: !existingUser });
    } catch (error) {
      console.error("Error checking email:", error);
      res.status(500).json({ available: false, message: "Server error" });
    }
  });
  
  // Image upload endpoint for TV shows - used by both add and edit forms
  app.post("/api/shows/upload-image", upload.single('image'), uploadErrorHandler, async (req: Request, res: Response) => {
    // Check if user is authenticated and has admin privileges
    if (!req.isAuthenticated() || !req.user?.isAdmin) {
      return res.status(403).json({ message: "Unauthorized: Admin access required" });
    }
    
    try {
      if (!req.file) {
        return res.status(400).json({ message: "No image file provided" });
      }
      
      // Optimize the uploaded image
      const optimizedImagePath = await optimizeImage(req.file.path);
      
      // Return the path to the optimized image
      res.json({
        originalPath: `/uploads/${path.basename(req.file.path)}`,
        optimizedPath: optimizedImagePath,
        message: "Image uploaded and optimized successfully"
      });
    } catch (error) {
      console.error("Error processing image upload:", error);
      res.status(500).json({ 
        message: "Failed to process image upload", 
        error: error instanceof Error ? error.message : 'Unknown error' 
      });
    }
  });
  
  // Add a new TV show (admin only)
  app.post("/api/shows", async (req: Request, res: Response) => {
    // Check if user is authenticated and has admin privileges
    if (!req.isAuthenticated() || !req.user?.isAdmin) {
      return res.status(403).json({ message: "Unauthorized: Admin access required" });
    }
    
    try {
      // Validate that required fields are present
      const { name, description } = req.body;
      
      if (!name || !name.trim()) {
        return res.status(400).json({ message: "Show name is required" });
      }
      
      // Process themes if they're provided as an array
      if (req.body.themes && Array.isArray(req.body.themes)) {
        // Filter out any empty themes
        req.body.themes = req.body.themes.filter((theme: string) => theme.trim() !== '');
      }
      
      // Ensure stimulation score is a whole number if provided
      if (req.body.stimulationScore !== undefined) {
        req.body.stimulationScore = Math.round(Number(req.body.stimulationScore));
      }
      
      // Ensure all required fields have default values to avoid database constraint errors
      const currentYear = new Date().getFullYear();
      const showData = {
        ...req.body,
        // Set default values for any missing required fields
        episodeLength: req.body.episodeLength || 15,
        seasons: req.body.seasons || 1,
        releaseYear: req.body.releaseYear || currentYear,
        endYear: req.body.endYear || null,
        isOngoing: req.body.isOngoing !== undefined ? req.body.isOngoing : true,
        creator: req.body.creator || '',
        availableOn: Array.isArray(req.body.availableOn) ? req.body.availableOn : [],
        // Use stimulation score as the overall rating since they're the same
        overallRating: req.body.stimulationScore || 3 // Using stimulation score for overall rating
      };
      
      console.log("Adding show with data:", JSON.stringify({
        name: showData.name,
        episodeLength: showData.episodeLength,
        seasons: showData.seasons
      }, null, 2));
      
      // Add the show to the database
      const newShow = await storage.addTvShow(showData);
      
      // If an image URL was provided, add it to our custom image map
      if (showData.imageUrl) {
        updateCustomImageMap(newShow.id, showData.imageUrl);
      }
      
      console.log(`Created new TV show: ${name} (ID: ${newShow.id})`);
      
      res.status(201).json(newShow);
    } catch (error) {
      console.error("Error adding new TV show:", error);
      res.status(500).json({ 
        message: "Failed to add new TV show", 
        error: error instanceof Error ? error.message : 'Unknown error' 
      });
    }
  });
  
  // Update a TV show (admin only)
  app.patch("/api/shows/:id", async (req: Request, res: Response) => {
    try {
      // Parse ID once
      const id = parseInt(req.params.id);
      
      // Check if user is authenticated and is an admin
      if (!req.isAuthenticated()) {
        return res.status(401).json({ message: "You must be logged in" });
      }
      
      if (!req.user?.isAdmin) {
        return res.status(403).json({ message: "Not authorized to update shows" });
      }
      
      if (isNaN(id)) {
        return res.status(400).json({ message: "Invalid ID" });
      }

      // Validate the show exists
      const existingShow = await storage.getTvShowById(id);
      if (!existingShow) {
        return res.status(404).json({ message: "Show not found" });
      }

      console.log(`Updating show #${id} with data:`, JSON.stringify(req.body, null, 2));

      // Update the show
      const updatedShow = await storage.updateTvShow(id, req.body);
      if (!updatedShow) {
        console.error(`Failed to update show #${id}`);
        return res.status(500).json({ message: "Failed to update show" });
      }

      console.log(`Show #${id} updated successfully:`, JSON.stringify(updatedShow, null, 2));
      res.json(updatedShow);
    } catch (error) {
      console.error("Error updating TV show:", error);
      res.status(500).json({ message: "Failed to update TV show" });
    }
  });

  // Delete a TV show (admin only)
  app.delete("/api/shows/:id", async (req: Request, res: Response) => {
    try {
      // Parse ID once
      const id = parseInt(req.params.id);
      
      // Check if user is authenticated and is an admin
      if (!req.isAuthenticated()) {
        return res.status(401).json({ message: "You must be logged in" });
      }
      
      if (!req.user?.isAdmin) {
        return res.status(403).json({ message: "Not authorized to delete shows" });
      }
      
      if (isNaN(id)) {
        return res.status(400).json({ message: "Invalid ID" });
      }

      // Validate the show exists
      const existingShow = await storage.getTvShowById(id);
      if (!existingShow) {
        return res.status(404).json({ message: "Show not found" });
      }

      console.log(`Attempting to delete TV show: ${existingShow.name} (ID: ${id})`);
      
      // Delete the show from the database
      const deleteResult = await storage.deleteTvShow(id);
      
      if (!deleteResult) {
        console.error(`Failed to delete show with ID ${id}`);
        return res.status(500).json({ message: "Failed to delete TV show" });
      }
      
      console.log(`Successfully deleted TV show: ${existingShow.name} (ID: ${id})`);
      res.status(200).json({ message: "TV show deleted successfully" });
    } catch (error) {
      console.error("Error deleting TV show:", error);
      res.status(500).json({ message: "Failed to delete TV show" });
    }
  });
  
  // Admin-only API to optimize all custom images for SEO
  app.post("/api/admin/optimize-custom-images", async (req: Request, res: Response) => {
    try {
      // Check if user is authenticated and is an admin
      if (!req.isAuthenticated()) {
        return res.status(401).json({ message: "You must be logged in" });
      }
      
      if (!req.user?.isAdmin) {
        return res.status(403).json({ message: "Not authorized to optimize images" });
      }
      
      // Get all shows with non-optimized images that need SEO optimization
      const shows = await storage.getAllTvShows();
      
      // Filter shows that need image optimization (non-OMDB images that aren't already optimized)
      const showsToOptimize = shows.filter(show => 
        show.imageUrl && 
        !show.imageUrl.includes('/uploads/optimized/') &&
        !show.imageUrl.includes('m.media-amazon.com') &&
        !show.imageUrl.includes('omdbapi.com')
      );
      
      console.log(`Found ${showsToOptimize.length} custom images to optimize`);
      
      // Import modules are already available at the top of file
      // We'll use the existing imports instead
      
      // Ensure temp directory exists
      const tempDir = './tmp_images';
      if (!fs.existsSync(tempDir)) {
        fs.mkdirSync(tempDir, { recursive: true });
      }
      
      // Prepare results
      const optimizationResults = [];
      let optimizedCount = 0;
      let errorCount = 0;
      let skippedCount = 0;
      
      // Process each image
      for (const show of showsToOptimize) {
        try {
          console.log(`Processing image for show ${show.id}: ${show.name}`);
          
          // Skip if URL is null or malformed
          if (!show.imageUrl) {
            console.log(`Skipping - null image URL for show ${show.id}`);
            skippedCount++;
            optimizationResults.push({
              id: show.id,
              name: show.name,
              status: "skipped",
              reason: "Null image URL"
            });
            continue;
          }
          
          // Download image if it's a remote URL
          let localImagePath = null;
          
          if (show.imageUrl.startsWith('http')) {
            try {
              // Download the image
              const response = await fetch(show.imageUrl);
              if (!response.ok) {
                throw new Error(`Failed to download image: ${response.status} ${response.statusText}`);
              }
              
              const buffer = await response.buffer();
              
              // Save image to temp location
              const timestamp = Date.now();
              const uniqueFilename = `show-${show.id}-${timestamp}.jpg`;
              localImagePath = path.join(tempDir, uniqueFilename);
              
              fs.writeFileSync(localImagePath, buffer);
              console.log(`Downloaded image to: ${localImagePath}`);
            } catch (error) {
              console.error(`Error downloading image for show ${show.id}:`, error);
              errorCount++;
              optimizationResults.push({
                id: show.id,
                name: show.name,
                status: "error",
                reason: `Download error: ${error instanceof Error ? error.message : "Unknown error"}`
              });
              continue;
            }
          } else if (show.imageUrl.startsWith('/')) {
            // For local images, check if they exist
            const possiblePaths = [
              path.join('public', show.imageUrl),
              path.join('public', 'uploads', path.basename(show.imageUrl)),
              path.join('public', 'custom-images', path.basename(show.imageUrl)),
              path.join('public', 'images', path.basename(show.imageUrl)),
              path.join('attached_assets', path.basename(show.imageUrl)),
              show.imageUrl.substring(1) // Try without leading slash
            ];
            
            for (const checkPath of possiblePaths) {
              if (fs.existsSync(checkPath)) {
                localImagePath = checkPath;
                console.log(`Found local image at ${localImagePath}`);
                break;
              }
            }
            
            if (!localImagePath) {
              console.log(`Could not find local image at any expected location: ${show.imageUrl}`);
              skippedCount++;
              optimizationResults.push({
                id: show.id,
                name: show.name,
                status: "skipped",
                reason: "Local image not found"
              });
              continue;
            }
          } else {
            console.log(`Unsupported image URL format: ${show.imageUrl}`);
            skippedCount++;
            optimizationResults.push({
              id: show.id,
              name: show.name,
              status: "skipped",
              reason: "Unsupported image URL format"
            });
            continue;
          }
          
          // Now optimize the image
          try {
            // Use our existing image optimization function
            const optimizedUrl = await optimizeImage(localImagePath);
            
            // Update the show in the database with the new optimized URL
            await storage.updateTvShow(show.id, {
              imageUrl: optimizedUrl
            });
            
            // Update custom image map too
            updateCustomImageMap(show.id, optimizedUrl);
            
            console.log(`Optimized image for show ${show.id}: ${optimizedUrl}`);
            optimizedCount++;
            optimizationResults.push({
              id: show.id,
              name: show.name,
              status: "success",
              oldImageUrl: show.imageUrl,
              newImageUrl: optimizedUrl
            });
            
            // Clean up temp file if we downloaded it
            if (localImagePath.startsWith('./tmp_images')) {
              try {
                fs.unlinkSync(localImagePath);
              } catch (e) {
                // Ignore cleanup errors
              }
            }
          } catch (error) {
            console.error(`Error optimizing image for show ${show.id}:`, error);
            errorCount++;
            optimizationResults.push({
              id: show.id,
              name: show.name,
              status: "error",
              reason: `Optimization error: ${error instanceof Error ? error.message : "Unknown error"}`
            });
          }
        } catch (error) {
          console.error(`Error processing show ${show.id}:`, error);
          errorCount++;
          optimizationResults.push({
            id: show.id,
            name: show.name,
            status: "error",
            reason: `Processing error: ${error instanceof Error ? error.message : "Unknown error"}`
          });
        }
      }
      
      // Return results
      return res.json({
        message: "Custom image optimization complete",
        total: showsToOptimize.length,
        optimized: optimizedCount,
        skipped: skippedCount,
        errors: errorCount,
        results: optimizationResults
      });
    } catch (error) {
      console.error('Error in optimize-custom-images:', error);
      return res.status(500).json({ 
        message: "Error during custom image optimization", 
        error: error instanceof Error ? error.message : "Unknown error" 
      });
    }
  });

  const httpServer = createServer(app);

  return httpServer;
}
</file>

</files>
